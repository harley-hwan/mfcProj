{\rtf1\ansi\deff0{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\f0\fs22\lang1033 using System;\par
using System.IO;\par
using Gigasoft.ProEssentials.Enums;\par
using System.Windows.Input;\par
using System.Drawing;\par
using System.Globalization;\par
\par
namespace PEWinformDemo\par
\{\par
\tab public class Form6 \par
\tab\{\par
\par
\tab\tab private static void Create3DSimpleWireFrame(Gigasoft.ProEssentials.Pe3do Pe3do1)\par
\tab\tab\{\par
            // Code to get partial data from a binary file //\par
            Int32 Row, Col, o, nQ, nStartRow, nStartCol;\par
            Int32 nEndRow, nEndCol, nTargetRows, nTargetCols;\par
            Int32 rowcounter, colcounter;\par
            Boolean foundtargetindex = false;\par
\par
            Random Rand_Num = new Random(unchecked((int)DateTime.Now.Ticks));\par
            int nRndRow = (int)(Rand_Num.NextDouble() * 300.0F);\par
            int nRndCol = (int)(Rand_Num.NextDouble() * 300.0F);\par
\par
            nStartRow = nRndRow;\par
            nEndRow = nRndRow + 200;\par
            nTargetRows = nEndRow - nStartRow + 1;\par
\par
            nStartCol = nRndCol;\par
            nEndCol = nRndCol + 200;\par
            nTargetCols = nEndCol - nStartCol + 1;\par
            nQ = nTargetRows * nTargetCols;\par
\par
            Int32[] pElevData = new Int32[2250000];\par
            String filepath = null;\par
            filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
            System.IO.FileStream fs = null;\par
            try\par
            \{\par
                fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
            \}\par
            catch\par
            \{\par
                System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                System.Windows.Forms.Application.Exit();\par
            \}\par
            System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
\par
            for (o = 0; o < 2250000; o++)\par
                pElevData[o] = r.ReadInt32();\par
            fs.Close();\par
\par
            float[] pMyXData = new float[nQ];\par
            float[] pMyYData = new float[nQ];\par
            float[] pMyZData = new float[nQ];\par
            rowcounter = 0;\par
            colcounter = 0;\par
\par
            for (Row = 0; Row < 1500; Row++)\par
            \{\par
                for (Col = 0; Col < 1500; Col++)\par
                \{\par
                    foundtargetindex = false;\par
                    if (Row >= nStartRow && Row <= nEndRow)\par
                    \{\par
                        if (Col >= nStartCol && Col <= nEndCol)\par
                        \{\par
                            foundtargetindex = true;\par
                            o = (rowcounter * nTargetRows) + colcounter;\par
                            pMyXData[o] = Col + 1;\par
                            pMyZData[o] = Row + 1;\par
                            pMyYData[o] = (float)(pElevData[(Row * 1500) + Col] * 0.1);\par
                        \}\par
                    \}\par
                    if (foundtargetindex)\par
                        colcounter = colcounter + 1;\par
                \}\par
                if (foundtargetindex)\par
                    rowcounter = rowcounter + 1;\par
            \}\par
\par
            Pe3do1.PeData.Subsets = nTargetRows;\par
            Pe3do1.PeData.Points = nTargetCols;\par
\par
            // Perform the actual transfer of data //\par
            Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, pMyXData, nQ);\par
            Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, pMyYData, nQ);\par
            Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, pMyZData, nQ);\par
\par
            // Enable smooth rotating and zooming //\par
            Pe3do1.PeUserInterface.Scrollbar.ScrollSmoothness = 4;\par
            Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 4;\par
            Pe3do1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
            // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
            // in determining different default values for such properties //\par
            Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
            // Enable button dragging //\par
            Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
            Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
            // Set view\par
            Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 16;\par
            Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 245;\par
\par
            // Set a light location //\par
            Pe3do1.PeFunction.SetLight(0, 1.50F, -1.50F, 2.0F);\par
\par
            // Set eye/camera distance, or Zoom amount //\par
            Pe3do1.PePlot.Option.DxZoom = .80F;\par
\par
            Pe3do1.PeUserInterface.RotationSpeed = 50;\par
            Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
            // Mechanism to control polygon border color //\par
            Pe3do1.PeColor.SubsetColors[(int)(SurfaceColors.WireFrame)] = Color.FromArgb(255, 225, 225, 225);\par
            Pe3do1.PeColor.SubsetColors[(int)(SurfaceColors.SolidSurface)] = Color.FromArgb(255, 159, 159, 159);\par
\par
            // v9 feature\par
            Pe3do1.PeColor.ContourColorSet = ContourColorSet.BlueCyanGreenYellowBrownWhite;\par
            Pe3do1.PeLegend.Location = LegendLocation.Left;\par
            Pe3do1.PeLegend.ContourStyle = true;\par
            Pe3do1.PeLegend.ContourLegendPrecision = ContourLegendPrecision.ZeroDecimals;\par
            Pe3do1.PePlot.Option.ShowWireFrame = true;\par
\par
            // Set the plotting method //\par
            //! There are different plotting method values for each //\par
            //! case of PolyMode  //\par
            Pe3do1.PePlot.Method = ThreeDGraphPlottingMethod.Zero;\par
            Pe3do1.PePlot.Allow.SurfaceContour = true;\par
\par
            // Set various other properties //\par
\par
            Pe3do1.PeString.MainTitle = "";\par
            Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
            Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
            Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
            Pe3do1.PeColor.BitmapGradientMode = true;\par
\par
            // Note RenderEngine 3DX requires setting renderengine before QuickStyle \par
            Pe3do1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
            Pe3do1.PeFont.Fixed = true;\par
            Pe3do1.PeFont.FontSize = FontSize.Large;\par
            Pe3do1.PeConfigure.PrepareImages = true;\par
            Pe3do1.PeConfigure.CacheBmp = true;\par
            Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
\par
            Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
            Pe3do1.PeFont.Label.Bold = true;\par
\par
            // Set various export defaults //\par
            Pe3do1.PeSpecial.DpiX = 600;\par
            Pe3do1.PeSpecial.DpiY = 600;\par
\par
            // default export setting //\par
            Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
            Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
            Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
            Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
            Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
            Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
            Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;  // v9.5\par
            Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
            Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
\par
            Pe3do1.PeConfigure.AntiAliasGraphics = true;\par
            Pe3do1.PeConfigure.AntiAliasText = true;\par
\par
            // Normally called at end of init, since we expect to add more settings, defer to later \par
            // Pe3do1.Invalidate();\par
\tab\tab\}\par
\par
        private static void CreateLargeSurfaceFlattenedFlyBy(Gigasoft.ProEssentials.Pe3do Pe3do1)\par
        \{\par
            // Code to get partial data from a binary file //\par
            Int32 Row, Col, o, nQ, nStartRow, nStartCol, s;\par
            Int32 nEndRow, nEndCol, nTargetRows, nTargetCols;\par
            Int32 rowcounter, colcounter;\par
            Boolean foundtargetindex = false;\par
\par
            // Enable smooth rotating and zooming //\par
            Pe3do1.PeUserInterface.Scrollbar.ScrollSmoothness = 3;\par
            Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 3;\par
            Pe3do1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
            // Hide Axes\par
            Pe3do1.PeGrid.Option.ShowXAxis = ShowAxis.Empty;\par
            Pe3do1.PeGrid.Option.ShowYAxis = ShowAxis.Empty;\par
            Pe3do1.PeGrid.Option.ShowZAxis = ShowAxis.Empty;\par
\par
            // Set eye/camera distance, or Zoom amount //\par
            Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 23;\par
            Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 44;\par
\par
            // Set a light location //\par
            Pe3do1.PeFunction.SetLight(0, .20F, -1.75F, 2.35F);\par
\par
            // Set eye/camera distance, or Zoom amount //\par
            Pe3do1.PePlot.Option.DxZoom = -.37F;\par
\par
            // Set a chart translation //\par
            Pe3do1.PePlot.Option.DxViewportX = -7.8F;\par
            Pe3do1.PePlot.Option.DxViewportY = .8F;\par
\par
            Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
            Pe3do1.PeFont.Label.Bold = true;\par
\par
            // Enable button dragging //\par
            Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
            Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
            // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
            // in determining different default values for such properties //\par
            Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
            // Reduce the terrain height with respect to surface area \par
            Pe3do1.PeGrid.Option.GridAspectX = 10.0F;\par
            Pe3do1.PeGrid.Option.GridAspectZ = 10.0F;\par
\par
            Pe3do1.PeUserInterface.RotationSpeed = 50;\par
            Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
            // Load data from terrain file \par
\par
            nStartRow = 0;\par
            nEndRow = 1000;  // v9.5\par
            nTargetRows = nEndRow - nStartRow + 1;\par
            nStartCol = 0;\par
            nEndCol = 1000;\par
            nTargetCols = nEndCol - nStartCol + 1;\par
            nQ = nTargetRows * nTargetCols;\par
\par
            Int32[] pElevData = new Int32[2250000];\par
\par
            String filepath = null;\par
            filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
            System.IO.FileStream fs = null;\par
            try\par
            \{\par
                fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
            \}\par
            catch\par
            \{\par
                System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                System.Windows.Forms.Application.Exit();\par
            \}\par
\par
            System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
\par
            for (o = 0; o < 2250000; o++)\par
                pElevData[o] = r.ReadInt32();\par
            fs.Close();\par
\par
            float[] pMyXData = new float[nTargetCols];  // v9.5 \par
            float[] pMyYData = new float[nQ];\par
            float[] pMyZData = new float[nTargetRows];\par
            rowcounter = 0;\par
            colcounter = 0;\par
\par
            for (Row = 0; Row < 1500; Row++)\par
            \{\par
                for (Col = 0; Col < 1500; Col++)\par
                \{\par
                    foundtargetindex = false;\par
                    if (Row >= nStartRow && Row <= nEndRow)\par
                    \{\par
                        if (Col >= nStartCol && Col <= nEndCol)\par
                        \{\par
                            foundtargetindex = true;\par
\par
                            if (Row == nStartRow)  // v9.5\par
                                pMyXData[Col - nStartCol] = Col + 1;\par
\par
                            if (Col == nStartCol)  // v9.5 \par
                                pMyZData[Row - nStartRow] = Row + 1;\par
\par
                            // See our help, topic SubsetByPoint to understand the below formula  // v9.5\par
                            o = (rowcounter * nTargetRows) + colcounter;\par
                            pMyYData[o] = (float)(pElevData[(Row * 1500) + Col] * 0.1);\par
                        \}\par
                    \}\par
                    if (foundtargetindex)\par
                        colcounter = colcounter + 1;\par
                \}\par
                if (foundtargetindex)\par
                    rowcounter = rowcounter + 1;\par
            \}\par
\par
            Pe3do1.PeData.Subsets = nTargetRows;\par
            Pe3do1.PeData.Points = nTargetCols;\par
\par
            // Perform the transfer of data //\par
            Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, pMyXData, nTargetCols);\par
            Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, pMyYData, nQ);\par
            Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, pMyZData, nTargetRows);\par
            Pe3do1.PeData.DuplicateDataX = DuplicateData.PointIncrement;  // v9.5\par
            Pe3do1.PeData.DuplicateDataZ = DuplicateData.SubsetIncrement;\par
\par
            Pe3do1.PeLegend.Location = LegendLocation.Right;\par
\par
            // Set Contour Color regions //\tab\tab\tab\tab\par
            Pe3do1.PeColor.SubsetColors.Clear();\par
            for (s = 0; s <= 31; s++)\par
                Pe3do1.PeColor.SubsetColors[s] = Color.FromArgb(255, 0, (byte)(31 + (s * 7)), (byte)(95 + (s * 5)));\par
            for (s = 0; s <= 31; s++)\par
                Pe3do1.PeColor.SubsetColors[32 + s] = Color.FromArgb(255, 0, (byte)(95 + (s * 5)), 0);\par
            for (s = 0; s <= 35; s++)\par
                Pe3do1.PeColor.SubsetColors[64 + s] = Color.FromArgb(255, (byte)(128 + (s * 3)), (byte)(128 + (s * 3)), (byte)(128 + (s * 3)));\par
\par
            // For when ViewingStyle is monochrome //\tab\tab\tab\tab\par
            for (s = 0; s <= 99; s++)\par
                Pe3do1.PeColor.SubsetShades[s] = Color.FromArgb(255, (byte)(50 + (s * 2)), (byte)(50 + (s * 2)), (byte)(50 + (s * 2)));\par
\par
            Pe3do1.PeLegend.ContourLegendPrecision = ContourLegendPrecision.ZeroDecimals;\par
            Pe3do1.PeLegend.ContourStyle = true;\par
            Pe3do1.PeLegend.Show = true;\par
            Pe3do1.PeLegend.Location = LegendLocation.Right;\par
            Pe3do1.PeUserInterface.Menu.LegendLocation = MenuControl.Show;\par
            Pe3do1.PeUserInterface.Menu.Contour = MenuControl.Hide;\par
            Pe3do1.PeUserInterface.Menu.DataShadow = MenuControl.Show;\par
\par
            Pe3do1.PePlot.Allow.WireFrame = false;\par
            Pe3do1.PeUserInterface.Dialog.PlotCustomization = true;\par
\par
            Pe3do1.PeColor.SubsetColors[(int)(SurfaceColors.WireFrame)] = Color.FromArgb(255, 80, 80, 80);\par
            Pe3do1.PeColor.SubsetColors[(int)(SurfaceColors.SolidSurface)] = Color.FromArgb(255, 148, 148, 148);\par
            Pe3do1.PeColor.BarBorderColor = Color.FromArgb(155, 0, 0, 0);\par
\par
            Pe3do1.PeString.MainTitle = "";\par
            Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
            Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
\par
            // Note RenderEngine 3DX requires setting renderengine before QuickStyle \par
            Pe3do1.PeColor.BitmapGradientMode = true;\par
            Pe3do1.PeColor.QuickStyle = QuickStyle.DarkLine;\par
            Pe3do1.PeConfigure.BorderTypes = TABorder.NoBorder;\par
\par
            Pe3do1.PeFont.Fixed = true;\par
            Pe3do1.PeFont.FontSize = FontSize.Small;\par
            Pe3do1.PeConfigure.PrepareImages = true;\par
            Pe3do1.PeConfigure.CacheBmp = true;\par
            Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
\par
            Pe3do1.PeConfigure.ImageAdjustLeft = 0;\par
            Pe3do1.PeConfigure.ImageAdjustRight = 0;\par
            Pe3do1.PeConfigure.ImageAdjustBottom = 0;\par
\par
            // There are different plotting method values for each //\par
            // case of PolyMode  //\par
            Pe3do1.PePlot.Method = ThreeDGraphPlottingMethod.Four;\par
            Pe3do1.PePlot.Allow.WireFrame = false;\par
            Pe3do1.PeUserInterface.Menu.Contour = MenuControl.Hide;\par
\par
            // v9.5 \par
            Pe3do1.PeUserInterface.Menu.AnnotationControl = true;\par
            Pe3do1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
            Pe3do1.PeUserInterface.Menu.AnnotationTextFixedSize = MenuControl.Show;\par
            Random Rand_Num = new Random(unchecked((int)DateTime.Now.Ticks));\par
\par
            // Add some random graph annotations //  // v9.5 \par
            int aCnt = 0;\par
            for (int annot = 0; annot < 20; annot++)\par
            \{\par
                int nRndRow = (int)(Rand_Num.NextDouble() * (float)nTargetRows-1);\par
                int nRndCol = (int)(Rand_Num.NextDouble() * (float)nTargetCols-1);\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = nStartCol + nRndCol + 1;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow + 1;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.LargeDotSolid;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 200, 0, 0);\par
                MainWindow.m_nAnnotationStartIndices[annot] = aCnt;\par
                aCnt++;\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = nStartCol + nRndCol + 1;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow + 1;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "|lAnnotation " + annot.ToString();\par
                Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 250, 250, 250);\par
                aCnt++;\par
            \}\par
            Pe3do1.PeAnnotation.Show = true;\par
            Pe3do1.PeAnnotation.Graph.Show = true;\par
            Pe3do1.PeAnnotation.Graph.LeftJustificationOutside = true;\par
            Pe3do1.PeAnnotation.Graph.SymbolObstacles = true;\par
            Pe3do1.PeFont.GraphAnnotationTextSize = 110;\par
            Pe3do1.PeUserInterface.HotSpot.GraphAnnotation = true;\par
\par
            Pe3do1.PeUserInterface.Menu.CustomMenuText[0] = "Zoom Rotate on Center ";\par
            Pe3do1.PeUserInterface.Menu.CustomMenuState[0, 0] = CustomMenuState.Checked;\par
            Pe3do1.PeUserInterface.Menu.CustomMenuLocation[0] = CustomMenuLocation.AboveSeparator;\par
\par
\par
            // Set various export defaults //\par
            Pe3do1.PeSpecial.DpiX = 600;\par
            Pe3do1.PeSpecial.DpiY = 600;\par
\par
            // default export setting //\par
            Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
            Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
            Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
            Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
            Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
            Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
            Pe3do1.PeUserInterface.Allow.TextExport = false;\par
            Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
            Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
            Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
            Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
            Pe3do1.PeConfigure.AntiAliasGraphics = false;\par
            Pe3do1.PeConfigure.AntiAliasText = true;\par
        \}\par
\par
        public static void CreateAllCharts(Gigasoft.ProEssentials.Pe3do Pe3do1, SplitTablePanel Panel)\par
        \{\par
            MainWindow.Timer1.Stop();\par
\par
            if (Pe3do1 == null) \{ return; \}\par
\par
            Pe3do1.PeFunction.Reset();\par
            Pe3do1.PeUserInterface.Dialog.ModelessAutoClose = true;\par
\par
\par
            // Tip, for charts with large amounts of data, (you may need to set HourGlassThreshold property smaller than 2M)\par
            // if you see the Wait Cursor flash twice in a row, you are un-necessarily building polygons twice. \par
\par
            Random Rand_Num = new Random(unchecked((int)DateTime.Now.Ticks));\par
\par
            // Code to get partial data from a binary file //\par
            Int32 Row, Col, o, nQ, nStartRow, nStartCol;\par
            Int32 nEndRow, nEndCol, nTargetRows, nTargetCols;\par
            Int32 rowcounter, colcounter;\par
            Boolean foundtargetindex = false;\par
            Int32 s;\par
            Int32 p;\par
\par
            if (MainWindow.m_nChart == 400)\par
            \{\tab\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //400  *** 3D Simple Wire Frame ***\par
\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                // Example showing the basics of creating a simple 3d //\par
\par
                Pe3do1.PeFunction.Reset(); // always start a 3D new initialization with a call to Reset // v9.5 \par
                Pe3do1.PeUserInterface.Dialog.ModelessAutoClose = true;  // needed as this demo never destroys the chart object \par
\par
                int nRndRow = (int)(Rand_Num.NextDouble() * 300.0F);\par
                int nRndCol = (int)(Rand_Num.NextDouble() * 300.0F);\par
\par
                nStartRow = 110; \par
                nEndRow = 158;   \par
                nTargetRows = nEndRow - nStartRow + 1;\par
\par
                nStartCol = 210; \par
                nEndCol = 258;   \par
                nTargetCols = nEndCol - nStartCol + 1;\par
                nQ = nTargetRows * nTargetCols;\par
\par
                Int32[] pElevData = new Int32[2250000];\par
\par
                String filepath = null; \par
                filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
                System.IO.FileStream fs = null;\par
                try\par
                \{\par
                    fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
\par
                System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
\par
                for (o = 0; o < 2250000; o++)\par
                    pElevData[o] = r.ReadInt32();\par
                fs.Close();\par
\par
                float[] pMyXData = new float[nQ];\par
                float[] pMyYData = new float[nQ];\par
                float[] pMyZData = new float[nQ];\par
                rowcounter = 0;\par
                colcounter = 0;\par
\par
                for (Row = 0; Row < 1500; Row++)\par
                \{\par
                    for (Col = 0; Col < 1500; Col++)\par
                    \{\par
                        foundtargetindex = false;\par
                        if (Row >= nStartRow && Row <= nEndRow)\par
                        \{\par
                            if (Col >= nStartCol && Col <= nEndCol)\par
                            \{\par
                                foundtargetindex = true;\par
                                o = (rowcounter * nTargetRows) + colcounter;\par
                                pMyXData[o] = Col + 1;\par
                                pMyZData[o] = Row + 1;\par
                                pMyYData[o] = (float)(pElevData[(Row * 1500) + Col] * 0.1);\par
                            \}\par
                        \}\par
                        if (foundtargetindex)\par
                            colcounter = colcounter + 1;\par
                    \}\par
                    if (foundtargetindex)\par
                        rowcounter = rowcounter + 1;\par
                \}\par
\par
                Pe3do1.PeData.Subsets = nTargetRows;\par
                Pe3do1.PeData.Points = nTargetCols;\par
\par
                // Perform the actual transfer of data //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, pMyXData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, pMyYData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, pMyZData, nQ);\par
\par
                // Enable smooth rotating and zooming //\par
                Pe3do1.PeUserInterface.Scrollbar.ScrollSmoothness = 3;  // v9.5\par
                Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 3;\par
                Pe3do1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
                // in determining different default values for such properties //\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Set view\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 16;\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 196;  // v9.5\par
\par
                // Set a light location //\par
                Pe3do1.PeFunction.SetLight(0, -2.2F, -7.30F, 8.3F);  // v9.5\par
\par
                // Set eye/camera distance, or Zoom amount //\par
                Pe3do1.PePlot.Option.DxZoom = -1.20F;   // v9.5\par
                Pe3do1.PePlot.Option.DxFitControlShape = false;\par
                Pe3do1.PeGrid.Option.GridAspectX = 2.0F;\par
                Pe3do1.PeGrid.Option.GridAspectZ = 2.0F;\par
                Pe3do1.PePlot.Option.DxViewportY = 0.7F;\par
\par
                Pe3do1.PeUserInterface.RotationSpeed = 50;\par
                Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1; \par
\par
                // Mechanism to control polygon border color //\par
                Pe3do1.PeColor.SubsetColors[(int)(SurfaceColors.WireFrame)] = Color.FromArgb(255, 225, 225, 225);\par
                Pe3do1.PeColor.SubsetColors[(int)(SurfaceColors.SolidSurface)] = Color.FromArgb(255, 159, 159, 159);\par
\par
                // v9 feature\par
                Pe3do1.PeColor.ContourColorSet = ContourColorSet.BlueCyanGreenYellowBrownWhite;\par
                Pe3do1.PeLegend.Location = LegendLocation.Left;\par
                Pe3do1.PeLegend.ContourStyle = true;\par
                Pe3do1.PeLegend.ContourLegendPrecision = ContourLegendPrecision.ZeroDecimals;\par
                Pe3do1.PePlot.Option.ShowWireFrame = true;\par
\par
                // Set the plotting method //\par
                //! There are different plotting method values for each //\par
                //! case of PolyMode  //\par
                Pe3do1.PePlot.Method = ThreeDGraphPlottingMethod.Zero;\par
                Pe3do1.PePlot.Allow.SurfaceContour = true;\par
\par
                // Set various other properties //\par
                Pe3do1.PeString.MainTitle = "";\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
                Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
                Pe3do1.PeColor.BitmapGradientMode = true;\par
\par
                // Note RenderEngine 3DX requires setting RenderEngine before QuickStyle \par
                Pe3do1.PeColor.QuickStyle = QuickStyle.MediumInset;  // v9.5\par
                // Add some padding around chart for prettiness if using inset or shadow borders \par
                Pe3do1.PeConfigure.ImageAdjustLeft = 100;\par
                Pe3do1.PeConfigure.ImageAdjustRight = 100;\par
                Pe3do1.PeConfigure.ImageAdjustTop = 50;\par
                Pe3do1.PeConfigure.ImageAdjustBottom = 50;\par
\par
                Pe3do1.PeFont.Fixed = true;\par
                Pe3do1.PeFont.FontSize = FontSize.Medium;\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
\par
                Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pe3do1.PeFont.Label.Bold = true;\par
\par
                // Set various export defaults //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
\par
                Pe3do1.PeConfigure.AntiAliasGraphics = true;\par
                Pe3do1.PeConfigure.AntiAliasText = true;\par
\par
                // Enable CursorPromptTracking HighlighColor, etc only applicable to Direct3D RenderEngine\par
                Pe3do1.PeUserInterface.HotSpot.Data = true; \par
                Pe3do1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pe3do1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.YValue; // only y and xyz are options.\par
                Pe3do1.PeData.Precision = DataPrecision.TwoDecimals; \par
                Pe3do1.PeUserInterface.Cursor.HighlightColor = Color.FromArgb(255, 255, 0, 0);\par
                Pe3do1.PePlot.Option.ShowContour = ShowContour.BottomColors;\par
                Pe3do1.PeUserInterface.Menu.DataShadow = MenuControl.Show;\par
\par
                Pe3do1.PeUserInterface.Menu.AnnotationControl = true;  // v9.5 \par
                Pe3do1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Menu.AnnotationTextFixedSize = MenuControl.Show;\par
\par
                // Add some random graph annotations //  // v9.5 \par
                int aCnt = 0;\par
                for (int annot = 0; annot < 10; annot++)\par
                \{\par
                    nRndRow = (int)(Rand_Num.NextDouble() * (float)nTargetRows-1);\par
                    nRndCol = (int)(Rand_Num.NextDouble() * (float)nTargetCols-1);\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = nStartCol + nRndCol + 1;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow + 1;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.LargeDotSolid;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 0, 255, 0);\par
                    MainWindow.m_nAnnotationStartIndices[annot] = aCnt;\par
                    aCnt++;\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = nStartCol + nRndCol+1;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow+1;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] =  (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "|lAnnotation " + annot.ToString();\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 0, 255, 0);\par
                    aCnt++;\par
                \}\par
                Pe3do1.PeAnnotation.Show = true;\par
                Pe3do1.PeAnnotation.Graph.Show = true;\par
                Pe3do1.PeAnnotation.Graph.LeftJustificationOutside = true;\par
                Pe3do1.PeAnnotation.Graph.SymbolObstacles = true;\par
                Pe3do1.PeFont.GraphAnnotationTextSize = 110;\par
                Pe3do1.PeUserInterface.HotSpot.GraphAnnotation = false; \par
\par
                Pe3do1.PeUserInterface.Menu.CustomMenuText[0] = "Zoom Rotate on Center ";\par
                Pe3do1.PeUserInterface.Menu.CustomMenuState[0, 0] = CustomMenuState.Checked;\par
                Pe3do1.PeUserInterface.Menu.CustomMenuLocation[0] = CustomMenuLocation.AboveSeparator;\par
                Pe3do1.PeString.MultiSubTitles[1] = "Key 0-9 rotates/zooms at annotation| |Popup Menu size/hide annotation text.";\par
\par
                // Set a default ViewingAt location.\par
                float x, y, z;\par
                x = (float)Pe3do1.PeAnnotation.Graph.X[0];\par
                y = (float)Pe3do1.PeAnnotation.Graph.Y[0];\par
                z = (float)Pe3do1.PeAnnotation.Graph.Z[0];\par
                Pe3do1.PeFunction.SetViewingAt(x, y, z);\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
                Pe3do1.PeFunction.Force3dxAnnotVerticeRebuild = true;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
            \}\par
            else if (MainWindow.m_nChart == 401)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //401  Surface Flattened Fly By\par
\par
                //! Double Click to start and stop Auto Rotation. //\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                // Enable smooth rotating and zooming //\par
                Pe3do1.PeUserInterface.Scrollbar.ScrollSmoothness = 4;  // v9.5\par
                Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 4;\par
                Pe3do1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                // Hide Axes\par
                Pe3do1.PeGrid.Option.ShowXAxis = ShowAxis.Empty;\par
                Pe3do1.PeGrid.Option.ShowYAxis = ShowAxis.Empty;\par
                Pe3do1.PeGrid.Option.ShowZAxis = ShowAxis.Empty;\par
\par
                // Set eye/camera distance, or Zoom amount //\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 23;\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 44;\par
\par
                // Set a light location //\par
                Pe3do1.PeFunction.SetLight(0, .20F, -1.75F, 2.35F);\par
\par
                // Set eye/camera distance, or Zoom amount //\par
                Pe3do1.PePlot.Option.DxZoom = -.37F;\par
\par
                // Set a chart translation //\par
                Pe3do1.PePlot.Option.DxViewportX = -7.8F;\par
                Pe3do1.PePlot.Option.DxViewportY = .8F;\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
                // in determining different default values for such properties //\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
                // Reduce the terrain height with respect to surface area \par
                Pe3do1.PeGrid.Option.GridAspectX = 10.0F;\par
                Pe3do1.PeGrid.Option.GridAspectZ = 10.0F;\par
                Pe3do1.PePlot.Option.DxFitControlShape = false;  // v9.5\par
\par
                Pe3do1.PeUserInterface.RotationSpeed = 50;\par
                Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
                // Load data from terrain file \par
                nStartRow = 0;\par
                nEndRow = 1000;  // v9.5\par
                nTargetRows = nEndRow - nStartRow + 1;\par
                nStartCol = 0;\par
                nEndCol = 1000;\par
                nTargetCols = nEndCol - nStartCol + 1;\par
                nQ = nTargetRows * nTargetCols;\par
\par
                Int32[] pElevData = new Int32[2250000];\par
\par
                String filepath = null;\par
                filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
                System.IO.FileStream fs = null;\par
                try\par
                \{\par
                    fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
\par
                System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
\par
                for (o = 0; o < 2250000; o++)\par
                    pElevData[o] = r.ReadInt32();\par
                fs.Close();\par
\par
                float[] pMyXData = new float[nTargetCols];  // v9.5\par
                float[] pMyYData = new float[nQ];\par
                float[] pMyZData = new float[nTargetCols];\par
                rowcounter = 0;\par
                colcounter = 0;\par
\par
                for (Row = 0; Row < 1500; Row++)\par
                \{\par
                    for (Col = 0; Col < 1500; Col++)\par
                    \{\par
                        foundtargetindex = false;\par
                        if (Row >= nStartRow && Row <= nEndRow)\par
                        \{\par
                            if (Col >= nStartCol && Col <= nEndCol)\par
                            \{\par
                                foundtargetindex = true;\par
\par
                                if (Row == nStartRow)  // v9.5\par
                                    pMyXData[Col - nStartCol] = Col + 1;\par
\par
                                if (Col == nStartCol)  // v9.5 \par
                                    pMyZData[Row - nStartRow] = Row + 1;\par
\par
                                // See our help, topic SubsetByPoint to understand the below formula  // v9.5\par
                                o = (rowcounter * nTargetRows) + colcounter;\par
                                pMyYData[o] = (float)(pElevData[(Row * 1500) + Col] * 0.1);\par
                            \}\par
                        \}\par
                        if (foundtargetindex)\par
                            colcounter = colcounter + 1;\par
                    \}\par
                    if (foundtargetindex)\par
                        rowcounter = rowcounter + 1;\par
                \}\par
\par
                Pe3do1.PeData.Subsets = nTargetRows;\par
                Pe3do1.PeData.Points = nTargetCols;\par
\par
                // Perform the transfer of data //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, pMyXData, nTargetCols);  // v9.5 \par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, pMyYData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, pMyZData, nTargetRows);\par
                Pe3do1.PeData.DuplicateDataX = DuplicateData.PointIncrement;\par
                Pe3do1.PeData.DuplicateDataZ = DuplicateData.SubsetIncrement;\par
\par
                Pe3do1.PeLegend.ContourLegendPrecision = ContourLegendPrecision.ZeroDecimals; \par
\par
                // Set Contour Color regions //\tab\tab\tab\tab\par
                Pe3do1.PeColor.SubsetColors.Clear();\par
                for (s = 0; s <= 31; s++)\par
                    Pe3do1.PeColor.SubsetColors[s] = Color.FromArgb(255, 0, (byte) (31 + (s * 7)), (byte) (95 + (s * 5)));\par
                for (s = 0; s <= 31; s++)\par
                    Pe3do1.PeColor.SubsetColors[32 + s] = Color.FromArgb(255, 0, (byte) (95 + (s * 5)), 0);\par
                for (s = 0; s <= 35; s++)\par
                    Pe3do1.PeColor.SubsetColors[64 + s] = Color.FromArgb(255, (byte) (128 + (s * 3)), (byte) (128 + (s * 3)), (byte) (128 + (s * 3)));\par
\par
                // For when ViewingStyle is monochrome //\tab\tab\tab\tab\par
                for (s = 0; s <= 99; s++)\par
                    Pe3do1.PeColor.SubsetShades[s] = Color.FromArgb(255, (byte) (50 + (s * 2)), (byte) (50 + (s * 2)), (byte) (50 + (s * 2)));\par
\par
                Pe3do1.PeLegend.ContourStyle = true;\par
                Pe3do1.PePlot.Option.SurfacePolygonBorders = true;\par
                Pe3do1.PeLegend.Show = true;\par
                Pe3do1.PeLegend.Location = LegendLocation.Right;\par
                Pe3do1.PeUserInterface.Menu.LegendLocation = MenuControl.Show;\par
                Pe3do1.PePlot.Allow.WireFrame = false;\par
\par
                // Mechanism to control polygon border color //\par
                Pe3do1.PeColor.SubsetColors[(int)(SurfaceColors.WireFrame)] = Color.FromArgb(255, 80, 80, 80);\par
                Pe3do1.PeColor.SubsetColors[(int)(SurfaceColors.SolidSurface)] = Color.FromArgb(255, 148, 148, 148);\par
\par
                Pe3do1.PeString.MainTitle = "";\par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
                Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                // Note RenderEngine 3DX requires setting RenderEngine before QuickStyle \par
                Pe3do1.PeColor.BitmapGradientMode = true;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.DarkLine;\par
                Pe3do1.PeConfigure.BorderTypes = TABorder.NoBorder;\par
\par
                Pe3do1.PeFont.Fixed = true;\par
                Pe3do1.PeFont.FontSize = FontSize.Large;\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
\par
                Pe3do1.PeConfigure.ImageAdjustLeft = 0;\par
                Pe3do1.PeConfigure.ImageAdjustRight = 0;\par
                Pe3do1.PeConfigure.ImageAdjustBottom = 0;\par
\par
                Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pe3do1.PeFont.Label.Bold = true;\par
\par
                // There are different plotting method values for each //\par
                // case of PolyMode  //\par
                Pe3do1.PePlot.Method = ThreeDGraphPlottingMethod.Four;\par
                Pe3do1.PePlot.Allow.WireFrame = false;\par
                Pe3do1.PeUserInterface.Menu.Contour = MenuControl.Hide;\par
\par
                Pe3do1.PeUserInterface.Dialog.PlotCustomization = false;\par
\par
                // Set various export defaults //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Allow.TextExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                // Enable CursorPromptTracking HighlighColor, etc only applicable to Direct3D RenderEngine\par
                Pe3do1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pe3do1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.YValue; // only y and xyz are options.\par
                Pe3do1.PeUserInterface.Cursor.HighlightColor = Color.FromArgb(255, 255, 0, 0);\par
                Pe3do1.PeUserInterface.HotSpot.Data = false; // true provides hotspot data \par
                Pe3do1.PeUserInterface.Menu.DataShadow = MenuControl.Show;\par
\par
                // v9.5 \par
                Pe3do1.PeUserInterface.Menu.AnnotationControl = true;\par
                Pe3do1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Menu.AnnotationTextFixedSize = MenuControl.Show;\par
\par
                // Add some random graph annotations //  // v9.5 \par
                int aCnt = 0;\par
                for (int annot = 0; annot < 20; annot++)\par
                \{\par
                    int nRndRow = (int)(Rand_Num.NextDouble() * (float)nTargetRows-1);\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float)nTargetCols-1);\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = nStartCol + nRndCol + 1;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow + 1;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.LargeDotSolid;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 200, 0, 0);\par
                    MainWindow.m_nAnnotationStartIndices[annot] = aCnt;\par
                    aCnt++;\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = nStartCol + nRndCol + 1;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow + 1;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "|lAnnotation " + annot.ToString();\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 250, 250, 250);\par
                    aCnt++;\par
                \}\par
                Pe3do1.PeAnnotation.Show = true;\par
                Pe3do1.PeAnnotation.Graph.Show = true;\par
                Pe3do1.PeAnnotation.Graph.LeftJustificationOutside = true;\par
                Pe3do1.PeAnnotation.Graph.SymbolObstacles = true;\par
                Pe3do1.PeFont.GraphAnnotationTextSize = 110;\par
                Pe3do1.PeUserInterface.HotSpot.GraphAnnotation = true;\par
\par
                Pe3do1.PeUserInterface.Menu.CustomMenuText[0] = "Zoom Rotate on Center ";\par
                Pe3do1.PeUserInterface.Menu.CustomMenuState[0, 0] = CustomMenuState.Checked;\par
                Pe3do1.PeUserInterface.Menu.CustomMenuLocation[0] = CustomMenuLocation.AboveSeparator;\par
                Pe3do1.PeString.MultiSubTitles[1] = "Key 0-9 rotates/zooms at annotation| |Popup Menu size/hide annotation text.";\par
\par
                // Set a default ViewingAt location.\par
                float x, y, z;\par
                x = (float)Pe3do1.PeAnnotation.Graph.X[0];\par
                y = (float)Pe3do1.PeAnnotation.Graph.Y[0];\par
                z = (float)Pe3do1.PeAnnotation.Graph.Z[0];\par
                Pe3do1.PeFunction.SetViewingAt(x, y, z);\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
                Pe3do1.PeFunction.Force3dxAnnotVerticeRebuild = true;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
                // The TableLayoutPanel takes a bit of taming to get the timer auto rotation working from the initial view \par
                Pe3do1.PeUserInterface.AutoRotation = true;\par
                Pe3do1.SuspendLayout();\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh(); \par
                Pe3do1.ResumeLayout();\par
            \}\par
            else if (MainWindow.m_nChart == 402)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //402  3D Surface with contoured surface\par
\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                // Enable smooth rotating and zooming //\par
                Pe3do1.PeUserInterface.Scrollbar.ScrollSmoothness = 4;  // v9.5\par
                Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 4;\par
                Pe3do1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Do not auto fit to shape of window //\par
                Pe3do1.PePlot.Option.DxFitControlShape = false;\par
\par
                // When data is not square use GridAspectX or Z \par
                Pe3do1.PeGrid.Option.GridAspectX = 1.5F;\par
                Pe3do1.PeGrid.Option.GridAspectZ = 1.0F;\par
\par
                // Set eye/camera distance, or Zoom amount //\par
                Pe3do1.PePlot.Option.DxZoom = -.75F;  \par
                // Set camera position //\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 26;\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 232;\par
\par
                // Set a light location //\par
                Pe3do1.PeFunction.SetLight(0, 2.5F, -1.5F, .25F);\par
\par
                // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
                // in determining different default values for such properties //\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
                Pe3do1.PeUserInterface.RotationSpeed = 50;\par
                Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
                // Set PlottingMethod //\par
                Pe3do1.PePlot.Method = ThreeDGraphPlottingMethod.Four;\par
\par
                // Pass Data //\par
                Pe3do1.PeGrid.Configure.XAxisScaleControl = ScaleControl.Log;\par
                Pe3do1.PeString.XAxisLabel = "X in Log";\par
\par
                int nRndRow = (int)(Rand_Num.NextDouble() * 320.0F) + 80;\par
                int nRndCol = (int)(Rand_Num.NextDouble() * 320.0F) + 80;\par
\par
                nStartRow = 100; \par
                nEndRow = 250;   \par
                nTargetRows = nEndRow - nStartRow + 1;\par
\par
                nStartCol = 200; \par
                nEndCol = 250;   \par
                nTargetCols = nEndCol - nStartCol + 1;\par
                nQ = nTargetRows * nTargetCols;\par
\par
                Int32[] pElevData = new Int32[2250000];\par
                String filepath = null;\par
                filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
                System.IO.FileStream fs = null;\par
                try\par
                \{\par
                    fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
\par
                System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
\par
                for (o = 0; o < 2250000; o++)\par
                    pElevData[o] = r.ReadInt32();\par
                fs.Close();\par
\par
                float[] pMyXData = new float[nQ];\par
                float[] pMyYData = new float[nQ];\par
                float[] pMyZData = new float[nQ];\par
                rowcounter = 0;\par
                colcounter = 0;\par
\par
                for (Row = 0; Row < 1500; Row++)\par
                \{\par
                    for (Col = 0; Col < 1500; Col++)\par
                    \{\par
                        foundtargetindex = false;\par
                        if (Row >= nStartRow && Row <= nEndRow)\par
                        \{\par
                            if (Col >= nStartCol && Col <= nEndCol)\par
                            \{\par
                                foundtargetindex = true;\par
                                o = (rowcounter * nTargetRows) + colcounter;\par
                                pMyXData[o] = (Col + 1) * (Col - nStartCol + 1); \par
                                pMyZData[o] = Row + 1;\par
                                float f = (float)(pElevData[(Row * 1500) + Col] );\par
                                if (f < 14100.0f) \{ f = 10000.0F; \} // create a plateau\par
                                if (f > 16000.0f) \{ f = 17000.0F; \} // create a plateau\par
                                pMyYData[o] = f * 0.1F;\par
                            \}\par
                        \}\par
                        if (foundtargetindex)\par
                            colcounter = colcounter + 1;\par
                    \}\par
                    if (foundtargetindex)\par
                        rowcounter = rowcounter + 1;\par
                \}\par
\par
                Pe3do1.PeData.Subsets = nTargetRows;\par
                Pe3do1.PeData.Points = nTargetCols;\par
\par
                // Perform the transfer of data //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, pMyXData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, pMyYData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, pMyZData, nQ);\par
\par
                Pe3do1.PeData.NullDataValue = 0.0F;\par
\par
                Pe3do1.PeLegend.Location = LegendLocation.Left;\par
                Pe3do1.PeLegend.Show = true;\par
                Pe3do1.PeUserInterface.Menu.LegendLocation = MenuControl.Show; \par
\par
                // v9 features\par
                Pe3do1.PeColor.ContourColorProportions[0] = .1F;\par
                Pe3do1.PeColor.ContourColorProportions[1] = .05F;\par
                Pe3do1.PeColor.ContourColorProportions[2] = .1F;\par
                Pe3do1.PeColor.ContourColorProportions[3] = .63F;\par
                Pe3do1.PeColor.ContourColorProportions[4] = .06F;\par
                Pe3do1.PeColor.ContourColorProportions[5] = .06F;\par
\par
                Pe3do1.PeColor.ContourColorBlends = 0;  // this must be set before COLORSET, COLORSET ALWAYS LAST \par
                Pe3do1.PeColor.ContourColorSet = ContourColorSet.BlueCyanGreenYellowBrownWhite;\par
\par
                Pe3do1.PePlot.Option.ShowContour = ShowContour.BottomLines;\par
                Pe3do1.PePlot.Option.ShowWireFrame = true;\par
                Pe3do1.PeColor.BarBorderColor = Color.FromArgb(85, 0, 0, 0);\par
\par
                Pe3do1.PeGrid.Configure.AutoMinMaxPadding = 0;\par
                Pe3do1.PeData.SurfaceNullDataGaps = true;\par
                Pe3do1.PeLegend.ContourStyle = true;\par
\par
                // Set various other properties //\par
                Pe3do1.PeFont.Fixed = true;\par
\par
                Pe3do1.PeString.MainTitle = "";\par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
                Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
                Pe3do1.PeColor.BitmapGradientMode = true;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.LightNoBorder;\par
\par
                Pe3do1.PeFont.FontSize = Gigasoft.ProEssentials.Enums.FontSize.Large;\par
                Pe3do1.PeFont.SizeGlobalCntl = 1.1F;\par
                Pe3do1.PeLegend.ContourLegendPrecision = ContourLegendPrecision.ZeroDecimals;\par
\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
\par
                Pe3do1.PeColor.SubsetColors[(int)(SurfaceColors.WireFrame)] = Color.FromArgb(255, 198, 0, 0);  \par
                Pe3do1.PeColor.SubsetColors[(int)(SurfaceColors.SolidSurface)] = Color.FromArgb(255, 0, 148, 0); \par
\par
                // Add Some Padding around image //\par
                Pe3do1.PeConfigure.ImageAdjustLeft = 100;\par
                Pe3do1.PeConfigure.ImageAdjustRight = 100;\par
                Pe3do1.PeConfigure.ImageAdjustBottom = 100;\par
\par
                Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pe3do1.PeFont.Label.Bold = true;\par
\par
                // Set various export defaults //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                Pe3do1.PeData.Precision = DataPrecision.TwoDecimals;\par
\par
                // Enable CursorPromptTracking HighlighColor, etc only applicable to Direct3D RenderEngine\par
                Pe3do1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pe3do1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.YValue; // only y and xyz are options.\par
                Pe3do1.PeUserInterface.Cursor.TrackingCustomDataText = true;\par
                Pe3do1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.Text;\par
\par
                Pe3do1.PeUserInterface.Cursor.HighlightColor = Color.FromArgb(255, 255, 0, 0);\par
                Pe3do1.PeUserInterface.HotSpot.Data = true; // true provides hotspot data \par
\par
                Pe3do1.PeUserInterface.Menu.DataShadow = MenuControl.Show;\par
\par
                Pe3do1.PeUserInterface.Menu.AnnotationControl = true;  // v9.5 \par
                Pe3do1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Menu.AnnotationTextFixedSize = MenuControl.Show;\par
\par
                Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
\par
                // Add some random graph annotations //  // v9.5 \par
                int aCnt = 0;\par
                for (int annot = 0; annot < 10; annot++)\par
                \{\par
                    nRndRow = (int)(Rand_Num.NextDouble() * (float)nTargetRows-1);\par
                    nRndCol = (int)(Rand_Num.NextDouble() * (float)nTargetCols-1);\par
                    float f = Pe3do1.PeData.X[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = f;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow + 1;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.LargeDotSolid;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 0, 255, 0);\par
                    MainWindow.m_nAnnotationStartIndices[annot] = aCnt;\par
                    aCnt++;\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = f;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow + 1;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "|lAnnotation " + annot.ToString();\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 0, 255, 0);\par
                    aCnt++;\par
                \}\par
                Pe3do1.PeAnnotation.Show = true;\par
                Pe3do1.PeAnnotation.Graph.Show = true;\par
                Pe3do1.PeAnnotation.Graph.LeftJustificationOutside = true;\par
                Pe3do1.PeAnnotation.Graph.SymbolObstacles = true;\par
                Pe3do1.PeFont.GraphAnnotationTextSize = 80;\par
                Pe3do1.PeUserInterface.HotSpot.GraphAnnotation = true;\par
                Pe3do1.PePlot.Option.DxSphereComplexity = 12;\par
                Pe3do1.PeAnnotation.Graph.SizeCntl = .7f;\par
\par
                Pe3do1.PeUserInterface.Menu.CustomMenuText[0] = "Zoom Rotate on Center ";\par
                Pe3do1.PeUserInterface.Menu.CustomMenuState[0, 0] = CustomMenuState.Checked;\par
                Pe3do1.PeUserInterface.Menu.CustomMenuLocation[0] = CustomMenuLocation.AboveSeparator;\par
                Pe3do1.PeString.MultiSubTitles[1] = "Key 0-9 rotates/zooms at annotation| |Popup Menu size/hide annotation text.";\par
\par
                // Set a default ViewingAt location.\par
                float x, y, z;\par
                x = (float)Pe3do1.PeAnnotation.Graph.X[0];\par
                y = (float)Pe3do1.PeAnnotation.Graph.Y[0];\par
                z = (float)Pe3do1.PeAnnotation.Graph.Z[0];\par
                Pe3do1.PeFunction.SetViewingAt(x, y, z);\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
                Pe3do1.PeFunction.Force3dxAnnotVerticeRebuild = true;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
                /*\par
                // PeCustomTrackingDataText event handler //\par
                 private void Pe3do1_PeCustomTrackingDataText(object sender, Gigasoft.ProEssentials.EventArg.CustomTrackingDataTextEventArgs e)\par
                 \{\par
                    double dY = Pe3do1.PeUserInterface.Cursor.CursorValueY;\par
                    e.TrackingText = String.Format("Surface with Plateaus:\\n\{0:0.000\}", dY);\par
                 \}\par
\par
                // PeDataHotSpot event handler //\par
                 private void Pe3do1_PeDataHotSpot(object sender, Gigasoft.ProEssentials.EventArg.DataHotSpotEventArgs e)\par
                 \{ \par
                    this.Text = "DataPoint value " + Pe3do1.PeData.Y[e.SubsetIndex, e.PointIndex].ToString() + " s=" + e.SubsetIndex.ToString() + " p=" + e.PointIndex.ToString();\par
                 \}\par
                */\par
\par
            \}\par
            else if (MainWindow.m_nChart == 403)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //403  3D Surface with custom polygon colors\par
\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                // This example builds upon the basic Create3DSimpleWireframe '400' example chart //\par
                Create3DSimpleWireFrame(Pe3do1);\par
\par
                // Determine data range, as data is random  // v9.5\par
                Pe3do1.PeFunction.Reinitialize();\par
                float centerx = (float)(Pe3do1.PeGrid.Configure.ManualMaxX + Pe3do1.PeGrid.Configure.ManualMinX) / 2.0F;\par
                float centerz = (float)(Pe3do1.PeGrid.Configure.ManualMaxZ + Pe3do1.PeGrid.Configure.ManualMinZ) / 2.0F;\par
                float starty = Pe3do1.PeData.Y[99, 99];  // store the random y location for center of chart\par
\par
                // Set PlottingMethod //\par
                Pe3do1.PePlot.Method = ThreeDGraphPlottingMethod.Two;  // surface with shading\par
                Pe3do1.PePlot.Option.ShowWireFrame = true;\par
\par
                // Initialize all Polygon Colors //\tab\tab           \par
                for (s = 0; s <= 199; s++)\par
                \{\par
                    for (p = 0; p <= 199; p++)\par
                    \{\par
                        Pe3do1.PeColor.PointColors[s, p] = Color.FromArgb(102, 178, 178, 0);\par
                    \}\par
                \}\par
\par
                // Make a simple target graphic by \par
                // drawing larger and larger circle regions\par
                int nx, ny;\par
                Color c = Color.FromArgb(0, 0, 0, 0);\par
                for (s = 1; s <= 10; s++)\par
                \{\par
                    for (p = 0; p <= 359; p++)\par
                    \{\par
                        nx = (int)(100 + Math.Cos((double)p) * s); ny = (int)(100 + Math.Sin((double)p) * s);\par
                        Pe3do1.PePlot.PointColors[nx, ny] = c;\par
\par
                        // Make a null data area   // v9.5\par
                        Pe3do1.PeData.Y[nx, ny] = 80.0F; \par
                    \}\par
                \}\par
                c = Color.FromArgb(255, 198, 198, 198);\par
                for (s = 11; s <= 20; s++)\par
                \{\par
                    for (p = 0; p <= 359; p++)\par
                    \{\par
                        nx = (int)(100 + Math.Cos((double)p) * s); ny = (int)(100 + Math.Sin((double)p) * s);\par
                        Pe3do1.PePlot.PointColors[nx, ny] = c;\par
                    \}\par
                \}\par
                c = Color.FromArgb(255, 178, 0, 0);\par
                for (s = 21; s <= 30; s++)\par
                \{\par
                    for (p = 0; p <= 359; p++)\par
                    \{\par
                        nx = (int)(100 + Math.Cos((double)p) * s); ny = (int)(100 + Math.Sin((double)p) * s);\par
                        Pe3do1.PePlot.PointColors[nx, ny] = c;\par
                    \}\par
                \}\par
                c = Color.FromArgb(255, 148, 148, 148);\par
                for (s = 31; s <= 50; s++)\par
                \{\par
                    for (p = 0; p <= 359; p++)\par
                    \{\par
                        nx = (int)(100 + Math.Cos((double)p) * s); ny = (int)(100 + Math.Sin((double)p) * s);\par
                        Pe3do1.PePlot.PointColors[nx, ny] = c;\par
                    \}\par
                \}\par
                \par
                // v9 features\par
                Pe3do1.PeColor.ContourColorBlends = 40; // this must be set before COLORSET, COLORSET ALWAYS LAST \par
                Pe3do1.PeColor.ContourColorSet = ContourColorSet.BlueCyanGreenYellowBrownWhite;\par
                Pe3do1.PePlot.Option.ShowContour = ShowContour.BottomLines;\par
                Pe3do1.PeLegend.ContourLegendPrecision = ContourLegendPrecision.TwoDecimals;\par
\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 35;\par
                Pe3do1.PePlot.DegreeOfRotation = 135;\par
\par
                Pe3do1.PeUserInterface.Scrollbar.ScrollSmoothness = 3;  // v9.5\par
                Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 3;\par
                Pe3do1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                Pe3do1.PeData.SurfaceNullDataGaps = true;\par
                Pe3do1.PeUserInterface.HotSpot.Data = true;\par
\par
                Pe3do1.PeData.NullDataValue = 80; // Set above  // v9.5\par
                //Pe3do1.PeColor.DxTransparencyMode = TransparencyMode.OIT;    v9.5\par
                Pe3do1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax; // v9.5\par
                Pe3do1.PeGrid.Configure.ManualMinY = 0;\par
                Pe3do1.PeGrid.Configure.ManualMaxY = 1700;\par
\par
                Pe3do1.PePlot.Allow.WireFrame = false;\par
                Pe3do1.PePlot.Allow.SurfaceContour = true;\par
                Pe3do1.PeUserInterface.Dialog.Style = false;\par
                Pe3do1.PeLegend.Show = true;\par
                Pe3do1.PeUserInterface.Menu.LegendLocation = MenuControl.Show;\par
                Pe3do1.PeColor.BarBorderColor = Color.FromArgb(250,90,90,90);\par
               \par
                // v9 features\par
                Pe3do1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pe3do1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.YValue;\par
                Pe3do1.PeData.Precision = DataPrecision.TwoDecimals;\par
                Pe3do1.PeUserInterface.Cursor.HighlightColor = Color.FromArgb(255, 255, 0, 0);\par
\par
                Pe3do1.PeUserInterface.Menu.DataShadow = MenuControl.Show;\par
\par
                // Add Well data as line/tube graph annotations // v9.5 \par
                Pe3do1.PePlot.Option.DxFitControlShape = false;\par
                Pe3do1.PePlot.Option.DxZoom = .2F;\par
\par
                int nWellCount = 0;\par
                int aCnt = 0;\par
                bool bFindFirst = true;\par
\par
                string[] fileArray = \{ "", "" \};\par
                try\par
                \{\par
                    fileArray = File.ReadAllLines("DirData1.txt");\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                \}\par
\par
                for (int i = 0; i < fileArray.Length; i++)\par
                \{\par
                    if (i >= 0)\par
                    \{\par
                        String line = fileArray[i];\par
                        if (line.Length < 3) \{ continue; \}\par
                        var columns = line.Split('\\t');\par
                        String valueY = columns[0];\par
                        String valueZ = columns[1];\par
                        String valueX = columns[2];\par
\par
                        if (valueY == "Y") // first line well data \par
                        \{\par
                            bFindFirst = true;\par
                            // Second well, add a text label to last point of previous well as Pointer annotation type //\par
                            if (nWellCount > 0)\par
                            \{\par
                                Pe3do1.PeAnnotation.Graph.X[aCnt] = Pe3do1.PeAnnotation.Graph.X[aCnt - 1];\par
                                Pe3do1.PeAnnotation.Graph.Z[aCnt] = Pe3do1.PeAnnotation.Graph.Z[aCnt - 1];\par
                                Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeAnnotation.Graph.Y[aCnt - 1];\par
                                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "|lWell " + (nWellCount - 1).ToString();\par
                                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                                Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                                MainWindow.m_nAnnotationStartIndices[nWellCount] = aCnt;\par
                                aCnt++;\par
                            \}\par
                            nWellCount++;\par
                            continue;\par
                        \}\par
\par
                        float fY = float.Parse(valueY, CultureInfo.InvariantCulture.NumberFormat);\par
                        float fZ = float.Parse(valueZ, CultureInfo.InvariantCulture.NumberFormat);\par
                        float fX = float.Parse(valueX, CultureInfo.InvariantCulture.NumberFormat);\par
\par
                        Pe3do1.PeAnnotation.Graph.X[aCnt] = (-fX / 100) + centerx; \par
                        Pe3do1.PeAnnotation.Graph.Z[aCnt] = (-fZ / 100) + centerz; \par
                        Pe3do1.PeAnnotation.Graph.Y[aCnt] = starty - (fY / 9);\par
                        Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                        Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 0, 255, 0);\par
\par
                        if (Pe3do1.PeAnnotation.Graph.Y[aCnt] > 250 && Pe3do1.PeAnnotation.Graph.Y[aCnt] < 270)\par
                            Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                        if (Pe3do1.PeAnnotation.Graph.Y[aCnt] > 500 && Pe3do1.PeAnnotation.Graph.Y[aCnt] < 520 )\par
                            Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                        if (Pe3do1.PeAnnotation.Graph.Y[aCnt] > 750 && Pe3do1.PeAnnotation.Graph.Y[aCnt] < 770)\par
                            Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                        if (Pe3do1.PeAnnotation.Graph.Y[aCnt] > 1000 && Pe3do1.PeAnnotation.Graph.Y[aCnt] < 1020)\par
                            Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                        if (Pe3do1.PeAnnotation.Graph.Y[aCnt] > 1250 && Pe3do1.PeAnnotation.Graph.Y[aCnt] < 1270)\par
                            Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
\par
                        if (bFindFirst)\par
                        \{\par
                            Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.MediumSolidLine;\par
                            bFindFirst = false;\par
                        \}\par
                        else\par
                            Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.LineContinue;\par
                        aCnt++;\par
                    \}\par
                \}\par
                // Example of drawing a polygon,\par
                // or we could use the Rect annotation type as we are simply drawing a square  //\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = Pe3do1.PeAnnotation.Graph.X[aCnt - 1] - 2;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = Pe3do1.PeAnnotation.Graph.Z[aCnt - 1] + 4;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeAnnotation.Graph.Y[aCnt - 1] - 24;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.StartPoly;\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = Pe3do1.PeAnnotation.Graph.X[aCnt - 2] - 2;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = Pe3do1.PeAnnotation.Graph.Z[aCnt - 2] + 4;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeAnnotation.Graph.Y[aCnt - 2] + 24;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.AddPolyPoint;\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = Pe3do1.PeAnnotation.Graph.X[aCnt - 3] - 2;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = Pe3do1.PeAnnotation.Graph.Z[aCnt - 3] - 4;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeAnnotation.Graph.Y[aCnt - 3] + 24;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.AddPolyPoint;\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = Pe3do1.PeAnnotation.Graph.X[aCnt - 4] - 2;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = Pe3do1.PeAnnotation.Graph.Z[aCnt - 4] - 4;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeAnnotation.Graph.Y[aCnt - 4] - 24;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.EndPolygon;\par
                Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 0, 255, 255);\par
                aCnt++;\par
\par
                // Example of drawing Ellipses\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = 0;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = 1;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = 0;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.AxisDirection;\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = 10;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = 10;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = 1;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.MajorMinorRadii;\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = centerx;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = centerz; \par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = starty - 175;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.EllipseMedium;\par
                Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 0, 0);\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = 20;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = 20;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = 1;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.MajorMinorRadii;\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = centerx;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = centerz; \par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = starty - 500;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.EllipseMedium;\par
                Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 0, 0);\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = 15;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = 15;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = 1;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.MajorMinorRadii;\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = centerx;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = centerz;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = starty - 500;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.EllipseThin;\par
                Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 0, 0);\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = 10;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = 10;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = 1;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.MajorMinorRadii;\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = centerx;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = centerz;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = starty - 500;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.EllipseThin;\par
                Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 0, 0);\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = 5;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = 5;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = 1;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.MajorMinorRadii;\par
                aCnt++;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = centerx;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = centerz;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = starty - 500;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.EllipseThin;\par
                Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 0, 0);\par
                aCnt++;\par
\par
                // if one wants to control tube min thickness and range of thicknesses\par
                Pe3do1.PePlot.Option.TubeThicknessMin = .5f;\par
                Pe3do1.PePlot.Option.TubeThicknessInc = 1.0f;\par
                Pe3do1.PePlot.LinesOrTubes = LinesOrTubes.AllTubes;\par
\par
                // Other graph annotation settings //\par
                Pe3do1.PeAnnotation.InFront = false;\par
                Pe3do1.PeAnnotation.Show = true;\par
                Pe3do1.PeAnnotation.Graph.Show = true;\par
                Pe3do1.PeAnnotation.Graph.LeftJustificationOutside = true;\par
                Pe3do1.PeAnnotation.Graph.SymbolObstacles = true;\par
                Pe3do1.PeFont.GraphAnnotationTextSize = 110;\par
                Pe3do1.PeUserInterface.HotSpot.GraphAnnotation = true;\par
\par
                Pe3do1.PeUserInterface.Menu.AnnotationControl = true;\par
                Pe3do1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Menu.AnnotationTextFixedSize = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Menu.Rotation = MenuControl.Hide; // only double click\par
\par
                Pe3do1.PeUserInterface.Menu.CustomMenuText[0] = "Zoom Rotate on Center ";\par
                Pe3do1.PeUserInterface.Menu.CustomMenuState[0, 0] = CustomMenuState.Checked;\par
                Pe3do1.PeUserInterface.Menu.CustomMenuLocation[0] = CustomMenuLocation.AboveSeparator;\par
\par
                // Set a default ViewingAt location.\par
                float x, y, z;\par
                x = (float)Pe3do1.PeAnnotation.Graph.X[0];\par
                y = (float)Pe3do1.PeAnnotation.Graph.Y[0];\par
                z = (float)Pe3do1.PeAnnotation.Graph.Z[0];\par
                Pe3do1.PeFunction.SetViewingAt(x, y, z);\par
\par
                Pe3do1.PeUserInterface.HotSpot.DxScatterOctTreeSize = 20000;  // optimizes speed hit testing so rotation is smoother \par
\par
                // Enable CursorPromptTracking HighlighColor, etc only applicable to Direct3D RenderEngine\par
                Pe3do1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pe3do1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.YValue; // only y and xyz are options.\par
                Pe3do1.PeUserInterface.Cursor.TrackingCustomDataText = true;\par
                Pe3do1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pe3do1.PeUserInterface.Cursor.TrackingCustomOtherText = true;\par
\par
                Pe3do1.PeUserInterface.Cursor.TrackingTooltipBkColor = Color.FromArgb(0, 80, 80, 80);\par
                Pe3do1.PeUserInterface.Cursor.TrackingTooltipTextColor = Color.FromArgb(0, 245, 245, 245);\par
                Pe3do1.PeUserInterface.Cursor.TrackingTooltipMaxWidth = 200;\par
\par
                Pe3do1.PeString.MultiSubTitles[1] = "Key 0-9 fly down well/toggles ViewingMode| |Popup Menu size/hide annotation text.";\par
\par
                Pe3do1.PeFunction.Force3dxNewColors = true; \par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
                Pe3do1.PeFunction.Force3dxAnnotVerticeRebuild = true;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
                /*\par
                /////////////////////////////\par
                // MouseMove event handler //\par
                /////////////////////////////\par
                private void Pe3do1_MouseMove(object sender, MouseEventArgs e)\par
                \{\par
                    Int32 pX;\par
                    Int32 pY;\par
                    System.Drawing.Point pt;\par
                    Gigasoft.ProEssentials.Structs.HotSpotData ds;\par
\par
                    // get last mouse location within control //'\par
                    pt = Pe3do1.PeUserInterface.Cursor.LastMouseMove;\par
                    pX = pt.X;\par
                    pY = pt.Y;\par
\par
                    // Calls to fill hot spot data structure with hot spot data at given x and y\par
                    Pe3do1.PeFunction.GetHotSpot(pX, pY);\par
\par
                    // Calls PEgethotspot //'\par
                    ds = Pe3do1.PeFunction.GetHotSpotData();\par
\par
                    // get ydata value at hot spot //\par
                    if (ds.Type == HotSpotType.DataPoint)\par
                    \{\par
                        this.Text = "DataPoint value " + Pe3do1.PeData.Y[ds.Data1, ds.Data2].ToString() + " s=" + ds.Data1.ToString() + " p=" + ds.Data2.ToString();\par
                        // or to get the interpolated value under the mouse \par
                        //this.Text = "DataPoint value " + Pe3do1.PeUserInterface.Cursor.CursorValueY.ToString() + " s=" + ds.Data1.ToString() + " p=" + ds.Data2.ToString();\par
                    \}\par
                \}\par
                */\par
\par
            \}\par
            else if (MainWindow.m_nChart == 404)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //404  3D Scatter Chart\par
\par
                //! Double Click to start and stop Auto Rotation. //\par
                //! Click and drag scroll bar thumb tabs to quickly rotate. //\par
                //! Right button click to show popup menu. //\par
\par
                // Enable smooth rotating and zooming //\par
                Pe3do1.PeUserInterface.Scrollbar.ScrollSmoothness = 2;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 4;\par
                Pe3do1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                // Non-Surface chart, set PolyMode //\par
                Pe3do1.PePlot.PolyMode = PolyMode.Scatter;\par
\par
                // Do not auto fit to shape of window //\par
                Pe3do1.PePlot.Option.DxFitControlShape = false;\par
                Pe3do1.PeGrid.Option.GridAspectY = .5F;\par
                Pe3do1.PePlot.PointSize = PointSize.Small;\par
\par
                // Set camera position //\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 35;\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 68;\par
\par
                // Set eye/camera distance, or Zoom amount //\par
                // v9 feature\par
                Pe3do1.PePlot.Option.DxFOV = 8; // isometric pictural perspective \par
                Pe3do1.PePlot.Option.DxViewportY = 0.0F;\par
\par
                // zoom out\par
                Pe3do1.PePlot.Option.DxZoom = -5.0F;\par
\par
                Pe3do1.PeUserInterface.RotationSpeed = 50;\par
                Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Set the amount of data //\par
                Pe3do1.PeData.Subsets = 10;\par
                Pe3do1.PeData.Points = 500;\par
\par
                Pe3do1.PeData.X[9, 499] = 0.0F; // tip to pre allocate memory if not using PEvset\par
                Pe3do1.PeData.Y[9, 499] = 0.0F; // set last point first \par
                Pe3do1.PeData.Z[9, 499] = 0.0F; // but it's not critical \par
\par
                float f;\par
                // Pass data, First two subsets //          \par
                for (s = 0; s <= 1; s++)\par
                \{\par
                    for (p = 0; p <= 499; p++)\par
                    \{\par
                        f = 5000.0F + (float)(5.0F * Math.Cos(p * 0.24)); f = f * (p + 1);\par
                        Pe3do1.PeData.X[s, p] = f;\par
                        if (s == 0)\par
                            f = 5000.0F + (float)((35.0F * Math.Cos(p * 0.22)) + (10.0F * Math.Sin((s * 0.1) * 0.94)));\par
                        else\par
                            f = 5000.0F + (float)((35.0F * Math.Cos(p * 0.08)) + (10.0F * Math.Cos((s * 0.25) * 0.6)));\par
                        f += 100;\par
                        Pe3do1.PeData.Y[s, p] = f;\par
                        Pe3do1.PeData.Z[s, p] = 5000.0F + (float)(5.0F * (Math.Sin(p * 0.08)));\par
                    \}\par
                \}\par
\par
                for (s = 2; s <= 3; s++)\par
                \{\par
                    for (p = 0; p <= 499; p++)\par
                    \{\par
                        f = 5000.0F + (float)(5.0F * Math.Cos(p * 0.14)); f = f * (p + 1);\par
                        Pe3do1.PeData.X[s, p] = f;\par
                        if (s == 2)\par
                            f = 5000.0F + (float)((35.0 * Math.Cos(p * 0.2)) + (10.0F * Math.Sin((s * 0.1) * 0.74)));\par
                        else\par
                            f = 5000.0F + (float)((35.0F * Math.Cos(p * 0.1)) + (10.0F * Math.Cos((s * 0.25) * 0.74)));\par
                        f += 220;\par
                        Pe3do1.PeData.Y[s, p] = f;\par
\par
                        f = 5000.0F + (float)(5.0F * (Math.Sin(p * 0.16))); f = f + 20;\par
                        Pe3do1.PeData.Z[s, p] = f;\par
                    \}\par
                \}\par
\par
                // Pass more data, Third two subsets //       \par
                for (s = 4; s <= 5; s++)\par
                \{\par
                    for (p = 0; p <= 499; p++)\par
                    \{\par
                        f = 5000.0F + (float)(5.0F * Math.Cos(p * 0.07)); f = f * (p + 1);\par
                        Pe3do1.PeData.X[s, p] = f;\par
                        if (s == 4)\par
                            f = 5000.0F + (float)((35.0F * Math.Cos(p * 0.08)) + (10.0 * Math.Sin((s * 0.07) * 0.64)));\par
                        else\par
                            f = 5000.0F + (float)((35.0F * Math.Cos(p * 0.2)) + (10.0F * Math.Cos((s * 0.15) * 1.94)));\par
                        Pe3do1.PeData.Y[s, p] = f;\par
\par
                        f = 5000.0F + (float)(5.0F * (Math.Sin(p * 0.09))); f = f + 20;\par
                        Pe3do1.PeData.Z[s, p] = f;\par
                    \}\par
                \}\par
\par
                // Pass more data, Fourth two subsets //          \par
                for (s = 6; s <= 7; s++)\par
                \{\par
                    for (p = 0; p <= 4999; p++)\par
                    \{\par
                        f = 5000.0F + (float)(5.0F * Math.Cos(p * 0.12)); f = f * (p + 1);\par
                        Pe3do1.PeData.X[s, p] = f;\par
                        if (s == 6)\par
                            f = 5000.0F + (float)((35.0F * Math.Cos(p * 0.3)) + (10.0F * Math.Sin((s * 0.08) * 1.74)));\par
                        else\par
                            f = 5000.0F + (float)((35.0F * Math.Cos(p * 0.2)) + (10.0F * Math.Cos((s * 0.75) * 0.77)));\par
                        f += 220;\par
                        Pe3do1.PeData.Y[s, p] = f;\par
\par
                        f = 5000.0F + (float)(5.0F * (Math.Sin(p * 0.36))); f = f - 20;\par
                        Pe3do1.PeData.Z[s, p] = f;\par
                    \}\par
                \}\par
\par
                // Pass more data, Fifth two subsets //          \par
                for (s = 8; s <= 9; s++)\par
                \{\par
                    for (p = 0; p <= 499; p++)\par
                    \{\par
                        f = 5000.0F + (float)(5.0F * Math.Cos(p * 0.14)); f = f + 20.0F;\par
                        Pe3do1.PeData.X[s, p] = f;\par
                        if (s == 8)\par
                            f = 5000.0F + (float)((25.0F * Math.Cos(p * 0.1)) + (10.0F * Math.Sin((s * 0.02) * 3.74)));\par
                        else\par
                            f = 5000.0F + (float)((55.0F * Math.Cos(p * 0.2)) + (10.0F * Math.Cos((s * 0.05) * 5.74)));\par
                        f += 40;\par
                        Pe3do1.PeData.Y[s, p] = f;\par
\par
                        f = 5000.0F + (float)(5.0F * (Math.Sin(p * 0.16))); f = f - 20;\par
                        Pe3do1.PeData.Z[s, p] = f;\par
                    \}\par
                \}\par
\par
                Pe3do1.PeGrid.Configure.XAxisScaleControl = ScaleControl.Log;\par
                Pe3do1.PeGrid.Configure.YAxisScaleControl = ScaleControl.Log;\par
                Pe3do1.PeGrid.Configure.ZAxisScaleControl = ScaleControl.Log;\par
                Pe3do1.PeFont.FontSize = FontSize.Large;\par
                Pe3do1.PeFont.Fixed = true;\par
                Pe3do1.PeString.MainTitle = "LOG + Isometric Perspective";\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
                Pe3do1.PeColor.BitmapGradientMode = true;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.DarkShadow;\par
                Pe3do1.PeColor.GraphForeground = Color.White;\par
                Pe3do1.PeColor.XZBackColor = Color.FromArgb(255, 85, 85, 85);\par
                Pe3do1.PeColor.YBackColor = Color.FromArgb(255, 85, 85, 85);\par
\par
                // Set Various Other Properties //\par
\par
                Pe3do1.PeColor.SubsetColors[0] = Color.FromArgb(255, 198, 198, 0);\par
                Pe3do1.PeColor.SubsetColors[1] = Color.FromArgb(255, 0, 198, 198);\par
                Pe3do1.PeColor.SubsetColors[2] = Color.FromArgb(255, 0, 198, 0);\par
                Pe3do1.PeColor.SubsetColors[3] = Color.FromArgb(255, 198, 0, 0);\par
                Pe3do1.PeColor.SubsetColors[4] = Color.FromArgb(255, 0, 0, 198);\par
                Pe3do1.PeColor.SubsetColors[5] = Color.FromArgb(255, 192, 192, 192);\par
                Pe3do1.PeColor.SubsetColors[6] = Color.FromArgb(255, 198, 0, 198);\par
                Pe3do1.PeColor.SubsetColors[7] = Color.FromArgb(255, 200, 198, 150);\par
                Pe3do1.PeColor.SubsetColors[8] = Color.FromArgb(255, 200, 200, 140);\par
                Pe3do1.PeColor.SubsetColors[9] = Color.FromArgb(255, 150, 0, 198);\par
\par
                Pe3do1.PePlot.SubsetPointTypes[0] = PointType.DotSolid;\par
                Pe3do1.PePlot.SubsetPointTypes[1] = PointType.DotSolid;\par
                Pe3do1.PePlot.SubsetPointTypes[2] = PointType.DotSolid;\par
                Pe3do1.PePlot.SubsetPointTypes[3] = PointType.DotSolid;\par
                Pe3do1.PePlot.SubsetPointTypes[4] = PointType.DotSolid;\par
                Pe3do1.PePlot.SubsetPointTypes[5] = PointType.DotSolid;\par
                Pe3do1.PePlot.SubsetPointTypes[6] = PointType.DotSolid;\par
                Pe3do1.PePlot.SubsetPointTypes[7] = PointType.DotSolid;\par
                Pe3do1.PePlot.SubsetPointTypes[8] = PointType.DotSolid;\par
                Pe3do1.PePlot.SubsetPointTypes[9] = PointType.DotSolid;\par
\par
                Pe3do1.PePlot.SubsetLineTypes[0] = LineType.MediumThinSolid; // v9.5\par
                Pe3do1.PePlot.SubsetLineTypes[1] = LineType.MediumThinSolid;\par
                Pe3do1.PePlot.SubsetLineTypes[2] = LineType.MediumThinSolid;\par
                Pe3do1.PePlot.SubsetLineTypes[3] = LineType.MediumThinSolid;\par
                Pe3do1.PePlot.SubsetLineTypes[4] = LineType.MediumThinSolid;\par
                Pe3do1.PePlot.SubsetLineTypes[5] = LineType.MediumThinSolid;\par
                Pe3do1.PePlot.SubsetLineTypes[6] = LineType.MediumThinSolid;\par
                Pe3do1.PePlot.SubsetLineTypes[7] = LineType.MediumThinSolid;\par
                Pe3do1.PePlot.SubsetLineTypes[8] = LineType.MediumThinSolid;\par
                Pe3do1.PePlot.SubsetLineTypes[9] = LineType.MediumThinSolid;\par
                Pe3do1.PePlot.LinesOrTubes = LinesOrTubes.AllLines;\par
                \par
                Pe3do1.PeUserInterface.Menu.AnnotationControl = true;  // v9.5 \par
                Pe3do1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Menu.AnnotationTextFixedSize = MenuControl.Show;\par
\par
                // Add some random graph annotations //  // v9.5 \par
                int aCnt = 0;\par
                for (int annot = 0; annot < 10; annot++)\par
                \{\par
                    int nRndRow = (int)(Rand_Num.NextDouble() * (float)9);\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float)499);\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = Pe3do1.PeData.X[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = Pe3do1.PeData.Z[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.LargeDotSolid;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 0, 255, 0);\par
                    MainWindow.m_nAnnotationStartIndices[annot] = aCnt;\par
                    aCnt++;\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = Pe3do1.PeData.X[nRndRow, nRndCol]; \par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = Pe3do1.PeData.Z[nRndRow, nRndCol]; \par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "|lAnnotation " + annot.ToString();\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 0, 255, 0);\par
                    aCnt++;\par
                \}\par
                Pe3do1.PeAnnotation.Show = true;\par
                Pe3do1.PeAnnotation.Graph.Show = true;\par
                Pe3do1.PeAnnotation.Graph.LeftJustificationOutside = true;\par
                Pe3do1.PeAnnotation.Graph.SymbolObstacles = true;\par
                Pe3do1.PeFont.GraphAnnotationTextSize = 86;\par
                Pe3do1.PeUserInterface.HotSpot.GraphAnnotation = true;\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
                Pe3do1.PeAnnotation.Graph.SubsetObstacles[0] = true;\par
                Pe3do1.PeAnnotation.Graph.SubsetObstacles[1] = true;\par
                Pe3do1.PeAnnotation.Graph.SubsetObstacles[2] = true;\par
                Pe3do1.PeAnnotation.Graph.SubsetObstacles[3] = true;\par
                Pe3do1.PeAnnotation.Graph.SubsetObstacles[4] = true;\par
                Pe3do1.PeAnnotation.Graph.SubsetObstacles[5] = true;\par
                Pe3do1.PeAnnotation.Graph.SubsetObstacles[6] = true;\par
                Pe3do1.PeAnnotation.Graph.SubsetObstacles[7] = true;\par
                Pe3do1.PeAnnotation.Graph.SubsetObstacles[8] = true;\par
                Pe3do1.PeAnnotation.Graph.SubsetObstacles[9] = true;\par
\par
                Pe3do1.PeUserInterface.Menu.ShowAnnotations = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Menu.AnnotationControl = true;\par
\par
                Pe3do1.PeUserInterface.Menu.CustomMenuText[0] = "Zoom Rotate on Center ";\par
                Pe3do1.PeUserInterface.Menu.CustomMenuState[0, 0] = CustomMenuState.Checked;\par
                Pe3do1.PeUserInterface.Menu.CustomMenuLocation[0] = CustomMenuLocation.AboveSeparator;\par
                Pe3do1.PeString.MultiSubTitles[1] = "Key 0-9 rotates/zooms at annotation| |Popup Menu size/hide annotation text.";\par
\par
                // Set a default ViewingAt location.\par
                float x, y, z;\par
                x = (float)Pe3do1.PeAnnotation.Graph.X[0];\par
                y = (float)Pe3do1.PeAnnotation.Graph.Y[0];\par
                z = (float)Pe3do1.PeAnnotation.Graph.Z[0];\par
                Pe3do1.PeFunction.SetViewingAt(x, y, z);\par
\par
                \par
                // Set subset labels and titles //\par
                Pe3do1.PeString.SubsetLabels[0] = "Data 1";\par
                Pe3do1.PeString.SubsetLabels[1] = "Data 2";\par
                Pe3do1.PeString.SubsetLabels[2] = "Data 3";\par
                Pe3do1.PeString.SubsetLabels[3] = "Data 4";\par
                Pe3do1.PeString.SubsetLabels[4] = "Data 5";\par
                Pe3do1.PeString.SubsetLabels[5] = "Data 6";\par
                Pe3do1.PeString.SubsetLabels[6] = "Data 7";\par
                Pe3do1.PeString.SubsetLabels[7] = "Data 8";\par
                Pe3do1.PeString.SubsetLabels[8] = "Data 9";\par
                Pe3do1.PeString.SubsetLabels[9] = "Data 10";\par
\par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
                Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
\par
                // Set Plotting methods //\par
                Pe3do1.PePlot.Method = 0; // Points\par
\par
                // Set legend location //\par
                Pe3do1.PeLegend.Location = LegendLocation.Left;\par
                Pe3do1.PeLegend.Show = false;\par
                Pe3do1.PeUserInterface.Menu.LegendLocation = MenuControl.Show;\par
\par
                // Prepare images in memory //\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
\par
                Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pe3do1.PeFont.Label.Bold = true;\par
                Pe3do1.PeColor.GraphForeground = Color.FromArgb(255, 229, 229, 229);\par
\par
                // Set various export defaults //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                Pe3do1.PeConfigure.AntiAliasGraphics = false;  // for non 3dx\par
                Pe3do1.PeConfigure.AntiAliasText = true;\par
\par
                Pe3do1.PeUserInterface.Menu.DataShadow = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pe3do1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYZValues;\par
\par
                Pe3do1.PePlot.Option.LightStrength = .65F;  // v9.5\par
                Pe3do1.PeUserInterface.Cursor.HighlightColor = Color.FromArgb(255, 255, 0, 0);\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
                Pe3do1.PeFunction.Force3dxAnnotVerticeRebuild = true;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
                /*\par
                /////////////////////////////\par
                // MouseMove event handler //\par
                /////////////////////////////\par
                private void Pe3do1_MouseMove(object sender, MouseEventArgs e)\par
                \{\par
                    Int32 pX;\par
                    Int32 pY;\par
                    System.Drawing.Point pt;\par
                    Gigasoft.ProEssentials.Structs.HotSpotData ds;\par
\par
                    // get last mouse location within control //'\par
                    pt = Pe3do1.PeUserInterface.Cursor.LastMouseMove;\par
                    pX = pt.X;\par
                    pY = pt.Y;\par
\par
                    // Calls to fill hot spot data structure with hot spot data at given x and y\par
                    Pe3do1.PeFunction.GetHotSpot(pX, pY);\par
\par
                    // Calls PEgethotspot //'\par
                    ds = Pe3do1.PeFunction.GetHotSpotData();\par
\par
                    // get ydata value at hot spot //\par
                    if (ds.Type == HotSpotType.DataPoint)\par
                    \{\par
                        this.Text = "DataPoint value " + Pe3do1.PeData.Y[ds.Data1, ds.Data2].ToString() + " s=" + ds.Data1.ToString() + " p=" + ds.Data2.ToString();\par
                        // or to get the interpolated value under the mouse \par
                        //this.Text = "DataPoint value " + Pe3do1.PeUserInterface.Cursor.CursorValueY.ToString() + " s=" + ds.Data1.ToString() + " p=" + ds.Data2.ToString();\par
                    \}\par
                \}\par
                */\par
\par
\par
            \}\par
            else if(MainWindow.m_nChart == 405)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //405  3D Bar Chart\par
\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                // Enable smooth rotating and zooming //\par
                Pe3do1.PeUserInterface.Scrollbar.ScrollSmoothness = 4; // v9.5\par
                Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 4;\par
                Pe3do1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                // Non-Surface chart, set PolyMode //\par
                Pe3do1.PePlot.PolyMode = PolyMode.ThreeDBar;\par
\par
                // change light location better suited for 3d bar\par
                Pe3do1.PeFunction.SetLight(0, 4.6F, .8F, 9.5F);  // v9.5\par
\par
                // Pass Data //\par
                nStartRow = 216;\par
                nEndRow = 230;\par
                nStartCol = 156;\par
                nEndCol = 170;\par
                nTargetRows = nEndRow - nStartRow + 1;\par
                nTargetCols = nEndCol - nStartCol + 1;\par
                nQ = nTargetRows * nTargetCols;\par
\par
                Int32[] pElevData = new Int32[2250000];\par
                String filepath = null;\par
                filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
                System.IO.FileStream fs = null;\par
                try\par
                \{\par
                    fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
                System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
\par
                for (o = 0; o < 2250000; o++)\par
                    pElevData[o] = r.ReadInt32();\par
                fs.Close();\par
\par
                float[] pMyXData = new float[nQ];\par
                float[] pMyYData = new float[nQ];\par
                float[] pMyZData = new float[nQ];\par
                rowcounter = 0;\par
                colcounter = 0;\par
\par
                for (Row = 0; Row < 1500; Row++)\par
                \{\par
                    for (Col = 0; Col < 1500; Col++)\par
                    \{\par
                        foundtargetindex = false;\par
                        if (Row >= nStartRow && Row <= nEndRow)\par
                        \{\par
                            if (Col >= nStartCol && Col <= nEndCol)\par
                            \{\par
                                foundtargetindex = true;\par
                                o = (rowcounter * nTargetRows) + colcounter;\par
                                pMyXData[o] = Col + 1;\par
                                pMyZData[o] = Row + 1;\par
                                pMyYData[o] = (float)(pElevData[(Row * 1500) + Col] * 0.1);\par
                            \}\par
                        \}\par
                        if(foundtargetindex)\par
                            colcounter = colcounter + 1;\par
                    \}\par
                    if(foundtargetindex) \par
                        rowcounter = rowcounter + 1;\par
                \}\par
\par
                Pe3do1.PeData.Subsets = nTargetRows;\par
                Pe3do1.PeData.Points = nTargetCols;\par
\par
                // Perform the actual transfer of data //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, pMyXData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, pMyYData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, pMyZData, nQ);\par
\par
                // Set Various Other Properties //\par
                Pe3do1.PeFont.Fixed = true;\par
\par
                Pe3do1.PeColor.SubsetColors[0] = Color.FromArgb(216, 0, 148, 0);\par
                Pe3do1.PeColor.SubsetColors[1] = Color.FromArgb(216, 148, 0, 0);\par
                Pe3do1.PeColor.SubsetColors[2] = Color.FromArgb(216, 0, 0, 148);\par
                Pe3do1.PeColor.SubsetColors[3] = Color.FromArgb(216, 148, 148, 0);\par
                Pe3do1.PeColor.SubsetColors[4] = Color.FromArgb(216, 0, 148, 148);\par
                Pe3do1.PeColor.SubsetColors[5] = Color.FromArgb(216, 0, 182, 0);\par
                Pe3do1.PeColor.SubsetColors[6] = Color.FromArgb(216, 182, 0, 0);\par
                Pe3do1.PeColor.SubsetColors[7] = Color.FromArgb(216, 0, 0, 182);\par
                Pe3do1.PeColor.SubsetColors[8] = Color.FromArgb(216, 182, 182, 0);\par
                Pe3do1.PeColor.SubsetColors[9] = Color.FromArgb(216, 0, 182, 182);\par
                Pe3do1.PeColor.SubsetColors[10] = Color.FromArgb(216, 0, 198, 0);\par
                Pe3do1.PeColor.SubsetColors[11] = Color.FromArgb(216, 198, 0, 0);\par
                Pe3do1.PeColor.SubsetColors[12] = Color.FromArgb(216, 0, 0, 198);\par
                Pe3do1.PeColor.SubsetColors[13] = Color.FromArgb(216, 198, 198, 0);\par
                Pe3do1.PeColor.SubsetColors[14] = Color.FromArgb(216, 0, 198, 148);\par
\par
                // Set subset labels for z axis  //\par
                Pe3do1.PeString.SubsetLabels[0] = "Row 1";\par
                Pe3do1.PeString.SubsetLabels[1] = "Row 2";\par
                Pe3do1.PeString.SubsetLabels[2] = "Row 3";\par
                Pe3do1.PeString.SubsetLabels[3] = "Row 4";\par
                Pe3do1.PeString.SubsetLabels[4] = "Row 5";\par
                Pe3do1.PeString.SubsetLabels[5] = "Row 6";\par
                Pe3do1.PeString.SubsetLabels[6] = "Row 7";\par
                Pe3do1.PeString.SubsetLabels[7] = "Row 8";\par
                Pe3do1.PeString.SubsetLabels[8] = "Row 9";\par
                Pe3do1.PeString.SubsetLabels[9] = "Row 10";\par
                Pe3do1.PeString.SubsetLabels[10] = "Row 11";\par
                Pe3do1.PeString.SubsetLabels[11] = "Row 12";\par
                Pe3do1.PeString.SubsetLabels[12] = "Row 13";\par
                Pe3do1.PeString.SubsetLabels[13] = "Row 14";\par
                Pe3do1.PeString.SubsetLabels[14] = "Row 15";\par
\par
                // Set point labels for x axis //\par
                Pe3do1.PeString.PointLabels[0] = "Col 1";\par
                Pe3do1.PeString.PointLabels[1] = "Col 2";\par
                Pe3do1.PeString.PointLabels[2] = "Col 3";\par
                Pe3do1.PeString.PointLabels[3] = "Col 4";\par
                Pe3do1.PeString.PointLabels[4] = "Col 5";\par
                Pe3do1.PeString.PointLabels[5] = "Col 6";\par
                Pe3do1.PeString.PointLabels[6] = "Col 7";\par
                Pe3do1.PeString.PointLabels[7] = "Col 8";\par
                Pe3do1.PeString.PointLabels[8] = "Col 9";\par
                Pe3do1.PeString.PointLabels[9] = "Col 10";\par
                Pe3do1.PeString.PointLabels[10] = "Col 11";\par
                Pe3do1.PeString.PointLabels[11] = "Col 12";\par
                Pe3do1.PeString.PointLabels[12] = "Col 13";\par
                Pe3do1.PeString.PointLabels[13] = "Col 14";\par
                Pe3do1.PeString.PointLabels[14] = "Col 15";\par
\par
                // Set Titles //\par
                Pe3do1.PeString.MainTitle = "";\par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
                Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
\par
                // Note RenderEngine 3DX requires setting renderengine before QuickStyle \par
                Pe3do1.PeColor.BitmapGradientMode = true;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.DarkShadow;\par
\par
                // Set camera position //\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 19;  // v9.5\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 338;\par
\par
                // Set Plotting methods //\par
                Pe3do1.PePlot.Method = ThreeDGraphPlottingMethod.Two;   // Shading\par
\par
                // Set font size //\par
                Pe3do1.PeFont.FontSize = FontSize.Medium;\par
\par
                // Prepare images in memory //\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
                Pe3do1.PeUserInterface.Dialog.Style = false;\par
\par
                Pe3do1.PeUserInterface.RotationSpeed = 50;\par
                Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
                // Add Some Padding around image //\par
                Pe3do1.PeConfigure.ImageAdjustLeft = 100;\par
                Pe3do1.PeConfigure.ImageAdjustRight = 100;\par
                Pe3do1.PeConfigure.ImageAdjustBottom = 100;\par
\par
                Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pe3do1.PeFont.Label.Bold = true;\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // default export setting //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
\par
                Pe3do1.PeConfigure.AntiAliasGraphics = true;\par
                Pe3do1.PeConfigure.AntiAliasText = true;\par
\par
                Pe3do1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pe3do1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.YValue;\par
                Pe3do1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.Text;\par
                Pe3do1.PeUserInterface.Cursor.FontSizeTrackingCntl = 1.4F;  // v9.5\par
                Pe3do1.PeUserInterface.Cursor.HighlightColor = Color.FromArgb(255, 255, 255, 255);\par
                Pe3do1.PeData.Precision = DataPrecision.NoDecimals;\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pe3do1.PeUserInterface.Menu.AnnotationControl = true;  // v9.5 \par
                Pe3do1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Menu.AnnotationTextFixedSize = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Menu.ShowLegend = MenuControl.Hide;\par
                Pe3do1.PeUserInterface.Menu.ShowWireFrame = MenuControl.Hide;\par
\par
                // Add some random graph annotations //  // v9.5 \par
                int aCnt = 0;\par
                int annot;\par
\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = 1.5;\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = 14.5;\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[0, 0];\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.ThickSolidLine;\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                aCnt++;\par
                for (annot = 1; annot < nTargetCols; annot++)\par
                \{\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = 1.5 + annot;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = 14.5;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[0, annot];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.LineContinue;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    aCnt++;\par
                \}\par
\par
                for (annot = 0; annot < 10; annot++)\par
                \{\par
                    int nRndRow = (int)(Rand_Num.NextDouble() * (float)nTargetRows - 1);\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float)nTargetCols - 1);\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = nRndCol + 1.5;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nRndRow + 1.5;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.DiamondSolid;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    aCnt++;\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = nRndCol + 1.5;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nRndRow + 1.5;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "|lAnnotation " + annot.ToString();\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    aCnt++;\par
                \}\par
\par
                Pe3do1.PeAnnotation.Show = true;\par
                Pe3do1.PeAnnotation.Graph.Show = true;\par
                Pe3do1.PeAnnotation.Graph.LeftJustificationOutside = true;\par
                Pe3do1.PeAnnotation.Graph.SymbolObstacles = true;\par
                Pe3do1.PeFont.GraphAnnotationTextSize = 110;\par
                Pe3do1.PeUserInterface.HotSpot.GraphAnnotation = true;\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
                Pe3do1.PeFunction.Force3dxAnnotVerticeRebuild = true;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
            \}\par
            else if(MainWindow.m_nChart == 406)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //406  3D Polygon Data\par
\par
                //! Double Click to start and stop Auto Rotation. //\par
\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                Pe3do1.PeFunction.Reset();\par
                Pe3do1.PeUserInterface.Dialog.ModelessAutoClose = true;\par
\par
                // Enable smooth rotating and zooming //\par
                Pe3do1.PeUserInterface.Scrollbar.ScrollSmoothness = 4;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 4;\par
                Pe3do1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                Pe3do1.PePlot.PolyMode = PolyMode.PolygonData;\par
\par
                // Set Titles //\par
                Pe3do1.PeString.MainTitle = "";\par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
                Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
                Pe3do1.PeFont.Fixed = true;\par
\par
                // Hide Axes //\par
                Pe3do1.PeGrid.Option.ShowXAxis = ShowAxis.Empty;\par
                Pe3do1.PeGrid.Option.ShowYAxis = ShowAxis.Empty;\par
                Pe3do1.PeGrid.Option.ShowZAxis = ShowAxis.Empty;\par
\par
                // Set camera location //\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 5;\par
\par
                // Set Plotting Method and etc ///\par
                Pe3do1.PePlot.Method = Gigasoft.ProEssentials.Enums.ThreeDGraphPlottingMethod.Two; //surface with shading\par
                Pe3do1.PePlot.Allow.WireFrame = false;\par
                Pe3do1.PeUserInterface.RotationSpeed = 50;\par
                Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
                // Do not auto fit to shape of window, keep things square //\par
                // Keeps the sphere a sphere in 3dx\par
                Pe3do1.PePlot.Option.DxFitControlShape = false;\par
\par
                // Set a light location \par
                Pe3do1.PeFunction.SetLight(0, 1.87F, -1.92F, 1.52F);\par
\par
                // Set eye/camera distance, or Zoom amount //\par
                Pe3do1.PePlot.Option.DxZoom = 1.0F;\par
\par
                // Set a chart translation //\par
                Pe3do1.PePlot.Option.DxViewportX = .0F;\par
                Pe3do1.PePlot.Option.DxViewportY = .08F;\par
\par
                // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
                // in determining different default values for such properties //\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Note RenderEngine 3DX requires setting RenderEngine before QuickStyle \par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
                Pe3do1.PeColor.BitmapGradientMode = true;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                \par
                Pe3do1.PeColor.Desk = Color.FromArgb(0, 1, 0, 0);  // Empty equiv Color.Empty;   \par
                Pe3do1.PeColor.DeskBmpFilename = "starfield.jpg";\par
                Pe3do1.PeColor.DeskBmpStyle = BitmapStyle.TiledBitBlt;\par
\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
                Pe3do1.PeUserInterface.Dialog.Style = false;\par
\par
                Int32[] pElevData = new Int32[2250000];\par
                String filepath = null;\par
                filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
                System.IO.FileStream fs = null;\par
                try\par
                \{\par
                    fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
\par
                System.IO.BinaryReader re = new System.IO.BinaryReader(fs);\par
\par
                for (o = 0; o < 2250000; o++)\par
                    pElevData[o] = re.ReadInt32();\par
                fs.Close();\par
\par
                // Code below dynamically creates polygon data to produce a sphere //\par
                Int32 a, b, r, n = 0, m = 0, q, tt, ph;\par
                Int32 i;\par
                float radius, radius2;\par
\par
                float fInc = 1.0F;\par
                float factor_theta = .9F;  // v9.5\par
                float factor_phi = .9F;\par
                radius = 9;\par
\par
                tt = Convert.ToInt32((360.0 / factor_theta) - 1.0);\par
                ph = Convert.ToInt32((360.0 / factor_phi) - 1.0);\par
\par
                float[,] pEDGEx = new float[tt + 1, ph + 1];\par
                float[,] pEDGEy = new float[tt + 1, ph + 1];\par
                float[,] pEDGEz = new float[tt + 1, ph + 1];\par
\par
                float theta = 0.0F;\par
                float phi = 0.0F;\par
\par
                // Convert spherical coordinates to Cartesian //\par
                for (a = 0; a <= tt; a++)\par
                \{\par
                    for (b = 0; b <= ph; b++)\par
                    \{\par
                        if (a < tt / 2)\par
                            radius2 = radius + (((float)pElevData[(((a)) * 1500) + (b)]) * .00007F * fInc );  // v9.5\par
                        else\par
                            radius2 = radius + (((float)pElevData[(((int)tt - (a)) * 1500) + (b)]) * .00007F * fInc );\par
\par
                        pEDGEx[a, b] = (float)(radius2 * Math.Cos((3.141592 / 180.0) * theta) * Math.Sin((3.141592 / 180.0) * phi));\par
                        pEDGEz[a, b] = (float)(radius2 * Math.Sin((3.141592 / 180.0) * theta) * Math.Sin((3.141592 / 180.0) * phi));\par
                        pEDGEy[a, b] = (float)(radius2 * Math.Cos((3.141592 / 180.0) * phi));\par
                        phi = phi + factor_phi;\par
                    \}\par
                    theta = theta + factor_theta;\par
                    phi = 0;\par
                \}\par
\par
                Int32 nPolys;\par
                nPolys = ((ph + 1) * (tt + 1)) / 2;\par
\par
                // The number of polygons will equal the half\par
                // the number of coordinates obtained.\par
                Gigasoft.ProEssentials.Structs.PolygonData[] Poly = new Gigasoft.ProEssentials.Structs.PolygonData[nPolys];\par
\par
                // To place each polygon in a counter clockwise order a\par
                // simple stepping procedure is needed. We are placing points in\par
                // clockwise rotation but polygons in counterclockwise(top view)\par
                //       1------2    1------2\par
                //              |           |\par
                //              |           |\par
                //       4------3    4------3\par
\par
                for (i = 0; i < nPolys; i++)\par
                \{\par
                    // Establish if it is a 4 or 3 edged polygon\par
                    Poly[i].NumberOfVertices = 4;\par
\par
                    Poly[i].Vertice0X = pEDGEx[n, m];\par
                    Poly[i].Vertice0Y = pEDGEy[n, m];\par
                    Poly[i].Vertice0Z = pEDGEz[n, m];\par
\par
                    q = n + 1; // Prepare for next theta point\par
                    r = m + 1; // Prepare for next phi point\par
\par
                    // The end of the row is the beginning of the row\par
                    if (n > tt - 1)\par
                        q = 0;\par
\par
                    Poly[i].Vertice1X = pEDGEx[q, m];\par
                    Poly[i].Vertice1Y = pEDGEy[q, m];\par
                    Poly[i].Vertice1Z = pEDGEz[q, m];\par
\par
                    if (q == 0)\par
                        n = tt;\par
                    if (n > tt - 1)\par
                        q = 0;\par
\par
                    Poly[i].Vertice2X = pEDGEx[q, r];\par
                    Poly[i].Vertice2Y = pEDGEy[q, r];\par
                    Poly[i].Vertice2Z = pEDGEz[q, r];\par
\par
                    if (q == 0)\par
                        n = tt;\par
\par
                    Poly[i].Vertice3X = pEDGEx[n, r];\par
                    Poly[i].Vertice3Y = pEDGEy[n, r];\par
                    Poly[i].Vertice3Z = pEDGEz[n, r];\par
\par
                    // Set the polygons color,  with a bit of logic to produce longitude and latitude lines \par
                    //! Note, ProEssentials DLL internally stores colors in BGR order (the reverse of .NET), \par
                    //! So anytime color is sent direct to DLL from .NET, color order must be reversed.\par
                    double di = (double)i % 40.0F;\par
                    double dm = (double)m % 40.0F;\par
                    if (di < .025F || dm < .025F)\par
                    \{\par
                        Color c = Color.FromArgb(255, 159, 159, 159);\par
                        int iCol = (c.A << 24) | (c.R << 16) | (c.G << 8) | c.B;\par
                        Poly[i].PolyColor = iCol;\par
                    \}\par
                    else\par
                    \{\par
                        Color c = Color.FromArgb(255, 155, 155, 155);\par
                        int iCol = (c.A << 24) | (c.R << 16) | (c.G << 8) | c.B;\par
                        Poly[i].PolyColor = iCol;\par
                    \}\par
\par
                    // This establishes when the next row and column of points is increased\par
                    if ((i + 1) % (ph + 1) == 0 && (i != 0))\par
                        m = m + 1;  // Step to the next phi(row)\par
\par
                    if ((i + 1) % (tt + 1) != 0 || (i == 0))\par
                        n = n + 1;  // Step to the next theta(column)\par
                    else\par
                        n = 0;      // If you loop start at the beginning\par
                \}\par
\par
                // Set the polygons in one call\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.PolyData, Poly, nPolys);\par
\par
                // Set various export defaults //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Allow.TextExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
\par
                Pe3do1.PeUserInterface.Menu.GridLine = MenuControl.Hide;\par
                Pe3do1.PeUserInterface.Menu.ShowWireFrame = MenuControl.Hide;\par
                Pe3do1.PeUserInterface.Menu.PlotMethod = MenuControl.Hide;\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
                // The TableLayoutPanel takes a bit of taming to get the timer auto rotation working from the initial view \par
                Pe3do1.PeUserInterface.AutoRotation = true;\par
                Pe3do1.SuspendLayout();\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
                Pe3do1.ResumeLayout();\par
\par
            \}\par
            else if (MainWindow.m_nChart == 407)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //407  3D Waterfall Plot\par
\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                // Enable smooth rotating and zooming //\par
                Pe3do1.PeUserInterface.Scrollbar.ScrollSmoothness = 6;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 6;\par
                Pe3do1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 3;\par
\par
                // Non-Surface chart, set PolyMode //\par
                Pe3do1.PePlot.PolyMode = PolyMode.Scatter;\par
\par
                // Disable Legend //\par
                Pe3do1.PeLegend.SubsetsToLegend[0] = -1;\par
\par
                // Pass Data //\par
                nStartRow = 150;\par
                nEndRow = 250;\par
                nStartCol = 100;\par
                nEndCol = 200;\par
                nTargetRows = nEndRow - nStartRow + 1;\par
                nTargetCols = nEndCol - nStartCol + 1;\par
                nQ = nTargetRows * nTargetCols;\par
\par
                Int32[] pElevData = new Int32[2250000];\par
                String filepath = null;\par
                filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
                System.IO.FileStream fs = null;\par
                try\par
                \{\par
                    fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
\par
                System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
\par
                for (o = 0; o < 2250000; o++)\par
                    pElevData[o] = r.ReadInt32();\par
                fs.Close();\par
\par
                float[] pMyXData = new float[nQ];\par
                float[] pMyYData = new float[nQ];\par
                float[] pMyZData = new float[nQ];\par
                rowcounter = 0;\par
                colcounter = 0;\par
\par
                for (Row = 0; Row < 1500; Row++)\par
                \{\par
                    for (Col = 0; Col < 1500; Col++)\par
                    \{\par
                        foundtargetindex = false;\par
                        if (Row >= nStartRow && Row <= nEndRow)\par
                        \{\par
                            if (Col >= nStartCol && Col <= nEndCol)\par
                            \{\par
                                foundtargetindex = true;\par
                                o = (rowcounter * nTargetRows) + colcounter;\par
                                pMyXData[o] = Col + 1;\par
                                pMyZData[o] = Row + 1;\par
                                pMyYData[o] = (float)(pElevData[(Row * 1500) + Col] * 0.1);\par
                            \}\par
                        \}\par
                        if (foundtargetindex)\par
                            colcounter = colcounter + 1;\par
                    \}\par
                    if (foundtargetindex)\par
                        rowcounter = rowcounter + 1;\par
                \}\par
\par
                Pe3do1.PeData.Subsets = nTargetRows;\par
                Pe3do1.PeData.Points = nTargetCols;\par
\par
                // Perform the actual transfer of data //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, pMyXData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, pMyYData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, pMyZData, nQ);\par
\par
                // v9.5\par
                Pe3do1.PePlot.Option.WaterfallContours = true;\par
                Pe3do1.PeColor.ContourColorBlends = 20;\par
                Pe3do1.PeColor.ContourColorAlpha = 255;\par
                Pe3do1.PeColor.ContourColorSet = ContourColorSet.BlueCyanGreenYellowBrownWhite;\par
\par
                Pe3do1.PePlot.Option.WaterfallBorders = true;\par
                Pe3do1.PeColor.BarBorderColor = Color.FromArgb(255, 0, 0, 0);\par
\par
                for (s = 0; s < Pe3do1.PeData.Subsets; s++)\par
                    Pe3do1.PePlot.SubsetLineTypes[s] = LineType.MediumThinSolid;\par
\par
                Pe3do1.PeString.MainTitle = "";\par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
                Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
\par
                // Set camera position //\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 36;  // V9.5\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 210;\par
                Pe3do1.PePlot.Option.DxZoom = 0.47F;\par
\par
                // Set Plotting methods //\par
                Pe3do1.PePlot.Method = Gigasoft.ProEssentials.Enums.ThreeDGraphPlottingMethod.Three;   // Area\par
                Pe3do1.PePlot.Allow.Area = true;\par
\par
                Pe3do1.PePlot.Option.DxFitControlShape = true;\par
                Pe3do1.PeUserInterface.Menu.AnnotationControl = true;  // v9.5 \par
                Pe3do1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Menu.AnnotationTextFixedSize = MenuControl.Show;\par
                Pe3do1.PeAnnotation.Graph.AnnotationTextFixedSize = true;\par
                Pe3do1.PeUserInterface.Menu.ShowLegend = MenuControl.Hide;\par
                Pe3do1.PeUserInterface.Menu.ShowWireFrame = MenuControl.Hide;\par
\par
                // Add some random graph annotations //  // v9.5 \par
                int aCnt = 0;\par
                for (int annot = 0; annot < 10; annot++)\par
                \{\par
                    int nRndRow = (int)(Rand_Num.NextDouble() * (float)nTargetRows-1);\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float)nTargetCols-1);\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = nStartCol + nRndCol + 1;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow + 1;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.DiamondSolid;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    MainWindow.m_nAnnotationStartIndices[annot] = aCnt;\par
                    aCnt++;\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = nStartCol + nRndCol + 1;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow + 1;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "|lAnnotation " + annot.ToString();\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    aCnt++;\par
                \}\par
\par
                // Add a Graph Annotation to highlight a slice with a thick line \par
                int nHighLightSubset = 10;\par
\par
                aCnt = 50; // offset \par
                int pt = 0;\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = Pe3do1.PeData.X[nHighLightSubset, pt];\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = Pe3do1.PeData.Z[nHighLightSubset, pt];\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nHighLightSubset, pt] + 20;\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.StartPoly;\par
                aCnt++;\par
                for (pt = 1; pt < nTargetCols - 1; pt++)\par
                \{\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = Pe3do1.PeData.X[nHighLightSubset, pt];\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = Pe3do1.PeData.Z[nHighLightSubset, pt];\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nHighLightSubset, pt] + 20;\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.AddPolyPoint;\par
                    aCnt++;\par
                \}\par
                Pe3do1.PeAnnotation.Graph.X[aCnt] = Pe3do1.PeData.X[nHighLightSubset, pt];\par
                Pe3do1.PeAnnotation.Graph.Z[aCnt] = Pe3do1.PeData.Z[nHighLightSubset, pt];\par
                Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nHighLightSubset, pt] + 20;\par
                Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.EndPolylineThick;\par
                Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 0, 0);\par
                Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
\par
                Pe3do1.PeAnnotation.Show = true;\par
                Pe3do1.PeAnnotation.Graph.Show = true;\par
                Pe3do1.PeAnnotation.Graph.LeftJustificationOutside = true;\par
                Pe3do1.PeAnnotation.Graph.SymbolObstacles = true;\par
                Pe3do1.PeFont.GraphAnnotationTextSize = 110;\par
                Pe3do1.PeUserInterface.HotSpot.GraphAnnotation = true;\par
                Pe3do1.PeAnnotation.Graph.SizeCntl = 1.2;\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
                Pe3do1.PePlot.LinesOrTubes = LinesOrTubes.AllTubes;\par
                Pe3do1.PePlot.Option.TubeThicknessMin = .3f;\par
                Pe3do1.PeUserInterface.HotSpot.Data = true;\par
                Pe3do1.PeAnnotation.InFront = false;\par
\par
                // Set font size //\par
                Pe3do1.PeFont.FontSize = FontSize.Medium;\par
                Pe3do1.PeFont.Fixed = true;\par
\par
                // Note RenderEngine 3DX requires setting renderengine before QuickStyle \par
                Pe3do1.PeColor.BitmapGradientMode = true;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
\par
                // Add Some Padding around image //\par
                Pe3do1.PeConfigure.ImageAdjustLeft = 100;\par
                Pe3do1.PeConfigure.ImageAdjustRight = 100;\par
                Pe3do1.PeConfigure.ImageAdjustBottom = 100;\par
\par
                Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pe3do1.PeFont.Label.Bold = true;\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Set various export defaults //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = true;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
\par
                Pe3do1.PeConfigure.AntiAliasGraphics = true;\par
                Pe3do1.PeConfigure.AntiAliasText = true;\par
\par
                Pe3do1.PeUserInterface.RotationSpeed = 50;\par
                Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
                Pe3do1.PeFunction.Force3dxAnnotVerticeRebuild = true;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
            \}\par
            else if (MainWindow.m_nChart == 408)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //408  3D Large Shaded Surface\par
\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                // Enable smooth rotating and zooming //\par
                Pe3do1.PeUserInterface.Scrollbar.ScrollSmoothness = 3;  // v9.5\par
                Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 3;\par
                Pe3do1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
                // in determining different default values for such properties //\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
                // Set eye/camera rotation //\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 22;  // v9.5\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 301;\par
\par
                // Set eye/camera distance, or Zoom amount //\par
                Pe3do1.PePlot.Option.DxZoom = 0.0F;  // v9.5\par
\par
                // Set a light rotation location //\par
                Pe3do1.PeFunction.SetLight(0, 1.5F, -1.5F, 2.0F);\par
\par
                // Set a chart translation //\par
                Pe3do1.PePlot.Option.DxViewportX = 0.0F;\par
                Pe3do1.PePlot.Option.DxViewportY = 0.7F;  // v9.5\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Pass Data //\par
                nStartRow = 0;\par
                nEndRow = 1000;  // v9.5\par
                nStartCol = 0;\par
                nEndCol = 1000;\par
                nTargetRows = nEndRow - nStartRow + 1;\par
                nTargetCols = nEndCol - nStartCol + 1;\par
                nQ = nTargetRows * nTargetCols;\par
\par
                Int32[] pElevData = new Int32[2250000];\par
                String filepath = null;\par
                filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
                System.IO.FileStream fs = null;\par
                try\par
                \{\par
                    fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
\par
                System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
\par
                for (o = 0; o < 2250000; o++)\par
                    pElevData[o] = r.ReadInt32();\par
                fs.Close();\par
\par
                float[] pMyXData = new float[nTargetCols];  // v9.5\par
                float[] pMyYData = new float[nQ];\par
                float[] pMyZData = new float[nTargetRows];\par
                rowcounter = 0;\par
                colcounter = 0;\par
\par
                for (Row = 0; Row < 1500; Row++)\par
                \{\par
                    for (Col = 0; Col < 1500; Col++)\par
                    \{\par
                        foundtargetindex = false;\par
                        if (Row >= nStartRow && Row <= nEndRow)\par
                        \{\par
                            if (Col >= nStartCol && Col <= nEndCol)\par
                            \{\par
                                foundtargetindex = true;\par
\par
                                if (Row == nStartRow)  // v9.5\par
                                    pMyXData[Col - nStartCol] = Col + 1;\par
\par
                                if (Col == nStartCol)  // v9.5 \par
                                    pMyZData[Row - nStartRow] = Row + 1;\par
\par
                                // See our help, topic SubsetByPoint to understand the below formula  // v9.5\par
                                o = (rowcounter * nTargetRows) + colcounter;\par
                                pMyYData[o] = (float)(pElevData[(Row * 1500) + Col] * 0.1);\par
                            \}\par
                        \}\par
                        if (foundtargetindex)\par
                            colcounter = colcounter + 1;\par
                    \}\par
                    if (foundtargetindex)\par
                        rowcounter = rowcounter + 1;\par
                \}\par
\par
                Pe3do1.PeData.Subsets = nTargetRows;\par
                Pe3do1.PeData.Points = nTargetCols;\par
\par
                // Perform the actual transfer of data //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, pMyXData, nTargetCols); // v9.5\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, pMyYData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, pMyZData, nTargetRows);\par
                Pe3do1.PeData.DuplicateDataX = DuplicateData.PointIncrement;\par
                Pe3do1.PeData.DuplicateDataZ = DuplicateData.SubsetIncrement;\par
\par
                Pe3do1.PeLegend.ContourLegendPrecision = ContourLegendPrecision.ZeroDecimals;\par
\par
                Pe3do1.PeLegend.Location = LegendLocation.Right;\par
                Pe3do1.PeLegend.ContourStyle = true;\par
\par
                // Set Contour Color regions //\tab\tab\tab\tab\par
                Pe3do1.PeColor.SubsetColors.Clear();\par
                for (s = 0; s <= 31; s++)\par
                    Pe3do1.PeColor.SubsetColors[s] = Color.FromArgb(255, 0, (byte)(31 + (s * 7)), (byte)(95 + (s * 5)));\par
                for (s = 0; s <= 31; s++)\par
                    Pe3do1.PeColor.SubsetColors[32 + s] = Color.FromArgb(255, 0, (byte)(95 + (s * 5)), 0);\par
                for (s = 0; s <= 35; s++)\par
                    Pe3do1.PeColor.SubsetColors[64 + s] = Color.FromArgb(255, (byte)(128 + (s * 3)), (byte)(128 + (s * 3)), (byte)(128 + (s * 3)));\par
\par
                // For when ViewingStyle is monochrome //\tab\tab\tab\tab\par
                for (s = 0; s <= 99; s++)\par
                    Pe3do1.PeColor.SubsetShades[s] = Color.FromArgb(255, (byte)(50 + (s * 2)), (byte)(50 + (s * 2)), (byte)(50 + (s * 2)));\par
\par
                Pe3do1.PeLegend.ContourStyle = true;\par
                Pe3do1.PeLegend.Show = true;\par
                Pe3do1.PeLegend.Location = LegendLocation.Right;\par
                Pe3do1.PeUserInterface.Menu.LegendLocation = MenuControl.Show;\par
\par
                // There are different plotting method values for each //\par
                // case of PolyMode.\par
                Pe3do1.PePlot.Method = Gigasoft.ProEssentials.Enums.ThreeDGraphPlottingMethod.Four;\par
                Pe3do1.PePlot.Allow.WireFrame = false;\par
                Pe3do1.PeUserInterface.Dialog.PlotCustomization = false;\par
\par
                // Set Titles //\par
                Pe3do1.PeString.MainTitle = "";\par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
                Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
\par
                // Note RenderEngine 3DX requires setting renderengine before QuickStyle \par
                Pe3do1.PeColor.BitmapGradientMode = true;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                // Set font size //\par
                Pe3do1.PeFont.FontSize = FontSize.Medium;\par
\par
                Pe3do1.PeColor.SubsetColors[(int)SurfaceColors.WireFrame] = Color.FromArgb(255, 215, 215, 215);\par
                Pe3do1.PeColor.SubsetColors[(int)SurfaceColors.SolidSurface] = Color.FromArgb(255, 228, 228, 228);\par
\par
                // Set Various Other Properties //\par
\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
                Pe3do1.PeFont.Fixed = true;\par
\par
                Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pe3do1.PeFont.Label.Bold = true;\par
\par
                // Set various export defaults //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Allow.TextExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                Pe3do1.PeUserInterface.RotationSpeed = 50;\par
                Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
                // Enable CursorPromptTracking HighlighColor, etc only applicable to Direct3D RenderEngine\par
                Pe3do1.PeUserInterface.HotSpot.Data = false; // true provides hotspot data \par
                Pe3do1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pe3do1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.YValue;\par
                Pe3do1.PeData.Precision = DataPrecision.OneDecimal;\par
                Pe3do1.PeUserInterface.Cursor.HighlightColor = Color.FromArgb(255, 255, 0, 0);\par
                Pe3do1.PeUserInterface.Menu.Contour = MenuControl.Hide;\par
\par
                // v9.5 \par
                Pe3do1.PeUserInterface.Menu.AnnotationControl = true;\par
                Pe3do1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
                Pe3do1.PeUserInterface.Menu.AnnotationTextFixedSize = MenuControl.Show;\par
                Pe3do1.PePlot.Option.DxFitControlShape = false;\par
                Pe3do1.PeGrid.Option.GridAspectX = 2.0F;\par
                Pe3do1.PeGrid.Option.GridAspectZ = 2.0F;\par
\par
                // Add some random graph annotations //  // v9.5 \par
                int aCnt = 0;\par
                for (int annot = 0; annot < 20; annot++)\par
                \{\par
                    int nRndRow = (int)(Rand_Num.NextDouble() * (float)nTargetRows-1);\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float)nTargetCols-1);\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = nStartCol + nRndCol + 1;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow + 1;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.DotSolid;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "";\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 200, 0, 0);\par
                    MainWindow.m_nAnnotationStartIndices[annot] = aCnt;\par
                    aCnt++;\par
                    Pe3do1.PeAnnotation.Graph.X[aCnt] = nStartCol + nRndCol + 1;\par
                    Pe3do1.PeAnnotation.Graph.Z[aCnt] = nStartRow + nRndRow + 1;\par
                    Pe3do1.PeAnnotation.Graph.Y[aCnt] = Pe3do1.PeData.Y[nRndRow, nRndCol];\par
                    Pe3do1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pe3do1.PeAnnotation.Graph.Text[aCnt] = "|lAnnotation " + annot.ToString();\par
                    Pe3do1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 250, 250, 250);\par
                    aCnt++;\par
                \}\par
                Pe3do1.PeAnnotation.Show = true;\par
                Pe3do1.PeAnnotation.Graph.Show = true;\par
                Pe3do1.PeAnnotation.Graph.LeftJustificationOutside = true;\par
                Pe3do1.PeAnnotation.Graph.SymbolObstacles = true;\par
                Pe3do1.PeFont.GraphAnnotationTextSize = 110;\par
                Pe3do1.PeUserInterface.HotSpot.GraphAnnotation = true;\par
\par
                Pe3do1.PeUserInterface.Menu.CustomMenuText[0] = "Zoom Rotate on Center ";\par
                Pe3do1.PeUserInterface.Menu.CustomMenuState[0, 0] = CustomMenuState.Checked;\par
                Pe3do1.PeUserInterface.Menu.CustomMenuLocation[0] = CustomMenuLocation.AboveSeparator;\par
                Pe3do1.PeString.MultiSubTitles[1] = "Key 0-9 rotates/zooms at annotation| |Popup Menu size/hide annotation text.";\par
\par
                // Set a default ViewingAt location.\par
                float x, y, z;\par
                x = (float)Pe3do1.PeAnnotation.Graph.X[0];\par
                y = (float)Pe3do1.PeAnnotation.Graph.Y[0];\par
                z = (float)Pe3do1.PeAnnotation.Graph.Z[0];\par
                Pe3do1.PeFunction.SetViewingAt(x, y, z);\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
                Pe3do1.PeFunction.Force3dxAnnotVerticeRebuild = true;\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
            \}\par
            else if (MainWindow.m_nChart == 409)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //409  2D Contour with Shadow\par
\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                // call Example 401 as a base to this example \par
                CreateLargeSurfaceFlattenedFlyBy(Pe3do1);\par
\par
                Pe3do1.PeGrid.Option.ShowXAxis = ShowAxis.All;\par
                Pe3do1.PeGrid.Option.ShowZAxis = ShowAxis.All;\par
                Pe3do1.PeGrid.Configure.AutoMinMaxPadding = 0;\par
\par
                // Set eye/camera distance, or Zoom amount //\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 90;\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 90;\par
\par
                // Set eye/camera distance, or Zoom amount //\par
                Pe3do1.PePlot.Option.DxZoom = -36.0F;\par
\par
                // Zoom faster //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseWheelZoomFactor = 20;\par
                Pe3do1.PeUserInterface.Scrollbar.PinchZoomFactor = 20;\par
\par
                // Reduce the terrain height with respect to surface area \par
                Pe3do1.PeGrid.Option.GridAspectX = 15.0F;\par
                Pe3do1.PeGrid.Option.GridAspectZ = 15.0F;\par
\par
                // Set a chart translation //\par
                Pe3do1.PePlot.Option.DxViewportX = -.84F;\par
                Pe3do1.PePlot.Option.DxViewportY = .55F;\par
\par
                // Enable CursorPromptTracking HighlighColor, etc only applicable to Direct3D RenderEngine\par
                Pe3do1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pe3do1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.YValue; // only y and xyz are options.\par
                Pe3do1.PeUserInterface.Cursor.HighlightColor = Color.FromArgb(255, 255, 0, 0);\par
                Pe3do1.PeUserInterface.HotSpot.Data = false; // true provides hotspot data \par
\par
                Pe3do1.PeUserInterface.Menu.Contour = MenuControl.Hide;\par
                \par
                // Set a light location //\par
                Pe3do1.PeFunction.SetLight(0, 1.72F, -.71F, -2.28F);\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pe3do1.PeColor.BitmapGradientMode = false;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
            \}\par
            else if (MainWindow.m_nChart == 410)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //410  3D Surface RealTime\par
\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                // Load surface data into memory //\par
                String filepath = null;\par
                filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
                System.IO.FileStream fs = null;\par
                try\par
                \{\par
                    fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
\par
                System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
                for (o = 0; o < 2250000; o++)\par
                    MainWindow.pGlobalElevData[o] = r.ReadInt32();\par
                fs.Close();\par
\par
                Pe3do1.PeData.Subsets = 150;\par
                Pe3do1.PeData.Points = 150;\par
\par
                Int32 l; \par
                for (s=0; s<150; s++)\par
                \{\par
                    for (p=0; p<150; p++)\par
                    \{\par
                        l = (s * 1500) + p + 0;\par
                        Pe3do1.PeData.X[s, p] = (float) p + 1;\par
                        Pe3do1.PeData.Y[s, p] = MainWindow.pGlobalElevData[l] * 0.1F;\par
                        Pe3do1.PeData.Z[s, p] = (float) s + 1;\par
                    \}\par
                \}\par
\par
                MainWindow.m_nRealTimeCounter = 150; // Keeps track of current row\par
                MainWindow.m_nOverallCounter = 150;\par
\par
                Pe3do1.PeColor.SubsetColors[(int) SurfaceColors.WireFrame] = Color.FromArgb(255, 215, 215, 255);    \par
                Pe3do1.PeColor.SubsetColors[(int) SurfaceColors.SolidSurface] = Color.FromArgb(255, 215, 215, 255);    \par
\par
                // There are different plotting method values for each case of PolyMode  //\par
                Pe3do1.PePlot.Method = Gigasoft.ProEssentials.Enums.ThreeDGraphPlottingMethod.Two; // Surface\par
                Pe3do1.PePlot.Allow.SurfaceContour = false;\par
\par
                // Set various other properties //\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 8;\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 93;\par
                Pe3do1.PeFunction.SetLight(0, .05F, -1.0F, 2.75F);\par
                Pe3do1.PePlot.Option.DxZoom = -6.37F;\par
                Pe3do1.PePlot.Option.DxViewportX = .2F;\par
                Pe3do1.PePlot.Option.DxViewportY = 1.1F;\par
                \par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
                Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
\par
                Pe3do1.PeColor.BitmapGradientMode = false;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                Pe3do1.PeString.MainTitle = "";\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
                Pe3do1.PeGrid.Option.GridAspectX = 10.0F;\par
                Pe3do1.PeGrid.Option.GridAspectZ = 2.0F;\par
\par
                Pe3do1.PeFont.Fixed = true;\par
                Pe3do1.PeFont.FontSize = FontSize.Medium;\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
\par
                Pe3do1.PeUserInterface.Menu.Contour = MenuControl.Hide;\par
\par
                Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pe3do1.PeFont.Label.Bold = true;\par
                Pe3do1.PeConfigure.ImageAdjustRight = 50;\par
                Pe3do1.PeConfigure.ImageAdjustLeft = 50;\par
\par
                // Set various export defaults //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                Pe3do1.PeUserInterface.RotationSpeed = 50;\par
                Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                Pe3do1.PePlot.Option.ShowWireFrame = true;\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
                MainWindow.Timer1.Interval = 15;\par
                MainWindow.Timer1.Start();\par
\par
                /*\par
                ////////////////////////////////////////////////////////\par
                // the following code can be found in the Timer Event //\par
                ////////////////////////////////////////////////////////\par
\par
                  float[] pNewXData = new float[150];\par
                  float[] pNewYData = new float[150];\par
                  float[] pNewZData = new float[150];\par
\par
                  Int32 l;\par
                  Int32 s;\par
                  for (s = 0; s < 150; s++)\par
                  \{\par
                      pNewXData[s] = m_nOverallCounter;\par
                      pNewZData[s] = s + 1;\par
                      l = (s * 1500) + m_nRealTimeCounter + 0;\par
                      pNewYData[s] = pGlobalElevData[l] * 0.1F;\par
                  \}\par
\par
                  m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
                  if (m_nRealTimeCounter > 1499)\par
                      m_nRealTimeCounter = 0;\par
                  m_nOverallCounter = m_nOverallCounter + 1;\par
\par
                  // transfer new Data //\par
                  Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendYData, pNewYData, 1);\par
                  Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendXData, pNewXData, 1);\par
                  Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendZData, pNewZData, 1);\par
\par
                  // causes 3D object to reconstruct polygon data //\par
                  Pe3do1.PeFunction.PEreconstruct3dpolygons();\par
                  Pe3do1.Invalidate();\par
\par
                */\par
            \}\par
            else if (MainWindow.m_nChart == 411)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //411  3D Scatter, Line, Waterfall Realtime\par
\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                // Non-Surface chart, set PolyMode //\par
                Pe3do1.PePlot.PolyMode = PolyMode.Scatter;\par
\par
                // Disable Legend //\par
                Pe3do1.PeLegend.SubsetsToLegend[0] = -1;\par
\par
                // Initialize Data //\par
                Pe3do1.PeData.Subsets = 100;\par
                Pe3do1.PeData.Points = 200;\par
\par
                for (s=0; s<100; s++)\par
                \{\par
                    for (p=0; p<200; p++)\par
                    \{\par
                        Pe3do1.PeData.X[s, p] = p + 1;\par
                        Pe3do1.PeData.Y[s, p] = 0;\par
                        Pe3do1.PeData.Z[s, p] = s + 1;\par
                    \}\par
                \}\par
\par
                // Manually scale y axis //\par
                Pe3do1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pe3do1.PeGrid.Configure.ManualMinY = 75;\par
                Pe3do1.PeGrid.Configure.ManualMaxY = 270;\par
                Pe3do1.PeGrid.Configure.AutoMinMaxPadding = 0;\par
\par
                // v9 features\par
                Pe3do1.PePlot.Option.WaterfallContours = true;\par
                Pe3do1.PeColor.ContourColorBlends = 20;\par
                Pe3do1.PeColor.ContourColorAlpha = 255;\par
                Pe3do1.PeColor.ContourColorSet = ContourColorSet.BlueCyanGreenYellowBrownWhite;\par
\par
                Pe3do1.PePlot.Option.ManualContourScaleControl = ManualScaleControl.MinMax;\par
                Pe3do1.PePlot.Option.ManualContourMin = 100.0F;\par
                Pe3do1.PePlot.Option.ManualContourMax = 240.0F;\par
                \par
                Pe3do1.PeString.MainTitle = "";\par
\par
                Pe3do1.PePlot.Allow.Area = true;\par
                Pe3do1.PePlot.Allow.PointsPlusLine = true;\par
                Pe3do1.PeUserInterface.Dialog.Style = false;\par
\par
                Pe3do1.PeFont.FontSize = FontSize.Medium;\par
                Pe3do1.PeFont.Fixed = true;\par
\par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
                Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
\par
                Pe3do1.PeGrid.Option.GridAspectZ = 5.0F;\par
                Pe3do1.PeGrid.Option.GridAspectX = 2.0F;\par
               \par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 25;\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 31;\par
                Pe3do1.PePlot.Option.DxZoom = -3.37F;\par
                Pe3do1.PePlot.Option.DxViewportX = 1.75F;\par
                Pe3do1.PePlot.Option.DxViewportY = 1.92F;\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
                Pe3do1.PePlot.Method = Gigasoft.ProEssentials.Enums.ThreeDGraphPlottingMethod.Three;   // Area\par
\par
                // v9 features\par
                Pe3do1.PePlot.Option.WaterfallBorders = true;\par
                Pe3do1.PeColor.BarBorderColor = Color.FromArgb(255, 0, 0, 0);\par
\par
                // Note RenderEngine 3DX requires setting renderengine before QuickStyle \par
                Pe3do1.PeColor.BitmapGradientMode = true;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                Pe3do1.PeColor.XZBackColor = Color.FromArgb(255, 0, 0, 0);\par
                Pe3do1.PeColor.YBackColor = Color.FromArgb(255, 0, 0, 0);\par
                Pe3do1.PeColor.GridBands = false;\par
\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
\par
                // Add Some Padding around image //\par
                Pe3do1.PeConfigure.ImageAdjustLeft = 50;\par
                Pe3do1.PeConfigure.ImageAdjustRight = 50;\par
                Pe3do1.PeConfigure.ImageAdjustBottom = 50;\par
\par
                Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pe3do1.PeFont.Label.Bold = true;\par
\par
                // Set various export defaults //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                Pe3do1.PeUserInterface.RotationSpeed = 50;\par
                Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                Pe3do1.PeUserInterface.Menu.ShowLegend = MenuControl.Hide;  // v9.5\par
                Pe3do1.PeUserInterface.Menu.ShowWireFrame = MenuControl.Hide;\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
                MainWindow.m_nRealTimeCounter = 0;\par
                MainWindow.m_nOverallCounter = 200;\par
\par
                MainWindow.Timer1.Interval = 20;\par
                MainWindow.Timer1.Start();\par
\par
                /*\par
\par
                ////////////////////////////////////////////////////////\par
                // the following code can be found in the Timer Event //\par
                ////////////////////////////////////////////////////////\par
\par
                Int32 p, nBump;\par
                nBump = 0;\par
\par
                m_nOverallCounter = m_nOverallCounter + 1;\par
                m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
                if (m_nRealTimeCounter > 5)\par
                \{\par
                    nBump = 0 + (int)((float)(Rand_Num.NextDouble()) * 100.0F);\par
                    m_nRealTimeCounter = 0;\par
                \}\par
\par
                float[] pNewXData = new float[200];\par
                float[] pNewYData = new float[200];\par
                float[] pNewZData = new float[200];\par
                for (p = 0; p < 200; p++)\par
                \{\par
                    pNewZData[p] = m_nOverallCounter; // subset or sample iteration\par
                    pNewXData[p] = p + 1; // all points\par
                    pNewYData[p] = 125.0F + ((float)(Rand_Num.NextDouble()) * 9.0F) + (25.0F * (float)Math.Sin(((float)m_nOverallCounter) * .04F * ((float)(p + 1) * 3.0F)));\par
                \}\par
                if (nBump != 0)\par
                    pNewYData[nBump] = pNewYData[nBump] + 50.0F;\par
\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendYSubset, pNewYData, 1);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendXSubset, pNewXData, 1);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendZSubset, pNewZData, 1);\par
\par
                // Comment out above and uncomment below to realtime 1 pt per subset, vs 100 subsets per point\par
                //float[] pNewXData = new float[100];\par
                //float[] pNewYData = new float[100];\par
                //float[] pNewZData = new float[100];\par
                //for (p = 0; p < 100; p++)\par
                //\{\par
                //    pNewXData[p] = m_nOverallCounter; // subset or sample iteration\par
                //    pNewZData[p] = p + 1; // all points\par
                //    pNewYData[p] = 125.0F + ((float)(Rand_Num.NextDouble()) * 9.0F) + (25.0F * (float)Math.Sin(((float)m_nOverallCounter) * .04F * ((float)(p + 1) * 3.0F)));\par
                //\}\par
                //if (nBump != 0)\par
                //    pNewYData[nBump] = pNewYData[nBump] + 50.0F;\par
                //Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendYData, pNewYData, 1);\par
                //Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendXData, pNewXData, 1);\par
                //Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendZData, pNewZData, 1);\par
\par
                // Look at all data and change colors to represent alarms //\par
                Pe3do1.PeFunction.Force3dxNewColors = true;\par
                Pe3do1.PeFunction.PEreconstruct3dpolygons();\par
                Pe3do1.Refresh();\par
                  \par
                */\par
            \}\par
            else if (MainWindow.m_nChart == 412)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //412  3D Bar RealTime\par
\par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
                //! Middle Button hold down while drag rotates light. //\par
                //! Right click to show popup menu. //\par
\par
                // Non-Surface chart, set PolyMode //\par
                Pe3do1.PePlot.PolyMode = PolyMode.ThreeDBar;\par
\par
                // change light location better suited for 3d bar\par
                Pe3do1.PeFunction.SetLight(0, -8.0F, -1.8F, 6.3F);  // v9.5\par
\par
                // Define quantity of data //\par
                Pe3do1.PeData.Subsets = 27;\par
                Pe3do1.PeData.Points = 25;\par
\par
                // Set all data to start with zero //\par
                for (s = 0; s < 27; s++)\par
                \{\par
                    for (p = 0; p < 25; p++)\par
                    \{\par
                        Pe3do1.PeData.Y[s, p] = 0.0F;\par
                    \}\par
                \}\par
\par
                // Set initial point labels for x axis //\par
                for (p = 0; p < 25; p++)\par
                    Pe3do1.PeString.PointLabels[p] = " ";\par
\par
                // Manually scale y axis //\par
                Pe3do1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pe3do1.PeGrid.Configure.ManualMinY = 0;\par
                Pe3do1.PeGrid.Configure.ManualMaxY = 100;\par
\par
                // Set Titles //\par
                Pe3do1.PeString.MainTitle = "";\par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
                Pe3do1.PeString.MultiSubTitles[0] = "||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. ";\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pe3do1.PeGrid.Option.GridAspectZ = 2.0F;\par
                Pe3do1.PeGrid.Option.GridAspectX = 5.0F;\par
\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 29;\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 312;\par
                Pe3do1.PePlot.Option.DxZoom = -4.57F;\par
                Pe3do1.PePlot.Option.DxViewportX = 1.8F;\par
                Pe3do1.PePlot.Option.DxViewportY = 1.8F;\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
                // Set Plotting methods //\par
                Pe3do1.PePlot.Method = Gigasoft.ProEssentials.Enums.ThreeDGraphPlottingMethod.Two;\par
                Pe3do1.PePlot.Allow.WireFrame = false;\par
                Pe3do1.PeUserInterface.Dialog.PlotCustomization = false;\par
                Pe3do1.PeUserInterface.Dialog.Style = false;\par
\par
                // Add padding around chart //\par
                Pe3do1.PeConfigure.ImageAdjustLeft = 50;\par
                Pe3do1.PeConfigure.ImageAdjustRight = 50;\par
                Pe3do1.PeConfigure.ImageAdjustBottom = 50;\par
\par
                // Set Various Other Properties //\par
                Pe3do1.PeFont.FontSize = FontSize.Small;\par
                Pe3do1.PeFont.Fixed = true;\par
\par
                // Note RenderEngine 3DX requires setting renderengine before QuickStyle \par
                Pe3do1.PeColor.BitmapGradientMode = false;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
                Pe3do1.PeFont.Label.Bold = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
                Pe3do1.PeUserInterface.Dialog.Style = false;\par
\par
                Pe3do1.PeUserInterface.RotationSpeed = 50;\par
                Pe3do1.PeUserInterface.RotationIncrement = RotationIncrement.IncBy1;\par
\par
                // Set various export defaults //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                Pe3do1.PeUserInterface.Menu.ShowLegend = MenuControl.Hide;\par
                Pe3do1.PeUserInterface.Menu.ShowWireFrame = MenuControl.Hide;\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
                MainWindow.Timer1.Interval = 15;\par
                MainWindow.Timer1.Start();\par
\par
                /*\par
\par
                ////////////////////////////////////////////////////////\par
                // the following code can be found in the Timer Event //\par
                ////////////////////////////////////////////////////////\par
\par
                  // new point label //\par
                  CurrentTime = DateTime.Now.Hour.ToString() + ":" + DateTime.Now.Minute.ToString() + ":" + DateTime.Now.Second.ToString();\par
\par
                  // new YData //\par
                  float[] NewData = new float[27];\par
                  for (int i = 0; i < 27; i++)\par
                      NewData[i] = 10.0F + ((float)(Rand_Num.NextDouble()) * 90.0F);\par
\par
                  // transfer new point label //\par
                  Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendPointLabelData, CurrentTime, 1);\par
\par
                  // transfer new YData //\par
                  Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendYData, NewData, 1);\par
\par
                  // causes 3D object to reconstruct polygon data //\par
                  Pe3do1.PeFunction.PEreconstruct3dpolygons();\par
                  Pe3do1.Invalidate();\par
                  \par
                */\par
            \}\par
            else if (MainWindow.m_nChart == 413)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //413  2D Line RealTime\par
\par
                //! Simple 2D line charting via DirectX \par
                //! Left click and drag to rotate. Also Hold shift to translate. // \par
                //! Mouse Wheel zooms in/out. \par
\par
                // Non-Surface chart, set PolyMode //\par
                Pe3do1.PePlot.PolyMode = PolyMode.Scatter;\par
\par
                // Set data size //\par
                Pe3do1.PeData.Subsets = 4;\par
                Pe3do1.PeData.Points = 25000;\par
\par
                Pe3do1.PePlot.SubsetLineTypes[0] = LineType.ThinSolid;\par
                Pe3do1.PePlot.SubsetLineTypes[1] = LineType.ThinSolid;\par
                Pe3do1.PePlot.SubsetLineTypes[2] = LineType.ThinSolid;\par
                Pe3do1.PePlot.SubsetLineTypes[3] = LineType.ThinSolid;\par
\par
                // Set camera position //\par
                Pe3do1.PeUserInterface.Scrollbar.ViewingHeight = 1;\par
                Pe3do1.PeUserInterface.Scrollbar.DegreeOfRotation = 191;\par
                Pe3do1.PePlot.Option.DxZoom = 1.5F;\par
                Pe3do1.PePlot.Option.DxViewportX = -.18F;\par
                Pe3do1.PePlot.Option.DxViewportY = .01F;\par
\par
                // Manually scale x axis //\par
                Pe3do1.PeGrid.Configure.ManualScaleControlX = ManualScaleControl.MinMax;\par
                Pe3do1.PeGrid.Configure.ManualMinX = 0;\par
                Pe3do1.PeGrid.Configure.ManualMaxX = 250;\par
\par
                // Manually scale y axis //\par
                Pe3do1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pe3do1.PeGrid.Configure.ManualMinY = 0;\par
                Pe3do1.PeGrid.Configure.ManualMaxY = 60;\par
\par
                Pe3do1.PeGrid.Configure.AutoMinMaxPadding = 0;\par
\par
                // Shrink the Z Aspect and show no label\par
                Pe3do1.PeGrid.Option.GridAspectZ = .001F;\par
                Pe3do1.PeGrid.Option.ShowZAxis = ShowAxis.LabelOnly;\par
                Pe3do1.PeString.ZAxisLabel = "";\par
\par
                // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
                // in determining different default values for such properties //\par
                Pe3do1.PePlot.Option.DegreePrompting = true;\par
\par
                // Enable button dragging //\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pe3do1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Subset colors //\par
                Pe3do1.PeColor.SubsetColors[0] = Color.FromArgb(205, 178, 50, 50);   // v9.5\par
                Pe3do1.PeColor.SubsetColors[1] = Color.FromArgb(205, 50, 198, 198);\par
                Pe3do1.PeColor.SubsetColors[2] = Color.FromArgb(205, 198, 198, 50);\par
                Pe3do1.PeColor.SubsetColors[3] = Color.FromArgb(205, 50, 198, 0);\par
\par
                // Set Titles //\par
                Pe3do1.PeString.MainTitle = "";\par
                Pe3do1.PeString.SubTitle = "||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. ";\par
\par
                Pe3do1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                // Note RenderEngine 3DX requires setting renderengine before QuickStyle \par
                Pe3do1.PeColor.BitmapGradientMode = true;\par
                Pe3do1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                // Set Plotting methods //\par
                Pe3do1.PePlot.Method = Gigasoft.ProEssentials.Enums.ThreeDGraphPlottingMethod.One;   // line\par
                Pe3do1.PePlot.Allow.Area = false;\par
                Pe3do1.PePlot.Allow.PointsPlusLine = false;\par
                Pe3do1.PePlot.Allow.Point = false;\par
                Pe3do1.PeUserInterface.Dialog.PlotCustomization = false;\par
                Pe3do1.PeLegend.SubsetsToLegend[0] = -1;\par
\par
                Pe3do1.PeUserInterface.Menu.ShowLegend = MenuControl.Hide;\par
                Pe3do1.PeUserInterface.Menu.ShowWireFrame = MenuControl.Hide;\par
\par
                // Set font size //\par
                Pe3do1.PeFont.FontSize = FontSize.Small;\par
                Pe3do1.PeFont.Fixed = true;\par
\par
                Pe3do1.PeConfigure.PrepareImages = true;\par
                Pe3do1.PeUserInterface.Allow.FocalRect = false;\par
                Pe3do1.PeConfigure.CacheBmp = true;\par
\par
                // Add Some Padding around image //\par
                Pe3do1.PeConfigure.ImageAdjustLeft = 50;\par
                Pe3do1.PeConfigure.ImageAdjustRight = 50;\par
                Pe3do1.PeConfigure.ImageAdjustBottom = 50;\par
\par
                Pe3do1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pe3do1.PeFont.Label.Bold = true;\par
\par
                // Set various export defaults //\par
                Pe3do1.PeSpecial.DpiX = 600;\par
                Pe3do1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pe3do1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pe3do1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pe3do1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pe3do1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pe3do1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pe3do1.PeUserInterface.Allow.TextExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pe3do1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
\par
                Pe3do1.PeFunction.ReinitializeResetImage();\par
                Pe3do1.Invalidate();\par
                Pe3do1.Refresh();\par
\par
                MainWindow.m_nRealTimeCounter = 0;\par
                MainWindow.m_nOverallCounter = 0;\par
\par
                MainWindow.Timer1.Interval = 25;\par
                MainWindow.Timer1.Start();\par
\par
                /*\par
                  \par
                ////////////////////////////////////////////////////////\par
                // the following code can be found in the Timer Event //\par
                ////////////////////////////////////////////////////////\par
\par
                  // Pass all the data, each update //\par
                  Pe3do1.PeData.Subsets = 4;\par
                  Pe3do1.PeData.Points = 25000;\par
\par
                  // class scope pre allocated, make sure to use Single (4 byte floats) //\par
                  //float[] tmpXData = new float[100000];\par
                  //float[] tmpYData = new float[100000];\par
                  //float[] tmpZData = new float[100000];\par
\par
                  float fShift;\par
                  Int32 j;\par
\par
                  fShift = (float)(Rand_Num.NextDouble()) * 90.0F;\par
                  for (j = 0; j <= 24999; j++)\par
                  \{\par
                      tmpXData[j] = ((float)(j + 1)) * .01F;\par
                      tmpYData[j] = Convert.ToInt32(Math.Sin(0.003 * (double)j + fShift) * 5.0f) + 10 + (float)(Rand_Num.NextDouble()) * 100.0F / 10.0F;\par
                      tmpZData[j] = 10.0F;\par
                  \}\par
\par
                  fShift = (float)(Rand_Num.NextDouble()) * 90.0F;\par
                  for (j = 0; j <= 24999; j++)\par
                  \{\par
                      tmpXData[j + 25000] = ((float)(j + 1)) * .01F;\par
                      tmpYData[j + 25000] = Convert.ToInt32(Math.Sin(0.002 * (double)j + fShift) * 5.0f) + 20 + (float)(Rand_Num.NextDouble()) * 100.0F / 10.0F;\par
                      tmpZData[j + 25000] = 10.0F;\par
                  \}\par
\par
                  fShift = (float)(Rand_Num.NextDouble()) * 90.0F;\par
                  for (j = 0; j <= 24999; j++)\par
                  \{\par
                      tmpXData[j + 50000] = ((float)(j + 1)) * .01F;\par
                      tmpYData[j + 50000] = Convert.ToInt32(Math.Sin(0.003 * (double)j + fShift) * 5.0f) + 30 + (float)(Rand_Num.NextDouble()) * 100.0F / 10.0F;\par
                      tmpZData[j + 50000] = 10.0F;\par
                  \}\par
\par
                  fShift = (float)(Rand_Num.NextDouble()) * 90.0F;\par
                  for (j = 0; j <= 24999; j++)\par
                  \{\par
                      tmpXData[j + 75000] = ((float)(j + 1)) * .01F;\par
                      tmpYData[j + 75000] = Convert.ToInt32(Math.Sin(0.003 * (double)j + fShift) * 5.0f) + 40 + (float)(Rand_Num.NextDouble()) * 100.0F / 10.0F;\par
                      tmpZData[j + 75000] = 10.0F;\par
                  \}\par
\par
                  // Perform the actual transfer of data //\par
                  Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, tmpXData, 100000);\par
                  Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, tmpYData, 100000);\par
                  Gigasoft.ProEssentials.Api.PEvsetW(Pe3do1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, tmpZData, 100000);\par
\par
                  // causes 3D object to reconstruct polygon data //\par
                  Pe3do1.PeFunction.Force3dxVerticeRebuild = true;\par
                  Pe3do1.Invalidate();\par
                  Pe3do1.Refresh();\par
\par
                */\par
\par
            \}\par
            else if (MainWindow.m_nChart == 414)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //414  Future Example\par
\par
\par
            \}\par
            else if (MainWindow.m_nChart == 499)\par
            \{\par
\par
\par
            \}\par
\par
            Pe3do1.Invalidate();\par
\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\}\par
\par
}
 