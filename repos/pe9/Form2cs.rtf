{\rtf1\ansi\deff0{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\f0\fs22\lang1033 using System;\par
using System.IO;\par
using System.Drawing;\par
using Gigasoft.ProEssentials.Enums;\par
\par
using System.Globalization;\par
using System.Threading;\par
\par
namespace PEWinformDemo\par
\{\par
    /// <summary>\par
    /// Summary description for Form2.\par
    /// </summary>\par
    public class Form2 \par
    \{\par
\tab\tab private static void CreateSimpleGraph(Gigasoft.ProEssentials.Pego Pego1)\par
\tab\tab\{\par
\tab\tab\tab int s, p;\par
\par
            Pego1.PeUserInterface.Cursor.PromptTracking = true; // v9 uses a tool tip\par
\par
            // Enable Bar Glass Effect //\par
            Pego1.PePlot.Option.BarGlassEffect = true;\par
\par
            // Enable Plotting style gradient and bevel features //\par
            Pego1.PePlot.Option.AreaGradientStyle = PlotGradientStyle.RadialBottomRight;\par
            Pego1.PePlot.Option.AreaBevelStyle = BevelStyle.MediumSmooth;\par
            Pego1.PePlot.Option.SplineGradientStyle = PlotGradientStyle.RadialBottomRight;\par
            Pego1.PePlot.Option.SplineBevelStyle = SplineBevelStyle.MediumSmooth;\par
\par
            // v7.2 new features //\par
            Pego1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
            Pego1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
            Pego1.PePlot.Option.LineSymbolThickness = 3;\par
            Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
\tab\tab\tab // Prepare images in memory //\par
\tab\tab\tab Pego1.PeConfigure.PrepareImages = true;\par
\par
\tab\tab\tab // Pass Data //\par
\tab\tab\tab Pego1.PeData.Subsets = 4;\par
\tab\tab\tab Pego1.PeData.Points = 12;\par
\par
\tab\tab\tab for(s = 0; s <= 3; s++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab for(p = 0; p <= 11; p++)\par
\tab\tab\tab\tab\{\par
                    Pego1.PeData.Y[s, p] = ((p + 1) * 50) + ((float)(MainWindow.Rand_Num.NextDouble()) * 250) + 2 + 700.0F - ((s * 140.0F));\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\}\par
\par
\tab\tab\tab // Set DataShadows to show 3D //\par
\tab\tab\tab Pego1.PePlot.DataShadows = DataShadows.Shadows;\par
\par
\tab\tab\tab Pego1.PeUserInterface.Allow.FocalRect = false;\par
\tab\tab\tab Pego1.PePlot.Method = GraphPlottingMethod.Area;\par
\tab\tab\tab Pego1.PeGrid.LineControl = GridLineControl.Both;\par
            Pego1.PeGrid.Style = GridStyle.Dot;\par
\tab\tab\tab Pego1.PePlot.Allow.Ribbon = true;\par
\tab\tab\tab Pego1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
            Pego1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
            // Enable middle mouse dragging //\par
            Pego1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
            Pego1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
\tab\tab\tab Pego1.PeString.MainTitle = "Units Sold per Month";\par
\tab\tab\tab Pego1.PeString.SubTitle = "";\par
\tab\tab\tab Pego1.PeString.YAxisLabel = "Units Sold";\par
\tab\tab\tab Pego1.PeString.XAxisLabel = "Month";\par
\par
\tab\tab\tab // subset labels //\par
\tab\tab\tab Pego1.PeString.SubsetLabels[0] = "Texas";\par
\tab\tab\tab Pego1.PeString.SubsetLabels[1] = "Florida";\par
\tab\tab\tab Pego1.PeString.SubsetLabels[2] = "Washington";\par
\tab\tab\tab Pego1.PeString.SubsetLabels[3] = "California";\par
\par
\tab\tab\tab // point labels //\par
\tab\tab\tab Pego1.PeString.PointLabels[0] = "January";\par
\tab\tab\tab Pego1.PeString.PointLabels[1] = "February";\par
\tab\tab\tab Pego1.PeString.PointLabels[2] = "March";\par
\tab\tab\tab Pego1.PeString.PointLabels[3] = "April";\par
\tab\tab\tab Pego1.PeString.PointLabels[4] = "May";\par
\tab\tab\tab Pego1.PeString.PointLabels[5] = "June";\par
\tab\tab\tab Pego1.PeString.PointLabels[6] = "July";\par
\tab\tab\tab Pego1.PeString.PointLabels[7] = "August";\par
\tab\tab\tab Pego1.PeString.PointLabels[8] = "September";\par
\tab\tab\tab Pego1.PeString.PointLabels[9] = "October";\par
\tab\tab\tab Pego1.PeString.PointLabels[10] = "November";\par
\tab\tab\tab Pego1.PeString.PointLabels[11] = "December";\par
\par
\tab\tab\tab // subset colors //\par
            Pego1.PeColor.SubsetColors[0] = Color.FromArgb(128, 198, 0, 0);\par
            Pego1.PeColor.SubsetColors[1] = Color.FromArgb(128, 0, 198, 198);\par
            Pego1.PeColor.SubsetColors[2] = Color.FromArgb(128, 198, 198, 0);\par
            Pego1.PeColor.SubsetColors[3] = Color.FromArgb(128, 0, 198, 0);\par
\par
\tab\tab\tab // subset line types //\par
\tab\tab\tab Pego1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetLineTypes[2] = LineType.MediumSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetLineTypes[3] = LineType.MediumSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetLineTypes[4] = LineType.MediumSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetLineTypes[5] = LineType.MediumSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetLineTypes[6] = LineType.MediumSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetLineTypes[7] = LineType.MediumSolid;\par
\tab\tab\tab\par
\tab\tab\tab // subset point types //\par
\tab\tab\tab Pego1.PeLegend.SubsetPointTypes[0] = PointType.DotSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetPointTypes[1] = PointType.UpTriangleSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetPointTypes[2] = PointType.SquareSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetPointTypes[3] = PointType.DownTriangleSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetPointTypes[4] = PointType.DotSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetPointTypes[5] = PointType.SquareSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetPointTypes[6] = PointType.DiamondSolid;\par
\tab\tab\tab Pego1.PeLegend.SubsetPointTypes[7] = PointType.UpTriangleSolid;\par
\tab\tab\tab\par
\tab\tab\tab Pego1.PeLegend.SimplePoint = true;\tab\par
\tab\tab\tab Pego1.PeLegend.SimpleLine = true;\par
\tab\tab\tab Pego1.PeLegend.Style = LegendStyle.OneLine;\par
\tab\tab\tab\tab\par
\tab\tab\tab // Allow stacked type graphs //\par
\tab\tab\tab Pego1.PePlot.Allow.StackedData = true;\par
\par
\tab\tab\tab // Various other features //\par
\tab\tab\tab Pego1.PeFont.Fixed = true;\par
\tab\tab\tab Pego1.PeColor.BitmapGradientMode = true;\par
\tab\tab\tab Pego1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
\tab\tab\tab Pego1.PePlot.Option.GradientBars = 8;\par
\tab\tab\tab Pego1.PePlot.Option.LineShadows = true;\par
\tab\tab\tab Pego1.PeFont.MainTitle.Bold = true;\par
\tab\tab\tab Pego1.PeFont.SubTitle.Bold = true;\par
\tab\tab\tab Pego1.PeFont.Label.Bold = true;\par
\tab\tab\tab Pego1.PeConfigure.TextShadows = TextShadows.BoldText;\par
\tab\tab\tab Pego1.PeFont.FontSize = FontSize.Large;\par
\par
            Pego1.PeData.Precision = DataPrecision.OneDecimal;\par
            Pego1.PeTable.Show = GraphPlusTable.Both;\par
            Pego1.PePlot.MarkDataPoints = false;\par
\par
            Pego1.PeConfigure.ImageAdjustLeft = 20;\par
            Pego1.PeConfigure.ImageAdjustRight = 20;\par
            Pego1.PeConfigure.ImageAdjustTop = 10;\par
\par
            // Set various export defaults //\par
            Pego1.PeSpecial.DpiX = 600;\par
            Pego1.PeSpecial.DpiY = 600;\par
\par
            // default export setting //\par
            Pego1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
            Pego1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png; \par
            Pego1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
            Pego1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
            Pego1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
            Pego1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
            Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
            Pego1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
            Pego1.PeConfigure.AntiAliasGraphics = true;\par
            Pego1.PeConfigure.AntiAliasText = true;\par
\par
            Pego1.PeSpecial.AutoImageReset = true; // Set just because example 17 resets to false \par
\par
            // Normally called at end of init, since we expect to add more settings, defer to later \par
            // Pego1.PeFunction.ReinitializeResetImage();\par
            // Pego1.Invalidate();\par
\tab\tab\}\par
\par
        public static void CreateAllCharts(Gigasoft.ProEssentials.Pego Pego1)\par
\tab\tab\{\par
            if (MainWindow.Timer1 != null)\par
                MainWindow.Timer1.Stop();\par
\par
            if (Pego1 == null) \{ return; \}\par
\par
\tab\tab\tab Pego1.PeFunction.Reset();\par
            Pego1.PeUserInterface.Dialog.ModelessAutoClose = true;\par
\par
\tab\tab\tab Pego1.PeFunction.Reinitialize();\par
\tab\tab\tab Pego1.PeConfigure.PrepareImages = true;        \par
\tab\tab\tab Random Rand_Num = new Random(unchecked((int)DateTime.Now.Ticks));\par
\tab\tab\tab\par
            if(MainWindow.m_nChart == 0)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //000  *** Simple Graph ***\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
                //! Left-Click and drag to draw zoom box. Use popup menu or 'z' to undo zoom. //\par
\par
                // Simple example show the basics of a graph object. //\par
                // Graph's generally only contain YData because we assume\par
                // data is plotted equally spaced left to right.\par
\par
                int s, p;\par
\par
                Pego1.PeUserInterface.Cursor.PromptTracking = true; // v9 uses a tool tip\par
\par
                // Enable Bar Glass Effect //\par
                Pego1.PePlot.Option.BarGlassEffect = true;\par
\par
                // Enable Plotting style gradient and bevel features //\par
                Pego1.PePlot.Option.AreaGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pego1.PePlot.Option.AreaBevelStyle = BevelStyle.MediumSmooth;\par
                Pego1.PePlot.Option.SplineGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pego1.PePlot.Option.SplineBevelStyle = SplineBevelStyle.MediumSmooth;\par
\par
                // v7.2 new features //\par
                Pego1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pego1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
                Pego1.PePlot.Option.LineSymbolThickness = 3;\par
                Pego1.PePlot.Option.AreaBorder = 1;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                // Prepare images in memory //\par
                Pego1.PeConfigure.PrepareImages = true;\par
\par
                // Pass Data //\par
                Pego1.PeData.Subsets = 4;\par
                Pego1.PeData.Points = 12;\par
\par
                for(s = 0; s <= 3; s++)\par
                \{\par
                    for(p = 0; p < 12; p++)\par
                    \{\par
                        Pego1.PeData.Y[s, p] = ((p + 1) * 50) + ((float)(Rand_Num.NextDouble()) * 250) + 2 + 700.0F - ((s * 140.0F));\par
                    \}\par
                \}\par
\par
                Pego1.PePlot.DataShadows = DataShadows.Shadows;\par
                Pego1.PeUserInterface.Allow.FocalRect = false;\par
                Pego1.PePlot.Method = GraphPlottingMethod.Area;\par
                Pego1.PeGrid.LineControl = GridLineControl.Both;\par
                Pego1.PeGrid.Style = GridStyle.Dot;\par
                Pego1.PePlot.Allow.Ribbon = true;\par
                Pego1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pego1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                // Enable middle mouse dragging //\par
                Pego1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pego1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                Pego1.PeString.MainTitle = "Units Sold per Month";\par
                Pego1.PeString.SubTitle = "";\par
                Pego1.PeString.YAxisLabel = "Units Sold";\par
                Pego1.PeString.XAxisLabel = "Month";\par
\par
                // subset labels //\par
                Pego1.PeString.SubsetLabels[0] = "Texas";\par
                Pego1.PeString.SubsetLabels[1] = "Florida";\par
                Pego1.PeString.SubsetLabels[2] = "Washington";\par
                Pego1.PeString.SubsetLabels[3] = "California";\par
\par
                // point labels //\par
                Pego1.PeString.PointLabels[0] = "January";\par
                Pego1.PeString.PointLabels[1] = "February";\par
                Pego1.PeString.PointLabels[2] = "March";\par
                Pego1.PeString.PointLabels[3] = "April";\par
                Pego1.PeString.PointLabels[4] = "May";\par
                Pego1.PeString.PointLabels[5] = "June";\par
                Pego1.PeString.PointLabels[6] = "July";\par
                Pego1.PeString.PointLabels[7] = "August";\par
                Pego1.PeString.PointLabels[8] = "September";\par
                Pego1.PeString.PointLabels[9] = "October";\par
                Pego1.PeString.PointLabels[10] = "November";\par
                Pego1.PeString.PointLabels[11] = "December";\par
\par
                // subset colors //\par
                Pego1.PeColor.SubsetColors[0] = Color.FromArgb(128, 198, 0, 0);\par
                Pego1.PeColor.SubsetColors[1] = Color.FromArgb(128, 0, 198, 198);\par
                Pego1.PeColor.SubsetColors[2] = Color.FromArgb(128, 198, 198, 0);\par
                Pego1.PeColor.SubsetColors[3] = Color.FromArgb(128, 0, 198, 0);\par
\par
                // subset line types //\par
                Pego1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[2] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[3] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[4] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[5] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[6] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[7] = LineType.MediumSolid;\par
\par
                // subset point types //\par
                Pego1.PeLegend.SubsetPointTypes[0] = PointType.DotSolid;\par
                Pego1.PeLegend.SubsetPointTypes[1] = PointType.UpTriangleSolid;\par
                Pego1.PeLegend.SubsetPointTypes[2] = PointType.SquareSolid;\par
                Pego1.PeLegend.SubsetPointTypes[3] = PointType.DownTriangleSolid;\par
                Pego1.PeLegend.SubsetPointTypes[4] = PointType.Dot;\par
                Pego1.PeLegend.SubsetPointTypes[5] = PointType.UpTriangle;\par
                Pego1.PeLegend.SubsetPointTypes[6] = PointType.Square;\par
                Pego1.PeLegend.SubsetPointTypes[7] = PointType.DownTriangle;\par
\par
                Pego1.PeLegend.SimplePoint = true;\par
                Pego1.PeLegend.SimpleLine = true;\par
                Pego1.PeLegend.Style = LegendStyle.OneLine;\par
\par
                // Allow stacked type graphs //\par
                Pego1.PePlot.Allow.StackedData = true;\par
\par
                // Various other features //\par
                Pego1.PeFont.Fixed = true;\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                Pego1.PePlot.Option.GradientBars = 8;\par
                Pego1.PePlot.Option.LineShadows = true;\par
                Pego1.PeFont.MainTitle.Bold = true;\par
                Pego1.PeFont.SubTitle.Bold = true;\par
                Pego1.PeFont.Label.Bold = true;\par
                Pego1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pego1.PeFont.FontSize = FontSize.Large;\par
\par
                Pego1.PeData.Precision = DataPrecision.OneDecimal;\par
                Pego1.PeTable.Show = GraphPlusTable.Both;\par
                Pego1.PePlot.MarkDataPoints = false;\par
\par
                Pego1.PeConfigure.ImageAdjustLeft = 20;\par
                Pego1.PeConfigure.ImageAdjustRight = 20;\par
                Pego1.PeConfigure.ImageAdjustTop = 10;\par
\par
                // Set various export defaults //\par
                Pego1.PeSpecial.DpiX = 600;\par
                Pego1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pego1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pego1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pego1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pego1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pego1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pego1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                Pego1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pego1.PeConfigure.AntiAliasGraphics = true;\par
                Pego1.PeConfigure.AntiAliasText = true;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
\par
                // Optionally call Pego1.Refresh() if you are not seeing changes immediately \par
\par
            \}\par
            else if(MainWindow.m_nChart == 1)\par
            \{\tab\tab\tab\tab         \par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //001  Graph With Auto Statistical Subsets\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Below tells object to automatically generate statistical\par
                // comparison subsets, object will actually have\par
                // 6 subsets when finished initializing.\par
\par
                Pego1.PePlot.AutoStatSubsets[0] = (int) Gigasoft.ProEssentials.Enums.AutoStatSubsets.AverageAllPoints;\par
                Pego1.PePlot.AutoStatSubsets[1] = (int) Gigasoft.ProEssentials.Enums.AutoStatSubsets.AveragePerPoint;\par
\par
                // Other various properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkLine;\par
                Pego1.PeLegend.Style = LegendStyle.OneLineInsideAxis;\par
                Pego1.PePlot.Method = GraphPlottingMethod.Bar;\par
                Pego1.PePlot.MethodII = GraphPlottingMethodII.PointsPlusLine; \par
                Pego1.PePlot.MarkDataPoints = true;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
\par
            \}\par
            else if(MainWindow.m_nChart == 2)\par
            \{\tab\tab\tab\tab         \par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //002  Graph With Permanent and Scrolling Subsets\par
\par
                //! Scroll vertical scroll bar to revolve subsets. //\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // tells object to automatically generate statistical\par
                // comparison subsets, the object will have\par
                // 6 subsets when finished reinitializing.\par
                Pego1.PePlot.AutoStatSubsets[0] = (int) Gigasoft.ProEssentials.Enums.AutoStatSubsets.AverageAllPoints; // This will be 5th subset\par
                Pego1.PePlot.AutoStatSubsets[1] = (int) Gigasoft.ProEssentials.Enums.AutoStatSubsets.AveragePerPoint; // This will be 6th subset\par
\par
                // Since we are scrolling subsets one at a time,\par
                // we can set the AverageAllPoints and AveragePerPoint subsets as\par
                // permanent. This allows individual subsets to be\par
                // compared to the averages of all points.\par
                Pego1.PeData.RandomSubsetsToGraph[0] = 4; // zero based 5th subset, PEAS_AVGAP\par
                Pego1.PeData.RandomSubsetsToGraph[1] = 5; // zero based 6th subset, PEAS_AVGPP\par
\par
                // If we comment this line out, you will only see the\par
                // 5th and 6th subset selected above. RandomSubsetsToGraph\par
                // will either control which subset you see or which\par
                // subsets are permanent if ScrollingSubsets is non-zero.\par
                Pego1.PeUserInterface.Scrollbar.ScrollingSubsets = 1; // Scroll one subset at a time\par
                Pego1.PeTable.What = TableWhat.AllSubsets;\par
\par
                // Add a table //\par
                Pego1.PeTable.Show = GraphPlusTable.Both;\par
                Pego1.PeData.Precision = 0;\par
                Pego1.PeFont.FontSize = FontSize.Medium;\par
\par
                // Other various properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.MediumNoBorder;\par
                Pego1.PeLegend.Style = LegendStyle.OneLineInsideAxis;\par
                Pego1.PePlot.Method = GraphPlottingMethod.Bar;\par
                Pego1.PePlot.MethodII = GraphPlottingMethodII.PointsPlusLine; \par
                Pego1.PePlot.Option.BestFitDegree = BestFitDegree.Fourth;\par
                Pego1.PePlot.MarkDataPoints = true;\par
                Pego1.PeLegend.Style = LegendStyle.OneLine;\par
                Pego1.PePlot.DataShadows = DataShadows.ThreeDimensional;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
\par
            \}\par
            else if(MainWindow.m_nChart == 3)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //003  Graph With Right Y Axis Comparison Subsets\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Set plotting method to Bar //\par
                Pego1.PePlot.Method = GraphPlottingMethod.Bar;\par
\par
                // Designate last 2 subsets as right y axis comparison subsets\par
                Pego1.PePlot.RYAxisComparisonSubsets = 2;\par
\par
                // Set Comparison PlottingMethod\par
                Pego1.PePlot.MethodII = GraphPlottingMethodII.PointsPlusLine;\par
\par
                // Label Right Y Axis //\par
                Pego1.PeString.RYAxisLabel = "Expected";\par
\par
                // Other various properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                Pego1.PeColor.SubsetColors[0] = Color.FromArgb(128, 100, 0, 0);\par
                Pego1.PeColor.SubsetColors[1] = Color.FromArgb(128, 0, 100, 100);\par
                Pego1.PeColor.SubsetColors[2] = Color.FromArgb(128, 198, 198, 0);\par
                Pego1.PeColor.SubsetColors[3] = Color.FromArgb(128, 0, 198, 0);\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
            \}\par
            else if(MainWindow.m_nChart == 4)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //004  Graph showing simple high-low-close\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Set PlottingMethod and SpecificPlotMode Type //\par
                Pego1.PePlot.Method = GraphPlottingMethod.SpecificPlotMode;\par
                Pego1.PePlot.SpecificPlotMode = SpecificPlotMode.HighLowClose;\par
\par
                // setting this true causes high-low-close to be multi colored\par
                Pego1.PePlot.Option.SpecificPlotModeColor = true;\par
\par
                // Change Data to something more appropriate //\par
                Pego1.PeData.Subsets = 3;  // set number of subsets\par
                Pego1.PeData.Points = 12;   // number of data points\par
\par
                // Pass YData, Line Start, Line End, and Close Value //\par
                Int32 s, p;\par
                for(s = 0; s <= 2; s++)\par
                \{\par
                    for(p = 0; p <= 11; p++)\par
                    \{\par
                        if(s == 0)\par
                            Pego1.PeData.Y[s, p] = ((p + 1) * 10 + ((float)(Rand_Num.NextDouble()) * 25));\par
                        else if(s == 1)\par
                            Pego1.PeData.Y[s, p] = ((p + 1) * 40 + ((float)(Rand_Num.NextDouble()) * 25));\par
                        else if( s == 2)\par
                            Pego1.PeData.Y[s, p] = ((p + 1) * 20 + ((float)(Rand_Num.NextDouble()) * 25));\par
                    \}\par
                \}\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
\par
            \}\par
            else if(MainWindow.m_nChart == 5)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //005  Graph With Custom Y Axis\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Change to Spline Area //\par
                Pego1.PePlot.Method = GraphPlottingMethod.SplineArea; \par
\par
                // Disable default scale //\par
                Pego1.PeGrid.Option.ShowYAxis = ShowAxis.Empty;\par
\par
                // Generally, a custom y axis will need manual range control //\par
                Pego1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pego1.PeGrid.Configure.ManualMinY = 0.0;\par
                Pego1.PeGrid.Configure.ManualMaxY = 1500.0;\par
\par
                // Create custom grid lines with HorzLineAnnotations //\par
                // Note that GridLineControl will control these annotations //\par
                Pego1.PeAnnotation.Line.YAxis[0] = 200;\par
                Pego1.PeAnnotation.Line.YAxisType[0] = LineAnnotationType.GridLine;\par
                Pego1.PeAnnotation.Line.YAxisText[0] = "|LLow Value";\par
\par
                Pego1.PeAnnotation.Line.YAxis[1] = 500;\par
                Pego1.PeAnnotation.Line.YAxisType[1] = LineAnnotationType.GridLine;\par
                Pego1.PeAnnotation.Line.YAxisText[1] = "|LMedium Value";\par
\par
                Pego1.PeAnnotation.Line.YAxis[2] = 800;\par
                Pego1.PeAnnotation.Line.YAxisType[2] = LineAnnotationType.GridLine;\par
                Pego1.PeAnnotation.Line.YAxisText[2] = "|LHigh Value";\par
\par
                Pego1.PeAnnotation.Line.YAxis[3] = 350;\par
                Pego1.PeAnnotation.Line.YAxisType[3] = LineAnnotationType.GridTick;\par
                Pego1.PeAnnotation.Line.YAxisText[3] = "";\par
\par
                Pego1.PeAnnotation.Line.YAxis[4] = 650;\par
                Pego1.PeAnnotation.Line.YAxisType[4] = LineAnnotationType.GridTick;\par
                Pego1.PeAnnotation.Line.YAxisText[4] = "";\par
\par
                // Set LeftMargin to allocate space for line annotation text //\par
                // Use the longest string used in annotations.\par
                Pego1.PeAnnotation.Line.LeftMargin = "Medium Value ";\par
\par
                // Set this to see annotations //\par
                Pego1.PeAnnotation.Show = true;\par
\par
                // Increase line annotation text size //\par
                Pego1.PeFont.LineAnnotationTextSize = 100;\par
\par
                // Put Grid In Front of Bars //\par
                Pego1.PeGrid.InFront = true;\par
\par
                // Other various properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightInset;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
\par
            \}\par
            else if(MainWindow.m_nChart == 6)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //006  Graph showing use of Null Data Gaps\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Change Null Data Value //\par
                // Note that Scientific Graph has NullDataValueX and NullDataValueY //\par
                Pego1.PeData.NullDataValue = -9999.0;\par
\par
                // Change to two subsets and set a few data points to nulls //\par
                Pego1.PeData.Subsets = 2;\par
\par
                Pego1.PeData.Y[0, 3] = -9999;\par
                Pego1.PeData.Y[0, 4] = -9999;\par
                Pego1.PeData.Y[0, 5] = -9999;\par
\par
                Pego1.PeData.Y[1, 5] = -9999; //! Note that (1,6) and (1,8) are valid points\par
                Pego1.PeData.Y[1, 7] = -9999; //! You will see symbols for these points because\par
                Pego1.PeData.Y[1, 9] = -9999; //! they are surrounded by nulls.\par
\par
                // Set line Plotting Method //\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusLine;\par
\par
                // Enable Null Data Gaps //\par
                // Using NullDataGaps, the subset's line will stop before null data values //\par
                // If this line is commented out, then line will extend to next non-null //\par
                Pego1.PePlot.Option.NullDataGaps = true;\par
\par
                // Other various properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.MediumInset;\par
                Pego1.PePlot.MarkDataPoints = true;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
\par
            \}\par
            else if(MainWindow.m_nChart == 7)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //007  Graph showing use of PEconvpixeltograph\par
\par
                //! Look at TitleBar for the chart's window.  As you\par
                //! move the mouse, you will see the coordinates of the\par
                //! mouse in the titlebar.\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Other various properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightShadow;\par
                Pego1.PePlot.MarkDataPoints = false;\par
\par
                Pego1.PePlot.Method = GraphPlottingMethod.Point;\par
\par
                // Set last 1 subset to right y axis \par
                Pego1.PePlot.RYAxisComparisonSubsets = 1;\par
                Pego1.PePlot.MethodII = GraphPlottingMethodII.Line;\par
\par
                // Set cursor related properties \par
                // v9 feature\par
                Pego1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pego1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
                Pego1.PeUserInterface.Cursor.TrackingCustomDataText = true;\par
                Pego1.PeUserInterface.Cursor.Mode = CursorMode.DataCross; \par
\par
                // This will allow you to move cursor by clicking data point //\par
                Pego1.PeUserInterface.Cursor.MouseCursorControl = true;\par
                Pego1.PeUserInterface.HotSpot.Data = true;\par
\par
                // No need to actually click data point, click close to the data point //\par
                // v9 feature\par
                Pego1.PeUserInterface.Cursor.MouseCursorControlClosestPoint = true;\par
\par
                Pego1.PeUserInterface.Cursor.TrackingTooltipMaxWidth = 250;\par
                 \par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
\par
                /*////////////////////////////////////////\par
                // From MouseMove event of Pego control //\par
                //////////////////////////////////////////\par
                private void Pego1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\par
                \{\par
                Double fX = 0;\par
                Double fY = 0;\par
                Int32 nLeft, nTop, nRight, nBottom, pX, pY, nA, nX, nY;\par
                Point pt;\par
                Rect rect;\par
\par
                // get last mouse location within control //'\par
                pt = Pego1.PeUserInterface.Cursor.LastMouseMove;\par
                pX = (int)pt.X;\par
                pY = (int)pt.Y;\par
\par
                // test to see if this is within grid area //'\par
                rect = Pego1.PeFunction.GetRectGraph();\par
                nTop = (int)rect.Top;\par
                nLeft = (int)rect.Left;\par
                nRight = (int)rect.Right;\par
                nBottom = (int)rect.Bottom;\par
\par
                if (pX > nLeft && pX < nRight && pY > nTop && pY < nBottom)\par
                \{\par
                    nA = 0;      // Initialize axis if using OverlapMultiAxes, else this function will\par
                                 // return the axis if MultiAxesSubsets is used without OverlapMultiAxes\par
                    nX = pX;     // Initialize nX and nY with mouse location\par
                    nY = pY;\par
                    Pego1.PeFunction.ConvPixelToGraph(ref nA, ref nX, ref nY, ref fX, ref fY, false, false, false);\par
                    this.Title = fX.ToString() + "   -   " + fY.ToString();\par
                \}\par
                else\par
                    this.Title = "Outside Grid";\par
                \}\par
                  \par
                private void Pego1_PeCustomTrackingDataText(object sender, Gigasoft.ProEssentials.EventArg.CustomTrackingDataTextEventArgs e)\par
                \{\par
                    if (Pego1.PeUserInterface.Cursor.TrackingPromptTrigger == TrackingTrigger.MouseMove)\par
                    \{\par
                        Double fX = 0;\par
                        Double fY = 0;\par
                        Double fRY = 0;\par
                        Int32 nLeft, nTop, nRight, nBottom, pX, pY, nA, nX, nY;\par
                        Point pt;\par
                        System.Drawing.Rectangle rect;\par
\par
                        // get last mouse location within control //'\par
                        pt = Pego1.PeUserInterface.Cursor.LastMouseMove;\par
                        pX = (int)pt.X;\par
                        pY = (int)pt.Y;\par
\par
                        // test to see if this is within grid area //'\par
                        rect = Pego1.PeFunction.GetRectGraph();\par
                        nTop = (int)rect.Top;\par
                        nLeft = (int)rect.Left;\par
                        nRight = (int)rect.Right;\par
                        nBottom = (int)rect.Bottom;\par
\par
                        if (pX > nLeft && pX < nRight && pY > nTop && pY < nBottom)\par
                        \{\par
                            nA = 0;      // Initialize axis if using OverlapMultiAxes, else this function will\par
                                            // return the axis if MultiAxesSubsets is used without OverlapMultiAxes\par
                            nX = pX;     // Initialize nX and nY with mouse location\par
                            nY = pY;\par
\par
                            // read the left y axis value\par
                            Pego1.PeFunction.ConvPixelToGraph(ref nA, ref nX, ref nY, ref fX, ref fY, false, false, false);\par
\par
                            // read the right y axis value \par
                            Pego1.PeFunction.ConvPixelToGraph(ref nA, ref nX, ref nY, ref fX, ref fRY, true, false, false);\par
\par
                            string s;\par
                            s = String.Format("Left Y <- \{0:0.00\}   ", fY);\par
                            s += String.Format("\{0:0.00\} -> Right Y", fRY);\par
                            e.TrackingText = s;\par
                        \}\par
                    \}\par
                    else\par
                    \{\par
                        // Not a MouseMove, must be a CursorMove trigger \par
                        float fY = Pego1.PeData.Y[Pego1.PeUserInterface.Cursor.Subset, Pego1.PeUserInterface.Cursor.Point];\par
\par
                        if (Pego1.PeUserInterface.Cursor.Subset < 3)\par
                            e.TrackingText = String.Format("Left Y <- \{0:0.00\}", fY);\par
                        else\par
                            e.TrackingText = String.Format("\{0:0.00\} -> Right Y", fY);\par
                    \}\par
                \}\par
                  \par
                */\par
                //////////////////////////////////////////////////////\par
            \}\par
            else if(MainWindow.m_nChart == 8)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //008  Graph showing use of PointColors\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
                //! Vertical scroll bar revolves through subsets. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Now to control color on per point basis, we use the\par
                // PointColors property array to assign a color to each\par
                // piece of YData.\par
                Int32 s, p;\par
                for( s = 0; s <= 3; s++)\par
                \{\par
                    for( p = 0; p <= 11; p++)\par
                    \{\par
                        if (s == 0)\par
                            Pego1.PeColor.PointColors[s, p] = Color.FromArgb(55, (byte) (15 + ((p + 1) * 20)), 0, 0);\par
                        else if (s == 1) \par
                            Pego1.PeColor.PointColors[s, p] = Color.FromArgb(55, 0, (byte) (15 + ((p + 1) * 20)), 0);\par
                        else if (s == 2) \par
                            Pego1.PeColor.PointColors[s, p] = Color.FromArgb(55, 0, 0, (byte) (15 + ((p + 1) * 20)));\par
                        else if(s == 3) \par
                            Pego1.PeColor.PointColors[s, p] = Color.FromArgb(55, 0, (byte) (15 + ((p + 1) * 20)), (byte) (15 + ((p + 1) * 20)));\par
                    \}\par
                \}\par
\par
                // Set SubsetColor to match brightest PointColor for each subset //\par
                Pego1.PeColor.SubsetColors[0] = Color.FromArgb(55, 198, 0, 0);\par
                Pego1.PeColor.SubsetColors[1] = Color.FromArgb(55, 0, 198, 0);\par
                Pego1.PeColor.SubsetColors[2] = Color.FromArgb(55, 0, 0, 198);\par
                Pego1.PeColor.SubsetColors[3] = Color.FromArgb(55, 0, 198, 198);\par
\par
                // Show 1 subset at a time //\par
                Pego1.PeUserInterface.Scrollbar.ScrollingSubsets = 1;\par
\par
                Pego1.PeTable.What = TableWhat.AllSubsets;\par
                Pego1.PeFont.FontSize = FontSize.Medium;\par
\par
                // Add a table //\par
                Pego1.PeTable.Show = GraphPlusTable.Both;\par
                Pego1.PeData.Precision = 0;\par
\par
                // Slant the Point Labels //\par
                Pego1.PeGrid.ForceVerticalPoints = ForceVerticalPoints.Slanted;\par
\par
                Pego1.PePlot.Method = GraphPlottingMethod.Bar;\par
                Pego1.PePlot.DataShadows = DataShadows.ThreeDimensional;\par
                Pego1.PePlot.Option.BarBevelStyle = BevelStyle.ThickSmooth;\par
\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkInset;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
\par
            \}\par
            else if(MainWindow.m_nChart == 9)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //009  Graph showing use of BestFitCoeffs\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Reduce to just two subsets //\par
                Pego1.PeData.Subsets = 2;\par
\par
                // Set BestFitDegree and Plotting Method //\par
                Pego1.PePlot.Option.BestFitDegree = BestFitDegree.Third;\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusBestFitCurve;\par
\par
                // Call PEreinitialize and PEresetimage //\par
                Pego1.PeFunction.Reinitialize();     // Reinitialize can be used to read ManualMaxY, etc\par
                Pego1.PeFunction.ResetImage(0, 0);   // ResetImage is needed to calculate coeffs.\par
\par
                // Now add annotations that represents coefficients //\par
\par
                //** First subset's coeffs. **'\par
                String t;\par
                t = "Texas y = " + String.Format( "\{0:#.##\}", Pego1.PePlot.Option.BestFitCoeffs[0, 3]) + "x^3 ";\par
                if(Pego1.PePlot.Option.BestFitCoeffs[0, 2] >= 0)\par
                    t = t + "+ ";\par
                t = t + String.Format("\{0:#.##\}", Pego1.PePlot.Option.BestFitCoeffs[0, 2]) + "x^2 ";\par
                if(Pego1.PePlot.Option.BestFitCoeffs[0, 1] >= 0)\par
                    t = t + "+ ";\par
                t = t + String.Format("\{0:#.##\}", Pego1.PePlot.Option.BestFitCoeffs[0, 1]) + "x ";\par
                if(Pego1.PePlot.Option.BestFitCoeffs[0, 0] >= 0)\par
                    t = t + "+ ";\par
                t = t + String.Format("\{0:#.##\}", Pego1.PePlot.Option.BestFitCoeffs[0, 0]);\par
                t = t + '\\n'; // Line feed\par
\par
                // Second subset's coeffs. //\par
                t =  t + "Florida y = " + String.Format("\{0:#.##\}", Pego1.PePlot.Option.BestFitCoeffs[1, 3]) + "x^3 ";\par
                if(Pego1.PePlot.Option.BestFitCoeffs[1, 2] >= 0)\par
                    t = t + "+ ";\par
                t = t + String.Format("\{0:#.##\}", Pego1.PePlot.Option.BestFitCoeffs[1, 2]) + "x^2 ";\par
                if(Pego1.PePlot.Option.BestFitCoeffs[1, 1] >= 0)\par
                    t = t + "+ ";\par
                t = t + String.Format("\{0:#.##\}", Pego1.PePlot.Option.BestFitCoeffs[1, 1]) + "x ";\par
                if(Pego1.PePlot.Option.BestFitCoeffs[1, 0] >= 0)\par
                    t = t + "+ ";\par
                t = t + String.Format("\{0:#.##\}", Pego1.PePlot.Option.BestFitCoeffs[1, 0]);\par
\par
                // Put text into a line annotations //'\par
                Pego1.PeAnnotation.Line.YAxis[0] = Pego1.PeGrid.Configure.ManualMaxY - 1;\par
                //Pego1.PeAnnotation.Line.HorizontalType[0] = -1;  // no line, just text\par
                Pego1.PeAnnotation.Line.YAxisText[0] = t;\par
\par
                // Increases line annotation text size to max\par
                Pego1.PeFont.LineAnnotationTextSize = 100;\par
                Pego1.PeAnnotation.Show = true;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
            \}\par
            else if(MainWindow.m_nChart == 10)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //010  Graph showing Stacked Bar\par
\par
                //! Try this... Right Click chart and change the Plotting Method to Horizontal Bar Stacked. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Enable Stacked type charts //\par
                Pego1.PePlot.Allow.StackedData = true;\par
                Pego1.PePlot.Allow.HorzBarStacked = true;\par
\par
                // Set plotting method //\par
                Pego1.PePlot.Method = GraphPlottingMethod.BarStacked;\par
\par
                // Add a table //\par
                Pego1.PeTable.Show = GraphPlusTable.Both;\par
                Pego1.PeData.Precision = DataPrecision.TwoDecimals;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
            \}\par
            else if(MainWindow.m_nChart == 11)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //011  Graph showing MultiSubTitles\par
\par
                //! Look for the text immediately above and below image. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                //! Note that strings below always have two pipe symbols "|" //\par
\par
                // Set Multi Sub and Bottom Titles //\par
                Pego1.PeString.MultiSubTitles[0] = "Top Left|Top Center|Top Right";\par
                Pego1.PeString.MultiSubTitles[1] = "|Second Line only centered|";\par
\par
                // Note that bottom titles get drawn from bottom up //\par
                Pego1.PeString.MultiBottomTitles[0] = "Second Line only on left||";\par
                Pego1.PeString.MultiBottomTitles[1] = "Bottom Left|Bottom Center|Bottom Right";\par
\par
                // Other various properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightLine;\par
                Pego1.PePlot.MarkDataPoints = false;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
            \}\par
            else if(MainWindow.m_nChart == 12)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //012  Graph showing MultiAxesSubsets 1\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
                //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Now sub-divide subsets into 4 individual axes //\par
                // Each axis with one subset in each //\par
                Pego1.PeGrid.MultiAxesSubsets[0] = 1;\par
                Pego1.PeGrid.MultiAxesSubsets[1] = 1;\par
                Pego1.PeGrid.MultiAxesSubsets[2] = 1;\par
                Pego1.PeGrid.MultiAxesSubsets[3] = 1;\par
\par
                // Set first axis parameters //\par
                Pego1.PeGrid.WorkingAxis = 0;\par
                Pego1.PeString.YAxisLabel = "Label 1";\par
                Pego1.PePlot.Method = GraphPlottingMethod.Bar;\par
\par
                // Set second axis parameters //\par
                Pego1.PeGrid.WorkingAxis = 1;\par
                Pego1.PeString.YAxisLabel = "Label 2";\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusLine;\par
\par
                // Set third axis parameters //\par
                Pego1.PeGrid.WorkingAxis = 2;\par
                Pego1.PeString.YAxisLabel = "Label 3";\par
                Pego1.PePlot.Method = GraphPlottingMethod.Bar;\par
\par
                // Set fourth axis parameters //\par
                Pego1.PeGrid.WorkingAxis = 3;\par
                Pego1.PeString.YAxisLabel = "Label 4";\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusLine;\par
\par
                // Reset WorkingAxis when done //\par
                Pego1.PeGrid.WorkingAxis = 0;\par
\par
                // Add Axis Separator //\par
                Pego1.PeGrid.Option.MultiAxesSeparators = MultiAxesSeparators.Thin;\par
\par
                // Axis Sizing //\par
                Pego1.PeUserInterface.Allow.MultiAxesSizing = true;\par
\par
                // Other various properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pego1.PePlot.MarkDataPoints = false;\par
\par
                // Add graph annotations showing how to place annotations per axis // v9.5 \par
                Pego1.PeUserInterface.Menu.AnnotationControl = true;\par
                Pego1.PePlot.DataShadows = DataShadows.Shadows;\par
\par
                int aCnt = 0;\par
                for (int annot = 0; annot < 5; annot++)\par
                \{\par
                    int nRndRow = 0;\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float)Pego1.PeData.Points - 1);\par
                    Pego1.PeAnnotation.Graph.X[aCnt] = nRndCol + 1;\par
                    Pego1.PeAnnotation.Graph.Y[aCnt] = Pego1.PeData.Y[nRndRow, nRndCol];\par
                    Pego1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pego1.PeAnnotation.Graph.Text[aCnt] = "Axis0 " + annot.ToString();\par
                    Pego1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    Pego1.PeAnnotation.Graph.Axis[aCnt] = 0; // ie WorkingAxis index 0-15\par
                    aCnt++;\par
                \}\par
                for (int annot = 0; annot < 5; annot++)\par
                \{\par
                    int nRndRow = 1;\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float)Pego1.PeData.Points - 1);\par
                    Pego1.PeAnnotation.Graph.X[aCnt] = nRndCol + 1;\par
                    Pego1.PeAnnotation.Graph.Y[aCnt] = Pego1.PeData.Y[nRndRow, nRndCol];\par
                    Pego1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pego1.PeAnnotation.Graph.Text[aCnt] = "Axis1 " + annot.ToString();\par
                    Pego1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    Pego1.PeAnnotation.Graph.Axis[aCnt] = 1;\par
                    aCnt++;\par
                \}\par
                for (int annot = 0; annot < 5; annot++)\par
                \{\par
                    int nRndRow = 2;\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float)Pego1.PeData.Points - 1);\par
                    Pego1.PeAnnotation.Graph.X[aCnt] = nRndCol + 1;\par
                    Pego1.PeAnnotation.Graph.Y[aCnt] = Pego1.PeData.Y[nRndRow, nRndCol];\par
                    Pego1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pego1.PeAnnotation.Graph.Text[aCnt] = "Axis2 " + annot.ToString();\par
                    Pego1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    Pego1.PeAnnotation.Graph.Axis[aCnt] = 2;\par
                    aCnt++;\par
                \}\par
                for (int annot = 0; annot < 5; annot++)\par
                \{\par
                    int nRndRow = 3;\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float)Pego1.PeData.Points - 1);\par
                    Pego1.PeAnnotation.Graph.X[aCnt] = nRndCol + 1;\par
                    Pego1.PeAnnotation.Graph.Y[aCnt] = Pego1.PeData.Y[nRndRow, nRndCol];\par
                    Pego1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pego1.PeAnnotation.Graph.Text[aCnt] = "Axis3 " + annot.ToString();\par
                    Pego1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    Pego1.PeAnnotation.Graph.Axis[aCnt] = 3;\par
                    aCnt++;\par
                \}\par
\par
                Pego1.PeAnnotation.Show = true;\par
                Pego1.PeFont.GraphAnnotationTextSize = 105;\par
                Pego1.PeAnnotation.Graph.MinSymbolSize = MinimumPointSize.Large;\par
                Pego1.PeAnnotation.Graph.MaxSymbolSize = MinimumPointSize.Large;\par
\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
            \}\par
            else if(MainWindow.m_nChart == 13)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //013  Graph showing MultiAxesSubsets 2\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
                //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Now sub-divide subsets 4 into individual axes //\par
                // Each axis with 2 subsets in each //\par
                Pego1.PeGrid.MultiAxesSubsets[0] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[1] = 2;\par
\par
                // Set first axis parameters //\par
                Pego1.PeGrid.WorkingAxis = 0;\par
                Pego1.PeString.YAxisLabel = "Label 1";\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusLine;\par
                Pego1.PePlot.ComparisonSubsets = 1;\par
\par
                // Set second axis parameters //\par
                Pego1.PeGrid.WorkingAxis = 1;\par
                Pego1.PeString.YAxisLabel = "Label 2";\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusLine;\par
                Pego1.PePlot.ComparisonSubsets = 1;\par
\par
                // Reset WorkingAxis when done //\par
                Pego1.PeGrid.WorkingAxis = 0;\par
\par
                // Separate Axes //\par
                Pego1.PeGrid.Option.MultiAxisStyle = MultiAxisStyle.SeparateAxes;\par
\par
                // Axis Sizing //\par
                Pego1.PeUserInterface.Allow.MultiAxesSizing = true;\par
\par
                // Legend Inside Each Axis //\par
                Pego1.PeLegend.Style = LegendStyle.OneLineInsideAxis;\par
\par
                // Other various properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightInset;\par
                Pego1.PePlot.MarkDataPoints = false;\par
\par
                // Add graph annotations showing how to place annotations per axis // v9.5 \par
                Pego1.PeUserInterface.Menu.AnnotationControl = true;\par
                Pego1.PePlot.DataShadows = DataShadows.Shadows;\par
\par
                int aCnt = 0;\par
                for (int annot = 0; annot < 5; annot++)\par
                \{\par
                    int nRndRow = 0;  // Subset\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float)Pego1.PeData.Points - 1);\par
                    Pego1.PeAnnotation.Graph.X[aCnt] = nRndCol + 1;\par
                    Pego1.PeAnnotation.Graph.Y[aCnt] = Pego1.PeData.Y[nRndRow, nRndCol];\par
                    Pego1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pego1.PeAnnotation.Graph.Text[aCnt] = "Axis0 " + annot.ToString();\par
                    Pego1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    Pego1.PeAnnotation.Graph.Axis[aCnt] = 0;\par
                    aCnt++;\par
                \}\par
                for (int annot = 0; annot < 5; annot++)\par
                \{\par
                    int nRndRow = 2; // Subset\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float)Pego1.PeData.Points - 1);\par
                    Pego1.PeAnnotation.Graph.X[aCnt] = nRndCol + 1;\par
                    Pego1.PeAnnotation.Graph.Y[aCnt] = Pego1.PeData.Y[nRndRow, nRndCol];\par
                    Pego1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pego1.PeAnnotation.Graph.Text[aCnt] = "Axis1 " + annot.ToString();\par
                    Pego1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    Pego1.PeAnnotation.Graph.Axis[aCnt] = 1;\par
                    aCnt++;\par
                \}\par
\par
                Pego1.PeAnnotation.Show = true;\par
                Pego1.PeFont.GraphAnnotationTextSize = 105;\par
                Pego1.PeAnnotation.Graph.MinSymbolSize = MinimumPointSize.Large;\par
                Pego1.PeAnnotation.Graph.MaxSymbolSize = MinimumPointSize.Large;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
            \}\par
            else if(MainWindow.m_nChart == 14)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //014  Graph showing use of PEgethotspot\par
\par
                //! Move mouse over subset legends, point labels, or data points\par
                //! and watch title bar.\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Enable some various hot spots //\par
                Pego1.PeUserInterface.HotSpot.Data = true;\par
                Pego1.PeUserInterface.HotSpot.Subset = true;\par
                Pego1.PeUserInterface.HotSpot.Point = true;\par
                Pego1.PeUserInterface.HotSpot.Size = HotSpotSize.Large;\par
\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusSpline;\par
                Pego1.PePlot.ComparisonSubsets = 2;\par
                Pego1.PePlot.MethodII = GraphPlottingMethodII.PointsPlusLine;\par
                Pego1.PePlot.MarkDataPoints = false;\par
\par
                Pego1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pego1.PeUserInterface.Cursor.TrackingCustomDataText = true;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
\par
                /*///////////////////////////////////////////////\par
                // Code below is found in the MouseMove event //\par
                ////////////////////////////////////////////////\par
                Int32 extra1, extra2, pX, pY;\par
                Point pt;\par
                Gigasoft.ProEssentials.Structs.HotSpotData ds;\par
\par
                // get last mouse location within control //'\par
                pt = Pego1.PeUserInterface.Cursor.LastMouseMove;\par
                pX = (int)pt.X;\par
                pY = (int)pt.Y;\par
\par
                // Calls to fill hot spot data structure with hot spot data at given x and y\par
                Pego1.PeFunction.GetHotSpot(pX, pY);\par
\par
                // Calls PEgethotspot //'\par
                ds = Pego1.PeFunction.GetHotSpotData();\par
                extra1 = ds.Data1;\par
                extra2 = ds.Data2;\par
\par
                if (ds.Type == HotSpotType.DataPoint)\par
                    this.Title = "DataPoint value " + Pego1.PeData.Y[extra1, extra2].ToString();\par
                else if (ds.Type == HotSpotType.Subset)\par
                    this.Title = "Subset Legend is " + Pego1.PeString.SubsetLabels[extra1];\par
                else if (ds.Type == HotSpotType.Point)\par
                    this.Title = "Point Label is " + Pego1.PeString.PointLabels[extra1];\par
                else\par
                \{\par
                    Point p;\par
                    p = Pego1.PeFunction.SearchSubsetPointIndex(pX, pY);\par
                    if (p.X >= 0)\par
                    \{\par
                        string s = String.Format("Closest Subset Point s=\{0\}", p.X);\par
                        s += String.Format(", p=\{0\}", p.Y);\par
                        this.Text = s;\par
                    \}\par
                    else\par
                        this.Text = "No Hot Spot";\par
                \}\par
                \par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 15)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //015  Graph showing use of GraphAnnotations\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // v9.5\par
                Pego1.PeUserInterface.Menu.AnnotationControl = true;\par
                Pego1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
                Pego1.PeAnnotation.ShowAnnotationText = true;\par
\par
                // simplify chart by reducing subsets //\par
                Pego1.PeData.Subsets = 2;\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusLine;\par
                Pego1.PePlot.RYAxisComparisonSubsets = 1;\par
                Pego1.PePlot.MethodII = GraphPlottingMethodII.Line;\par
                Pego1.PeTable.Show = GraphPlusTable.Graph;\par
                Pego1.PeFont.FontSize = FontSize.Large; \par
                \par
                // Add some various graph annotations //\par
                Pego1.PeAnnotation.Show = true;\par
                Pego1.PeFont.GraphAnnotationTextSize = 115;\par
\par
                // Controls default placement of all annotations //\par
                Pego1.PeAnnotation.InFront = false;\par
\par
                // Give user ability to show or hide annotations //\par
                Pego1.PeUserInterface.Menu.AnnotationControl = true;\par
\par
                // Place a symbol //\par
                Pego1.PeAnnotation.Graph.X[0] = 1.5;\par
                Pego1.PeAnnotation.Graph.Y[0] = 1095;\par
                Pego1.PeAnnotation.Graph.Type[0] = (int) GraphAnnotationType.SmallDotSolid; \par
                Pego1.PeAnnotation.Graph.Color[0] = Color.FromArgb(225, 198, 98, 0);\par
                Pego1.PeAnnotation.Graph.Text[0] = "Dot Gradient Shadow";\par
                Pego1.PeAnnotation.Graph.GradientStyle[0] = (int) Gigasoft.ProEssentials.Enums.PlotGradientStyle.RadialTopLeft;\par
                Pego1.PeAnnotation.Graph.Shadow[0] = true;\par
                Pego1.PeAnnotation.Graph.Bold[0] = false;\par
\par
                // Draw some lines //'\par
                Pego1.PeAnnotation.Graph.X[1] = 1.5;\par
                Pego1.PeAnnotation.Graph.Y[1] = 1020;\par
                Pego1.PeAnnotation.Graph.Type[1] = (int) GraphAnnotationType.ThinSolidLine;\par
                Pego1.PeAnnotation.Graph.Color[1] = Color.FromArgb(255, 0, 198, 198);\par
                Pego1.PeAnnotation.Graph.Text[1] = "Start";\par
                Pego1.PeAnnotation.Graph.Bold[1] = false;\par
\par
                Pego1.PeAnnotation.Graph.X[2] = 2.5;\par
                Pego1.PeAnnotation.Graph.Y[2] = 1120;\par
                Pego1.PeAnnotation.Graph.Type[2] = (int) GraphAnnotationType.LineContinue;\par
                Pego1.PeAnnotation.Graph.Color[2] = Color.Black;\par
                Pego1.PeAnnotation.Graph.Text[2] = "";\par
\par
                Pego1.PeAnnotation.Graph.X[3] = 3.5;\par
                Pego1.PeAnnotation.Graph.Y[3] = 1020;\par
                Pego1.PeAnnotation.Graph.Type[3] = (int) GraphAnnotationType.LineContinue;\par
                Pego1.PeAnnotation.Graph.Color[3] = Color.FromArgb(255, 0, 0, 198);\par
                Pego1.PeAnnotation.Graph.Text[3] = "End";\par
                Pego1.PeAnnotation.Graph.Bold[3] = false;\par
\par
                // How to draw an ellipse, rectangle, or roundrect. //\par
                Pego1.PeAnnotation.Graph.X[4] = 4.5;\par
                Pego1.PeAnnotation.Graph.Y[4] = 1120;\par
                Pego1.PeAnnotation.Graph.Type[4] = (int) GraphAnnotationType.TopLeft;\par
                Pego1.PeAnnotation.Graph.Color[4] = Color.Black;\par
                Pego1.PeAnnotation.Graph.Text[4] = "";\par
                Pego1.PeAnnotation.Graph.InFront[4] = AnnotationInFront.InFront; \par
                Pego1.PeAnnotation.Graph.Shadow[4] = true;\par
\par
                Pego1.PeAnnotation.Graph.X[5] = 5.5;\par
                Pego1.PeAnnotation.Graph.Y[5] = 1020;\par
                Pego1.PeAnnotation.Graph.Type[5] = (int) GraphAnnotationType.BottomRight;\par
                Pego1.PeAnnotation.Graph.Color[5] = Color.Black;\par
                Pego1.PeAnnotation.Graph.Text[5] = "";\par
                Pego1.PeAnnotation.Graph.InFront[5] = AnnotationInFront.InFront; \par
                Pego1.PeAnnotation.Graph.Shadow[5] = true;\par
\par
                Pego1.PeAnnotation.Graph.X[6] = 5.5;\par
                Pego1.PeAnnotation.Graph.Y[6] = 1020;\par
                Pego1.PeAnnotation.Graph.Type[6] = (int) GraphAnnotationType.EllipseFill;\par
                Pego1.PeAnnotation.Graph.Color[6] = Color.FromArgb(155, 234, 123, 53);\par
                Pego1.PeAnnotation.Graph.Text[6] = "";\par
                Pego1.PeAnnotation.Graph.InFront[6] = AnnotationInFront.InFront; \par
                Pego1.PeAnnotation.Graph.Shadow[6] = true;\par
                Pego1.PeAnnotation.Graph.GradientStyle[6] = (int)Gigasoft.ProEssentials.Enums.PlotGradientStyle.RadialTopLeft;\par
\par
                // Place a polygon //'\par
                Pego1.PeAnnotation.Graph.X[7] = 6.5;\par
                Pego1.PeAnnotation.Graph.Y[7] = 1120;\par
                Pego1.PeAnnotation.Graph.Type[7] = (int) GraphAnnotationType.StartPoly;\par
                Pego1.PeAnnotation.Graph.Color[7] = Color.Black;\par
                Pego1.PeAnnotation.Graph.Text[7] = "";\par
\par
                Pego1.PeAnnotation.Graph.X[8] = 7.5;\par
                Pego1.PeAnnotation.Graph.Y[8] = 1120;\par
                Pego1.PeAnnotation.Graph.Type[8] = (int) GraphAnnotationType.AddPolyPoint;\par
                Pego1.PeAnnotation.Graph.Color[8] = Color.Black;\par
                Pego1.PeAnnotation.Graph.Text[8] = "";\par
\par
                Pego1.PeAnnotation.Graph.X[9] = 7.5;\par
                Pego1.PeAnnotation.Graph.Y[9] = 1020;\par
                Pego1.PeAnnotation.Graph.Type[9] = (int)GraphAnnotationType.EndPolygonHatchCross;  //.EndPolygon;\par
                Pego1.PeAnnotation.Graph.Color[9] = Color.FromArgb(255, 0, 0, 0);\par
                Pego1.PeAnnotation.Graph.Text[9] = "";\par
\par
                // Place a paragraph of text //'\par
                Pego1.PeAnnotation.Graph.X[10] = 0;\par
                Pego1.PeAnnotation.Graph.Y[10] = 0;\par
                Pego1.PeAnnotation.Graph.Type[10] = (int) GraphAnnotationType.StartText;\par
                Pego1.PeAnnotation.Graph.Color[10] = Color.Black;\par
                Pego1.PeAnnotation.Graph.Text[10] = "A line of text." + '\\n';\par
\par
                Pego1.PeAnnotation.Graph.X[11] = 0;\par
                Pego1.PeAnnotation.Graph.Y[11] = 0;\par
                Pego1.PeAnnotation.Graph.Type[11] = (int) GraphAnnotationType.AddText;\par
                Pego1.PeAnnotation.Graph.Color[11] = Color.Black;\par
                Pego1.PeAnnotation.Graph.Text[11] = "Col1   Col2" + '\\n';\par
\par
                Pego1.PeAnnotation.Graph.X[12] = 0;\par
                Pego1.PeAnnotation.Graph.Y[12] = 0;\par
                Pego1.PeAnnotation.Graph.Type[12] = (int) GraphAnnotationType.AddText;\par
                Pego1.PeAnnotation.Graph.Color[12] = Color.Black;\par
                Pego1.PeAnnotation.Graph.Text[12] = "on     off" + '\\n';\par
\par
                Pego1.PeAnnotation.Graph.X[13] = 7.75;\par
                Pego1.PeAnnotation.Graph.Y[13] = 1050;\par
                Pego1.PeAnnotation.Graph.Type[13] = (int) GraphAnnotationType.Paragraph;\par
                Pego1.PeAnnotation.Graph.Color[13] = Color.FromArgb(255, 88, 88, 88);\par
                Pego1.PeAnnotation.Graph.Text[13] = "";\par
                Pego1.PeAnnotation.Graph.Font[13] = "Courier New";\par
\par
                // Draw an Arrow Pointer annotation //\par
                Pego1.PeAnnotation.Graph.X[14] = 2.5;\par
                Pego1.PeAnnotation.Graph.Y[14] = 1130;\par
                Pego1.PeAnnotation.Graph.Type[14] = (int) GraphAnnotationType.PointerArrowMedium;\par
                Pego1.PeAnnotation.Graph.Color[14] = Color.FromArgb(255, 0, 198, 198);\par
                Pego1.PeAnnotation.Graph.Text[14] = "Move toward Start";\par
                Pego1.PeAnnotation.Graph.Shadow[14] = true;\par
\par
                // Draw an Arrow annotation //\par
                Pego1.PeAnnotation.Graph.X[15] = 1.5;\par
                Pego1.PeAnnotation.Graph.Y[15] = 1250;\par
                Pego1.PeAnnotation.Graph.Type[15] = (int) GraphAnnotationType.ThinSolidLine;\par
                Pego1.PeAnnotation.Graph.Color[15] = Color.FromArgb(128, 128, 200, 198);\par
                Pego1.PeAnnotation.Graph.Text[15] = "";\par
\par
                Pego1.PeAnnotation.Graph.X[16] = 2.5;\par
                Pego1.PeAnnotation.Graph.Y[16] = 1290;\par
                Pego1.PeAnnotation.Graph.Type[16] = (int) GraphAnnotationType.ArrowSolidSmall;\par
                Pego1.PeAnnotation.Graph.Color[16] = Color.FromArgb(128, 128, 200, 198);\par
                Pego1.PeAnnotation.Graph.Text[16] = "";\par
\par
                // Place a symbol on right y axis //\par
                Pego1.PeAnnotation.Graph.X[17] = 11.5;\par
                Pego1.PeAnnotation.Graph.Y[17] = 900;\par
                Pego1.PeAnnotation.Graph.Type[17] = (int) GraphAnnotationType.SmallDotSolid + 1000; // 1000 designates right y axis\par
                Pego1.PeAnnotation.Graph.Color[17] = Color.FromArgb(255, 88, 88, 88);\par
                Pego1.PeAnnotation.Graph.Text[17] = "900 Right Axis";\par
                Pego1.PeAnnotation.Graph.GradientStyle[17] = (int)Gigasoft.ProEssentials.Enums.PlotGradientStyle.RadialTopLeft;\par
                Pego1.PeAnnotation.Graph.Shadow[17] = true;\par
\par
                // Draw Angled Text Annotation //\par
                Pego1.PeAnnotation.Graph.X[18] = 1.5;\par
                Pego1.PeAnnotation.Graph.Y[18] = 1250;\par
                Pego1.PeAnnotation.Graph.Type[18] = (int) GraphAnnotationType.NullPen;\par
                Pego1.PeAnnotation.Graph.Color[18] = Color.FromArgb(0, 0, 0, 0);\par
                Pego1.PeAnnotation.Graph.Text[18] = "";\par
\par
                Pego1.PeAnnotation.Graph.X[19] = 2.5;\par
                Pego1.PeAnnotation.Graph.Y[19] = 1290;\par
                Pego1.PeAnnotation.Graph.Type[19] = (int) GraphAnnotationType.AngledText;\par
                Pego1.PeAnnotation.Graph.Color[19] = Color.FromArgb(255, 88, 88, 88);\par
                Pego1.PeAnnotation.Graph.Text[19] = "Hello";\par
\par
                // Show annotations shadows //\par
                Pego1.PeAnnotation.Graph.ShowShadows = true;\par
\par
                // Allow user to move ArrowPointer annotation //\par
                Pego1.PeAnnotation.Graph.Moveable = true;\par
                Pego1.PeUserInterface.HotSpot.GraphAnnotation = AnnotationHotSpot.GraphOnly;\par
\par
                // Other various properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkInset;\par
\par
                // Generally call ReinitializeResetImage at end **'\par
                Pego1.PeFunction.ReinitializeResetImage();\par
\par
            \}\par
            else if(MainWindow.m_nChart == 16)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //016  Graph showing date time handling\par
\par
                //! This examples shows Date/Time handling vith the Graph Object.\par
                //! The Graph is suited to show discontinuous date/time scales.\par
                //! Discontinuous for example, 8am to 5pm, Monday to Friday.\par
\par
                //! Here's a tip, when debugging your data-passing logic, use the\par
                //! built-in text export feature to verify that data is as\par
                //! expected.\par
\par
                // Enable Manipulation and Mouse Wheel Zoom Smoothing //\par
                Pego1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 5;\par
                Pego1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                Pego1.PeUserInterface.Scrollbar.MouseWheelZoomFactor = 1.4f;\par
                Pego1.PeUserInterface.Scrollbar.PinchZoomFactor = 1.15F;\par
\par
                // Enable MouseWheel Zooming\par
                Pego1.PeUserInterface.Scrollbar.MouseWheelFunction = MouseWheelFunction.HorizontalZoom;\par
\par
                // Enable ZoomWindow Feature //\par
                Pego1.PePlot.ZoomWindow.Show = true;\par
\par
                // Enable middle mouse dragging //\par
                Pego1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pego1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // v7.2 new features //\par
                Pego1.PePlot.Option.AreaBorder = 1;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                Pego1.PeData.Subsets = 2;\par
                Pego1.PeData.Points = 60000;\par
\par
                // Set Date Time Handling related properties //\par
                Pego1.PeData.DeltaX = 5;         // 5 minutes between data points\par
                Pego1.PeData.DeltasPerDay = 96;  // 96 data points in one day\par
                Pego1.PeData.StartTime = 0.3333333333334; // 8 am\par
                Pego1.PeData.UsingXDataii = true;\par
                Pego1.PeData.Filter2D = Filter2D.Fastest; \par
\par
                double d;\par
                Int32 i = 0;\par
                Int32 p;\tab\tab\tab\tab\par
\par
                d = DateTime.Now.ToOADate() - 700;\tab\tab\tab\tab\par
\par
                // PreAllocates memory, best to use PEvset like in exp 018 but for simplicity we spoon feed.\par
                // Setting last point first helps spoon feeding large data sets.\par
                Pego1.PeData.Xii[0, 59999] = 0; // Note pego xdata datetimemode only uses 1 subset, thus index 0\par
                Pego1.PeData.Y[1, 59999] = 0;   // ydata uses 2 subsets, thus last point is index 1, point 59999\par
\par
                d = System.Convert.ToInt32(d);\par
\par
                for(p = 0; p <= 59999; p++)\par
                \{\par
                    Pego1.PeData.Y[0, p] = (float)(55 + ((Rand_Num.NextDouble()) * 55) + (System.Math.Sin(p * 0.0003) * 500));\par
                    Pego1.PeData.Y[1, p] = (float)(5 + ((Rand_Num.NextDouble()) * 55) + (System.Math.Sin(p * 0.003) * 400));\par
\par
                    //! Make sure your XData is constructed so that every XData is\par
                    //! DeltaX apart and there are DeltasPerDay worth of data points\par
                    //! in each day. Well, at least for intraday data.  Daily/Weekly/Monthly\par
                    //! data is much easier to work with.\par
\par
                    //! Also note that if you do not set XData, ProEssentials will\par
                    //! automatically construct your XData with respect to the\par
                    //! AutoXData, DeltaX, StartTime, and DeltasPerDay properties.\par
\par
                    // Construct XDataII to match parameters above //\par
\par
                    Pego1.PeData.Xii[0, p] = d + 0.333333333333333 + (((i * 5.0) / 60.0) / 24.0);\par
                    // every 5 minutes, 60 minutes in an hour, 24 hours in a day\par
\par
                    i = i + 1;\par
                    if(i >= 96)\par
                    \{\par
                        i = 0;\par
                        d = d + 1;\par
                    \}\par
                \}\par
\par
                // This empties PointLabels array and invokes virtual point labels //\par
                // which are the point number.\par
                Pego1.PeData.PointLabels[-1] = "0";\par
\par
                // You can modify date label formats with //\par
                Pego1.PeGrid.Option.YearMonthDayPrompt = YearMonthDayPrompt.InsideTop;\par
\par
                // Optional related properties ...\par
                // PeGrid.Option.TimeLabelType\par
                // PeGrid.Option.DayLabelType\par
                // PeGrid.Option.MonthLabelType\par
                // PeGrid.Option.YearLabelType\par
\par
                // Enable DateTimeMode //\par
                Pego1.PeData.DateTimeMode = true;\par
\par
                // Enable Zooming, zoom the chart and see how structure //\par
                // of x axis changes as you zoom //\par
                Pego1.PeUserInterface.Allow.Zooming = AllowZooming.Horizontal;\par
\par
                // Set various properties //\par
                Pego1.PeConfigure.PrepareImages = true;\par
                Pego1.PePlot.DataShadows = DataShadows.None;\par
                Pego1.PeGrid.LineControl = GridLineControl.Both;\par
                Pego1.PeUserInterface.Allow.FocalRect = false;\par
                Pego1.PeFont.Fixed = true;\par
                Pego1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightLine;\par
\par
                Pego1.PePlot.Option.LineShadows = false;\par
                Pego1.PeFont.MainTitle.Bold = true;\par
                Pego1.PeFont.SubTitle.Bold = true;\par
                Pego1.PeFont.Label.Bold = true;\par
                Pego1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pego1.PeFont.FontSize = FontSize.Medium;\par
                Pego1.PeUserInterface.Scrollbar.ScrollingScaleControl = true;\par
\par
                Pego1.PePlot.Method = GraphPlottingMethod.Area;\par
                Pego1.PePlot.Option.SolidLineOverArea = 1;\par
                Pego1.PePlot.Option.HiddenLinesInArea = false;\par
\par
                Pego1.PeColor.SubsetColors[0] = Color.FromArgb(175, 198, 0, 0);\par
                Pego1.PeColor.SubsetColors[1] = Color.FromArgb(85, 0, 0, 198);\par
\par
                Pego1.PePlot.Option.NullDataGaps = false;\par
                Pego1.PePlot.Option.SubsetGradientStyle[0] = (int)Gigasoft.ProEssentials.Enums.PlotGradientStyle.RadialTopLeft;\par
                Pego1.PePlot.Option.SubsetGradientStyle[1] = (int)Gigasoft.ProEssentials.Enums.PlotGradientStyle.RadialBottomRight;\par
                Pego1.PeLegend.Show = false;\par
                Pego1.PeString.MainTitle = "Zoom Gradually inward and study x axis"; \par
                Pego1.PeString.SubTitle = "repeat using popup menu to adjust x axis point labels vertical";\par
                Pego1.PeString.XAxisLabel = "Zoom Gradually inward and study x axis";\par
\par
                // Set various export defaults //\par
                Pego1.PeSpecial.DpiX = 600;\par
                Pego1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pego1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pego1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pego1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pego1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pego1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pego1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                // v9 features\par
                Pego1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pego1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pego1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
                Pego1.PeUserInterface.Cursor.TrackingTooltipMaxWidth = 100;\par
\par
                Pego1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pego1.PeConfigure.AntiAliasGraphics = true;\par
                Pego1.PeConfigure.AntiAliasText = true;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 17)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //017  Graph showing real-time data handling\par
\par
                //! If RenderEngine is not Direct2D, use BitmapGradientMode=False for max speed.\par
                //! See Timer section below that includes update logic\par
\par
                // No Shadows //\par
                Pego1.PePlot.DataShadows = DataShadows.None;\par
\par
                // No Flicker //\par
                Pego1.PeConfigure.PrepareImages = true;\par
                Pego1.PeConfigure.CacheBmp = true;\par
\par
                // Set Subsets and Points //\par
                Pego1.PeData.Subsets = 2;\par
                Pego1.PeData.Points = 200;\par
\par
                Pego1.PeUserInterface.Scrollbar.PointsToGraph = 200; // set to lower number to show earliest \par
                Pego1.PeUserInterface.Scrollbar.PointsToGraphInit = PointsToGraphInit.Last;\par
                Pego1.PePlot.Method = GraphPlottingMethod.Point;\par
\par
                // subset line types //\par
                Pego1.PeLegend.SubsetLineTypes[0] = LineType.ThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[1] = LineType.ThinSolid;\par
\par
                // subset point types //\par
                Pego1.PeLegend.SubsetPointTypes[0] = PointType.SquareSolid;\par
                Pego1.PeLegend.SubsetPointTypes[1] = PointType.Plus;\par
\par
                // Not ideal for real-time, but nice for presentation/demonstration \par
                Pego1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pego1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
\par
                // Main Title\par
                Pego1.PeString.MainTitle = "Simple Graph Real Time";\par
                Pego1.PeString.SubTitle = "";\par
\par
                // Manually configure scales //\par
                Pego1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
\par
                Pego1.PeGrid.Configure.ManualMinY = 1.0;\par
                Pego1.PeGrid.Configure.ManualMaxY = 100.0;\par
                Pego1.PeGrid.Configure.ManualMinY = 1.0;\par
                Pego1.PeGrid.Configure.ManualMaxDataString = "000.000";\par
                Pego1.PeGrid.Configure.ManualMaxPointLabel = "00:00:00xx";\par
\par
                Pego1.PePlot.Allow.StackedData = false;\par
                Pego1.PeUserInterface.Dialog.PointsToGraph = false;\par
                Pego1.PePlot.Allow.Histogram = false;\par
                Pego1.PeUserInterface.Allow.FocalRect = false;\par
                Pego1.PeGrid.LineControl = GridLineControl.Both;\par
                Pego1.PeData.Precision = DataPrecision.OneDecimal;\par
\par
                // Needed to allocate point labels so append logic works //\par
                // Set last point label, Points - 1 //\par
                Pego1.PeString.PointLabels[199] = "";\par
\par
                // Reset first four default data points\par
                Pego1.PeData.Y[0, 0] = 0;\par
                Pego1.PeData.Y[0, 1] = 0;\par
                Pego1.PeData.Y[0, 2] = 0;\par
                Pego1.PeData.Y[0, 3] = 0;\par
\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                Pego1.PeFont.Fixed = true;\par
                Pego1.PeFont.MainTitle.Bold = true;\par
                Pego1.PeFont.SubTitle.Bold = true;\par
                Pego1.PeFont.Label.Bold = true;\par
                Pego1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pego1.PeFont.FontSize = FontSize.Medium;\par
                Pego1.PeGrid.Style = GridStyle.Dot; \par
\par
                Pego1.PeColor.SubsetColors[0] = Color.FromArgb(255, 0, 198, 0);\par
                Pego1.PeColor.SubsetColors[1] = Color.FromArgb(255, 145, 145, 145);\par
\par
                Pego1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pego1.PeConfigure.AntiAliasGraphics = true;\par
                Pego1.PeConfigure.AntiAliasText = true;\par
                \par
                // Set various export defaults //\par
                Pego1.PeSpecial.DpiX = 600;\par
                Pego1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pego1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pego1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pego1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pego1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pego1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pego1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                MainWindow.Timer1.Interval = 25;\par
                MainWindow.Timer1.Enabled = true;\par
                MainWindow.Timer1.Start();\par
\par
                /*///////////////////////////////////////////////////////\par
                // the following code can be found in the Timer Event //\par
                ////////////////////////////////////////////////////////\par
                // new point label //\par
                CurrentTime = DateTime.Now.Hour.ToString() + ":" + DateTime.Now.Minute.ToString() + ":" + DateTime.Now.Second.ToString();\par
\par
                // Changing this variable increases throughput to chart, try 1, 10, 20, to 200\par
                int nAmountToUpdate = 1;\par
\par
                // new YData //\tab\tab\tab\tab\par
                float[] NewData = new float[2 * nAmountToUpdate];\par
\par
                for (int t = 0; t < nAmountToUpdate; t++)\par
                \{\par
                    // note this is subset 0 data\par
                    NewData[t] = ((float)(Rand_Num.NextDouble()) * 60) + 2;\par
                    NewData[t + 1] = ((float)(Rand_Num.NextDouble()) * 60) + 2;\par
\par
                    // note this is subset 1 data, offset by nAmountToUpdate index as first subset data preceeds second subset data\par
                    NewData[nAmountToUpdate] = ((float)(Rand_Num.NextDouble()) * 90) + 2;\par
                    NewData[nAmountToUpdate + t] = ((float)(Rand_Num.NextDouble()) * 90) + 2;\par
                \}\par
\par
                // transfer new point label //\par
                for (int t = 0; t < nAmountToUpdate; t++)\par
                    Gigasoft.ProEssentials.Api.PEvsetW(Pego1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendPointLabelData, CurrentTime, 1);\par
\par
                // transfer new YData //\par
                // this will also update and view new image //\par
                // Note last argument is nAmountToUpdate, it will look for 2 subsets worth or 2 * nAmountToUpdate\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pego1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendYData, NewData, nAmountToUpdate);\par
\par
                //////////////////////////////////////////////////////////////////'\par
                // To alter this code (case 17) to cause appended data to come  //'\par
                // from a server, comment out all above code and replace with   //'\par
                // code below. See the main ReadMe file for instructions on     //'\par
                // creating the Virtual Directory Pe8WebDemo so web demo runs.  //'\par
                // For more info, see Chapter 1 Pedo ProEssentials Data Object  //'\par
                //////////////////////////////////////////////////////////////////'\par
                //Pego1.PeData.Pedo.AppendFromURL("http://localhost/Pe8WebDemo/IEStripChart/WebForm3.aspx");\par
\par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 18)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //018  Graph showing use of PEvset\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Repass the data, this time with PEvset call //\par
                float[] MyYData = new float[48]; // 4 * 12 = 48\tab\tab\tab\tab\par
                Int32 o, p, s;\par
\par
                for(s=0; s<4; s++)\par
                \{\par
                    for(p=0; p<12; p++)\par
                    \{\par
                        o = (s * 12) + p; // 12 = Points property\par
                        MyYData[o] = 5 + ((float)(Rand_Num.NextDouble()) * 10);\par
                    \}\par
                \}\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pego1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, MyYData, 48);\par
            \}\par
            else if(MainWindow.m_nChart == 19)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //019  Graph showing large quantity of data\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Enable Manipulation and Mouse Wheel Zoom Smoothing //\par
                Pego1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 5;\par
                Pego1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                Pego1.PeUserInterface.Scrollbar.MouseWheelZoomFactor = 1.2f;\par
                Pego1.PeUserInterface.Scrollbar.PinchZoomFactor = 1.1F;\par
\par
                // Enable MouseWheel Zooming\par
                Pego1.PeUserInterface.Scrollbar.MouseWheelFunction = MouseWheelFunction.HorizontalZoom;\par
\par
                // Disable some features not ideal for larger data sets.\par
                Pego1.PePlot.Option.PointGradientStyle = PlotGradientStyle.NoGradient;\par
                Pego1.PeColor.PointBorderColor = Color.FromArgb(0, 0, 0, 0);\par
                Pego1.PePlot.Option.LineSymbolThickness = 0;\par
\par
                // Enable ZoomWindow '\par
                Pego1.PePlot.ZoomWindow.Show = true;\par
                \par
                // Re pass the data, this time with PEvset call //\par
                Pego1.PeData.Subsets = 1;\par
                Pego1.PeData.Points = 100000;\par
\par
                // Prepare data in temp array, make sure it is Single (4 byte floats) **'\tab\tab\tab\tab\par
                float[] MyYData = new float[100000];\par
                Int32 j, k;\par
                for(j = 0; j < 100000; j++)\par
                    MyYData[j] = (float)(System.Math.Sin(0.0003 * j) * 500.0);\par
\par
                // Change some of the data so we can see some //'\par
                // variations in data //'\tab\tab\tab\tab\par
                for(j = 0; j < 100000; j+=10000)\par
                \{\tab\tab\tab\tab\tab\par
                    for(k = 0; k <= 5000; k++)\par
                        MyYData[j + k] = MyYData[j + k] - 50 + ((float)(Rand_Num.NextDouble()) * 100);\par
                \}\par
\par
                // Perform the actual transfer of data //'\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pego1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, MyYData, 100000);\par
\par
                // This empties PointLabels array and invokes virtual point labels //'\par
                // which are the point number.\par
                Pego1.PeString.PointLabels[-1] = "0";\par
\par
                // Set plotting method to line and allow zooming //'\par
                Pego1.PePlot.Method = GraphPlottingMethod.Line;\par
                Pego1.PeUserInterface.Allow.Zooming = AllowZooming.Horizontal;\par
                Pego1.PeUserInterface.Dialog.PlotCustomization = false;\par
\par
                // This allows plotting of zero values //'\par
                Pego1.PeData.NullDataValue = -99999;\par
\par
                Pego1.PeLegend.SubsetLineTypes[0] = LineType.ThinSolid;\par
\par
                Pego1.PePlot.MarkDataPoints = false;\par
\par
                Pego1.PeColor.BitmapGradientMode = false;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightShadow;\par
                Pego1.PePlot.DataShadows = DataShadows.None;\par
                Pego1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pego1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                Pego1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 20)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //020  Graph showing Real-Time PEpartialresetimage\par
\par
                //! Rarely needed but can help when application needs many charts, each with many points, all updating.\par
\par
                // No Flicker //\par
                Pego1.PeConfigure.PrepareImages = true;\par
                Pego1.PeConfigure.CacheBmp = true;        //! Important for PartialResetImage to work.\par
\par
                Pego1.PeSpecial.AutoImageReset = false;   //! Also important for this type of real-time\par
                Pego1.PeData.SpeedBoost = 0;\par
                Pego1.PeUserInterface.Cursor.HourGlassThreshold = 40000;\par
\par
                // Set Subsets and Points //\par
                Pego1.PeData.Subsets = 2;\par
                Pego1.PeData.Points = 15000;\par
\par
                // Pass 80% of the data, first one subset, then next subset //\tab\tab\tab\tab\par
                float[] MyYData = new float[12000];\par
                Int32 p;\par
\par
                for(p=0; p<12000; p++)\par
                    MyYData[p] = (float)((System.Math.Sin(0.003 * p) * 500.0) + ((Rand_Num.NextDouble()) * 50));\par
\par
                // Perform the actual transfer of data, first subset //\par
                float dat = 0;\par
                Gigasoft.ProEssentials.Api.PEvsetEx(Pego1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, 0, 12000, MyYData, ref dat);\par
\par
                Random New_Rand = new Random(unchecked((int)DateTime.Now.Ticks));\par
\par
                for(p=0; p<12000; p++ )\par
                    MyYData[p] = (float)((System.Math.Cos(0.003 * p) * 500.0) + ((float)(New_Rand.NextDouble()) * 50));\par
\par
                // Perform the actual transfer of data, second subset //\par
                Gigasoft.ProEssentials.Api.PEvsetEx(Pego1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, 15000, 12000, MyYData, ref dat);\par
\par
                // Setting last point label first allocates memory and speeds up subsequent logic //'\par
                Pego1.PeString.PointLabels[11999] = " ";\par
\par
                for(p=0; p<12000; p++)\par
                    Pego1.PeString.PointLabels[p] = "Test" + System.Convert.ToString(p + 1);\par
\par
                // Set up two axes, just because it's easy ///\par
                Pego1.PeGrid.MultiAxesSubsets[0] = 1;\par
                Pego1.PeGrid.MultiAxesSubsets[1] = 1;\par
                Pego1.PeGrid.Option.MultiAxisStyle = MultiAxisStyle.SeparateAxes;\par
\par
                // Manually configure top scale scale //\par
                Pego1.PeGrid.WorkingAxis = 0;\par
                Pego1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pego1.PeGrid.Configure.ManualMinY = -600;\par
                Pego1.PeGrid.Configure.ManualMaxY = 600;\par
\par
                // Manually configure bottom scale scale //\par
                Pego1.PeGrid.WorkingAxis = 1;\par
                Pego1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pego1.PeGrid.Configure.ManualMinY = -600;\par
                Pego1.PeGrid.Configure.ManualMaxY = 600;\par
\par
                // Real-Time related properties for Graph Objects //\par
                Pego1.PeGrid.Configure.ManualMaxPointLabel = "Test XXXXXXX";\par
                Pego1.PeGrid.Configure.ManualMaxDataString = "12345";\par
\par
                // Set Various Other Properties //\par
                Pego1.PeString.MainTitle = "Graph Real Time Example";\par
                Pego1.PeString.SubTitle = ""; // no subtitle\par
                Pego1.PePlot.Method = GraphPlottingMethod.Line;\par
                Pego1.PeUserInterface.Menu.PlotMethod = MenuControl.Hide;\par
                Pego1.PeUserInterface.Dialog.PlotCustomization = false;\par
                Pego1.PeUserInterface.Allow.FocalRect = false;\par
                Pego1.PeData.Precision = DataPrecision.OneDecimal;\par
                Pego1.PeFont.Fixed = true;\par
                Pego1.PeFont.FontSize = FontSize.Medium;\par
\par
                Pego1.PeLegend.SubsetLineTypes[0] = LineType.ThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[1] = LineType.ThinSolid;\par
\par
                Pego1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pego1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                Pego1.PeColor.SubsetColors[0] = Color.FromArgb(255, 0, 198, 0);\par
                Pego1.PeColor.SubsetColors[1] = Color.FromArgb(255, 198, 0, 198);\par
\par
                Pego1.PeLegend.Style = LegendStyle.OneLineInsideAxis;\par
                Pego1.PeGrid.LineControl = GridLineControl.YAxis;\par
                Pego1.PeUserInterface.Allow.MultiAxesSizing = true;\par
                Pego1.PeConfigure.BorderTypes = TABorder.Inset;\par
                Pego1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.FramedRect; \par
\par
                // Set various export defaults //\par
                Pego1.PeSpecial.DpiX = 600;\par
                Pego1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pego1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pego1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pego1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pego1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pego1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pego1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pego1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pego1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                MainWindow.m_nRealTimeCounter = 12000;\par
                MainWindow.m_nSinCounter = 12000;\par
\par
                MainWindow.Timer1.Interval = 50;\par
                MainWindow.Timer1.Start();\par
\par
                /*///////////////////////////////////////////////////////\par
                // the following code can be found in the Timer Event //\par
                ////////////////////////////////////////////////////////\par
\par
                // Graph Real Time Feed using PEpartialresetimage //\par
\par
                if( m_nRealTimeCounter >= 15000)\par
                \{\tab\tab\tab\tab\tab\par
                    // When we reach the end of our data, we shift 20% to the\par
                    // left and make room for another 3000 quick updates.\par
                    float[] dat = new float[6000];\par
                    Gigasoft.ProEssentials.Api.PEvset(Pego1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendPointLabelData, dat, 3000);\par
                    Gigasoft.ProEssentials.Api.PEvset(Pego1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendYData, dat, 3000);\par
\par
                    // We need to perform a complete image update here.\par
                    Pego1.PeFunction.ResetImage(0, 0);\par
                    Pego1.Invalidate();\par
                    Pego1.Update();\par
\par
                    m_nRealTimeCounter = 12000;\par
                \}\par
\par
                // First Subset //\par
                Pego1.PeData.Y[0, m_nRealTimeCounter] = (float)((System.Math.Sin(0.003 * m_nSinCounter) * 500.0));\par
\par
                // Second Subset //\par
                Pego1.PeData.Y[1, m_nRealTimeCounter] = (float)((System.Math.Cos(0.003 * m_nSinCounter) * 500.0));\par
\par
                // Set an example string associated with data //\par
                Pego1.PeString.PointLabels[m_nRealTimeCounter] = "Test" + System.Convert.ToString(m_nSinCounter);\par
\par
                // This call performs a quick partial draw to an internal cached bmp //'\par
                Pego1.PeFunction.PartialResetImage(m_nRealTimeCounter, 1);\par
\par
                // Invalidate control, only invalidate vertical charting area and\par
                // approximate horizontal location of new data added.\par
                Int32 nA, nX=0, nY=0, nTop, nLeft, nRight, nBottom;\par
                Double fX, fY;            \par
                System.Drawing.Rectangle rc;           \par
                System.Drawing.Rectangle rect;\par
\par
                nA = 0;    // Initialize axis, non-zero only if using MultiAxesSubsets\par
                fX = m_nRealTimeCounter - 5.0;  // Approximate horizontal location\par
                fY = 0;     // not important, we will user vertical extents from PEP_rectGRAPH\par
\par
                // This call finds pixel location for fX and fY graph coordinates //'\par
                Pego1.PeFunction.ConvPixelToGraph(ref nA,ref nX,ref nY,ref fX,ref fY, false, false, true);\par
\par
                // get vertical extents of charting area //'\par
                rect = Pego1.PeFunction.GetRectGraph();\par
                nTop = rect.Top;\par
                nLeft = rect.Left;\par
                nRight = rect.Right;\par
                nBottom = rect.Bottom;\par
                nLeft = nX;\par
                nRight = nX + 50;  // 50 pixels close to new data location\par
\par
                // For comparison purposes, you can uncomment the line below //\par
                // Calling PEresetimage with each timer event causes CPU usage to go to 100%\par
                // PEpartialresetimage allows the same visual output while using 2% or less of the CPU\par
                //--- Pego1.PeFunction.ResetImage(0, 0)\par
\par
                rc = new System.Drawing.Rectangle(nLeft, nTop, (nRight - nLeft), (nBottom - nTop));\par
                Pego1.Invalidate(rc);\par
\par
                m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
                m_nSinCounter = m_nSinCounter + 1;\par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 21)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //021  Graph showing Hatching\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                Pego1.PePlot.SubsetHatch[0] = HatchType.BDiagonal;\par
                Pego1.PePlot.SubsetHatch[1] = HatchType.Cross;\par
                Pego1.PePlot.SubsetHatch[2] = HatchType.DiagonalCross;\par
                Pego1.PePlot.SubsetHatch[3] = HatchType.FDiagonal;\par
\par
                // Set Other Various Properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pego1.PeConfigure.BorderTypes = TABorder.SingleLine;\par
\par
                // Enable Stacked type charts //\par
                Pego1.PePlot.Allow.StackedData = true;\par
\par
                // Set plotting method //\par
                Pego1.PePlot.Method = GraphPlottingMethod.BarStacked;\par
                Pego1.PeColor.HatchBackColor = Color.FromArgb(25, 0, 0, 0);\par
                Pego1.PePlot.DataShadows = DataShadows.None;\par
                Pego1.PePlot.Option.BarGlassEffect = false;\par
\par
                // subset colors //\par
                Pego1.PeColor.SubsetColors[0] = Color.FromArgb(228, 198, 0, 0);\par
                Pego1.PeColor.SubsetColors[1] = Color.FromArgb(228, 0, 198, 198);\par
                Pego1.PeColor.SubsetColors[2] = Color.FromArgb(228, 198, 198, 0);\par
                Pego1.PeColor.SubsetColors[3] = Color.FromArgb(228, 0, 198, 0);\par
\par
                // Add a table //\par
                Pego1.PeTable.Show = GraphPlusTable.Both;\par
                Pego1.PeData.Precision = 0;\par
            \}\par
            else if(MainWindow.m_nChart == 22)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //022  Graph Mixing Plotting Methods per Subset\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Set plotting method per subset //\par
                Pego1.PePlot.Methods[0] = GraphPlottingMethods.HighLowArea;\par
                Pego1.PePlot.Methods[1] = GraphPlottingMethods.HighLowArea;\par
                Pego1.PePlot.Methods[2] = GraphPlottingMethods.Line;\par
                Pego1.PePlot.Methods[3] = GraphPlottingMethods.Bar;\par
\par
                // Set High/Low Labels //\par
                Pego1.PeString.SubsetLabels[0] = "High";\par
                Pego1.PeString.SubsetLabels[1] = "Low";\par
\par
                // Set Other Various Properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightLine;\par
\par
                // Make the line types bold //\par
                Pego1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[2] = LineType.ThickDot;\par
                Pego1.PePlot.MarkDataPoints = true;\par
\par
                // Change the Bar's color //\par
                Pego1.PeColor.SubsetColors[3] = Color.FromArgb(32, 0, 0, 150);\par
\par
                // Add a table //\par
                Pego1.PeTable.Show = GraphPlusTable.Both;\par
                Pego1.PeData.Precision = 0;\par
            \}\par
            else if(MainWindow.m_nChart == 23)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //023  Graph Showing Bitmap and Gradients\par
\par
                //! Top image is Tiled within axis area. //\par
                //! Bottom image is StretchBlt'ed within axis area. //\par
                //! Click bottom of top axis and drag to resize axes. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.Desk = Color.FromArgb(0,1,0,0);  // Empty equiv\par
                Pego1.PeColor.DeskGradientStart = Color.FromArgb(255, 0, 0, 110);\par
                Pego1.PeColor.DeskGradientEnd = Color.FromArgb(255, 0, 0, 220);\par
                Pego1.PeColor.DeskGradientStyle = GradientStyle.Vertical;\par
                Pego1.PeColor.DeskBmpFilename = System.AppDomain.CurrentDomain.BaseDirectory + "gigasoft.jpg";\par
                Pego1.PeColor.DeskBmpStyle = BitmapStyle.BitBltTopRight;\par
\par
                // Now sub-divide subsets into 2 individual axes //\par
                // Each axis with a bitmap //\par
                Pego1.PeData.Subsets = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[0] = 1;\par
                Pego1.PeGrid.MultiAxesSubsets[1] = 1;\par
                Pego1.PeLegend.Style = LegendStyle.OneLineInsideAxis;\par
\par
                Pego1.PeGrid.InFront = true;\par
                Pego1.PeColor.GridBold = true;\par
\par
                // Set first axis parameters //\par
                Pego1.PeGrid.WorkingAxis = 0;\par
                Pego1.PeColor.GraphBackground = Color.FromArgb(0, 1, 0, 0); // Empty equiv\par
                Pego1.PeColor.GraphBmpFilename = System.AppDomain.CurrentDomain.BaseDirectory + "darkcir.jpg";\par
                Pego1.PeColor.GraphBmpStyle = BitmapStyle.TiledBitBlt;\par
\par
                Pego1.PeString.YAxisLabel = "Research";\par
                Pego1.PeString.SubsetLabels[0] = Pego1.PeString.YAxisLabel;\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusSpline;\par
\par
                // Set second axis parameters //\par
                Pego1.PeGrid.WorkingAxis = 1;\par
                Pego1.PeColor.GraphBackground = Color.FromArgb(0, 1, 0, 0); // Empty equiv\par
                Pego1.PeColor.GraphBmpFilename = System.AppDomain.CurrentDomain.BaseDirectory + "demo2.png";\par
                Pego1.PeColor.GraphBmpStyle = BitmapStyle.StretchBlt;\par
\par
                Pego1.PeString.YAxisLabel = "Reward";\par
                Pego1.PeString.SubsetLabels[1] = Pego1.PeString.YAxisLabel;\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusSpline;\par
\par
\par
                // Reset WorkingAxis when done //\par
                Pego1.PeGrid.WorkingAxis = 0;\par
\par
                // Set Various Other Properties //\par
                Pego1.PeString.MainTitle = "";\par
                Pego1.PeString.SubTitle = "";\par
\par
                // Add some padding around image //\par
                Pego1.PeConfigure.ImageAdjustTop = 650;\par
                Pego1.PeConfigure.ImageAdjustBottom = 100;\par
                Pego1.PeConfigure.ImageAdjustLeft = 100;\par
                Pego1.PeConfigure.ImageAdjustRight = 100;\par
\par
                Pego1.PeColor.TickColor = Color.FromArgb(0,1,0,0); // Empty equiv\par
                Pego1.PePlot.DataShadows = DataShadows.ThreeDimensional;\par
                Pego1.PeColor.GraphForeground = Color.FromArgb(255, 128, 128, 128);\par
\par
                // Make the line types bold //\par
                Pego1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[2] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[3] = LineType.MediumSolid;\par
\par
                Pego1.PeGrid.Option.MultiAxisStyle = MultiAxisStyle.SeparateAxes;\par
                Pego1.PeUserInterface.Allow.MultiAxesSizing = true;\par
\par
                Pego1.PeFont.FontSize = FontSize.Large; \par
\par
            \}\par
            else if(MainWindow.m_nChart == 24)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //024  Graph showing Background Bitmap\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.Desk = Color.FromArgb(0,1,0,0);  // Empty\par
                Pego1.PeColor.DeskBmpFilename = System.AppDomain.CurrentDomain.BaseDirectory + "cloud.jpg";\par
                Pego1.PeColor.DeskBmpStyle = BitmapStyle.TiledBitBlt;\par
                Pego1.PeColor.GraphForeground = Color.FromArgb(255, 0, 0, 0);\par
                Pego1.PeColor.Text = Color.Black;\par
\par
                // Now sub-divide subsets into 2 axes //\par
                // Each axis to be transparent //\par
                Pego1.PeGrid.MultiAxesSubsets[0] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[1] = 2;\par
                Pego1.PeLegend.Style = LegendStyle.OneLineInsideAxis;\par
                Pego1.PeUserInterface.Allow.MultiAxesSizing = true;\par
\par
                // Set first axis parameters //\par
                Pego1.PeGrid.WorkingAxis = 0;\par
                Pego1.PeString.YAxisLabel = "";\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusLine;\par
                Pego1.PeColor.GraphBackground = Color.FromArgb(0,1,0,0);\par
                Pego1.PeColor.GraphGradientStyle = GradientStyle.NoGradient;\par
\par
                // Set second axis parameters //\par
                Pego1.PeGrid.WorkingAxis = 1;\par
                Pego1.PeString.YAxisLabel = "";\par
                Pego1.PePlot.Method = GraphPlottingMethod.Bar;\par
                Pego1.PeColor.GraphBackground = Color.FromArgb(0,1,0,0);  // Empty\par
                Pego1.PeColor.GraphGradientStyle = GradientStyle.NoGradient;\par
\par
                // Reset WorkingAxis when done //\par
                Pego1.PeGrid.WorkingAxis = 0;\par
\par
                // Set Various Other Properties //\par
                Pego1.PeString.MainTitle = "";\par
                Pego1.PeString.SubTitle = "";\par
                Pego1.PeGrid.Option.MultiAxisStyle = MultiAxisStyle.SeparateAxes;\par
\par
                Pego1.PeColor.TickColor = Color.FromArgb(0,1,0,0); // Empty so use GraphForeColor\par
                Pego1.PePlot.DataShadows = DataShadows.ThreeDimensional;\par
                Pego1.PeFont.Fixed = true;\par
                Pego1.PeFont.MainTitle.Bold = true;\par
                Pego1.PeFont.Label.Bold = true;\par
                Pego1.PeConfigure.BorderTypes = TABorder.NoBorder;\par
                Pego1.PePlot.PointSize = PointSize.Large;\par
                Pego1.PeGrid.LineControl = GridLineControl.Both;\par
                Pego1.PeGrid.Style = GridStyle.Dot;\par
\par
                // Make the line types bold //\par
                Pego1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[2] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[3] = LineType.MediumSolid;\par
\par
                // Add some padding around image //\par
                Pego1.PeConfigure.ImageAdjustTop = 100;\par
                Pego1.PeConfigure.ImageAdjustBottom = 100;\par
                Pego1.PeConfigure.ImageAdjustLeft = 100;\par
                Pego1.PeConfigure.ImageAdjustRight = 100;\par
\par
                Pego1.PeTable.Show = GraphPlusTable.Graph ;\par
            \}\par
            else if(MainWindow.m_nChart == 25)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //025  Graph showing Floating Stacked Bars\par
\par
                //! Try this... Right Click chart and change the Plotting Method to Horizontal Bar Stacked. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Enable Stacked type charts //\par
                Pego1.PePlot.Allow.StackedData = true;\par
                Pego1.PePlot.Allow.HorzBarStacked = true;\par
\par
                // Set plotting method //\par
                Pego1.PePlot.Method = GraphPlottingMethod.BarStacked;\par
\par
                // Floating stacked Bars are constructed by setting ZData //\tab\tab\tab\tab\par
                Int32 p;\par
                for(p = 0; p <= 11; p++)\par
                    Pego1.PeData.Z[0, p] = (float)(System.Math.Abs(System.Math.Sin((0.3 * p)) * 800.0) + 400);\par
\par
                // Enable floating stacked bar feature //\par
                Pego1.PePlot.Option.FloatingStackedBars = true;\par
\par
                // Set Various Other Properties ///\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightShadow;\par
                Pego1.PeGrid.LineControl = GridLineControl.Both;\par
                Pego1.PeGrid.Style = GridStyle.Dot;\par
                Pego1.PeTable.Show = GraphPlusTable.Both;\par
                Pego1.PeGrid.InFront = true;\par
                Pego1.PeData.Precision = 0;\par
                Pego1.PePlot.Allow.HorzBarStacked = true;\par
                Pego1.PePlot.DataShadows = DataShadows.ThreeDimensional;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 26)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //026  Graph showing Table Annotations, Simple\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Construct a simple table annotation //\par
                Pego1.PeAnnotation.Table.Working = 0;\par
                Pego1.PeAnnotation.Table.Rows = 4;\par
                Pego1.PeAnnotation.Table.Columns = 7;\par
                Pego1.PeAnnotation.Table.TextSize = 95;\par
\par
                // Pass the table text //\par
                Pego1.PeAnnotation.Table.Text[1, 0] = " 1 ";\par
                Pego1.PeAnnotation.Table.Text[2, 0] = " 2 ";\par
                Pego1.PeAnnotation.Table.Text[3, 0] = " 3 ";\par
\par
                Pego1.PeAnnotation.Table.Text[0, 1] = "Try not ";\par
                Pego1.PeAnnotation.Table.Text[0, 2] = "... ";\par
                Pego1.PeAnnotation.Table.Text[0, 3] = "Do ";\par
                Pego1.PeAnnotation.Table.Text[0, 4] = "... ";\par
                Pego1.PeAnnotation.Table.Text[0, 5] = "or ";\par
                Pego1.PeAnnotation.Table.Text[0, 6] = "Do not ";\par
\par
                Int32 r, c;\par
                for(r=1; r<4; r++)\par
                \{\tab\tab\tab\tab\tab\par
                    for(c=1; c<7; c++)\par
                    \{\par
                        Pego1.PeAnnotation.Table.Text[r, c] = String.Format( "\{0:###0.000\}",(System.Math.Sin(0.3 * c + 1) * 500.0) + ((float)(Rand_Num.NextDouble()) * 50));\par
                        Pego1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 0, 0, 0);\par
                    \}\par
                \}\par
\par
                // Other Table Related Properties ///\par
                Pego1.PeAnnotation.Table.Show = true;\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.InsideTopLeft;\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(5, 150, 150, 150);\par
                Pego1.PeAnnotation.Table.GradientStyle = PlotGradientStyle.VerticalAscent;\par
                Pego1.PeAnnotation.Table.GradientColor = Color.White;\par
                Pego1.PeAnnotation.Table.BevelStyle = BevelStyle.ThinSmooth;\par
                Pego1.PeAnnotation.Table.Border = TABorder.NoBorder; \par
\par
                Pego1.PeAnnotation.Table.HeaderRows = 1;\par
                Pego1.PeAnnotation.Table.HeaderColumn = true;\par
\par
                // Construct a second simple table annotation //\par
                Pego1.PeAnnotation.Table.Working = 1;\par
                Pego1.PeAnnotation.Table.TextSize = 95;\par
\par
                Pego1.PeAnnotation.Table.Rows = 15;\par
                Pego1.PeAnnotation.Table.Columns = 2;\par
\par
                // Pass the table text //\par
                Pego1.PeAnnotation.Table.Text[0, 0] = "";\par
                Pego1.PeAnnotation.Table.Text[0, 1] = "Data";\par
                Pego1.PeAnnotation.Table.Justification[0, 0] = TAJustification.Center;\par
                Pego1.PeAnnotation.Table.Justification[0, 1] = TAJustification.Center;\par
\par
                // First Column Text //\tab\tab\tab\tab\par
                for(r=1; r<=14; r++)\par
                    Pego1.PeAnnotation.Table.Text[r, 0] = r.ToString();\par
\par
                // Second Column Text //\par
                for(r=1; r<=14; r++)\par
                    Pego1.PeAnnotation.Table.Text[r, 1] = String.Format( "\{0:###.00\}",(System.Math.Sin(0.3 * r + 1) * 500.0) + ((float)(Rand_Num.NextDouble()) * 50) );\par
\par
                // Other Table Related Properties //\par
                Pego1.PeAnnotation.Table.Show = true;\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.LeftCenter;\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(50, 155, 155, 155);\par
                Pego1.PeAnnotation.Table.BevelStyle = BevelStyle.ThinSmooth;\par
                Pego1.PeAnnotation.Table.Border = TABorder.NoBorder; \par
\par
                Pego1.PeAnnotation.Table.HeaderRows = 1;\par
                Pego1.PeAnnotation.Table.HeaderColumn = true;\par
\par
                // Done setting Table Annotations ///\par
\par
                // Set Various Other Properties ///\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightNoBorder;\par
                Pego1.PeData.Precision = 0;\par
                Pego1.PeGrid.InFront = true;\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusLine;\par
\par
\par
            \}\par
            else if(MainWindow.m_nChart == 27)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //027  Graph showing Table Annotations, Stacked\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                /////////////////////////////////////////\par
                // Construct a simple table annotation //\par
                /////////////////////////////////////////\par
                Pego1.PeAnnotation.Table.Working = 0;\par
                Pego1.PeAnnotation.Table.Rows = 1;\par
                Pego1.PeAnnotation.Table.Columns = 2;\par
                Pego1.PeAnnotation.Table.TextSize = 85;\par
\par
                // Pass the table text //\par
                Pego1.PeAnnotation.Table.Text[0, 0] = "Category 1";\par
                Pego1.PeAnnotation.Table.Text[0, 1] = "Category 2";\par
\par
                // Set column widths //\par
                Pego1.PeAnnotation.Table.ColumnWidth[0] = 28;\par
                Pego1.PeAnnotation.Table.ColumnWidth[1] = 28;\par
                Pego1.PeAnnotation.Table.Justification[0, 0] = TAJustification.Center;\par
                Pego1.PeAnnotation.Table.Justification[0, 1] = TAJustification.Center;\par
\par
                Pego1.PeAnnotation.Table.Show = true;\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.InsideAxis0;\par
                Pego1.PeAnnotation.Table.AxisLocation = GraphTAAxisLocation.TopLeft;\par
                Pego1.PeAnnotation.Table.Border = TABorder.SingleLine;\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(55, 255, 255, 255);\par
                Pego1.PeAnnotation.Table.GradientStyle = PlotGradientStyle.Vertical;\par
\par
                /////////////////////////////////////////\par
                // Construct a simple table annotation //\par
                /////////////////////////////////////////\par
                Pego1.PeAnnotation.Table.Working = 1;\par
                Pego1.PeAnnotation.Table.Rows = 1;\par
                Pego1.PeAnnotation.Table.Columns = 4;\par
                Pego1.PeAnnotation.Table.TextSize = 85;\par
\par
                Pego1.PeAnnotation.Table.Text[0, 0] = "Sub Cat 1";\par
                Pego1.PeAnnotation.Table.Text[0, 1] = "Sub Cat 2";\par
                Pego1.PeAnnotation.Table.Text[0, 2] = "Sub Cat 3";\par
                Pego1.PeAnnotation.Table.Text[0, 3] = "Sub Cat 4";\par
                Pego1.PeAnnotation.Table.ColumnWidth[0] = 14;\par
                Pego1.PeAnnotation.Table.ColumnWidth[1] = 14;\par
                Pego1.PeAnnotation.Table.ColumnWidth[2] = 14;\par
                Pego1.PeAnnotation.Table.ColumnWidth[3] = 14;\par
                Pego1.PeAnnotation.Table.Justification[0, 0] = TAJustification.Center;\par
                Pego1.PeAnnotation.Table.Justification[0, 1] = TAJustification.Center;\par
                Pego1.PeAnnotation.Table.Justification[0, 2] = TAJustification.Center;\par
                Pego1.PeAnnotation.Table.Justification[0, 3] = TAJustification.Center;\par
\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(55, 240, 240, 240);\par
                Pego1.PeAnnotation.Table.GradientStyle = PlotGradientStyle.Vertical;\par
\par
                Pego1.PeAnnotation.Table.Show = true;\par
\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.InsideAxis0;\par
                Pego1.PeAnnotation.Table.AxisLocation = GraphTAAxisLocation.TopLeft + Convert.ToInt32(GraphTAAxisLocation.NewRow);\par
\par
                Pego1.PeAnnotation.Table.Border = TABorder.SingleLine;\par
\par
                /////////////////////////////////////////\par
                // Construct a simple table annotation //\par
                /////////////////////////////////////////\par
                Pego1.PeAnnotation.Table.Working = 2;\par
                Pego1.PeAnnotation.Table.Rows = 4;\par
                Pego1.PeAnnotation.Table.Columns = 8;\par
                Pego1.PeAnnotation.Table.TextSize = 85;\par
\par
                // Set Column Widths //\par
                Pego1.PeAnnotation.Table.ColumnWidth[0] = 7;\par
                Pego1.PeAnnotation.Table.ColumnWidth[1] = 7;\par
                Pego1.PeAnnotation.Table.ColumnWidth[2] = 7;\par
                Pego1.PeAnnotation.Table.ColumnWidth[3] = 7;\par
                Pego1.PeAnnotation.Table.ColumnWidth[4] = 7;\par
                Pego1.PeAnnotation.Table.ColumnWidth[5] = 7;\par
                Pego1.PeAnnotation.Table.ColumnWidth[6] = 7;\par
                Pego1.PeAnnotation.Table.ColumnWidth[7] = 7;\par
\par
                // Pass the table text //           \par
                Int32 r;\par
                Int32 c;\par
                for(r=0; r<4; r++)\par
                \{\par
                    for(c=0; c <8; c++)\par
                    \{\par
                        Pego1.PeAnnotation.Table.Text[r, c] = String.Format( "\{0:###.00\}",(System.Math.Sin(0.3 * c + 1) * 500.0) + ((float)(Rand_Num.NextDouble()) * 50));\par
\par
                        if( c > 5)\par
                            Pego1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 0, 148, 0);\par
                        else if( c > 3 )\par
                            Pego1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 148, 148, 0);\par
                        else if( c > 1 )\par
                            Pego1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 0, 148, 148);\par
                        else\par
                            Pego1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 198, 0, 0);\par
                        Pego1.PeAnnotation.Table.Justification[r, c] = TAJustification.Center;\par
                    \}\par
                \}\par
\par
                // Other Table Related Properties ///\par
                Pego1.PeAnnotation.Table.Show = true;\par
\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.InsideAxis0;\par
                Pego1.PeAnnotation.Table.AxisLocation = GraphTAAxisLocation.TopLeft + (Convert.ToInt32(GraphTAAxisLocation.NewRow) * 2);\par
                Pego1.PeAnnotation.Table.Border = TABorder.SingleLine;\par
\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(255, 200, 200, 200);\par
\par
                // Done setting Table Annotations ///\par
\par
                // Set Various Other Properties ///\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightInset;\par
                Pego1.PeGrid.LineControl = GridLineControl.Both;\par
                Pego1.PeData.Precision = 0;\par
                Pego1.PeGrid.Option.AxisNumberSpacing = 1.5;\par
                Pego1.PePlot.Method = GraphPlottingMethod.Bar;\par
                Pego1.PePlot.Option.BarGlassEffect = false;\par
                Pego1.PePlot.DataShadows = DataShadows.ThreeDimensional;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 28)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //028  Graph showing Table Annotations, Real-time update\par
\par
                //! Move mouse over chart to see tables update with the subset values located\par
                //! at the vertical cursor line. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Construct a simple table annotation //\par
                Pego1.PeAnnotation.Table.Working = 0;\par
                Pego1.PeAnnotation.Table.Rows = 1;\par
                Pego1.PeAnnotation.Table.Columns = 6;\par
\par
                // column index for table with 6 columns //\par
                // 0 = symbol, no default width\par
                // 1 = text, subset label, no default width\par
                // 2 = text, data value, default width set to 7 characters\par
                // 3 = symbol second subset, no default width\par
                // 4 = text, second subset label, no default width\par
                // 5 = text, second data value, default width set to 7 characters\par
\par
                // Pass the table type, text, color //\par
                Pego1.PeAnnotation.Table.Type[0, 0] = LegendAnnotationType.SquareSolid;\par
                Pego1.PeAnnotation.Table.Color[0, 0] = Color.FromArgb(255, 198, 0, 0);\par
                Pego1.PeAnnotation.Table.Text[0, 1] = "Texas ";\par
                Pego1.PeAnnotation.Table.Color[0, 1] = Color.FromArgb(255, 0, 0, 0);\par
                Pego1.PeAnnotation.Table.Color[0, 2] = Color.FromArgb(255, 0, 0, 0);\par
                \par
                Pego1.PeAnnotation.Table.Type[0, 3] = LegendAnnotationType.SquareSolid;\par
                Pego1.PeAnnotation.Table.Color[0, 3] = Color.FromArgb(255, 0, 198, 198);\par
                Pego1.PeAnnotation.Table.Text[0, 4] = "Florida ";\par
                Pego1.PeAnnotation.Table.Color[0, 4] = Color.FromArgb(255, 0, 0, 0);\par
                Pego1.PeAnnotation.Table.Color[0, 5] = Color.FromArgb(255, 0, 0, 0);\par
                \par
                Pego1.PeAnnotation.Table.ColumnWidth[0] = 2;\par
                Pego1.PeAnnotation.Table.ColumnWidth[1] = 8;\par
                Pego1.PeAnnotation.Table.ColumnWidth[2] = 7;\par
                Pego1.PeAnnotation.Table.ColumnWidth[3] = 2;\par
                Pego1.PeAnnotation.Table.ColumnWidth[4] = 8;\par
                Pego1.PeAnnotation.Table.ColumnWidth[5] = 7;\par
\par
                // Other Table Related Properties ///\par
                Pego1.PeAnnotation.Table.Show = true;\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.InsideAxis0;\par
                Pego1.PeAnnotation.Table.AxisLocation = GraphTAAxisLocation.TopLeft;\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(255, 55, 155, 198);\par
                Pego1.PeAnnotation.Table.Border = TABorder.Inset;\par
\par
                // Construct another table annotation //\par
                Pego1.PeAnnotation.Table.Working = 1;\par
                Pego1.PeAnnotation.Table.Rows = 1;\par
                Pego1.PeAnnotation.Table.Columns = 6;\par
\par
                // Pass the table type, text, color //\par
                Pego1.PeAnnotation.Table.Type[0, 0] = LegendAnnotationType.SquareSolid;\par
                Pego1.PeAnnotation.Table.Color[0, 0] = Color.FromArgb(255, 198, 198, 0);\par
                Pego1.PeAnnotation.Table.Text[0, 1] = "New York ";\par
                Pego1.PeAnnotation.Table.Color[0, 1] = Color.FromArgb(255, 0, 0, 0);\par
                Pego1.PeAnnotation.Table.Color[0, 2] = Color.FromArgb(255, 0, 0, 0);\par
                \par
                Pego1.PeAnnotation.Table.Type[0, 3] = LegendAnnotationType.SquareSolid;\par
                Pego1.PeAnnotation.Table.Color[0, 3] = Color.FromArgb(255, 0, 198, 0);\par
                Pego1.PeAnnotation.Table.Text[0, 4] = "California ";\par
                Pego1.PeAnnotation.Table.Color[0, 4] = Color.FromArgb(255, 0, 0, 0);\par
                Pego1.PeAnnotation.Table.Color[0, 5] = Color.FromArgb(255, 0, 0, 0);\par
\par
                Pego1.PeAnnotation.Table.ColumnWidth[0] = 2;\par
                Pego1.PeAnnotation.Table.ColumnWidth[1] = 8;\par
                Pego1.PeAnnotation.Table.ColumnWidth[2] = 7;\par
                Pego1.PeAnnotation.Table.ColumnWidth[3] = 2;\par
                Pego1.PeAnnotation.Table.ColumnWidth[4] = 8;\par
                Pego1.PeAnnotation.Table.ColumnWidth[5] = 7;\par
\par
                // Other Table Related Properties //\par
                Pego1.PeAnnotation.Table.Show = true;\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.InsideAxis1;\par
                Pego1.PeAnnotation.Table.AxisLocation = GraphTAAxisLocation.TopLeft;\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(255, 55, 155, 198);\par
                Pego1.PeAnnotation.Table.Border = TABorder.Inset;\par
                Pego1.PeAnnotation.Table.Working = 0;\par
\par
                // Other various Properties //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightShadow;\par
\par
                Pego1.PeGrid.MultiAxesSubsets[0] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[1] = 2;\par
\par
                Pego1.PeGrid.Option.MultiAxisStyle = MultiAxisStyle.SeparateAxes;\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusLine;\par
                Pego1.PeGrid.WorkingAxis = 1;\par
                Pego1.PePlot.Method = GraphPlottingMethod.PointsPlusLine;\par
                Pego1.PeGrid.WorkingAxis = 0;\par
                Pego1.PeLegend.Show = false;\par
                Pego1.PePlot.MarkDataPoints = true;\par
                Pego1.PeUserInterface.Allow.Zooming = AllowZooming.Horizontal;\par
                Pego1.PeUserInterface.Allow.MultiAxesSizing = true;\par
\par
                // Make the line types bold //\par
                Pego1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[2] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[3] = LineType.MediumSolid;\par
\par
                Pego1.PeLegend.SubsetPointTypes[0] = PointType.SquareSolid;\par
                Pego1.PeLegend.SubsetPointTypes[1] = PointType.SquareSolid;\par
                Pego1.PeLegend.SubsetPointTypes[2] = PointType.SquareSolid;\par
                Pego1.PeLegend.SubsetPointTypes[3] = PointType.SquareSolid; \par
\par
                Pego1.PeUserInterface.Cursor.Mode = CursorMode.FloatingXY;\par
                Pego1.PeUserInterface.Cursor.MouseCursorControl = true;\par
\par
                Pego1.PeConfigure.RenderEngine = RenderEngine.Direct2D; \par
\par
\par
                /*///////////////////////////////////////////////////////////////////////////////\par
                // From the MouseMove Event                                                   //\par
                // When mouse is moved, update table annotation contents.                     //\par
                ////////////////////////////////////////////////////////////////////////////////\par
\par
                // get last mouse location within control //\par
                Int32 pX, pY, nA, nX, nY;\par
                Double fX=0, fY=0;\par
                System.Drawing.Point pt;\tab\tab\tab\tab  \par
\par
                // get last mouse location within control //'\par
                pt = Pego1.PeUserInterface.Cursor.LastMouseMove;\par
                pX = pt.X;\par
                pY = pt.Y;\par
\par
                nA = 0;      // Initialize axis, non-zero only if using MultiAxesSubsets\par
                nX = pX;     // Initialize nX and nY with mouse location\par
                nY = pY;\par
                Pego1.PeFunction.ConvPixelToGraph(ref nA,ref nX,ref nY,ref fX,ref fY, false, false, false);\par
\par
                // We now know data coordinates for mouse location //\par
\par
                // Use fX to interpolate each subset to find approximate Y value //\par
                float Subset1Y, Subset2Y, Subset3Y, Subset4Y, slope;\par
                float y0, y1, y2, x1, x2;\par
\par
                nX = Convert.ToInt32(fX) - 1;   // nX is floor of fX\par
                x2 = nX + 1;   // x2 is right most point index\par
                x1 = nX;       // x1 is left most point index or nX\par
\par
                if(fX < 1 || fX > 12) \par
                \{\par
                    Pego1.PeAnnotation.Table.Working = 0;\par
                    Pego1.PeAnnotation.Table.Text[0, 2] = "        ";\par
                    Pego1.PeAnnotation.Table.Text[0, 5] = "        ";\par
                    Pego1.PeAnnotation.Table.Working = 1;\par
                    Pego1.PeAnnotation.Table.Text[0, 2] = "        ";\par
                    Pego1.PeAnnotation.Table.Text[0, 5] = "        ";\par
                    Pego1.PeFunction.DrawTable(0);\par
                    Pego1.PeFunction.DrawTable(1);\par
                    return;\par
                \}\par
\par
                fX = fX - 1.0;\par
\par
                // 1st subset //\par
                y2 = Pego1.PeData.Y[0, nX + 1];\par
                y1 = Pego1.PeData.Y[0, nX];\par
                slope = (y2 - y1) / (x2 - x1);\par
                y0 = y1 - (slope * x1);\par
                Subset1Y = (float)((slope * fX) + y0);\par
\par
                // 2nd subset //\par
                y2 = Pego1.PeData.Y[1, nX + 1];\par
                y1 = Pego1.PeData.Y[1, nX];\par
                slope = (y2 - y1) / (x2 - x1);\par
                y0 = y1 - (slope * x1);\par
                Subset2Y = (float)((slope * fX) + y0);\par
\par
                // 3rd subset //\par
                y2 = Pego1.PeData.Y[2, nX + 1];\par
                y1 = Pego1.PeData.Y[2, nX];\par
                slope = (y2 - y1) / (x2 - x1);\par
                y0 = y1 - (slope * x1);\par
                Subset3Y = (float)((slope * fX) + y0);\par
\par
                // 4th subset //\par
                y2 = Pego1.PeData.Y[3, nX + 1];\par
                y1 = Pego1.PeData.Y[3, nX];\par
                slope = (y2 - y1) / (x2 - x1);\par
                y0 = y1 - (slope * x1);\par
                Subset4Y = (float)((slope * fX) + y0);\par
\par
                // Place text in table annotation //\par
                Pego1.PeAnnotation.Table.Working = 0;\par
                Pego1.PeAnnotation.Table.Text[0, 2] = String.Format("\{0:##0.00\}",Subset1Y);\par
                Pego1.PeAnnotation.Table.Text[0, 5] = String.Format("\{0:##0.00\}",Subset2Y);\par
\par
                Pego1.PeAnnotation.Table.Working = 1;\par
                Pego1.PeAnnotation.Table.Text[0, 2] = String.Format("\{0:##0.00\}",Subset3Y);\par
                Pego1.PeAnnotation.Table.Text[0, 5] = String.Format("\{0:##0.00\}",Subset4Y);\par
\par
                Pego1.PeFunction.DrawTable(0);\par
                Pego1.PeFunction.DrawTable(1);\par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 29)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //029  Graph showing Table Annotations, Table spaced\par
\par
                //! This shows how to place extra text inside table and within an axis. //\par
                //! Maximize to allow room for textual data which is drawn as fixed font size. //\par
\par
                // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
                CreateSimpleGraph(Pego1);\par
\par
                // Create two y axes //\par
                Pego1.PeGrid.MultiAxesSubsets[0] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[1] = 2;\par
\par
                // Construct a simple table annotation //\par
                Pego1.PeAnnotation.Table.Working = 0;\par
                Pego1.PeAnnotation.Table.Rows = 6;\par
                Pego1.PeAnnotation.Table.Columns = 12;    //! 12 is same number as PEP_nPOINTS\par
\par
                // Pass the table text //\par
                Boolean b = false;\par
\par
                Color dwColor;\par
                Int32 r, c;\par
                for(r=0; r<6; r++)\par
                \{\par
                    if(b) \par
                        dwColor = Color.FromArgb(255, 175, 175, 175);\par
                    else\par
                        dwColor = Color.FromArgb(255, 255, 255, 255);\par
                    b = !b;\par
                                \par
                    for(c=0; c <12; c++)\par
                    \{\par
                        Pego1.PeAnnotation.Table.Text[r, c] = String.Format("\{0:###0.000\}", ((Math.Sin(0.3 * c + 1) * 500.0) + ((float)(Rand_Num.NextDouble()) * 50)) );\par
                        Pego1.PeAnnotation.Table.Color[r, c] = dwColor;\par
                    \}\par
                \}\par
\par
                // Set Table Location //\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.InsideAxis1;\par
                Pego1.PeAnnotation.Table.AxisLocation = GraphTAAxisLocation.BottomTableSpaced;\par
\par
                // Other Table Related Properties ///\par
                Pego1.PeAnnotation.Table.Show = true;\par
                Pego1.PeAnnotation.Table.Border = TABorder.NoBorder;\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(0,1,0,0);  /* Empty Same as GraphBackColor in this instance */\par
                Pego1.PeAnnotation.Table.ForeColor = Color.FromArgb(0,1,0,0);  /* Empty Same as GraphForeColor in this instance */\par
\par
                // Construct a second simple table annotation //\par
                Pego1.PeAnnotation.Table.Working = 1;\par
                Pego1.PeAnnotation.Table.Rows = 6;\par
                Pego1.PeAnnotation.Table.Columns = 12;\par
\par
                // Pass the table text //\par
                b = true;\par
                for(r=0; r<6; r++)\par
                \{\par
                    if(b) \par
                        dwColor = Color.FromArgb(255, 175, 175, 175);\par
                    else\par
                        dwColor = Color.FromArgb(255, 255, 255, 255);\par
                    b = !b;\par
                    for(c=0; c<12; c++)\par
                    \{\par
                        Pego1.PeAnnotation.Table.Text[r, c] = String.Format("\{0:###0.000\}",((Math.Sin(0.3 * c + 1) * 500.0) + ((float)(Rand_Num.NextDouble()) * 50)));\par
                        Pego1.PeAnnotation.Table.Color[r, c] = dwColor;\par
                    \}\par
                \}\par
\par
                // Set Table Location //\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.InsideAxis0;\par
                Pego1.PeAnnotation.Table.AxisLocation = GraphTAAxisLocation.BottomTableSpaced;\par
\par
                // Other Table Related Properties ///\par
                Pego1.PeAnnotation.Table.Show = true;\par
                Pego1.PeAnnotation.Table.Border = TABorder.NoBorder;\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(0,1,0,0);  // Same as GraphBackColor in this instance\par
                Pego1.PeAnnotation.Table.ForeColor = Color.FromArgb(0,1,0,0);  // Colors.Empty;  // Same as GraphForeColor in this instance\par
\par
                // Construct a third simple table annotation //\par
                Pego1.PeAnnotation.Table.Working = 2;\par
                Pego1.PeAnnotation.Table.Rows = 2;\par
                Pego1.PeAnnotation.Table.Columns = 13;  // 12 + extra header column\par
\par
                // Pass the table text //\tab\tab\tab\tab\par
                for(r=0; r<=1; r++)\par
                \{\par
                    for(c=1; c<=12; c++)\par
                        Pego1.PeAnnotation.Table.Text[r, c] = String.Format( "\{0:###0.000\}",(Math.Sin(0.3 * c + 1) * 500.0) + ((float)(Rand_Num.NextDouble()) * 50));\par
                \}\tab\tab\tab\tab\par
\par
                // Set Table Location //\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.InsideTable;\par
                Pego1.PeAnnotation.Table.AxisLocation = GraphTAAxisLocation.TopTableSpaced;\par
\par
                // Other Table Related Properties ///\par
                Pego1.PeAnnotation.Table.Show = true;\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(255, 0, 198, 198);\par
                Pego1.PeAnnotation.Table.HeaderColumn = true;\par
\par
                // Set Text for Header Column //\par
                Pego1.PeAnnotation.Table.Text[0, 0] = "Table Annotation Line 1";\par
                Pego1.PeAnnotation.Table.Text[1, 0] = "Table Annotation Line 2";\par
\par
                // Done setting Table Annotations ///\par
\par
                // Set Various Other Properties ///\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkInset; \par
                Pego1.PeData.Precision = 0;\par
                Pego1.PeTable.Show = GraphPlusTable.Both;\par
                Pego1.PeLegend.Style = LegendStyle.OneLineInsideAxis;\par
                Pego1.PeGrid.LineControl = GridLineControl.YAxis;\par
                Pego1.PePlot.MarkDataPoints = false;\par
                Pego1.PeFont.FontSize = FontSize.Small;\par
                Pego1.PePlot.DataShadows = DataShadows.Shadows;\par
                Pego1.PeLegend.Show = true;\par
\par
                Pego1.PeGrid.WorkingAxis = 0;\par
                Pego1.PePlot.Method = GraphPlottingMethod.Bar;\par
                Pego1.PePlot.MethodII = GraphPlottingMethodII.PointsPlusLine; \par
                Pego1.PePlot.RYAxisComparisonSubsets = 1;\par
                Pego1.PeColor.RYAxis = Color.FromArgb(255, 0, 198, 198);\par
                Pego1.PeString.YAxisLabel = "";\par
                Pego1.PeString.RYAxisLabel = "";\par
\par
                Pego1.PeGrid.WorkingAxis = 1;\par
                Pego1.PePlot.Method = GraphPlottingMethod.Bar;\par
                Pego1.PePlot.MethodII = GraphPlottingMethodII.PointsPlusLine;\par
                Pego1.PePlot.RYAxisComparisonSubsets = 1;\par
                Pego1.PeColor.RYAxis = Color.FromArgb(255, 0, 198, 0);\par
                Pego1.PeString.YAxisLabel = "";\par
                Pego1.PeString.RYAxisLabel = "";\par
\par
                Pego1.PeColor.SubsetColors[0] = Color.FromArgb(128, 138, 0, 0);\par
                Pego1.PeColor.SubsetColors[1] = Color.FromArgb(128, 0, 255, 255);\par
                Pego1.PeColor.SubsetColors[2] = Color.FromArgb(128, 138, 138, 0);\par
                Pego1.PeColor.SubsetColors[3] = Color.FromArgb(128, 0, 255, 0);\par
\par
                Pego1.PeUserInterface.Menu.ShowTableAnnotations = MenuControl.Show;\par
                Pego1.PeUserInterface.Menu.DataPrecision = MenuControl.Hide;\par
\par
                // Set various export defaults //\par
                Pego1.PeSpecial.DpiX = 600;\par
                Pego1.PeSpecial.DpiY = 600;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 30)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //030  Graph showing Table Annotations, Hot Spots\par
\par
                //! Please read the RED text within this code window and others. \par
                //! You will find important information that improves your experience with the demo.\par
                //!\par
                //! Some things to try...\par
                //! 1) Right click the chart and use the popup menu to adjust viewing style and other items.\par
                //! 2) Left click and drag to zoom, use popup menu to undo zoom. Note how time scale changes.\par
                //! 3) Left click the Portfolio table to select different stocks.\par
                //! 4) Change Point Label Orientation via the popup menu and note how x axis scale changes.\par
                //! 5) The Data Cursor can be moved with arrow keys.  Click a data point and then use arrow keys.\par
                //! 6) Zoom chart and watch the Volume bar plotting method structure for different time ranges.\par
                //!    There's new drawing logic that first recognizes all bars are connected, then as range is shrunk,\par
                //!    bar's get drawn 1 pixel apart, and finally after zooming more, bars are spaced.\par
\par
                // Note, the entire code to produce this example is shown below.\par
                // The immediate section controls chart construction, latter sections show\par
                // how to respond to mouse-move and table annotation hot spot events.\par
                // The final section shows how the data is loaded from a comma delimited.\par
                // file and studies calculated.\par
\par
                // This example shows a collection of features.\par
                // Table Annotation Hot Spots can turn table annotations into user interface objects.\par
                // Also shown is real-time table annotation updating and date/time handling.\par
\par
                // v9 features\par
                Pego1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pego1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pego1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
                Pego1.PeUserInterface.Cursor.TrackingTooltipMaxWidth = 100;\par
                Pego1.PeUserInterface.Cursor.TrackingCustomDataText = true; \par
                Pego1.PeUserInterface.Cursor.MouseCursorControl = true;\par
\par
                // Enable ZoomWindow //\par
                Pego1.PePlot.ZoomWindow.Show = true;\par
\par
                // Enable MouseWheel Zooming\par
                Pego1.PeUserInterface.Scrollbar.MouseWheelFunction = MouseWheelFunction.HorizontalZoom;  \par
                Pego1.PeUserInterface.Scrollbar.MouseDraggingX = true;  // note that pan gestures require MouseDragging to be enabled \par
\par
                // Enable MouseWheel Zoom Smoothness\par
                Pego1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 4;\par
                Pego1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                // Enable Bar Glass Effect //\par
                Pego1.PePlot.Option.BarGlassEffect = true;\par
\par
                // Enable Plotting style gradient and bevel features //\par
                Pego1.PePlot.Option.AreaGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pego1.PePlot.Option.AreaBevelStyle = BevelStyle.MediumSmooth;\par
                Pego1.PePlot.Option.SplineGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pego1.PePlot.Option.SplineBevelStyle = SplineBevelStyle.MediumSmooth;\par
\par
                // No Flicker //\par
                Pego1.PeConfigure.PrepareImages = true;\par
                Pego1.PeConfigure.CacheBmp = true;\par
                \par
                // Fixed Font Sizes //\par
                Pego1.PeFont.Fixed = true;\par
\par
                // YAxis Changes Range as you pan horizontally or zoom //\par
                Pego1.PeUserInterface.Scrollbar.ScrollingScaleControl = true;\par
\par
                // Construct a simple table annotation //\par
                Pego1.PeAnnotation.Table.Working = 0;\par
                Pego1.PeAnnotation.Table.Rows = 17;\par
                Pego1.PeAnnotation.Table.Columns = 1;   // 12 is same number as PEP_nPOINTS\par
\par
                // Pass the table text //\par
                Pego1.PeAnnotation.Table.Text[0, 0] = " MSFT";\par
                Pego1.PeAnnotation.Table.Text[1, 0] = " SUNW";\par
                Pego1.PeAnnotation.Table.Text[2, 0] = " ORCL";\par
                Pego1.PeAnnotation.Table.Text[3, 0] = " IBM";\par
                Pego1.PeAnnotation.Table.Text[4, 0] = " INTC";\par
                Pego1.PeAnnotation.Table.Text[5, 0] = " NSM";\par
                Pego1.PeAnnotation.Table.Text[6, 0] = " DELL";\par
                Pego1.PeAnnotation.Table.Text[7, 0] = " WMT";\par
                Pego1.PeAnnotation.Table.Text[8, 0] = " CVX";\par
                Pego1.PeAnnotation.Table.Text[9, 0] = " PBG";\par
                Pego1.PeAnnotation.Table.Text[10, 0] = "-----------------";\par
\par
                Pego1.PeAnnotation.Table.HotSpot[0, 0] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[1, 0] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[2, 0] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[3, 0] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[4, 0] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[5, 0] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[6, 0] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[7, 0] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[8, 0] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[9, 0] = true;\par
\par
                Pego1.PeAnnotation.Table.Color[0, 0] = Color.FromArgb(255, 198, 0, 0);\par
                Pego1.PeAnnotation.Table.Color[1, 0] = Color.FromArgb(255, 142, 142, 142);\par
                Pego1.PeAnnotation.Table.Color[2, 0] = Color.FromArgb(255, 142, 142, 142);\par
                Pego1.PeAnnotation.Table.Color[3, 0] = Color.FromArgb(255, 142, 142, 142);\par
                Pego1.PeAnnotation.Table.Color[4, 0] = Color.FromArgb(255, 142, 142, 142);\par
                Pego1.PeAnnotation.Table.Color[5, 0] = Color.FromArgb(255, 142, 142, 142);\par
                Pego1.PeAnnotation.Table.Color[6, 0] = Color.FromArgb(255, 142, 142, 142);\par
                Pego1.PeAnnotation.Table.Color[7, 0] = Color.FromArgb(255, 142, 142, 142);\par
                Pego1.PeAnnotation.Table.Color[8, 0] = Color.FromArgb(255, 142, 142, 142);\par
                Pego1.PeAnnotation.Table.Color[9, 0] = Color.FromArgb(255, 142, 142, 142);\par
                Pego1.PeAnnotation.Table.Color[10, 0] = Color.FromArgb(255, 142, 142, 142);\par
                Pego1.PeAnnotation.Table.Color[11, 0] = Color.FromArgb(255, 150, 150, 150);\par
                Pego1.PeAnnotation.Table.Color[12, 0] = Color.FromArgb(255, 150, 150, 150);\par
                Pego1.PeAnnotation.Table.Color[13, 0] = Color.FromArgb(255, 142, 142, 142);\par
                Pego1.PeAnnotation.Table.Color[14, 0] = Color.FromArgb(255, 0, 170, 0);\par
                Pego1.PeAnnotation.Table.Color[15, 0] = Color.FromArgb(255, 198, 0, 0);\par
                Pego1.PeAnnotation.Table.Color[16, 0] = Color.FromArgb(255, 160, 160, 160);\par
\par
                Pego1.PeAnnotation.Table.ColumnWidth[0] = 8;\par
\par
                // Set Table Location //\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.LeftCenter;\par
\par
                // Other Table Related Properties ///\par
                Pego1.PeAnnotation.Table.Show = true;\par
                Pego1.PeAnnotation.Table.Border = TABorder.SingleLine;\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(255, 0, 0, 0);\par
                Pego1.PeAnnotation.Table.ForeColor = Color.FromArgb(255, 190, 190, 190);\par
                Pego1.PeAnnotation.Table.TextSize = 100;\par
\par
                // Done setting Table Annotations //\par
\par
                // Load Data and Add Studies, Total of 11 subsets when finished //\par
                LoadData("MSFT", Pego1);\par
\par
                //! Set properties related to date/time mode //\par
                Pego1.PeData.DeltasPerDay = 1;         // 1 data point per day\par
                Pego1.PeData.DeltaX = -1 ;             // -1 special code for daily data //\par
                Pego1.PeData.DateTimeMode = true ;     // How to interpret serial dates //\par
                Pego1.PeGrid.Option.YearMonthDayPrompt = YearMonthDayPrompt.InsideTop;\par
                Pego1.PeGrid.Option.DayLabelType = DayLabelType.ThreeCharacters;\par
                Pego1.PeGrid.Option.MonthLabelType = MonthLabelType.ThreeCharacters;\par
\par
                // Split up subsets among different axes //\par
                Pego1.PeGrid.MultiAxesSubsets[0] = 7;  // ohlc and upper bollinger, sma, lower bollinger\par
                Pego1.PeGrid.MultiAxesSubsets[1] = 1;  // volume\par
                Pego1.PeGrid.MultiAxesSubsets[2] = 1;  // RSI\par
                Pego1.PeGrid.MultiAxesSubsets[3] = 2;  // Fast and Slow Stochastic\par
\par
                Pego1.PeGrid.MultiAxesProportions[0] = 0.55F;\par
                Pego1.PeGrid.MultiAxesProportions[1] = 0.15F;\par
                Pego1.PeGrid.MultiAxesProportions[2] = 0.15F;\par
                Pego1.PeGrid.MultiAxesProportions[3] = 0.15F;\par
\par
                // Set Various Other Properties ///\par
                Pego1.PeData.Precision = DataPrecision.TwoDecimals;\par
                Pego1.PeGrid.Option.MultiAxisStyle = MultiAxisStyle.SeparateAxes;\par
                Pego1.PeUserInterface.Allow.MultiAxesSizing = true;\par
                Pego1.PeGrid.Option.YAxisOnRight = true;\par
                Pego1.PePlot.Option.SpecificPlotModeColor = true;  // Enables mult-colored candle stick fills\par
                Pego1.PePlot.DataShadows = DataShadows.None;\par
                Pego1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pego1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                Pego1.PeUserInterface.HotSpot.Data = true;\par
                Pego1.PeUserInterface.HotSpot.Size = HotSpotSize.Large;\par
\par
                Pego1.PeGrid.Option.ShowXAxis = ShowAxis.GridNumbers;\par
                Pego1.PeString.MainTitle = "";\par
                Pego1.PeString.SubTitle = "";\par
                Pego1.PeFont.FontSize = FontSize.Medium;\par
                Pego1.PePlot.PointSize = PointSize.Small;\par
                Pego1.PeUserInterface.Allow.Maximization = false;\par
                Pego1.PeGrid.LineControl = GridLineControl.Both;\par
                Pego1.PeLegend.SimpleLine = true;\par
                Pego1.PeLegend.SimplePoint = true;\par
                Pego1.PeLegend.Style = LegendStyle.OneLineTopOfAxis;\par
                Pego1.PeGrid.Configure.AutoMinMaxPadding = 1;\par
                Pego1.PePlot.Option.OhlcMinWidth = 12; // Controls minium candle-stick width //\par
                \par
                Pego1.PeUserInterface.Menu.GraphPlusTable = MenuControl.Hide;\par
                Pego1.PeUserInterface.Menu.TableWhat = MenuControl.Hide;\par
                Pego1.PeUserInterface.Menu.MultiAxisStyle = MenuControl.Show;\par
                Pego1.PeUserInterface.Menu.LegendLocation = MenuControl.Show;\par
                Pego1.PeUserInterface.Menu.ShowTableAnnotations = MenuControl.Show;\par
                Pego1.PeUserInterface.Menu.AnnotationControl = true;\par
                Pego1.PeUserInterface.Dialog.PrintStyleControl = PrintStyleControl.DefaultMonochrome;\par
\par
                // Set up per axis properties //\par
                Pego1.PeGrid.WorkingAxis = 0;\par
                Pego1.PePlot.Method = GraphPlottingMethod.SpecificPlotMode;\par
                Pego1.PePlot.SpecificPlotMode = SpecificPlotMode.BoxPlot;\par
                Pego1.PePlot.ComparisonSubsets = 3;\par
                Pego1.PeGrid.Option.ShowYAxis = ShowAxis.GridNumbers;\par
\par
                Pego1.PeGrid.WorkingAxis = 1;\par
                Pego1.PePlot.Method = GraphPlottingMethod.Bar;\par
                Pego1.PeGrid.Option.ShowYAxis = ShowAxis.GridNumbers;\par
\par
                Pego1.PeGrid.WorkingAxis = 2;\par
                Pego1.PePlot.Method = GraphPlottingMethod.Line;\par
                Pego1.PeGrid.Option.ShowYAxis = ShowAxis.GridNumbers;\par
\par
                Pego1.PeGrid.WorkingAxis = 3;\par
                Pego1.PePlot.Method = GraphPlottingMethod.Area;\par
                Pego1.PeGrid.Option.ShowYAxis = ShowAxis.GridNumbers;\par
\par
                // Set Subset Colors //\par
                Pego1.PeColor.SubsetColors[0] = Color.FromArgb(255, 160, 160, 160);\par
                Pego1.PeColor.SubsetColors[1] = Color.FromArgb(255, 160, 160, 160);\par
                Pego1.PeColor.SubsetColors[2] = Color.FromArgb(255, 128, 0, 0);\par
                Pego1.PeColor.SubsetColors[3] = Color.FromArgb(255, 0, 128, 0);\par
                Pego1.PeColor.SubsetColors[4] = Color.FromArgb(80, 235, 0, 0);\par
                Pego1.PeColor.SubsetColors[5] = Color.FromArgb(80, 235, 235, 0);\par
                Pego1.PeColor.SubsetColors[6] = Color.FromArgb(80, 0, 235, 235);\par
                Pego1.PeColor.SubsetColors[7] = Color.FromArgb(255, 170, 170, 170);\par
                Pego1.PeColor.SubsetColors[8] = Color.FromArgb(255, 0, 140, 140);\par
                Pego1.PeColor.SubsetColors[9] = Color.FromArgb(180, 0, 195, 0);\par
                Pego1.PeColor.SubsetColors[10] = Color.FromArgb(120, 165, 165, 165);\par
\par
                // Set Subset Line Types //\par
                Pego1.PeLegend.SubsetLineTypes[0] = LineType.ThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[1] = LineType.ThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[2] = LineType.MediumThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[3] = LineType.MediumThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[4] = LineType.MediumThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[5] = LineType.MediumThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[6] = LineType.MediumThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[7] = LineType.MediumThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[8] = LineType.MediumThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[9] = LineType.MediumThinSolid;\par
                Pego1.PeLegend.SubsetLineTypes[10] = LineType.MediumThinSolid;\par
\par
                // Set Subset Labels //\par
                Pego1.PeString.SubsetLabels[0] = "High";\par
                Pego1.PeString.SubsetLabels[1] = "Low";\par
                Pego1.PeString.SubsetLabels[2] = "Open";\par
                Pego1.PeString.SubsetLabels[3] = "Close";\par
                Pego1.PeString.SubsetLabels[4] = "Bollinger Upper";\par
                Pego1.PeString.SubsetLabels[5] = "SMA 20";\par
                Pego1.PeString.SubsetLabels[6] = "Bollinger Lower";\par
                Pego1.PeString.SubsetLabels[7] = "Volume";\par
                Pego1.PeString.SubsetLabels[8] = "Relative Strength Index - 10";\par
                Pego1.PeString.SubsetLabels[9] = "Fast %K";\par
                Pego1.PeString.SubsetLabels[10] = "Slow %D";\par
\par
                Pego1.PePlot.Option.GradientBars = 14;\par
                Pego1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pego1.PeFont.MainTitle.Bold = true;\par
                Pego1.PeFont.SubTitle.Bold = true;\par
                Pego1.PeFont.Label.Bold = true;\par
                Pego1.PePlot.Option.LineShadows = true;\par
                Pego1.PeFont.FontSize = FontSize.Medium;\par
                Pego1.PePlot.DataShadows = DataShadows.Shadows;\par
\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                // v9.5\par
                Pego1.PeUserInterface.Menu.AnnotationControl = true;  \par
                Pego1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
\par
                // Add some random graph annotations // v9.5 \par
                int aCnt = 0;\par
                for (int annot = 0; annot < 15; annot++)\par
                \{\par
                    int nRndRow = (int)(Rand_Num.NextDouble() * (float)4);\par
                    int nRndCol = (int)(Rand_Num.NextDouble() * (float) Pego1.PeData.Points - 1);\par
                    Pego1.PeAnnotation.Graph.X[aCnt] = nRndCol + 1;\par
                    Pego1.PeAnnotation.Graph.Y[aCnt] = Pego1.PeData.Y[nRndRow, nRndCol];\par
                    Pego1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.SmallDownTriangleSolid;\par
                    Pego1.PeAnnotation.Graph.Text[aCnt] = "";\par
                    Pego1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    Pego1.PeAnnotation.Graph.ZoomWindow[aCnt] = AnnotationZoomWindow.GraphAndZoomWindow;\par
                    aCnt++;\par
                    Pego1.PeAnnotation.Graph.X[aCnt] = nRndCol + 1;\par
                    Pego1.PeAnnotation.Graph.Y[aCnt] = Pego1.PeData.Y[nRndRow, nRndCol];\par
                    Pego1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pego1.PeAnnotation.Graph.Text[aCnt] = "Annotation " + annot.ToString();\par
                    Pego1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    aCnt++;\par
                \}\par
                Pego1.PeAnnotation.Show = true;\par
                Pego1.PeFont.GraphAnnotationTextSize = 110;\par
                Pego1.PeAnnotation.Graph.MinSymbolSize = MinimumPointSize.Large;\par
                Pego1.PeAnnotation.Graph.MaxSymbolSize = MinimumPointSize.Large;\par
                Pego1.PeUserInterface.HotSpot.GraphAnnotation = AnnotationHotSpot.GraphAndZoomWindow;\par
                Pego1.PePlot.ZoomWindow.ShowAnnotations = true;\par
\par
\par
                // v7.2 new features //\par
                Pego1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pego1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
                Pego1.PePlot.Option.LineSymbolThickness = 3;\par
                Pego1.PePlot.Option.AreaBorder = 0;\par
                Pego1.PePlot.Option.SolidLineOverArea = 1;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                Pego1.PeConfigure.ImageAdjustTop = 75;\par
                Pego1.PeConfigure.ImageAdjustLeft = 75;\par
                Pego1.PeConfigure.ImageAdjustRight = 75;\par
\par
                // Set various export defaults //\par
                Pego1.PeSpecial.DpiX = 600;\par
                Pego1.PeSpecial.DpiY = 600;\par
\par
                // Other default export setting //\par
                Pego1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pego1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pego1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pego1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pego1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pego1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                Pego1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pego1.PeConfigure.AntiAliasText = true;\par
                Pego1.PeConfigure.AntiAliasGraphics= true;\par
\par
\par
                /*///////////////////////////////////\par
                // DataHotSpot Event Handler      //\par
                ////////////////////////////////////\par
                private void Pego1_PeDataHotSpot(object sender, Gigasoft.ProEssentials.EventArg.DataHotSpotEventArgs e)\par
                \{\par
                    // Example 030 is only example with data hot spots //\par
                    Pego1.PeUserInterface.Cursor.Mode = CursorMode.Point;  // Enable Vertical Cursor Mode.\par
                    Pego1.PeUserInterface.Cursor.Point = e.PointIndex;  // Set Cursor's focus selected point.\tab\tab\tab\par
                \}\par
\par
                //////////////////////////////////\par
                // MouseMove Event Handler      //\par
                //////////////////////////////////\par
                private void Pego1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\par
                \{\par
                    double fX, fY;\par
                    float fHigh, fLow, fOpen, fClose, fVolume;\par
                    Int32 t, nA, nX, nY, pX, pY;\par
                    String szDate, szFmt;\par
                    System.Drawing.Point pt;\par
\par
                    pt = Pego1.PeUserInterface.Cursor.LastMouseMove;\par
                    pX = pt.X;\par
                    pY = pt.Y;\par
\par
                    nA = 0;       // Initialize axis, non-zero only if using MultiAxesSubsets\par
                    nX = pX;      // Initialize nX and nY with mouse location\par
                    nY = pY;\par
                    Pego1.PeFunction.ConvPixelToGraph(ref nA,ref nX,ref nY,ref fX,ref fY, false, false, false);\par
\par
                    // We now know data coordinates for mouse location //\par
\par
                    // Code to pick closest point index //\par
                    fY = Math.Abs(fX - Convert.ToInt32(fX));\par
                    if (fY > 0.5)\par
                        nX = Convert.ToInt32(fX);\par
                    else\par
                        nX = Convert.ToInt32(fX) - 1;\par
\par
                    if (nX < 0 || nX > 731)\par
                    \{  // 731 points per subset in data file\par
                        Pego1.PeAnnotation.Table.Text[11, 0] = "        ";\par
                        Pego1.PeAnnotation.Table.Text[12, 0] = "        ";\par
                        Pego1.PeAnnotation.Table.Text[13, 0] = "        ";\par
                        Pego1.PeAnnotation.Table.Text[14, 0] = "        ";\par
                        Pego1.PeAnnotation.Table.Text[15, 0] = "        ";\par
                        Pego1.PeAnnotation.Table.Text[16, 0] = "        ";\par
                        Pego1.PeFunction.DrawTable(0);\par
                        return;\par
                    \}\par
\par
                    nX = Convert.ToInt32(nX - 1.0F);\par
\par
                    // Get Data at closest point //\par
                    fHigh = Pego1.PeData.Y[0, nX];\par
                    fLow = Pego1.PeData.Y[1, nX];\par
                    fOpen = Pego1.PeData.Y[2, nX];\par
                    fClose = Pego1.PeData.Y[3, nX];\par
                    fVolume = Pego1.PeData.Y[7, nX];\par
                    szDate = Pego1.PeData.PointLabels[nX];\par
\par
                    // Place text in table annotation //\par
                    // Get numeric precision //\par
                    nX = Convert.ToInt32(Pego1.PeData.Precision);\par
                    szFmt = "###.";\par
                    for(t = 0; t <= (nX - 1); t++)\par
                        szFmt = szFmt + "0";\par
\par
                    // Place text in table annotation //\par
                    Pego1.PeAnnotation.Table.Working = 0;\par
                    Pego1.PeAnnotation.Table.Text[11, 0] = szDate;\par
                    Pego1.PeAnnotation.Table.Text[12, 0] = "H:" + String.Format("\{0:###.##\}",fHigh);\par
                    Pego1.PeAnnotation.Table.Text[13, 0] = "L:" + String.Format("\{0:###.##\}",fLow);\par
                    Pego1.PeAnnotation.Table.Text[14, 0] = "O:" + String.Format("\{0:###.##\}",fOpen);\par
                    Pego1.PeAnnotation.Table.Text[15, 0] = "C:" + String.Format("\{0:###.##\}",fClose);\par
                    Pego1.PeAnnotation.Table.Text[16, 0] = "V:" + String.Format("\{0:#############\}",fVolume);\par
\par
                    Pego1.PeFunction.DrawTable(0);\par
                \}\par
\par
                ////////////////////////////////////////////\par
                // PeCustomTrackingDataText Event Handler //\par
                ////////////////////////////////////////////\par
                private void Pego1_PeCustomTrackingDataText(object sender, Gigasoft.ProEssentials.EventArg.CustomTrackingDataTextEventArgs e)\par
                \{\par
                    double fX, fY;\par
                    float fHigh, fLow, fOpen, fClose, fVolume;\par
                    Int32 t, nA, nX, nY, pX, pY;\par
                    String szDate, szFmt;\par
                    Point pt;\par
                    fX = 0.0F;\par
                    fY = 0.0F;\par
\par
                    pt = Pego1.PeUserInterface.Cursor.LastMouseMove;\par
                    pX = (int)pt.X;\par
                    pY = (int)pt.Y;\par
\par
                    nA = 0;       // Initialize axis, non-zero only if using MultiAxesSubsets\par
                    nX = pX;      // Initialize nX and nY with mouse location\par
                    nY = pY;\par
                    Pego1.PeFunction.ConvPixelToGraph(ref nA, ref nX, ref nY, ref fX, ref fY, false, false, false);\par
\par
                    // We now know data coordinates for mouse location //\par
\par
                    // Code to pick closest point index //\par
                    fY = Math.Abs(fX - Convert.ToInt32(fX));\par
                    if (fY > 0.5)\par
                        nX = Convert.ToInt32(fX);\par
                    else\par
                        nX = Convert.ToInt32(fX) - 1;\par
\par
                    if (nX < 0 || nX > 731)\par
                    \{  // 731 points per subset in data file\par
                        Pego1.PeAnnotation.Table.Text[11, 0] = "        ";\par
                        Pego1.PeAnnotation.Table.Text[12, 0] = "        ";\par
                        Pego1.PeAnnotation.Table.Text[13, 0] = "        ";\par
                        Pego1.PeAnnotation.Table.Text[14, 0] = "        ";\par
                        Pego1.PeAnnotation.Table.Text[15, 0] = "        ";\par
                        Pego1.PeAnnotation.Table.Text[16, 0] = "        ";\par
                        Pego1.PeFunction.DrawTable(0);\par
                        return;\par
                    \}\par
\par
                    nX = Convert.ToInt32(nX - 1.0F);\par
\par
                    if (Pego1.PeUserInterface.Cursor.TrackingPromptTrigger  != TrackingTrigger.MouseMove)\par
                    \{\par
                        // Trigger not mouse, must be a cursormove event, get cursor location...\par
                        nX = Pego1.PeUserInterface.Cursor.Point;\par
                    \}\par
\par
                    // Get Data at closest point //\par
                    fHigh = Pego1.PeData.Y[0, nX];\par
                    fLow = Pego1.PeData.Y[1, nX];\par
                    fOpen = Pego1.PeData.Y[2, nX];\par
                    fClose = Pego1.PeData.Y[3, nX];\par
                    fVolume = Pego1.PeData.Y[7, nX];\par
                    szDate = Pego1.PeData.PointLabels[nX];\par
\par
                    // Place text in table annotation //\par
                    // Get numeric precision //\par
                    nX = Convert.ToInt32(Pego1.PeData.Precision);\par
                    szFmt = "###.";\par
                    for (t = 0; t <= (nX - 1); t++)\par
                    \{\par
                        szFmt = szFmt + "0";\par
                    \}\par
\par
                    String szPrompt;\par
\par
                    System.Globalization.CultureInfo MyCultureInfo = new System.Globalization.CultureInfo("en-US");\par
                    DateTime MyDateTime = DateTime.Parse(szDate, MyCultureInfo);\par
\par
                    szPrompt = MyDateTime.ToString("MM/dd/yyyy");\par
                    szPrompt += "    \\n";\par
                    szPrompt += "H:" + String.Format("\{0:" + szFmt + "\}", fHigh);\par
                    szPrompt += "\\n";\par
                    szPrompt += "L:" + String.Format("\{0:" + szFmt + "\}", fLow);\par
                    szPrompt += "\\n";\par
                    szPrompt += "O:" + String.Format("\{0:" + szFmt + "\}", fOpen);\par
                    szPrompt += "\\n";\par
                    szPrompt += "C:" + String.Format("\{0:" + szFmt + "\}", fClose);\par
                    szPrompt += "\\n";\par
                    szPrompt += "V:" + String.Format("\{0:#############\}", fVolume);\par
\par
                    e.TrackingText = szPrompt;\par
                \}\par
\par
                /////////////////////////////////////////////\par
                // Table Annotation Hot Spot Event Handler //\par
                /////////////////////////////////////////////\par
                private void Pego1_PeTableAnnotation(object sender, Gigasoft.ProEssentials.EventArg.TableAnnotationEventArgs e)\par
                \{\par
                    Int32 i;\tab\tab\tab\par
                    if(e.WorkingTable == 0) \par
                    \{  // zero represents first table annotation\par
                        Pego1.PeGrid.Zoom.Mode = false;\par
                        Pego1.PeUserInterface.Scrollbar.PointsToGraph = 0; // plot all points\par
\par
                        // Change color of selected table item //\tab\tab\tab\par
                        for(i = 0; i <= 9; i++)\par
                            Pego1.PeAnnotation.Table.Color[i, 0] = Color.FromArgb(255, 142, 142, 142);\par
                        Pego1.PeAnnotation.Table.Color[e.RowIndex, e.ColumnIndex] = Color.FromArgb(255, 198, 0, 0);\par
\par
                        String szSym;\par
                        szSym = Pego1.PeAnnotation.Table.Text[e.RowIndex, e.ColumnIndex];\par
                        szSym = szSym.Trim();\par
\par
                        // OK, Change Data //\par
                        LoadData(szSym);\par
\par
                        Pego1.PeFunction.Reinitialize();\par
                        Pego1.PeFunction.ResetImage(0, 0);\par
                        System.Drawing.Rectangle rect;\par
                        rect = Pego1.PeFunction.GetRectGraph();\par
                        Pego1.Invalidate(rect);\par
                        Pego1.Refresh();\par
                    \}\par
                \}\tab\tab\par
\par
                '////////////////////////////////////\par
                '// CursorMoved Event Handler      //\par
                '////////////////////////////////////\par
                private void Pego1_PeCursorMoved(object sender, System.EventArgs e)\par
                \{\tab\par
                    Int32 nX, t;\par
                    float fHigh, fLow, fOpen, fClose, fVolume;\par
                    String szDate, szFmt;\par
\par
                    nX = Pego1.PeUserInterface.Cursor.Point;\par
\par
                    // Get Data at closest point //\par
                    fHigh = Pego1.PeData.Y[0, nX];\par
                    fLow = Pego1.PeData.Y[1, nX];\par
                    fOpen = Pego1.PeData.Y[2, nX];\par
                    fClose = Pego1.PeData.Y[3, nX];\par
                    fVolume = Pego1.PeData.Y[7, nX];\par
                    szDate = Pego1.PeData.PointLabels[nX];\par
\par
                    // Get numeric precision //\par
                    nX = Convert.ToInt32(Pego1.PeData.Precision);\par
\par
                    szFmt = "###.";\par
                    for( t = 0; t <= (nX - 1); t++)\par
                        szFmt = szFmt + "0";\par
\par
                    // Place text in table annotation //\par
                    Pego1.PeAnnotation.Table.Working = 0;\par
                    Pego1.PeAnnotation.Table.Text[11, 0] = szDate;\par
                    Pego1.PeAnnotation.Table.Text[12, 0] = "H:" + String.Format("\{0:" + szFmt + "\}",fHigh);\par
                    Pego1.PeAnnotation.Table.Text[13, 0] = "L:" + String.Format("\{0:" + szFmt + "\}",fLow);\par
                    Pego1.PeAnnotation.Table.Text[14, 0] = "O:" + String.Format("\{0:" + szFmt + "\}",fOpen);\par
                    Pego1.PeAnnotation.Table.Text[15, 0] = "C:" + String.Format("\{0:" + szFmt + "\}",fClose);\par
                    Pego1.PeAnnotation.Table.Text[16, 0] = "V:" + String.Format("\{0:#############\}",fVolume);\par
\par
                    Pego1.PeFunction.DrawTable(0);\par
                \}\par
\par
                ///////////////////////\par
                // LoadData Function //\par
                ///////////////////////\par
                private void LoadData(String newName)\par
                \{\par
                    // Function to load financial data from a comma delimited file //\tab\tab\tab\par
                    String szFile;\par
                    szFile = newName + ".txt";\par
\par
                    float[] y1 = new float[1000];\par
                    float[] y2 = new float[1000];\par
                    float[] y3 = new float[1000];\par
                    float[] y4 = new float[1000];\par
                    float[] y5 = new float[1000];\par
                    double[] X0 = new double[1000];\par
                    String[] Xs = new String[1000];\par
                    Int32 c = 0, i, day, month, year, nCnt;\par
                    String s;  \par
                    String sDate, sOpen, sHigh, sLow, sClose, sVolume;\par
                    Double dstart;\par
                    String[] TempArray = new String[6];\par
                    System.DateTime d;\tab\tab\tab\par
\par
                    // Open Data File //\par
                    StreamReader sr = File.OpenText(szFile);\par
                    String input;\par
                    while ((input=sr.ReadLine())!=null) \par
                    \{\par
                        TempArray = input.Split(',');\par
\par
                        sDate = TempArray[0];\par
                        sOpen = TempArray[1];\par
                        sHigh = TempArray[2];\par
                        sLow = TempArray[3];\par
                        sClose = TempArray[4];\par
                        sVolume = TempArray[5];\par
\par
                        // Get date and transfer into a number\par
                        year = Convert.ToInt32(sDate.Substring(0,2));\par
                        if( year > 90)\par
                            year = year + 1900;\par
                        else if( year < 10 )\par
                            year = year + 2000;\par
\par
                        month = Convert.ToInt32(sDate.Substring(2,2));\par
                        day = Convert.ToInt32(sDate.Substring(4,2));\par
                        Xs[c] = Convert.ToString(month) + "/" + Convert.ToString(day) + "/" + year.ToString();\par
                        d = Convert.ToDateTime(Convert.ToString(month) + "/" + Convert.ToString(day) + "/" + year.ToString());\par
                        X0[c] = d.Date.ToOADate() + 0.5; // .5 means Give daily data a time of noon\par
\par
                        // store Open, High, Low, Close, and Volume //\par
                        y1[c] = Convert.ToSingle(sOpen);\par
                        y2[c] = Convert.ToSingle(sHigh);\par
                        y3[c] = Convert.ToSingle(sLow);\par
                        y4[c] = Convert.ToSingle(sClose);\par
                        y5[c] = Convert.ToSingle(sVolume);\par
\par
                        c = c + 1;\par
                    \}\tab\tab\tab\par
                    sr.Close();\par
\par
                    // Pass data into chart //\par
                    nCnt = c - 1;\par
                    Pego1.PeData.StartTime = X0[0]; //dstart\par
\par
                    Pego1.PeData.Subsets = 11;\par
                    Pego1.PeData.Points = nCnt;\par
                    Pego1.PeData.UsingXDataii = true;\par
\par
                    //! Empty data so we can make sure we are completely resetting //\par
                    Pego1.PeData.Y[0, -1] = 0;\par
                    Pego1.PeData.Xii[0, -1] = 0;\par
                    Pego1.PeData.PointLabels[-1] = "0";  //! note 0 in quotes\par
                    //! -1 above is a special index that tells ProEssentials you are resizing property\par
                \tab\par
                    for( i = 0; i <= (nCnt - 1); i++)\par
                    \{\par
                        Pego1.PeData.Y[0, i] = y2[i]; // high\par
                        Pego1.PeData.Y[1, i] = y3[i]; // low\par
                        Pego1.PeData.Y[2, i] = y1[i]; // open\par
                        Pego1.PeData.Y[3, i] = y4[i]; // close\par
                        Pego1.PeData.Y[7, i] = y5[i]; // volume\par
                        Pego1.PeData.Xii[0, i] = X0[i];\par
                        Pego1.PeData.PointLabels[i] = Xs[i].ToString();\par
                    \}\par
\par
                    // We now have data, let's make some studies //\par
\par
                    ////////////////////////////////////////////////////////////////////\par
                    // Bollinger Bands //\par
                    /////////////////////\par
\par
                    Int32 pnt;\par
                    float f;\par
                    double Days, Total, Total2, SMAfBB, BBNum;\tab\tab\tab\par
                    float[] pYD3 = new float[nCnt];\par
\par
                    for( pnt = 0; pnt <= (nCnt - 1); pnt++)\par
                        pYD3[pnt] = Pego1.PeData.Y[3, pnt];\par
\par
                    // Middle Band = SMA\par
                    Days = 20;\tab\tab\tab\par
                    for(pnt = 0; pnt <= (nCnt - Days - 1); pnt++)\par
                    \{\par
                        Total = 0;\tab\tab\tab\tab\tab\tab\tab\tab\par
                        for( i = (0 + pnt); i <= (Days + pnt - 1); i++)\par
                            Total = Total + pYD3[i];\par
                        f = (float)(Total / Days);\par
                        Pego1.PeData.Y[5, Convert.ToInt32(pnt + Days - 1)] = f;\par
                    \}\par
\par
                    // Upper Band = Middle Band + [Standard Deviation * Square Root\{[Sum for x Days((Closing Price - Middle Band)^2)]/Days]\tab\tab\tab\par
                    for( pnt = 0; pnt <= (nCnt - Days - 1); pnt++)\par
                    \{\par
                        Total = 0;\tab\tab\tab\tab\par
                        for( i = (0 + pnt); i <= (Days + pnt - 1); i++)\par
                            Total = Total + pYD3[i];\par
                        SMAfBB = Total / Days;\par
                        // Find sum of Closing Price minus SMA over days and square\par
                        BBNum = 0;\tab\tab\tab\tab\par
                        for( i = (0 + pnt); i <= (Days + pnt - 1); i++)\par
                            BBNum = ((pYD3[i] - SMAfBB) * (pYD3[i] - SMAfBB)) + BBNum;\par
                        f = (float)(SMAfBB + 2.0F * Math.Sqrt(BBNum / Days));\par
                        Pego1.PeData.Y[4,Convert.ToInt32(pnt + Days - 1)] = f;\par
                    \}\par
\par
                    // Lower Band = Middle Band - [Standard Deviation * Square Root\{[Sum for x Days((Closing Price - Middle Band)^2)]/Days]\par
                    for( pnt = 0; pnt <= (nCnt - Days - 1); pnt++)\par
                    \{\par
                        Total = 0;\tab\tab\tab\tab\tab\tab\tab\tab\par
                        for( i = (0 + pnt); i <= (Days + pnt - 1); i++)\par
                            Total = Total + pYD3[i];\par
                        SMAfBB = Total / Days;\par
                        // Find sum of Closing Price minus SMA over days and square\par
                        BBNum = 0;\par
                        for( i = (0 + pnt); i <= (Days + pnt - 1); i++)\par
                            BBNum = ((pYD3[i] - SMAfBB) * (pYD3[i] - SMAfBB)) + BBNum;\par
                        f = (float)(SMAfBB - 2.0F * Math.Sqrt(BBNum / Days));\par
                        Pego1.PeData.Y[6, Convert.ToInt32(pnt + Days - 1)] = f;\par
                    \}\par
\par
                    ////////////////////////////////////////////////////////////////////////////////////\par
                    // Relative Strength Index //\par
                    /////////////////////////////\par
                    Total = 0;\par
                    Total2 = 0;\par
                    float RS, RSI;\tab\tab\tab\par
                    Int32 LowerCount = 0, UpperCount = 0;\par
\par
                    // How many days do you want to check\par
                    Days = 10;\par
\par
                    float[] pUpperArray = new float[nCnt];\par
                    float[] pLowerArray = new float[nCnt];\par
\par
                    // Find the amount the price closed UP from the previous day\par
                    // also find the amount the price closed down from the previous day.\par
                    // Over the designated time period.\par
\par
                    for( i = 1; i <= Days; i++)\par
                    \{\par
                        if((pYD3[i] - pYD3[i - 1]) < 0) \par
                        \{\par
                            pLowerArray[LowerCount] = (pYD3[i] - pYD3[i - 1]);\par
                            LowerCount = LowerCount + 1;\par
                        \}\tab\tab   \par
                        else\par
                        \{\par
                            pUpperArray[UpperCount] = (pYD3[i] - pYD3[i - 1]);\par
                            UpperCount = UpperCount + 1;\par
                        \}\par
                    \}\par
\par
                    // Total the amounts over the period\par
                    Total = 0;\tab\tab\tab\par
                    for(i = 0; i <= (LowerCount - 1); i++)\par
                        Total = pLowerArray[i] + Total;\par
                    Total2 = 0;\tab\tab\par
                    for(i = 0; i <= (UpperCount - 1); i++)\par
                        Total2 = pUpperArray[i] + Total2;\par
                    // Divide up by down\par
                    RS = (float)((Total2 / Days) / (Math.Abs(Total) / Days));\par
\par
                    // Use the RSI formula\par
                    RSI = 100.0F - (100.0F / (1.0F + RS));\par
                    Pego1.PeData.Y[8, Convert.ToInt32(Days - 1)] = RSI;\par
\par
                    for(i = Convert.ToInt32(Days); i <= (nCnt - 1); i++)\par
                    \{\par
                        if(pYD3[i] != 0 && pYD3[i - 1] != 0) \par
                        \{\par
                            Total = Total * (Days - 1);\par
                            Total2 = Total2 * (Days - 1);\par
\par
                            if((pYD3[i] - pYD3[i - 1]) < 0) \par
                                Total = (pYD3[i] - pYD3[i - 1]) + Total;\par
                            else\par
                                Total2 = (pYD3[i] - pYD3[i - 1]) + Total2;\par
                            Total = Total / Days;\par
                            Total2 = Total2 / Days;\par
                            RS = (float)((Total2) / (Math.Abs(Total)));\par
                            RSI = 100.0F - (100.0F / (1.0F + RS));\par
                            Pego1.PeData.Y[8, Convert.ToInt32(Days - 1 + i)] = RSI;\par
                        \}\par
                    \}\par
\par
                    // Add a mid axis line annotation\par
                    Pego1.PeAnnotation.Line.YAxis[0] = 50.0;\par
                    Pego1.PeAnnotation.Line.YAxisAxis[0] = 2;\par
                    Pego1.PeAnnotation.Line.YAxisType[0] = LineAnnotationType.MediumThinSolid;\par
                    Pego1.PeAnnotation.Line.YAxisColor[0] = Color.FromArgb(255, 255, 0, 0);\par
                    Pego1.PeAnnotation.Show = true;\par
\par
                    // Set the working axis extents\par
                    Pego1.PeGrid.WorkingAxis = 2;\par
                    Pego1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                    Pego1.PeGrid.Configure.ManualMinY = 0;\par
                    Pego1.PeGrid.Configure.ManualMaxY = 100;\par
\par
                    /////////////////////////////////////////////////////////////////////\par
                    // Stochastic Oscillator //\par
                    ///////////////////////////\par
                    Int32 SwFac, Dperiod, q;\par
                    float LowMin, HighMax, SlowK, Dfactor, PercentD;\par
\par
                    LowMin = 9999.9F;\par
                    HighMax = 0.0F;\par
\par
                    float[] pSlowOC = new float[nCnt + 1];\par
                    float[] pKperiod = new float[nCnt + 1];\par
                    float[] pHigh = new float[nCnt + 1];\par
                    float[] pLow = new float[nCnt + 1];\par
\par
                    for( pnt = 0; pnt <= (nCnt - 1); pnt++)\par
                    \{\par
                        pHigh[pnt] = Pego1.PeData.Y[0, pnt];\par
                        pLow[pnt] = Pego1.PeData.Y[1, pnt];\par
                    \}\par
\par
                    // How many days do you want to check\par
                    Days = 30;\par
                    SwFac = 1;\par
                    Dperiod = 15;\par
\par
                    for(pnt = 0; pnt <= (nCnt - Days - 1); pnt++)\par
                    \{\par
                        for( i = pnt; i <= (Days + pnt - 1); i++)\par
                        \{\par
                            if(pHigh[i] != 0) \par
                            \{\par
                                if(pHigh[i] > HighMax) \par
                                    HighMax = pHigh[i];\par
                            \}\par
                        \}\par
                        for( i = pnt; i <= (Days + pnt - 1); i++)\par
                        \{\par
                            if(pLow[i] != 0) \par
                            \{\par
                                if(pLow[i] < LowMin)\par
                                    LowMin = pLow[i];\par
                            \}\par
                        \}\par
                        if(pYD3[Convert.ToInt32(Days - 1 + pnt)] != 0) \par
                            pKperiod[pnt] = ((pYD3[Convert.ToInt32(Days - 1 + pnt)] - LowMin) / (HighMax - LowMin)) * 100.0F;\par
                        LowMin = 9999.9F;\par
                        HighMax = 0.0F;\par
                    \}\par
\par
                    for(pnt = 0; pnt <= (nCnt - 1 - SwFac); pnt++)\par
                    \{\par
                        SlowK = 0;\par
                        for( q = pnt; q <= (SwFac + pnt - 1); q++)\par
                            SlowK = pKperiod[q] + SlowK;\par
                        pSlowOC[pnt] = SlowK / SwFac;\par
                        Pego1.PeData.Y[9, Convert.ToInt32(Days + pnt + SwFac)] = pSlowOC[pnt];\par
                    \}\par
                    for( pnt = 0; pnt <= nCnt - 1 - Dperiod; pnt++)\par
                    \{\par
                        PercentD = 0;\par
                        for( q = pnt; q <= (Dperiod + pnt - 1); q++)\par
                            PercentD = pSlowOC[q] + PercentD;\par
                        Dfactor = PercentD / Dperiod;\par
                        Pego1.PeData.Y[10, Convert.ToInt32(Days + pnt + Dperiod)] = Dfactor;\par
                    \}\par
\par
                    // Set the working axis extents\par
                    Pego1.PeGrid.WorkingAxis = 3;\par
                    Pego1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                    Pego1.PeGrid.Configure.ManualMinY = 0;\par
                    Pego1.PeGrid.Configure.ManualMaxY = 100;\par
                    \par
                \}*/\par
\par
            \}\par
            else if(MainWindow.m_nChart == 31)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //031  Graph showing Subset Obstacles\par
\par
                //! Note how annotation text does not overlap lines in bottom axes.\par
                //! Left click and drag to zoom chart.  Note how text locations change as you zoom.\par
                //! Left click and drag annotation text to move annotation text.\par
                //!\par
                //! This example demonstrates new annotation text positioning logic which prevents all text\par
                //! from overlapping.  It also shows how to 1) manually position text with an annotation,\par
                //! 2) allow user to move annotation text, and 3) declare subsets as obstacles so annotation text\par
                //! doesn't overlap subsets.  It also ahows how to change the default location where\par
                //! annotation text is automatically positioned.\par
\par
                // Pass Data\par
                Pego1.PeData.Subsets = 4;\par
                Pego1.PeData.Points = 100;\par
\par
                Boolean bAddAnnot;\par
                Int32 nCount, p;\par
                String[] szs = new String[5];\par
                szs[0] = "High";\par
                szs[1] = "Medium High";\par
                szs[2] = "Medium";\par
                szs[3] = "Medium Low";\par
                szs[4] = "Low";\par
\par
                bAddAnnot = false;\par
                nCount = 0;\par
                for(p = 0; p <= 99; p++)\par
                \{\par
                    Pego1.PeData.Y[0, p] = (float)(105.0F + (20 * Math.Sin(0.1 * p)) + (5 * Rand_Num.NextDouble()));\par
                    Pego1.PeData.Y[1, p] = (float)(105.0F + (20 * Math.Sin(0.1 * p)) + (5 * Rand_Num.NextDouble()) + 30);\par
                    Pego1.PeData.Y[2, p] = (float)(105.0F + (20 * Math.Sin(0.4 * p)) + (5 * Rand_Num.NextDouble()) + 30);\par
                    Pego1.PeData.Y[3, p] = (float)(105.0F + (20 * Math.Sin(0.1 * p)) + (5 * Rand_Num.NextDouble()) + 20);\par
\par
                    if(bAddAnnot) \par
                    \{\par
                        Pego1.PeAnnotation.Graph.X[nCount] = p + 1;\par
                        Pego1.PeAnnotation.Graph.Y[nCount] = Pego1.PeData.Y[1, p];\par
\par
                        Pego1.PeAnnotation.Graph.Text[nCount] = szs[Convert.ToInt32(Rand_Num.NextDouble() * 4.5)];\par
                        Pego1.PeAnnotation.Graph.Type[nCount] = (int) GraphAnnotationType.Pointer;\par
                        Pego1.PeAnnotation.Graph.Axis[nCount] = 1;\par
\par
                        nCount = nCount + 1;\par
                    \}\par
                    bAddAnnot = !bAddAnnot;\par
                \}\par
\par
                // The following code manully places annotation text at separate coordinates than annotation. //\par
                // GraphAnnotationText has |H special justifation code which signifies that coordinates follow. //\par
                // Note that coordinates are split and terminated with pipe symbol. //\par
                Pego1.PeAnnotation.Graph.X[nCount] = 20;\par
                Pego1.PeAnnotation.Graph.Y[nCount] = 90;\par
                Pego1.PeAnnotation.Graph.Text[nCount] = "|H33.0|120.0|Text offset from pointer";\par
                Pego1.PeAnnotation.Graph.Type[nCount] = Convert.ToInt32(GraphAnnotationType.Pointer);\par
\par
                // Set Plotting Methods per Subset //\par
                Pego1.PePlot.Methods[0] = GraphPlottingMethods.Bar;\par
                Pego1.PePlot.Methods[1] = GraphPlottingMethods.Line;\par
                Pego1.PePlot.Methods[2] = GraphPlottingMethods.PointsPlusBestFitCurveGraphed;\par
                Pego1.PePlot.Methods[3] = GraphPlottingMethods.Step;\par
                Pego1.PePlot.Option.BestFitDegree = BestFitDegree.Fourth;\par
\par
                // Designate 2nd, 3rd, and 4th subset as obstacles //\par
                Pego1.PeAnnotation.Graph.SubsetObstacles[0] = false;\par
                Pego1.PeAnnotation.Graph.SubsetObstacles[1] = true;\par
                Pego1.PeAnnotation.Graph.SubsetObstacles[2] = true;\par
                Pego1.PeAnnotation.Graph.SubsetObstacles[3] = true;\par
\par
                // This code replaces the first default text location attempted for automatic text placement //\par
                // Setting to 270 causes text to be centered above annotation location if no obstacle is found //\par
                Pego1.PeAnnotation.Graph.TextLocation[0] = 270;\par
\par
                // Show annotations and allow graph hot spots and moveable annotation text //\par
                Pego1.PeAnnotation.Show = true;\par
                Pego1.PeUserInterface.HotSpot.GraphAnnotation = AnnotationHotSpot.GraphOnly;\par
                Pego1.PeAnnotation.Graph.Moveable = Convert.ToBoolean(GraphAnnotMoveable.Pointer);\par
\par
                // Split up subsets among different axes //\par
                Pego1.PeGrid.MultiAxesSubsets[0] = 1;\par
                Pego1.PeGrid.MultiAxesSubsets[1] = 3;\par
                Pego1.PeGrid.MultiAxesProportions[0] = 0.3F;\par
                Pego1.PeGrid.MultiAxesProportions[1] = 0.7F;\par
\par
                Pego1.PeString.MainTitle = "Drag a string";\par
                Pego1.PeString.SubTitle = "";\par
                Pego1.PeUserInterface.Allow.FocalRect = false;\par
                Pego1.PeGrid.LineControl = GridLineControl.None;\par
                Pego1.PeUserInterface.Allow.Zooming = AllowZooming.Horizontal;\par
                Pego1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                // Subset labels //\par
                Pego1.PeString.SubsetLabels[0] = "Texas";\par
                Pego1.PeString.SubsetLabels[1] = "Florida";\par
                Pego1.PeString.SubsetLabels[2] = "Washington";\par
                Pego1.PeString.SubsetLabels[3] = "California";\par
\par
                // Subset colors //\par
                Pego1.PeColor.SubsetColors[0] = Color.FromArgb(255, 192, 192, 198);\par
                Pego1.PeColor.SubsetColors[1] = Color.FromArgb(255, 0, 198, 198);\par
                Pego1.PeColor.SubsetColors[2] = Color.FromArgb(255, 198, 198, 0);\par
                Pego1.PeColor.SubsetColors[3] = Color.FromArgb(255, 0, 198, 0);\par
\par
                // Subset line types //\par
                Pego1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[2] = LineType.MediumSolid;\par
                Pego1.PeLegend.SubsetLineTypes[3] = LineType.MediumSolid;\par
\par
                // Various other features //\par
                Pego1.PeFont.Fixed = true;\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightLine;\par
                Pego1.PeLegend.SimplePoint = true;\par
                Pego1.PeLegend.SimpleLine = true;\par
                Pego1.PeLegend.Style = LegendStyle.OneLine;\par
\par
                Pego1.PeFont.GraphAnnotationTextSize = 85;\par
                Pego1.PeUserInterface.Menu.AnnotationControl = true;\par
                Pego1.PePlot.MarkDataPoints = true;\par
                Pego1.PeGrid.Option.MultiAxisStyle = MultiAxisStyle.SeparateAxes;\par
                Pego1.PeUserInterface.Menu.MultiAxisStyle = MenuControl.Show;\par
                Pego1.PeUserInterface.Menu.LegendLocation = MenuControl.Show;\par
                Pego1.PePlot.Allow.Step = true;\par
                Pego1.PePlot.DataShadows = DataShadows.Shadows;\par
\par
                Pego1.PePlot.Option.GradientBars = 8;\par
                Pego1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pego1.PeFont.MainTitle.Bold = true;\par
                Pego1.PeFont.SubTitle.Bold = true;\par
                Pego1.PeFont.Label.Bold = true;\par
                Pego1.PePlot.Option.LineShadows = true;\par
                Pego1.PeFont.FontSize = FontSize.Medium;\par
                Pego1.PeUserInterface.Scrollbar.PointsToGraph = 50;\par
\par
                // v7.2 new features //\par
                Pego1.PePlot.Option.PointGradientStyle = PlotGradientStyle.RadialTopLeft;\par
                Pego1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
                Pego1.PePlot.Option.LineSymbolThickness = 3;\par
                Pego1.PePlot.Option.AreaBorder = 1;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                // Set various export defaults //\par
                Pego1.PeSpecial.DpiX = 600;\par
                Pego1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pego1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pego1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pego1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pego1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pego1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pego1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                // v9 features\par
                Pego1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pego1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pego1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
\par
                Pego1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pego1.PeConfigure.AntiAliasGraphics = true;\par
                Pego1.PeConfigure.AntiAliasText = true;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 32)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //032  Graph showing 16 Axes\par
\par
                //! Also added is AxisBackColor, AxisForeColor, and AxisBorderType.\par
                //! Select Graph menu from within the View menu to maximize this example.\par
\par
                // Disable Banding //\par
                Pego1.PeGrid.GridBands = false;\par
    \par
                Pego1.PeConfigure.PrepareImages = true;\par
    \par
                // Pass Data //\par
                Pego1.PeData.Subsets = 32;\par
                Pego1.PeData.Points = 100;\par
\par
                float fRnd;\par
                int s;\par
                int p;\par
                for (s=0; s < 32; s++)\par
                \{\par
                    fRnd = (float) (9.0F * Rand_Num.NextDouble()) + 2.0F;\par
\par
                    // pass 100 points of subset data //\par
                    for (p = 0; p < 100; p++)\par
                        Pego1.PeData.Y[s, p] = (float) (10.0F + (0.6F * fRnd * System.Math.Sin(fRnd * p)));\par
\par
                    // set subsetlabel //\par
                    Pego1.PeString.SubsetLabels[s] = "Sin" + String.Format(".#",fRnd);\par
                \}\par
\par
                // Set various axis parameters //\par
                int axis;\par
                for (axis = 0; axis < 16; axis++)\par
                \{\par
                    Pego1.PeGrid.WorkingAxis = axis;\par
                    Pego1.PeGrid.Option.ShowYAxis = ShowAxis.GridNumbers;\par
\par
                    // set y axis label //\par
                    p = axis + 1;\par
                    Pego1.PeString.YAxisLabel = "Axis" + p.ToString();\par
\par
                    Pego1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax; \par
                    Pego1.PeGrid.Configure.ManualMinY = 0.0F;\par
                    Pego1.PeGrid.Configure.ManualMaxY = 20.0F;\par
                    \par
                    Pego1.PePlot.Method= GraphPlottingMethod.Line;\par
                    Pego1.PePlot.ComparisonSubsets = 1;\par
                    Pego1.PePlot.MethodII = GraphPlottingMethodII.Step; \par
                \}\par
       \par
                // Set various subset parameters //\par
                Color[] dwArray = new Color[2];\par
                dwArray[0] = Color.FromArgb(79, 0, 32, 198);\par
                dwArray[1] = Color.FromArgb(199, 225, 0, 0);\par
\par
                int nColorIndex;\par
                nColorIndex = 0;\par
                for (s = 0; s < 32; s++)\par
                \{\par
                    Pego1.PePlot.SubsetLineTypes[s] = LineType.ThinSolid; \par
                    Pego1.PeColor.SubsetColors[s] = dwArray[nColorIndex];\par
                    nColorIndex = nColorIndex + 1;\par
                    if (nColorIndex > 1) nColorIndex = 0;\par
                \}\par
\par
                // Set various point parameters //\par
                for (p = 0; p < 100; p++)\par
                    Pego1.PeString.PointLabels[p] = "Data#" + String.Format("#", p+1); \par
                \par
                Pego1.PeGrid.ForceVerticalPoints=ForceVerticalPoints.Horizontal; \par
\par
                // Various other features //\par
                Pego1.PeFont.Fixed = true;\par
                Pego1.PeFont.FontSize = FontSize.Small; \par
                Pego1.PeFont.SizeGlobalCntl = 0.9F;\par
                \par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightNoBorder; \par
                \par
                Pego1.PeLegend.SimplePoint = true;\par
                Pego1.PeLegend.SimpleLine = true;\par
                Pego1.PeLegend.Style = LegendStyle.OneLineInsideOverlap;\par
\par
                // Split up subsets among different axes //\par
                Pego1.PeGrid.MultiAxesSubsets[0] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[1] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[2] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[3] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[4] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[5] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[6] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[7] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[8] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[9] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[10] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[11] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[12] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[13] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[14] = 2;\par
                Pego1.PeGrid.MultiAxesSubsets[15] = 2;\par
                \par
                Pego1.PeGrid.Option.MultiAxisStyle = MultiAxisStyle.SeparateAxes; \par
                Pego1.PeGrid.Option.MultiAxisSeparatorSize = 65;\par
                Pego1.PeUserInterface.Menu.MultiAxisStyle = MenuControl.Show; \par
                \par
                Pego1.PeString.MainTitle = "16 Axes with axis forecolor backcolor mouse control";\par
                Pego1.PeString.SubTitle = "";\par
                Pego1.PeUserInterface.Allow.FocalRect = false;\par
                Pego1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert; \par
                Pego1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not; \par
\par
                Pego1.PePlot.Allow.Step = true;\par
                Pego1.PePlot.DataShadows = DataShadows.None; \par
\par
                Pego1.PePlot.Option.GradientBars = 12;\par
                Pego1.PeString.TextShadows = TextShadows.NoShadows; \par
                Pego1.PeFont.MainTitle.Bold = true;\par
                Pego1.PeFont.SubTitle.Bold = true;\par
                Pego1.PeFont.Label.Bold = true;\par
                Pego1.PePlot.Option.LineShadows = true;\par
                Pego1.PeUserInterface.Scrollbar.PointsToGraph = 50;\par
                \par
                Pego1.PeColor.GraphForeground = Color.FromArgb(50, 0, 0, 0);\par
                Pego1.PeGrid.LineControl = GridLineControl.Both; \par
                Pego1.PeGrid.Style = GridStyle.Dot; \par
\par
                // v7.2 new features //\par
                Pego1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pego1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
                Pego1.PePlot.Option.LineSymbolThickness = 3;\par
                Pego1.PePlot.Option.AreaBorder = 1;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                // Set various export defaults //\par
                Pego1.PeSpecial.DpiX = 600;\par
                Pego1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pego1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pego1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pego1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pego1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pego1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pego1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pego1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                // v9 features\par
                Pego1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pego1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pego1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.YValue;\par
                \par
                Pego1.PeConfigure.RenderEngine = RenderEngine.Direct2D; \par
\par
                ///////////////////////////////////\par
                // Mouse Move Event ///////////////\par
                ///////////////////////////////////\par
                /*\par
                private void Pego1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)\par
\tab     \tab     \{\par
                    if (Pego1.PeUserInterface.Cursor.ProcessingMouseMove == true) \par
                        return;\par
\par
                    // If mouse is inside an axis, change it's back color to WHITE //\par
                    // Determine if mouse is within an axis //\par
\par
                    int a;\par
                    int nChangedAxisColor;\par
                    nChangedAxisColor = -1;\par
\par
                    // get last mouse location within control //'\par
                    System.Drawing.Point pt;\par
                    System.Drawing.Rectangle rect;\par
                    pt = Pego1.PeUserInterface.Cursor.LastMouseMove;\par
\par
                    for (a = 0; a < 16; a++)\par
                    \{\par
                        // test to see if this is within axis area //'\par
                        Pego1.PeGrid.WorkingAxis = a;\par
                        rect = Pego1.PeFunction.GetRectAxis();\par
                        if (pt.X > rect.Left && pt.X < rect.Right && pt.Y > rect.Top && pt.Y < rect.Bottom)\par
                        \{\par
                            if (Pego1.PeColor.AxisBackColor != Color.FromArgb(255, 255, 255, 255))\par
                            \{\par
                                Pego1.PeColor.AxisBackColor = Color.FromArgb(255, 255, 255, 255);\par
                                Pego1.PeColor.AxisForeColor = Color.FromArgb(255, 255, 0, 0);\par
                                nChangedAxisColor = a;\par
                            \}\par
                            break;\par
                        \}\par
                    \}\par
\par
                    if (nChangedAxisColor != -1)\par
                    \{\par
                        for (a = 0; a < 16; a++)\par
                        \{\par
                            if (a != nChangedAxisColor)\par
                            \{\par
                                Pego1.PeGrid.WorkingAxis = a;\par
                                Pego1.PeColor.AxisBackColor = Color.FromArgb(0,1,0,0);   // Empty color \par
                                Pego1.PeColor.AxisForeColor = Color.FromArgb(0,1,0,0);\par
                            \}\par
                        \}\par
                        Pego1.Refresh();\par
                    \}\par
                \}*/\par
\par
            \}\par
            else if(MainWindow.m_nChart == 33)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //033  Graph subset order control\par
\par
                //! New features SubsetsToShow and SubsetsToTable control visibility\par
                //! of subsets within the chart and table regions.\par
                //! SubsetsToShow not only controls visibility, but can also control the order.\par
                //! RandomSubsetsToGraph can also control order and visibility of subsets plotted.\par
\par
                CreateSimpleGraph(Pego1);\par
                \par
                Pego1.PePlot.Method = GraphPlottingMethod.BarStacked; \par
                Pego1.PeColor.QuickStyle = QuickStyle.LightShadow;\par
                Pego1.PeLegend.Style = LegendStyle.OneLine;\par
                Pego1.PeLegend.Location = LegendLocation.Left; \par
                \par
                // Controlling order how subsets are plotted //\par
                Pego1.PeData.RandomSubsetsToGraph[0] = 3;\par
                Pego1.PeData.RandomSubsetsToGraph[1] = 2;\par
                Pego1.PeData.RandomSubsetsToGraph[2] = 1;\par
                Pego1.PeData.RandomSubsetsToGraph[3] = 0;\par
                \par
                // Controlling order of items in legend //\par
                Pego1.PeLegend.SubsetsToLegend[0] = 0;\par
                Pego1.PeLegend.SubsetsToLegend[1] = 1;\par
                Pego1.PeLegend.SubsetsToLegend[2] = 2;\par
                Pego1.PeLegend.SubsetsToLegend[3] = 3;\par
                \par
                // Controlling order of items in table below chart //\par
                Pego1.PeTable.SubsetsToTable[0] = 0;\par
                Pego1.PeTable.SubsetsToTable[1] = 1;\par
                Pego1.PeTable.SubsetsToTable[2] = 2;\par
                Pego1.PeTable.SubsetsToTable[3] = 3;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 34)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //034  Graph with moveable table\par
                \par
                //! New features SubsetsToShow and SubsetsToTable control visibility\par
                //! of subsets within the chart and table regions.\par
                //! SubsetsToShow not only controls visibility, but can also control the order.\par
                //! RandomSubsetsToGraph can also control order and visibility of subsets plotted.\par
\par
                CreateSimpleGraph(Pego1);\par
                \par
                Pego1.PePlot.Method = GraphPlottingMethod.HorizontalStackedBar; \par
                Pego1.PeLegend.Style = LegendStyle.OneLine;\par
                Pego1.PeLegend.Location = LegendLocation.Top;\par
                Pego1.PeConfigure.ImageAdjustBottom = 50;\par
                Pego1.PeString.YAxisLabel = " ";\par
                Pego1.PeColor.QuickStyle = QuickStyle.LightLine;\par
                Pego1.PePlot.DataShadows = DataShadows.ThreeDimensional; \par
    \par
                // Control which subsets to show //\par
                // Value [1 - 9] show subset, subsets with a value of 9 plot before values of 1\par
                // Value [0] hides subset\par
                Pego1.PeData.SubsetsToShow[0] = 2; // 2 is just a weighted value, it could be anything [1-9]\par
                Pego1.PeData.SubsetsToShow[1] = 2;\par
                Pego1.PeData.SubsetsToShow[2] = 0;\par
                Pego1.PeData.SubsetsToShow[3] = 2;\par
\par
                // Construct a simple table annotation //\par
                Pego1.PeAnnotation.Table.Working = 0;\par
                Pego1.PeAnnotation.Table.Rows = 5;\par
                Pego1.PeAnnotation.Table.Columns = 2;\par
                \par
                // Pass the table text //\par
                Pego1.PeAnnotation.Table.Text[0, 0] = "Subset ";\par
                Pego1.PeAnnotation.Table.Text[1, 0] = Pego1.PeString.SubsetLabels[0];\par
                Pego1.PeAnnotation.Table.Text[2, 0] = Pego1.PeString.SubsetLabels[1];\par
                Pego1.PeAnnotation.Table.Text[3, 0] = Pego1.PeString.SubsetLabels[2];\par
                Pego1.PeAnnotation.Table.Text[4, 0] = Pego1.PeString.SubsetLabels[3];\par
                Pego1.PeAnnotation.Table.Text[0, 1] = "Visible? ";\par
\par
                // Set to cell types and attributes //\par
                Pego1.PeAnnotation.Table.Type[1, 1] = LegendAnnotationType.LargeSquareSolid;\par
                Pego1.PeAnnotation.Table.Type[2, 1] = LegendAnnotationType.LargeSquareSolid;\par
                Pego1.PeAnnotation.Table.Type[3, 1] = LegendAnnotationType.LargeSquare;\par
                Pego1.PeAnnotation.Table.Type[4, 1] = LegendAnnotationType.LargeSquareSolid;;\par
                \par
                Pego1.PeAnnotation.Table.Color[1, 1] = Color.FromArgb(255, 255, 0, 0);\par
                Pego1.PeAnnotation.Table.Color[2, 1] = Color.FromArgb(255, 255, 0, 0);\par
                Pego1.PeAnnotation.Table.Color[3, 1] = Color.FromArgb(255, 255, 0, 0);\par
                Pego1.PeAnnotation.Table.Color[4, 1] = Color.FromArgb(255, 255, 0, 0);\par
                    \par
                Pego1.PeAnnotation.Table.HotSpot[1, 1] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[2, 1] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[3, 1] = true;\par
                Pego1.PeAnnotation.Table.HotSpot[4, 1] = true;\par
    \par
                // Other Table Related Properties ///\par
                Pego1.PeAnnotation.Table.Show = true;\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.InsidePixelUnits; \par
                Pego1.PeAnnotation.Table.X = 50; // initial setting, we set again further down in code.\par
                Pego1.PeAnnotation.Table.Y = 50;\par
                Pego1.PeAnnotation.Table.Moveable = TAMoveable.Full;\par
                \par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(129, 255, 255, 255);\par
                Pego1.PeAnnotation.Table.HeaderRows = 0;\par
                Pego1.PeAnnotation.Table.HeaderColumn = false;\par
                Pego1.PeAnnotation.Table.Border = TABorder.Inset;\par
                Pego1.PeAnnotation.Table.TextSize = 85;\par
\par
                // Construct a simple text table annotation //\par
                Pego1.PeAnnotation.Table.Working = 1;\par
                Pego1.PeAnnotation.Table.Rows = 1;\par
                Pego1.PeAnnotation.Table.Columns = 1;\par
                Pego1.PeAnnotation.Table.TextMode = true;\par
\par
                Char n;\par
                n = (Char) 10;\par
                String str;\par
                str = "This is a test to see how this works. ";\par
                str = str + n.ToString();\par
                str = str + "Second paragraph, this is a test to see how this works. ";\par
                str = str + n.ToString();\par
                str = str + "Third paragraph, this is a test to see how this works.";\par
                Pego1.PeAnnotation.Table.Text[0, 0] = str;\par
\par
                // Other Table Related Properties ///\par
                Pego1.PeAnnotation.Table.Show = true;\par
                Pego1.PeAnnotation.Table.Location = GraphTALocation.InsidePixelUnits;\par
                Pego1.PeAnnotation.Table.X = 50; // initial setting, we set again further down in code.\par
                Pego1.PeAnnotation.Table.Y = 50;\par
                Pego1.PeAnnotation.Table.Width = 150;\par
                Pego1.PeAnnotation.Table.Moveable = TAMoveable.Full;\par
                Pego1.PeAnnotation.Table.BackColor = Color.FromArgb(159, 255, 255, 255);\par
                Pego1.PeAnnotation.Table.HeaderRows = 0;\par
                Pego1.PeAnnotation.Table.HeaderColumn = false;\par
                Pego1.PeAnnotation.Table.Border = TABorder.NoBorder;\par
                Pego1.PeAnnotation.Table.TextSize = 95;\par
                Pego1.PeAnnotation.Table.Border = TABorder.Inset;\par
\par
                Pego1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pego1.PeConfigure.AntiAliasGraphics = true;\par
                Pego1.PeConfigure.AntiAliasText = true;\par
\par
                // Initialize chart to get graph border rectangle //\par
                Pego1.PeFunction.ReinitializeResetImage();\par
\par
                System.Drawing.Rectangle r;\par
                r = Pego1.PeFunction.GetRectGraph();\par
\par
                Pego1.PeAnnotation.Table.Working = 0;\par
                Pego1.PeAnnotation.Table.X = (int) (r.Right - 150.0);\par
                Pego1.PeAnnotation.Table.Y =(int) (r.Top + 25.0);\par
\par
                Pego1.PeAnnotation.Table.Working = 1;\par
                Pego1.PeAnnotation.Table.X = (int) (r.Left + 50.0);\par
                Pego1.PeAnnotation.Table.Y = (int) (r.Top + 25.0);\par
\par
                Pego1.PeAnnotation.Table.Working = 0;\par
    \par
                ////////////////////////////////////\par
                // TableAnnotation Hot Spot Event //\par
                ////////////////////////////////////\par
                /*private void Pego1_PeTableAnnotation(object sender, Gigasoft.ProEssentials.EventArg.TableAnnotationEventArgs e)\par
\tab\tab         \{\par
                    // Look for table hot spot and change which subsets are visible //\par
                    \par
                    Gigasoft.ProEssentials.Structs.HotSpotData hsd;\par
                    hsd = Pego1.PeFunction.GetHotSpotData();\par
                            \par
                    if (hsd.Type == HotSpotType.TableAnnotation0)\par
                    \{\par
                        // If TYPE is SQUARESOLID, change to SQUARE and vice versa. //\par
                        LegendAnnotationType nType = Pego1.PeAnnotation.Table.Type[hsd.Data1, hsd.Data2];\par
\par
                        if (nType == LegendAnnotationType.LargeSquare) \par
                        \{\par
                            Pego1.PeAnnotation.Table.Type[hsd.Data1, hsd.Data2] = LegendAnnotationType.LargeSquareSolid;\par
                            Pego1.PeData.SubsetsToShow[hsd.Data1 - 1] = 2;   // 2 is just an arbitrary weight\par
                        \}\par
                        else\par
                        \{\par
                            Pego1.PeAnnotation.Table.Type[hsd.Data1, hsd.Data2] = LegendAnnotationType.LargeSquare;\par
                            Pego1.PeData.SubsetsToShow[hsd.Data1 - 1] = 0;   // 0 hides subset\par
                        \}\par
                        \par
                        Pego1.Refresh();\par
                    \}\par
                \}*/\par
\par
            \}\par
            else if(MainWindow.m_nChart == 35)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //035  Graph showing Demographic Pyramid\par
\par
                //! This feature represents a new mode of drawing data and axes, a special case\par
                //! not compatible with mixing plotting styles and full zooming.\par
                //! Best to set AllowPlotCustomization = False, and\par
                //! AllowZooming = PEAZ_NONE or PEAZ_HORIZONTAL.\par
                //! Also note graph annotations take special positioning as demonstrated below.\par
\par
                CreateSimpleGraph(Pego1);\par
\par
                // Change Data //\par
                Pego1.PeData.Subsets = 2;\par
                Pego1.PeData.Points = 17;\par
\par
                // Set Title //\par
                Pego1.PeString.MainTitle = "Demographic Pyramid";\par
\par
                // Create some Y Data //\par
                Pego1.PeData.Y[0, 0] = 0.1F ; Pego1.PeData.Y[0, 1] = 0.15F ; Pego1.PeData.Y[0, 2] = 0.5F;\par
                Pego1.PeData.Y[0, 3] = 0.6F ; Pego1.PeData.Y[0, 4] = 0.7F ; Pego1.PeData.Y[0, 5] = 1.5F;\par
                Pego1.PeData.Y[0, 6] = 1.2F ; Pego1.PeData.Y[0, 7] = 1.7F ; Pego1.PeData.Y[0, 8] = 1.8F;\par
                Pego1.PeData.Y[0, 9] = 2.2F ; Pego1.PeData.Y[0, 10] = 3.2F ; Pego1.PeData.Y[0, 11] = 4.3F;\par
                Pego1.PeData.Y[0, 12] = 5.1F ; Pego1.PeData.Y[0, 13] = 6.5F ; Pego1.PeData.Y[0, 14] = 7.2F;\par
                Pego1.PeData.Y[0, 15] = 8.3F ; Pego1.PeData.Y[0, 16] = 9.3F;\par
\par
                Pego1.PeData.Y[1, 0] = 0.3F ; Pego1.PeData.Y[1, 1] = 0.35F ; Pego1.PeData.Y[1, 2] = 0.36F;\par
                Pego1.PeData.Y[1, 3] = 0.5F ; Pego1.PeData.Y[1, 4] = 0.6F ; Pego1.PeData.Y[1, 5] = 0.8F;\par
                Pego1.PeData.Y[1, 6] = 1.1F ; Pego1.PeData.Y[1, 7] = 1.9F ; Pego1.PeData.Y[1, 8] = 2.9F;\par
                Pego1.PeData.Y[1, 9] = 3.6F ; Pego1.PeData.Y[1, 10] = 4.2F ; Pego1.PeData.Y[1, 11] = 5.3F;\par
                Pego1.PeData.Y[1, 12] = 6.1F ; Pego1.PeData.Y[1, 13] = 7.15F ; Pego1.PeData.Y[1, 14] = 8.2F;\par
                Pego1.PeData.Y[1, 15] = 9.3F ; Pego1.PeData.Y[1, 16] = 9.3F;\par
\par
                // Set Subset Labels //\par
                Pego1.PeString.SubsetLabels[0] = "MALE";\par
                Pego1.PeString.SubsetLabels[1] = "FEMALE";\par
\par
                // Set Legend to Bottom //\par
                Pego1.PeLegend.Location = LegendLocation.Bottom;\par
\par
                // Set Legend Style to Two Line, by default will position next to each half //\par
                Pego1.PeLegend.Style = LegendStyle.TwoLine;\par
\par
                // Set Point Labels //\par
                Pego1.PeString.PointLabels[0] = "80+";\par
                Pego1.PeString.PointLabels[1] = "75-79";\par
                Pego1.PeString.PointLabels[2] = "70-74";\par
                Pego1.PeString.PointLabels[3] = "65-69";\par
                Pego1.PeString.PointLabels[4] = "60-64";\par
                Pego1.PeString.PointLabels[5] = "55-59";\par
                Pego1.PeString.PointLabels[6] = "50-54";\par
                Pego1.PeString.PointLabels[7] = "45-49";\par
                Pego1.PeString.PointLabels[8] = "40-44";\par
                Pego1.PeString.PointLabels[9] = "35-39";\par
                Pego1.PeString.PointLabels[10] = "30-34";\par
                Pego1.PeString.PointLabels[11] = "25-29";\par
                Pego1.PeString.PointLabels[12] = "20-24";\par
                Pego1.PeString.PointLabels[13] = "15-19";\par
                Pego1.PeString.PointLabels[14] = "10-14";\par
                Pego1.PeString.PointLabels[15] = "05-09";\par
                Pego1.PeString.PointLabels[16] = "00-04";\par
\par
                // Set plotting method //\par
                Pego1.PePlot.Method = GraphPlottingMethod.DemographicPyramid;\par
\par
                // Disable incompatible features //\par
                Pego1.PeUserInterface.Allow.Zooming = AllowZooming.None;\par
                Pego1.PeUserInterface.Dialog.PlotCustomization = false;\par
\par
                // Auto scaling is supported, and note how manually scaling axes, causes a mirrored effect //\par
                Pego1.PeGrid.Configure.ManualMinY = 0.0;\par
                Pego1.PeGrid.Configure.ManualMaxY = 10.0;\par
                Pego1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
\par
                // Place axis on bottom, since horizontal mode, right y axis is bottom y axis //\par
                Pego1.PeGrid.Option.YAxisOnRight = true;\par
\par
                // Hide Y axis label //\par
                Pego1.PeGrid.Option.ShowYAxis = ShowAxis.GridNumbers;\par
\par
                // Note below how graph annotations are positioned on each side of chart. //\par
                Pego1.PeAnnotation.Graph.X[0] = 3.0;\par
                Pego1.PeAnnotation.Graph.Y[0] = 5 - (Pego1.PeData.Y[0, 2] / 2);  // 5 is middle of axis, (10-0) / 2, and note subtracting half\par
                Pego1.PeAnnotation.Graph.Type[0] = (int) Gigasoft.ProEssentials.Enums.GraphAnnotationType.PointerArrowSmall; // of value to position data\par
                Pego1.PeAnnotation.Graph.Text[0] = "Arrow 1";\par
                Pego1.PeAnnotation.Graph.Color[0] = Color.FromArgb(255, 198, 0, 0);\par
\par
                Pego1.PeAnnotation.Graph.X[1] = 8.0;\par
                Pego1.PeAnnotation.Graph.Y[1] = 5 + (Pego1.PeData.Y[1, 7] / 2);  // 5 is middle of axis, (10-0) / 2, and note adding half\par
                Pego1.PeAnnotation.Graph.Type[1] = (int) Gigasoft.ProEssentials.Enums.GraphAnnotationType.PointerArrowSmall; // of value to position data\par
                Pego1.PeAnnotation.Graph.Text[1] = "Arrow 2";\par
                Pego1.PeAnnotation.Graph.Color[1] = Color.FromArgb(255, 0, 198, 198);\par
\par
                Pego1.PeAnnotation.Show = true;\par
\par
                // Increase annotation font //\par
                Pego1.PeAnnotation.Graph.TextSize = 100;\par
\par
                // Designate subsets obstacles //\par
                Pego1.PeAnnotation.Graph.SubsetObstacles[0] = true;\par
                Pego1.PeAnnotation.Graph.SubsetObstacles[1] = true;\par
\par
                // Allow user to move ArrowPointer annotation //\par
                Pego1.PeAnnotation.Graph.Moveable = true;\par
                Pego1.PeUserInterface.HotSpot.GraphAnnotation = AnnotationHotSpot.GraphOnly;\par
                \par
                // Increase all font sizes //\par
                Pego1.PeFont.SizeGlobalCntl = 1.2F;\par
\par
                // No text shadows //\par
                Pego1.PeConfigure.TextShadows = TextShadows.NoShadows;\par
\par
                // Set colors //\par
                Pego1.PeColor.BitmapGradientMode = true;\par
                Pego1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                // Make bars 3D //\par
                Pego1.PePlot.DataShadows = DataShadows.ThreeDimensional;\par
\par
                Pego1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pego1.PeConfigure.AntiAliasGraphics = true;\par
                Pego1.PeConfigure.AntiAliasText = true;\par
                Pego1.PeConfigure.ImageAdjustLeft = 75;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 99)\par
            \{\par
            \}\par
\tab\tab\tab\par
            Pego1.PeFunction.Reinitialize();\par
            Pego1.PeFunction.ReinitializeResetImage();\par
            Pego1.Invalidate();\par
        \}\par
\par
\par
        public static void LoadData(String newName, Gigasoft.ProEssentials.Pego Pego1)\par
\tab\tab\{\par
\tab\tab\tab // Function to load financial data from a comma delimited file //\tab\tab\tab\par
\tab\tab\tab String szFile;\par
\tab\tab\tab szFile = newName + ".txt";\par
\par
\tab\tab\tab float[] y1 = new float[1000];\par
\tab\tab\tab float[] y2 = new float[1000];\par
\tab\tab\tab float[] y3 = new float[1000];\par
\tab\tab\tab float[] y4 = new float[1000];\par
\tab\tab\tab float[] y5 = new float[1000];\par
\tab\tab\tab double[] X0 = new double[1000];\par
\tab\tab\tab String[] Xs = new String[1000];\par
\tab\tab\tab Int32 c = 0, i, day, month, year, nCnt;\par
\tab\tab\tab String sDate, sOpen, sHigh, sLow, sClose, sVolume;\par
\tab\tab\tab String[] TempArray = new String[6];\par
\tab\tab\tab System.DateTime d;\tab\tab\tab\par
\par
\tab\tab\tab // Open Data File //\par
\tab\tab\tab StreamReader sr = File.OpenText(szFile);\par
\tab\tab\tab String input;\par
\tab\tab\tab while ((input=sr.ReadLine())!=null) \par
\tab\tab\tab\{\par
\tab\tab\tab\tab TempArray = input.Split(',');\par
\par
\tab\tab\tab\tab sDate = TempArray[0];\par
\tab\tab\tab\tab sOpen = TempArray[1];\par
\tab\tab\tab\tab sHigh = TempArray[2];\par
\tab\tab\tab\tab sLow = TempArray[3];\par
\tab\tab\tab\tab sClose = TempArray[4];\par
\tab\tab\tab\tab sVolume = TempArray[5];\par
\tab\tab\tab\tab\par
\tab\tab\tab\tab // Get date and transfer into a number\par
\tab\tab\tab\tab year = Convert.ToInt32(sDate.Substring(0,2));\par
\tab\tab\tab\tab if( year > 90)\par
\tab\tab\tab\tab\tab year = year + 1900;\par
\tab\tab\tab\tab else if( year < 10 )\par
\tab\tab\tab\tab\tab year = year + 2000;\par
\par
\tab\tab\tab\tab month = Convert.ToInt32(sDate.Substring(2,2));\par
\tab\tab\tab\tab day = Convert.ToInt32(sDate.Substring(4,2));\par
\tab\tab\tab\tab Xs[c] = Convert.ToString(month) + "/" + Convert.ToString(day) + "/" + Convert.ToString(year);\par
\par
                DateTime dateValue = new DateTime(year, month, day, 12, 0, 0);\par
                CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;\par
                String CultString = dateValue.ToString(currentCulture);\par
   \tab\tab\tab     d = Convert.ToDateTime(CultString);\par
\tab\tab\tab\tab X0[c] = d.Date.ToOADate(); \par
\par
                CultureInfo EnCulture =  new CultureInfo("en-US");\par
\tab\tab\tab\tab // store Open, High, Low, Close, and Volume //\par
\tab\tab\tab\tab y1[c] = Convert.ToSingle(sOpen, EnCulture );\par
                y2[c] = Convert.ToSingle(sHigh, EnCulture);\par
                y3[c] = Convert.ToSingle(sLow, EnCulture);\par
                y4[c] = Convert.ToSingle(sClose, EnCulture);\par
                y5[c] = Convert.ToSingle(sVolume, EnCulture);\par
\par
\tab\tab\tab\tab c = c + 1;\par
\tab\tab\tab\}\tab\tab\tab\par
\tab\tab\tab sr.Close();\par
\par
\tab\tab\tab // Pass data into chart //\par
            nCnt = c; \par
\tab\tab\tab Pego1.PeData.StartTime = X0[0]; //dstart\par
\par
\tab\tab\tab Pego1.PeData.Subsets = 11;\par
\tab\tab\tab Pego1.PeData.Points = nCnt;\par
\tab\tab\tab Pego1.PeData.UsingXDataii = true;\par
\par
\tab\tab\tab //! Empty data so we can make sure we are completely resetting //\par
\tab\tab\tab Pego1.PeData.Y[0, -1] = 0;\par
\tab\tab\tab Pego1.PeData.Xii[0, -1] = 0;\par
\tab\tab\tab Pego1.PeData.PointLabels[-1] = "0";  //! note 0 in quotes\par
\tab\tab\tab //! -1 above is a special index that tells ProEssentials you are resizing property\par
\tab\tab\tab\par
\tab\tab\tab for( i = 0; i <= (nCnt - 1); i++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab Pego1.PeData.Y[0, i] = y2[i]; // high\par
\tab\tab\tab\tab Pego1.PeData.Y[1, i] = y3[i]; // low\par
\tab\tab\tab\tab Pego1.PeData.Y[2, i] = y1[i]; // open\par
\tab\tab\tab\tab Pego1.PeData.Y[3, i] = y4[i]; // close\par
\tab\tab\tab\tab Pego1.PeData.Y[7, i] = y5[i]; // volume\par
\tab\tab\tab\tab Pego1.PeData.Xii[0, i] = X0[i];\par
\tab\tab\tab\tab Pego1.PeData.PointLabels[i] = Convert.ToString(Xs[i]);\par
\tab\tab\tab\}\par
\par
\tab\tab\tab // We now have data, let's make some studies //\par
\par
\tab\tab\tab ////////////////////////////////////////////////////////////////////\par
\tab\tab\tab // Bollinger Bands //\par
\tab\tab\tab /////////////////////\par
\par
\tab\tab\tab Int32 pnt;\par
\tab\tab\tab float f;\par
\tab\tab\tab double Days, Total, Total2, SMAfBB, BBNum;\tab\tab\tab\par
\tab\tab\tab float[] pYD3 = new float[nCnt];\par
\par
\tab\tab\tab for( pnt = 0; pnt <= (nCnt - 1); pnt++)\par
\tab\tab\tab\tab pYD3[pnt] = Pego1.PeData.Y[3, pnt];\par
\par
\tab\tab\tab // Middle Band = SMA\par
\tab\tab\tab Days = 20;\tab\tab\tab\par
\tab\tab\tab for(pnt = 0; pnt <= (nCnt - Days - 1); pnt++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab Total = 0;\tab\tab\tab\tab\tab\tab\tab\tab\par
\tab\tab\tab\tab for( i = (0 + pnt); i <= (Days + pnt - 1); i++)\par
\tab\tab\tab\tab\tab Total = Total + pYD3[i];\par
\tab\tab\tab\tab f = (float)(Total / Days);\par
\tab\tab\tab\tab Pego1.PeData.Y[5, Convert.ToInt32(pnt + Days - 1)] = f;\par
\tab\tab\tab\}\par
\par
\tab\tab\tab // Upper Band = Middle Band + [Standard Deviation * Square Root\{[Sum for x Days((Closing Price - Middle Band)^2)]/Days]\tab\tab\tab\par
\tab\tab\tab for( pnt = 0; pnt <= (nCnt - Days - 1); pnt++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab Total = 0;\tab\tab\tab\tab\par
\tab\tab\tab\tab for( i = (0 + pnt); i <= (Days + pnt - 1); i++)\par
\tab\tab\tab\tab\tab Total = Total + pYD3[i];\par
\tab\tab\tab\tab SMAfBB = Total / Days;\par
\tab\tab\tab\tab // Find sum of Closing Price minus SMA over days and square\par
\tab\tab\tab\tab BBNum = 0;\tab\tab\tab\tab\par
\tab\tab\tab\tab for( i = (0 + pnt); i <= (Days + pnt - 1); i++)\par
\tab\tab\tab\tab\tab BBNum = ((pYD3[i] - SMAfBB) * (pYD3[i] - SMAfBB)) + BBNum;\par
\tab\tab\tab\tab f = (float)(SMAfBB + 2.0F * Math.Sqrt(BBNum / Days));\par
\tab\tab\tab\tab Pego1.PeData.Y[4,Convert.ToInt32(pnt + Days - 1)] = f;\par
\tab\tab\tab\}\par
\par
\tab\tab\tab // Lower Band = Middle Band - [Standard Deviation * Square Root\{[Sum for x Days((Closing Price - Middle Band)^2)]/Days]\par
\tab\tab\tab for( pnt = 0; pnt <= (nCnt - Days - 1); pnt++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab Total = 0;\tab\tab\tab\tab\tab\tab\tab\tab\par
\tab\tab\tab\tab for( i = (0 + pnt); i <= (Days + pnt - 1); i++)\par
\tab\tab\tab\tab\tab Total = Total + pYD3[i];\par
\tab\tab\tab\tab SMAfBB = Total / Days;\par
\tab\tab\tab\tab // Find sum of Closing Price minus SMA over days and square\par
\tab\tab\tab\tab BBNum = 0;\par
\tab\tab\tab\tab for( i = (0 + pnt); i <= (Days + pnt - 1); i++)\par
\tab\tab\tab\tab\tab BBNum = ((pYD3[i] - SMAfBB) * (pYD3[i] - SMAfBB)) + BBNum;\par
\tab\tab\tab\tab f = (float)(SMAfBB - 2.0F * Math.Sqrt(BBNum / Days));\par
\tab\tab\tab\tab Pego1.PeData.Y[6, Convert.ToInt32(pnt + Days - 1)] = f;\par
\tab\tab\tab\}\par
\par
\tab\tab\tab ////////////////////////////////////////////////////////////////////////////////////\par
\tab\tab\tab // Relative Strength Index //\par
\tab\tab\tab /////////////////////////////\par
\tab\tab\tab Total = 0;\par
\tab\tab\tab Total2 = 0;\par
\tab\tab\tab float RS, RSI;\tab\tab\tab\par
\tab\tab     Int32 LowerCount = 0, UpperCount = 0;\par
\par
\tab\tab\tab // How many days do you want to check\par
\tab\tab\tab Days = 10;\par
\par
\tab\tab\tab float[] pUpperArray = new float[nCnt];\par
\tab\tab\tab float[] pLowerArray = new float[nCnt];\par
\par
\tab\tab\tab // Find the amount the price closed UP from the previous day\par
\tab\tab\tab // also find the amount the price closed down from the previous day.\par
\tab\tab\tab // Over the designated time period.\par
\par
\tab\tab\tab for( i = 1; i <= Days; i++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab if((pYD3[i] - pYD3[i - 1]) < 0) \par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab pLowerArray[LowerCount] = (pYD3[i] - pYD3[i - 1]);\par
\tab\tab\tab\tab\tab LowerCount = LowerCount + 1;\par
\tab\tab\tab\tab\}\tab\tab   \par
\tab\tab\tab\tab else\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab pUpperArray[UpperCount] = (pYD3[i] - pYD3[i - 1]);\par
\tab\tab\tab\tab\tab UpperCount = UpperCount + 1;\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\}\par
\par
\tab\tab\tab // Total the amounts over the period\par
\tab\tab\tab Total = 0;\tab\tab\tab\par
\tab\tab\tab for(i = 0; i <= (LowerCount - 1); i++)\par
\tab\tab\tab\tab Total = pLowerArray[i] + Total;\par
\tab\tab\tab Total2 = 0;\tab\tab\par
\tab\tab\tab for(i = 0; i <= (UpperCount - 1); i++)\par
\tab\tab\tab\tab Total2 = pUpperArray[i] + Total2;\par
\tab\tab\tab // Divide up by down\par
\tab\tab\tab RS = (float)((Total2 / Days) / (Math.Abs(Total) / Days));\par
\par
\tab\tab\tab // Use the RSI formula\par
\tab\tab\tab RSI = 100.0F - (100.0F / (1.0F + RS));\par
\tab\tab\tab Pego1.PeData.Y[8, Convert.ToInt32(Days - 1)] = RSI;\par
\par
\tab\tab\tab for(i = Convert.ToInt32(Days); i <= (nCnt - 1); i++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab if(pYD3[i] != 0 && pYD3[i - 1] != 0) \par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab Total = Total * (Days - 1);\par
\tab\tab\tab\tab\tab Total2 = Total2 * (Days - 1);\par
\par
\tab\tab\tab\tab\tab if((pYD3[i] - pYD3[i - 1]) < 0) \par
\tab\tab\tab\tab\tab\tab Total = (pYD3[i] - pYD3[i - 1]) + Total;\par
\tab\tab\tab\tab\tab else\par
\tab\tab\tab\tab\tab\tab Total2 = (pYD3[i] - pYD3[i - 1]) + Total2;\par
\tab\tab\tab\tab\tab Total = Total / Days;\par
\tab\tab\tab\tab\tab Total2 = Total2 / Days;\par
\tab\tab\tab\tab\tab RS = (float)((Total2) / (Math.Abs(Total)));\par
\tab\tab\tab\tab\tab RSI = 100.0F - (100.0F / (1.0F + RS));\par
\tab\tab\tab\tab\tab Pego1.PeData.Y[8, Convert.ToInt32(Days - 1 + i)] = RSI;\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\}\par
\par
\tab\tab\tab // Add a mid axis line annotation\par
\tab\tab\tab Pego1.PeAnnotation.Line.YAxis[0] = 50.0;\par
\tab\tab\tab Pego1.PeAnnotation.Line.YAxisAxis[0] = 2;\par
\tab\tab\tab Pego1.PeAnnotation.Line.YAxisType[0] = LineAnnotationType.MediumThinSolid;\par
\tab\tab\tab Pego1.PeAnnotation.Line.YAxisColor[0] = Color.FromArgb(255, 198, 0, 0);\par
\tab\tab\tab Pego1.PeAnnotation.Show = true;\par
\par
\tab\tab\tab // Set the working axis extents\par
\tab\tab\tab Pego1.PeGrid.WorkingAxis = 2;\par
\tab\tab\tab Pego1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
\tab\tab\tab Pego1.PeGrid.Configure.ManualMinY = 0;\par
\tab\tab\tab Pego1.PeGrid.Configure.ManualMaxY = 100;\par
\par
\tab\tab\tab /////////////////////////////////////////////////////////////////////\par
\tab\tab\tab // Stochastic Oscillator //\par
\tab\tab\tab ///////////////////////////\par
\tab\tab\tab Int32 SwFac, Dperiod, q;\par
\tab\tab\tab float LowMin, HighMax, SlowK, Dfactor, PercentD;\par
\par
\tab\tab\tab LowMin = 9999.9F;\par
\tab\tab\tab HighMax = 0.0F;\par
\par
\tab\tab\tab float[] pSlowOC = new float[nCnt + 1];\par
\tab\tab\tab float[] pKperiod = new float[nCnt + 1];\par
\tab\tab\tab float[] pHigh = new float[nCnt + 1];\par
\tab\tab\tab float[] pLow = new float[nCnt + 1];\par
\par
\tab\tab\tab for( pnt = 0; pnt <= (nCnt - 1); pnt++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab pHigh[pnt] = Pego1.PeData.Y[0, pnt];\par
\tab\tab\tab\tab pLow[pnt] = Pego1.PeData.Y[1, pnt];\par
\tab\tab\tab\}\par
\par
\tab\tab\tab // How many days do you want to check\par
\tab\tab\tab Days = 30;\par
\tab\tab\tab SwFac = 1;\par
\tab\tab\tab Dperiod = 15;\par
\par
\tab\tab\tab for(pnt = 0; pnt <= (nCnt - Days - 1); pnt++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab for( i = pnt; i <= (Days + pnt - 1); i++)\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab if(pHigh[i] != 0) \par
\tab\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab\tab if(pHigh[i] > HighMax) \par
\tab\tab\tab\tab\tab\tab\tab HighMax = pHigh[i];\par
\tab\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab for( i = pnt; i <= (Days + pnt - 1); i++)\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab if(pLow[i] != 0) \par
\tab\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab\tab if(pLow[i] < LowMin)\par
\tab\tab\tab\tab\tab\tab\tab LowMin = pLow[i];\par
\tab\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab if(pYD3[Convert.ToInt32(Days - 1 + pnt)] != 0) \par
\tab\tab\tab\tab\tab pKperiod[pnt] = ((pYD3[(int)(Days - 1 + pnt)] - LowMin) / (HighMax - LowMin)) * 100.0F;\par
\tab\tab\tab\tab LowMin = 9999.9F;\par
\tab\tab\tab\tab HighMax = 0.0F;\par
\tab\tab\tab\}\par
\par
\tab\tab\tab for(pnt = 0; pnt <= (nCnt - 1 - SwFac); pnt++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab SlowK = 0;\par
\tab\tab\tab\tab for( q = pnt; q <= (SwFac + pnt - 1); q++)\par
\tab\tab\tab\tab\tab SlowK = pKperiod[q] + SlowK;\par
\tab\tab\tab\tab pSlowOC[pnt] = SlowK / SwFac;\par
\tab\tab\tab\tab Pego1.PeData.Y[9, (int) (Days + pnt + SwFac)] = pSlowOC[pnt];\par
\tab\tab\tab\}\par
\tab\tab\tab for( pnt = 0; pnt <= nCnt - 1 - Dperiod; pnt++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab PercentD = 0;\par
\tab\tab\tab\tab for( q = pnt; q <= (Dperiod + pnt - 1); q++)\par
\tab\tab\tab\tab\tab PercentD = pSlowOC[q] + PercentD;\par
\tab\tab\tab\tab Dfactor = PercentD / Dperiod;\par
\tab\tab\tab\tab Pego1.PeData.Y[10, (int) (Days + pnt + Dperiod)] = Dfactor;\par
\tab\tab\tab\}\par
\par
\tab\tab\tab // Set the working axis extents\par
\tab\tab\tab Pego1.PeGrid.WorkingAxis = 3;\par
\tab\tab\tab Pego1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
\tab\tab\tab Pego1.PeGrid.Configure.ManualMinY = 0;\par
\tab\tab\tab Pego1.PeGrid.Configure.ManualMaxY = 100;\par
\tab\tab\tab\par
\tab\tab\}\par
\tab\}\par
\}\par
\par
}
 