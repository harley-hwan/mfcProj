{\rtf1\ansi\deff0{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\f0\fs22\lang1033 unit Unit3;\par
\par
interface\par
\par
uses\par
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,\par
  Pesgvcl, Pegrpapi, ExtCtrls, Math, DateUtils, Grids;\par
\par
type\par
  TForm3 = class(TForm)\par
    Timer1: TTimer;\par
    Pesgo1: PESGraph;\par
    procedure createallcharts;\par
    procedure CreateSimpleSGraph;\par
    procedure FormResize(Sender: TObject);\par
    procedure Pesgo1CursorMoved(Sender: TObject);\par
    procedure Pesgo1ZoomIn(Sender: TObject);\par
    procedure Timer1Timer(Sender: TObject);\par
    procedure FormShow(Sender: TObject);\par
    procedure Pesgo1DataHotSpot(Sender: TObject; DblClick, SubsetIndex,\par
      PointIndex: Integer);\par
    procedure Pesgo1MouseMove(Sender: TObject; Shift: TShiftState; X,\par
      Y: Integer);\par
    procedure Pesgo1MouseUp(Sender: TObject; Button: TMouseButton;\par
      Shift: TShiftState; X, Y: Integer);\par
    procedure Pesgo1CustomMenu(Sender: TObject; MenuIndex,\par
      SubmenuIndex: Integer);\par
    procedure Pesgo1CustomGridnumbers(Sender: TObject; nAxisType,\par
      nAxisIndex: Integer; dNumber: Double; szData: PWideChar);\par
    procedure FormCreate(Sender: TObject);\par
    procedure FormDestroy(Sender: TObject);\par
    procedure Pesgo1CustomTrackingDataText(Sender: TObject);\par
    procedure Pesgo1MouseDown(Sender: TObject; Button: TMouseButton;\par
      Shift: TShiftState; X, Y: Integer);\par
\par
  private\par
    m_nRealTimeCounter : Integer;\par
    m_nSinCounter : Integer;\par
    StartTime : Double;\par
    ZoomStart : Double;\par
    ZoomEnd : Double;\par
    ZoomInterval : Double;\par
    ZoomSmallInterval : Double;\par
\par
    \{ Private declarations \}\par
  public\par
    \{ Public declarations \}\par
\par
   bDragging : Integer;\par
   nDragIndexS : Longint;\par
   nDragIndexP : Longint;\par
   dDragStartX : Double;\par
   dDragStartY : Double;\par
\par
  end;\par
\par
    MyXData2 = array[0..400000] of Single;\par
    MyYData2 = array[0..500000] of Single;\par
    MyZData2 = array[0..40000] of Single;\par
\par
    MyXData3 = array[0..1000000] of Single;\par
    MyYData3 = array[0..1000000] of Single;\par
\par
    MyXData4 = array[0..200000] of Single;\par
    MyYData4 = array[0..200000] of Single;\par
\par
    ElevData = array[0..(2250000) ] of LongInt;\par
    MyXDat = array[0..(2250000) ] of Single;\par
    MyYDat = array[0..(2250000) ] of Single;\par
    MyZDat = array[0..(2250000) ] of Single;\par
\par
var\par
    Form3: TForm3;\par
    ptx2 : ^MyXData2;\par
    pty2 : ^MyYData2;\par
    ptx3 : ^MyXData3;\par
    pty3 : ^MyYData3;\par
    ptx4 : ^MyXData4;\par
    pty4 : ^MyYData4;\par
    nCurrentChart : Integer;\par
\par
implementation\par
\par
uses Unit1, Unit4, Unit5, Unit6, Unit2;\par
\{$R *.DFM\}\par
\par
\{///////////////////////////////////////\}\par
\{creates all the charts\}\par
Procedure TForm3.CreateAllCharts;\par
\par
Var\par
   nChart : Integer;\par
   t : String;\par
   p : Integer;       \{add this to the Var sections\}\par
   d : Double;\par
   dt : Double;\par
   ea : EXTRAAXIS;\par
   MyXData : array[0..120] of Single;\par
   MyYData : array[0..120] of Single;\par
\par
   j: Integer;\par
   k: Integer;\par
\par
   Row: LongInt;\par
   Col: LongInt;\par
   o: LongInt;\par
   s: LongInt;\par
   nQ: LongInt;\par
   nStartRow: LongInt;\par
   nEndRow: LongInt;\par
   nStartCol: LongInt;\par
   nEndCol: LongInt;\par
   nTargetRows: LongInt;\par
   nTargetCols: LongInt;\par
   pElevData: ^ElevData;\par
   pMyXData: ^MyXDat;\par
   pMyYData: ^MyYDat;\par
   pMyZData: ^MyZDat;\par
   pfile : file;\par
   rowcounter: LongInt;\par
   colcounter: LongInt;\par
   foundtargetindex: Boolean;\par
   ftmp: Single;\par
   fOffset: Single;\par
   f1: Single;\par
   f2: Single;\par
   f3: Single;\par
   c: Integer;\par
   dRange: Double;\par
   ac1: Integer;\par
   ac2: Integer;\par
   erroramount: Single;\par
   sl : TStringList;\par
   slRow : TStringList;\par
   line : Integer;\par
   StringGrid1: TStringGrid;\par
   x: Single;\par
   y: Single;\par
   z: Single;\par
   nSubsetCount: Integer;\par
   nPointCount: Integer;\par
   aCnt: Integer;\par
   annot: Integer;\par
   nRndRow: Integer;\par
   nRndCol: Integer;\par
\par
Begin\par
\par
// Example 123 shares local memory, this code tells ProEssentials to reset the shared data address //  // v9.5\par
PEvsetW(Pesgo1.hObject, PEP_faXDATAPTR, 0, 0);\par
PEvsetW(Pesgo1.hObject, PEP_faYDATAPTR, 0, 0);\par
\par
\par
bDragging := 0;\par
nDragIndexS := 0;\par
nDragIndexP := 0;\par
\par
\{check to see if a list item has been selected\}\par
if form1.list1.ItemIndex < 0 then exit;\par
\par
\{pull the 3 digit number out of the index and convert it to an integer\}\par
t := form1.list1.items.strings[form1.list1.ItemIndex];\par
t:=Copy(t,1,3);\par
nChart := StrToInt(t);\par
nCurrentChart := nChart;\par
\par
Pesgo1.PEactions := epeactions(20);\par
Pesgo1.PrepareImages := True;\par
form3.Timer1.Interval := 50;\par
form3.Timer1.Enabled := False;\par
\par
If nChart = 100 Then\par
  begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{100  *** Simple Scientific Graph ***\}\par
\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. //\par
\par
    // Simple example show the basics of a scientific graph object. //\par
    // Scientific Graph's contain both YData and XData and thus data\par
    // is not plotted equally spaced as the graph object does.\par
\par
    // v9 features\par
    Pesgo1.CursorPromptTracking := true;\par
    Pesgo1.CursorPromptLocation := eCursorPromptLocation.sgTooltip;\par
    Pesgo1.CursorPromptStyle := eCursorPromptStyle.sgXandYValue;\par
\par
    // Enable Bar Glass Effect //\par
    Pesgo1.BarGlassEffect := True;\par
\par
    // Enable Plotting style gradient and bevel features //\par
    Pesgo1.AreaGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.AreaBevelStyle := sgMediumSmooth;\par
    Pesgo1.SplineGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.SplineBevelStyle := sgMediumSplineBevel;\par
\par
    // v7.2 new features //\par
    Pesgo1.PointGradientStyle := sgVerticalAscentInversePG;\par
    Pesgo1.PointBorderColor := Pesgo1.PEargb(100, 0, 0, 0);\par
    Pesgo1.LineSymbolThickness := 3;\par
    Pesgo1.AreaBorder := 1;\par
    Pesgo1.AllowSvgExport := True;\par
\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
\par
    // Set Subsets, Points, and fill with YData\par
    Pesgo1.Subsets := 4;\par
    Pesgo1.Points := 120;\par
    For s := 0 To 3 do //4-1\par
      begin\par
        fOffset := (Random * 250);\par
        For p := 0 To 119 do  //12-1\par
         Begin\par
            Pesgo1.XData[s, p] := (p + 1) * 100;\par
            Pesgo1.YData[s, p] := (p + 1) + (Random * 250) + (Sin((p + fOffset) * 0.03) * 700) - ((s * 140));\par
         end;\par
      End;\par
\par
    Pesgo1.DataShadows := sgWithShadows;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.PlottingMethod := sgPointsPlusSpline;\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
    Pesgo1.GridStyle := sgDot;\par
    Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
\par
    // Enable middle mouse dragging //\par
    Pesgo1.MouseDraggingY := True;\par
    Pesgo1.MouseDraggingX := True;\par
\par
    Pesgo1.MainTitle := 'Test Results';\par
    Pesgo1.SubTitle := '';\par
    Pesgo1.YAxisLabel := 'Performance';\par
    Pesgo1.XAxisLabel := 'Duration';\par
\par
    // Set SubsetLabels property array for 4 subsets\par
    Pesgo1.SubsetLabels[0] := 'Horsepower';\par
    Pesgo1.SubsetLabels[1] := 'Torque';\par
    Pesgo1.SubsetLabels[2] := 'Temperature';\par
    Pesgo1.SubsetLabels[3] := 'Pressure';\par
\par
    // this is how to change subset colors\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(128, 198, 0, 0);\par
    Pesgo1.SubsetColors[1] := Pesgo1.PEargb(128, 0, 198, 198);\par
    Pesgo1.SubsetColors[2] := Pesgo1.PEargb(128, 198, 198, 0);\par
    Pesgo1.SubsetColors[3] := Pesgo1.PEargb(128, 0, 198, 0);\par
\par
    // this is how to change line types\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[1] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[2] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[3] := PELT_MEDIUMSOLID;\par
\par
    // this is how to change point types\par
    Pesgo1.SubsetPointTypes[0] := PEPT_DOTSOLID;\par
    Pesgo1.SubsetPointTypes[1] := PEPT_UPTRIANGLESOLID;\par
    Pesgo1.SubsetPointTypes[2] := PEPT_SQUARESOLID;\par
    Pesgo1.SubsetPointTypes[3] := PEPT_DOWNTRIANGLESOLID;\par
    Pesgo1.SubsetPointTypes[4] := PEPT_DOTSOLID;\par
    Pesgo1.SubsetPointTypes[5] := PEPT_SQUARESOLID;\par
    Pesgo1.SubsetPointTypes[6] := PEPT_DIAMONDSOLID;\par
    Pesgo1.SubsetPointTypes[7] := PEPT_SQUARESOLID;\par
\par
    Pesgo1.SimpleLineLegend := True;\par
    Pesgo1.SimplePointLegend := True;\par
    Pesgo1.LegendStyle := sgOneLine;\par
    Pesgo1.MultiAxisStyle := sgSeparateAxes;\par
\par
    Pesgo1.GradientBars := 8;\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgLarge;\par
    Pesgo1.ScrollingHorzZoom := True;\par
    Pesgo1.DataPrecision := sgOneDecimal;\par
\par
    Pesgo1.FixedFonts := True;\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := eQuickStyle.sgDarkNoBorder;\par
\par
    Pesgo1.AutoMinMaxPadding := 1;\par
    Pesgo1.ImageAdjustLeft := 20;\par
    Pesgo1.ImageAdjustRight := 20;\par
    Pesgo1.ImageAdjustTop := 10;\par
\par
    // Sets various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
    // Always call PEactions := sgReinitAndReset at end\par
    Pesgo1.PEactions := sgReinitAndReset;\par
\par
  End\par
Else If nChart = 101 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{101  Scientific Graph showing line annotations\}\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Creat MultiAxes //\par
    Pesgo1.MultiAxesSubsets[0] := 2;\par
    Pesgo1.MultiAxesSubsets[1] := 2;\par
    Pesgo1.MultiAxesSizing := True;\par
\par
    Pesgo1.WorkingAxis := 0;\par
    Pesgo1.YAxisLabel := '';\par
    Pesgo1.PlottingMethod := sgBar;\par
    Pesgo1.ComparisonSubsets := 1;\par
    Pesgo1.PlottingMethodII := sgPointsPlusSpline2;\par
\par
    // Plot last subset on right //\par
    Pesgo1.WorkingAxis := 1;\par
    Pesgo1.YAxisLabel := '';\par
    Pesgo1.RYAxisLabel := '';\par
    Pesgo1.RYAxisComparisonSubsets := 1;\par
    Pesgo1.PlottingMethod := sgArea;\par
    Pesgo1.RYAxisColor := Pesgo1.PEargb(255, 128, 128, 128);\par
    Pesgo1.WorkingAxis := 0;\par
\par
    Pesgo1.AnnotationsInFront := False;\par
    Pesgo1.LineAnnotationTextSize := 110;\par
    Pesgo1.ShowAnnotations := True;\par
\par
    // v9.5\par
    Pesgo1.AllowAnnotationControl := true;\par
    Pesgo1.ShowAnnotationTextMenu := eMenuControl.sgShowMenu;\par
    Pesgo1.ShowAnnotationText := true;\par
\par
    /////////////////////////////////\par
    // Horizontal Line Annotations //\par
    /////////////////////////////////\par
    Pesgo1.HorzLineAnnotation[0] := 820;\par
    Pesgo1.HorzLineAnnotationType[0] := PELT_MEDIUMDASH;\par
    Pesgo1.HorzLineAnnotationColor[0] := Pesgo1.PEargb(255, 198, 0, 0);\par
    Pesgo1.HorzLineAnnotationText[0] := '';\par
    Pesgo1.HorzLineAnnotationInFront[0] := sgAifInFront;\par
    Pesgo1.HorzLineAnnotationAxis[0] := 0;  // only needed if using MultiAxesSubsets\par
\par
    Pesgo1.HorzLineAnnotation[1] := 780;\par
    Pesgo1.HorzLineAnnotationType[1] := PELT_DASH;\par
    Pesgo1.HorzLineAnnotationColor[1] := Pesgo1.PEargb(255, 0, 198, 0);\par
    Pesgo1.HorzLineAnnotationText[1] := '';\par
    Pesgo1.HorzLineAnnotationAxis[1] := 0;\par
\par
    Pesgo1.HorzLineAnnotation[2] := 740;\par
    Pesgo1.HorzLineAnnotationType[2] := PELT_DOT;\par
    Pesgo1.HorzLineAnnotationColor[2] := Pesgo1.PEargb(255, 0, 0, 198);\par
    Pesgo1.HorzLineAnnotationText[2] := '';\par
    Pesgo1.HorzLineAnnotationAxis[2] := 0;\par
\par
    Pesgo1.HorzLineAnnotation[3] := 700;\par
    Pesgo1.HorzLineAnnotationType[3] := PELT_MEDIUMSOLID;\par
    Pesgo1.HorzLineAnnotationColor[3] := Pesgo1.PEargb(255, 198, 0, 198);\par
    Pesgo1.HorzLineAnnotationText[3] := '';\par
    Pesgo1.HorzLineAnnotationAxis[3] := 0;\par
\par
    Pesgo1.HorzLineAnnotation[4] := 760;\par
    Pesgo1.HorzLineAnnotationType[4] := PELT_THICKSOLID;\par
    Pesgo1.HorzLineAnnotationColor[4] := Pesgo1.PEargb(255, 0, 198, 198);\par
    Pesgo1.HorzLineAnnotationText[4] := '';\par
    Pesgo1.HorzLineAnnotationAxis[4] := 0;\par
\par
    Pesgo1.RightMargin := 'String ';       // Make room for text on right side\par
\par
    Pesgo1.HorzLineAnnotation[5] := 720;\par
    Pesgo1.HorzLineAnnotationType[5] := PELT_THINSOLID;\par
    Pesgo1.HorzLineAnnotationColor[5] := Pesgo1.PEargb(255, 198, 0, 0);\par
    Pesgo1.HorzLineAnnotationText[5] := '|RTest' + Chr(10) + 'String';\par
    Pesgo1.HorzLineAnnotationAxis[5] := 0;\par
\par
    //  Line annotations on bottom axis //\par
    Pesgo1.HorzLineAnnotation[6] := 535;\par
    Pesgo1.HorzLineAnnotationType[6] := PELT_MEDIUMSOLID;\par
    Pesgo1.HorzLineAnnotationColor[6] := Pesgo1.PEargb(255, 198, 0, 198);\par
    Pesgo1.HorzLineAnnotationText[6] := 'Bottom multi-axis with respect to left y axis';\par
    Pesgo1.HorzLineAnnotationAxis[6] := 1;\par
\par
    // Line annotation with respect to right y axis //\par
    Pesgo1.HorzLineAnnotation[7] := 475;\par
    Pesgo1.HorzLineAnnotationType[7] := PELT_THICKSOLID + 1000;\par
    Pesgo1.HorzLineAnnotationColor[7] := Pesgo1.PEargb(255, 0, 198, 198);\par
    Pesgo1.HorzLineAnnotationText[7] := '|rBottom multi-axis with respect to right y axis';\par
    Pesgo1.HorzLineAnnotationAxis[7] := 1;\par
\par
    /////////////////////////////////\par
    // Vertical Line Annotations //\par
    /////////////////////////////////\par
    Pesgo1.VertLineAnnotation[0] := 8200;\par
    Pesgo1.VertLineAnnotationType[0] := PELT_MEDIUMDASH;\par
    Pesgo1.VertLineAnnotationColor[0] := Pesgo1.PEargb(255, 198, 0, 0);\par
    Pesgo1.VertLineAnnotationText[0] := '';\par
    Pesgo1.VertLineAnnotationInFront[0] := sgAifInFront;\par
\par
    Pesgo1.VertLineAnnotation[1] := 7800;\par
    Pesgo1.VertLineAnnotationType[1] := PELT_DASH;\par
    Pesgo1.VertLineAnnotationColor[1] := Pesgo1.PEargb(255, 0, 198, 0);\par
    Pesgo1.VertLineAnnotationText[1] := '';\par
\par
    Pesgo1.VertLineAnnotation[2] := 7400;\par
    Pesgo1.VertLineAnnotationType[2] := PELT_DOT;\par
    Pesgo1.VertLineAnnotationColor[2] := Pesgo1.PEargb(255, 0, 0, 198);\par
    Pesgo1.VertLineAnnotationText[2] := '';\par
\par
    Pesgo1.VertLineAnnotation[3] := 7000;\par
    Pesgo1.VertLineAnnotationType[3] := PELT_MEDIUMSOLID;\par
    Pesgo1.VertLineAnnotationColor[3] := Pesgo1.PEargb(255, 198, 0, 198);\par
    Pesgo1.VertLineAnnotationText[3] := '';\par
\par
    Pesgo1.VertLineAnnotation[4] := 7600;\par
    Pesgo1.VertLineAnnotationType[4] := PELT_THICKSOLID;\par
    Pesgo1.VertLineAnnotationColor[4] := Pesgo1.PEargb(255, 0, 198, 198);\par
    Pesgo1.VertLineAnnotationText[4] := '';\par
\par
    Pesgo1.TopMargin := 'XX ';       // Make room for text on right side\par
\par
    Pesgo1.VertLineAnnotation[5] := 7200;\par
    Pesgo1.VertLineAnnotationType[5] := PELT_THINSOLID;\par
    Pesgo1.VertLineAnnotationColor[5] := Pesgo1.PEargb(255, 198, 0, 0);\par
    Pesgo1.VertLineAnnotationText[5] := '|HTest' + Chr(10) + 'String';\par
\par
    //  Line annotations on bottom axis //\par
    Pesgo1.VertLineAnnotation[6] := 5350;\par
    Pesgo1.VertLineAnnotationType[6] := PELT_MEDIUMSOLID;\par
    Pesgo1.VertLineAnnotationColor[6] := Pesgo1.PEargb(255, 198, 0, 198);\par
    Pesgo1.VertLineAnnotationText[6] := '|t Top Inside ';\par
\par
    // Line annotation with respect to right y axis //\par
    Pesgo1.VertLineAnnotation[7] := 5750;\par
    Pesgo1.VertLineAnnotationType[7] := PELT_THICKSOLID;\par
    Pesgo1.VertLineAnnotationColor[7] := Pesgo1.PEargb(255, 0, 198, 198);\par
    Pesgo1.VertLineAnnotationText[7] := '|b Bottom Inside ';\par
\par
    // New region annotations, define a top, and bottom graph annotation type and then rect fill //\par
    Pesgo1.GraphAnnotationX[0] := 0;        // ignored for this type\par
    Pesgo1.GraphAnnotationY[0] := 1E+20;    // some value in outer space\par
    Pesgo1.GraphAnnotationType[0] := PEGAT_TOP;\par
\par
    Pesgo1.GraphAnnotationX[1] := 0;   // ignored for this type\par
    Pesgo1.GraphAnnotationY[1] := 850;\par
    Pesgo1.GraphAnnotationType[1] := PEGAT_BOTTOM;\par
\par
    Pesgo1.GraphAnnotationX[2] := 8500; // if text define, located here\par
    Pesgo1.GraphAnnotationY[2] := 850;\par
    Pesgo1.GraphAnnotationType[2] := PEGAT_RECT_FILL;\par
    Pesgo1.GraphAnnotationColor[2] := Pesgo1.PEargb(155, 234, 123, 53);\par
    Pesgo1.GraphAnnotationText[2] := '';\par
    Pesgo1.ShowGraphAnnotations := True;\par
\par
    // Set Various Other Properties ///\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(195, 0, 128, 128);\par
    Pesgo1.SubsetColors[2] := Pesgo1.PEargb(195, 128, 128, 0);\par
    Pesgo1.SubsetColors[3] := Pesgo1.PEargb(195, 128, 128, 128);\par
\par
    Pesgo1.GridLineControl := sgNoGrid;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
    Pesgo1.LegendStyle := sgLeftOfAxis;\par
\par
  End\par
Else If nChart = 102 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{102  Scientific Graph showing use of PEvsetEx\}\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    //MyXData : array[0..120] of Single;\par
    //MyYData : array[0..120] of Single;\par
\par
    // Repassing the data via PEvsetEx, one subset at a time //\par
\par
    // Repass the first subset //\par
    For p := 0 To 119 Do\par
    Begin\par
        MyXData[p] := (p + 1) * 30;\par
        MyYData[p] := 50 + (Random * 100);\par
    end;\par
    PEvsetEx(Pesgo1.hObject, PEP_faXDATA, 0, 120, @MyXData[0], Nil);\par
    PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 0, 120, @MyYData[0], Nil);\par
\par
    // Repass the second subset //\par
    For p := 0 To 119 Do\par
    Begin\par
        MyXData[p] := 300 + ((p + 50) * 30);\par
        MyYData[p] := 150 + (Random * 100);\par
    End;\par
    PEvsetEx(Pesgo1.hObject, PEP_faXDATA, 120, 120, @MyXData[0], Nil);\par
    PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 120, 120, @MyYData[0], Nil);\par
\par
    // Repass the third subset //\par
    For p := 0 To 119 Do\par
    Begin\par
        MyXData[p] := 600 + ((p + 100) * 30);\par
        MyYData[p] := 250 + (Random * 100);\par
    End;\par
    PEvsetEx(Pesgo1.hObject, PEP_faXDATA, 240, 120, @MyXData[0], Nil);\par
    PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 240, 120, @MyYData[0], Nil);\par
\par
    // Repass the fourth subset //\par
    For p := 0 To 119 Do\par
    Begin\par
        MyXData[p] := 900 + ((p + 150) * 30);\par
        MyYData[p] := 350 + (Random * 100);\par
    End;\par
    PEvsetEx(Pesgo1.hObject, PEP_faXDATA, 360, 120, @MyXData[0], Nil);\par
    PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 360, 120, @MyYData[0], Nil);\par
\par
    // Set Various Other Properties ///\par
    Pesgo1.PlottingMethod := sgArea;\par
    Pesgo1.SolidLineOverArea := 1;\par
\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkShadow;\par
\par
  End\par
Else If nChart = 103 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{103  Scientific Graph showing overlapped multi axes 1\}\par
\par
    //! Try zooming and scrolling vertically. //\par
\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Create 4 separate axes and then overlap all\par
    Pesgo1.MultiAxesSubsets[0] := 1; // 1 subset on first axis\par
    Pesgo1.MultiAxesSubsets[1] := 1; // 1 subset on second axis\par
    Pesgo1.MultiAxesSubsets[2] := 1; // 1 subset on third axis\par
    Pesgo1.MultiAxesSubsets[3] := 1; // 1 subset on fourth axis\par
    Pesgo1.OverlapMultiAxes[0] := 4; // overlap all 4 axes in one group\par
\par
    // Set AxisNumberSpacing to 2.0 will create space for two lines.\par
    Pesgo1.AxisNumberSpacing := 2;\par
\par
    // Match axis color and label to subset label //\par
    Pesgo1.WorkingAxis := 0;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(255, 178, 0, 0);\par
    Pesgo1.YAxisLabel := 'This is a test label using ' + Chr(10) +'two lines.';\par
    Pesgo1.PlottingMethod := sgArea;\par
\par
    Pesgo1.WorkingAxis := 1;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(255, 0, 178, 0);\par
    Pesgo1.YAxisLabel := 'This is a test label using ' + Chr(10) +'two lines and more.';\par
    Pesgo1.PlottingMethod := sgLine;\par
\par
    Pesgo1.WorkingAxis := 2;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(255, 0, 0, 218);\par
    Pesgo1.YAxisLabel := 'Axis 3';\par
    Pesgo1.PlottingMethod := sgPointsPlusLine;\par
\par
    Pesgo1.WorkingAxis := 3;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(255, 178, 178, 0) ;\par
    Pesgo1.YAxisLabel := 'This is a test label using ' + Chr(10) +'two lines and more and more.';\par
    Pesgo1.PlottingMethod := sgPoint;\par
    Pesgo1.WorkingAxis := 0;\par
\par
    Pesgo1.TextShadows := sgShadowNoText;\par
\par
    // Set a few various properties\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgLightNoBorder;\par
    Pesgo1.MarkDataPoints := False;\par
    Pesgo1.FontSize := sgMedium;\par
    Pesgo1.DataShadows := sgWithShadows;\par
    Pesgo1.SolidLineOverArea := 1;\par
\par
    // subset colors //\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(28, 198, 0, 0);\par
    Pesgo1.SubsetColors[1] := Pesgo1.PEargb(64, 0, 198, 0);\par
    Pesgo1.SubsetColors[2] := Pesgo1.PEargb(128, 0, 0, 198);\par
    Pesgo1.SubsetColors[3] := Pesgo1.PEargb(128, 198, 198, 0);\par
\par
    // subset line types\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[1] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[2] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[3] := PELT_MEDIUMSOLID;\par
\par
    Pesgo1.ScrollingHorzZoom := True;\par
    Pesgo1.ScrollingVertZoom := True;\par
    Pesgo1.TickColor := 1;\par
    Pesgo1.MainTitle := 'ZOOM and SCROLL the chart!';\par
    Pesgo1.FontSizeGlobalCntl := 1.3;\par
\par
  End\par
Else If nChart = 104 Then\par
  Begin\par
\{*********************************************************************'\par
*********************************************************************\}\par
\{104  Scientific Graph showing overlapped multi axes 2\}\par
\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Create 4 separate axes and then overlap in two groups //\par
    Pesgo1.MultiAxesSubsets[0] := 1; // 1 subset on first axis\par
    Pesgo1.MultiAxesSubsets[1] := 1; // 1 subset on second axis\par
    Pesgo1.MultiAxesSubsets[2] := 1; // 1 subset on third axis\par
    Pesgo1.MultiAxesSubsets[3] := 1; // 1 subset on fourth axis\par
    Pesgo1.OverlapMultiAxes[0] := 2; // overlap first two axes in one group\par
    Pesgo1.OverlapMultiAxes[1] := 2; // overlap second two axes in one group\par
    Pesgo1.MultiAxesSizing := True;\par
\par
    Pesgo1.MainTitle := 'With Multi-Axes-Sizing and Zoom-Limit-Axis features';\par
    Pesgo1.ZoomLimits := sgAxisHorizontal;\par
\par
    // Match axis color and label to subset label //\par
    Pesgo1.WorkingAxis := 0;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(188,0,0,140);\par
    Pesgo1.YAxisLabel := 'Horsepower';\par
    Pesgo1.PlottingMethod := sgBar;\par
    Pesgo1.WorkingAxis := 1;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(188,122,125,125);\par
    Pesgo1.YAxisLabel := 'Torque';\par
    Pesgo1.PlottingMethod := sgArea;\par
    Pesgo1.WorkingAxis := 2;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(188,0,0,140);\par
    Pesgo1.YAxisLabel := 'Temperature';\par
    Pesgo1.PlottingMethod := sgBar;\par
    Pesgo1.WorkingAxis := 3;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(188,125,125,125);\par
    Pesgo1.YAxisLabel := 'Pressure';\par
    Pesgo1.PlottingMethod := sgSplineArea;\par
    Pesgo1.WorkingAxis := 0;\par
    Pesgo1.TextShadows := sgShadowNoText;\par
\par
    // Set a few various properties //\par
    Pesgo1.FontSize := sgLarge;\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[1] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[2] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[3] := PELT_MEDIUMSOLID;\par
    Pesgo1.MarkDataPoints := True;\par
\par
   // Set Various Other Properties //\par
   Pesgo1.BitmapGradientMode := True;\par
   Pesgo1.QuickStyle := sgLightLine;\par
   Pesgo1.LegendStyle := sgTopOfAxis;\par
   Pesgo1.GridLineControl := sgYPlusXAxis;\par
   Pesgo1.ShowLegendMenu := sgShowMenu;\par
   Pesgo1.LegendLocationMenu := sgShowMenu;\par
\par
   // subset colors //\par
   Pesgo1.SubsetColors[0] :=  Pesgo1.PEargb(88,0,0,140);\par
   Pesgo1.SubsetColors[1] :=  Pesgo1.PEargb(88,155, 155, 155);\par
   Pesgo1.SubsetColors[2] :=  Pesgo1.PEargb(88,0,0,140);\par
   Pesgo1.SubsetColors[3] :=  Pesgo1.PEargb(88,155,155,155);\par
\par
  End\par
Else If nChart = 105 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{105  Scientific Graph showing data cursor\}\par
\par
    //! Cross-Hair inside chart is a cursor giving a datapoint the focus //\par
    //! Use arrow keys or mouse to move cursor to a new location //\par
    //! You must click the control to give it the focus before key strokes will work. //\par
    //! Right and Left arrow keys move cursor up and down points //\par
    //! Up and Down arrow keys move cursor up and down subsets //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Set up cursor //\par
    Pesgo1.CursorMode := sgCrossHair;\par
\par
    // Help see data points //\par
    Pesgo1.MarkDataPoints := True;\par
\par
    // This will allow you to move cursor by clicking data point //\par
    Pesgo1.MouseCursorControl := True;\par
    Pesgo1.AllowDataHotSpots := True;\par
    Pesgo1.HotSpotSize := eHotSpotSize(12);\par
\par
    Pesgo1.BitmapGradientMode := False;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
    Pesgo1.PlottingMethod := sgSpline;\par
\par
    Pesgo1.AllowZooming := eAllowZooming.sgNoZooming;\par
    Pesgo1.MouseWheelFunction := eMouseWheelFunction.sgMouseWheelHorzVertZoom;\par
    Pesgo1.MouseDraggingX := true;\par
    Pesgo1.MouseDraggingY := true;\par
    Pesgo1.MouseWheelZoomSmoothness := 5;\par
    Pesgo1.PinchZoomSmoothness := 2;\par
\par
    // changing data testing mousecursorcontrolclosestpoint\par
    // and tooltip features\par
    Pesgo1.RYAxisComparisonSubsets := 1;\par
    Pesgo1.TXAxisComparisonSubsets := 1;\par
    Pesgo1.XData[3, 0] := -8000.0;\par
    Pesgo1.XData[3, 1] := -7000.0;\par
    Pesgo1.XData[3, 2] := -6000.0;\par
    Pesgo1.XData[3, 3] := -2000.0;\par
\par
    Pesgo1.ZoomWindow := true;\par
\par
    // v9 features\par
    Pesgo1.CursorPromptTracking := true;\par
    Pesgo1.CursorPromptStyle := eCursorPromptStyle.sgXandYValue;\par
    Pesgo1.CursorPromptLocation := eCursorPromptLocation.sgTooltip;\par
\par
    Pesgo1.TrackingCustomDataText := true;\par
    Pesgo1.TrackingCustomOtherText := true;\par
    Pesgo1.AllowTitleHotSpots := true;\par
    Pesgo1.AllowSubsetHotSpots := true;\par
    Pesgo1.AllowAxisLabelHotSpots := true;\par
    Pesgo1.AllowGridNumberHotSpotsY := true;\par
    Pesgo1.AllowGridNumberHotSpotsX := true;\par
\par
    Pesgo1.MouseCursorControlClosestPoint := true;\par
\par
    Pesgo1.CacheBmp2 := true;\par
    Pesgo1.DrawCursorToCache := true;\par
    Pesgo1.ImprovedCursor := true;\par
    Pesgo1.CursorVLineType := PELT_DASH;\par
    Pesgo1.CursorHLineType := PELT_DASH;\par
    Pesgo1.CursorColor := Pesgo1.PEargb(255,255,0,0);\par
\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255, 255, 0, 0);\par
    Pesgo1.SubsetColors[1] := Pesgo1.PEargb(255, 0, 255, 0);\par
    Pesgo1.SubsetColors[2] := Pesgo1.PEargb(255, 0, 0, 255);\par
    Pesgo1.SubsetColors[3] := Pesgo1.PEargb(255, 120, 120, 120);\par
\par
    Pesgo1.Invalidate();\par
    UpdateWindow(Pesgo1.Handle);\par
    // we must update chart before setting CursorPoint, which moves the cursor\par
    Pesgo1.CursorSubset := 0;\par
    Pesgo1.CursorPoint := 0;\par
\par
\par
    // Other possible values for cursor mode are below, //\par
    //Pesgo1.CursorMode := sgNoCursor\par
    //Pesgo1.CursorMode := sgCrossHair\par
    //Pesgo1.CursorMode := sgFloatingXY\par
    //Pesgo1.CursorMode := sgFloatingY\par
    //Pesgo1.CursorMode := sgInvertedRect\par
    //Pesgo1.CursorMode := sgNoCursor\par
    //Pesgo1.CursorMode := sgVertLine\par
\par
\{\par
    ///////////////////////\par
    // CursorMoved event //\par
    ///////////////////////\par
    // Form3.Caption := 'Subsets ' + InttoStr(Pesgo1.CursorSubset) + ' Point ' + inttoStr(Pesgo1.CursorPoint) + ' YData = ' + floattoStr(Pesgo1.YData[Pesgo1.CursorSubset, Pesgo1.CursorPoint]);\par
\par
\par
    /////////////////////\par
    // MouseMove event //\par
    /////////////////////\par
    // get last mouse location within control //\par
    PEvgetW(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
\par
    // Call PEgethotspot //\par
    PEgethotspot(Pesgo1.hObject, pt.x, pt.y);\par
\par
    // Now look at HotSpotData structure //\par
    PEvgetW(Pesgo1.hObject, PEP_structHOTSPOTDATA, @hsd);\par
\par
    if (hsd.nHotSpotType = PEHS_DATAPOINT) Then\par
    begin\par
        s := FormatFloat('#.00', Pesgo1.YData[hsd.w1, hsd.w2]);\par
        s2 := 'DataPoint value ' + s;\par
        Form3.Caption := s2;\par
    end\par
    else if (hsd.nHotSpotType = PEHS_SUBSET) Then\par
    begin\par
        s := 'Subset Legend is ' + Pesgo1.SubsetLabels[hsd.w1];\par
        Form3.Caption := s;\par
    end\par
    else if (hsd.nHotSpotType = PEHS_POINT) Then\par
    begin\par
        s := 'Point Label is ' + Pesgo1.PointLabels[hsd.w1];\par
        Form3.Caption := s;\par
    end\par
    else\par
    begin\par
        PEvgetW(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
        nResult := PEsearchsubsetpointindex(Pesgo1.hObject, pt.x, pt.y);\par
        if (nResult <> 0) then\par
        begin\par
            s := 'Closest Subset Point s=' + IntToStr(Pesgo1.ClosestSubset);\par
            s :=  s + ', p=' + IntToStr(Pesgo1.ClosestPoint);\par
            Form3.Caption := s;\par
        end\par
        else\par
            Form3.Caption := 'No Hot Spot';\par
    end;\par
\par
    //////////////////////////////////\par
    // CustomTrackingDataText event //\par
    /////////////////////////////////\par
    fX := Pesgo1.CursorValueX;\par
    fY := Pesgo1.CursorValueY;\par
\par
    s := 'X Axis: ' + FormatFloat('#.00', fX) + chr(10);\par
    s := s + 'Y Axis: ' + FormatFloat('#.00', fY) + ' ';\par
\par
    if (fY < 0.0) then\par
    begin\par
        Pesgo1.TrackingTooltipTitle := 'N E G A T I V E ';\par
        Pesgo1.TrackingTooltipBkColor := Pesgo1.PEargb(0, 0, 0, 0);\par
        Pesgo1.TrackingTooltipTextColor := Pesgo1.PEargb(0, 245, 0, 0);\par
    end\par
    else\par
    begin\par
        Pesgo1.TrackingTooltipTitle := 'P O S I T I V E ';\par
        Pesgo1.TrackingTooltipBkColor := Pesgo1.PEargb(0, 50, 50, 50);\par
        Pesgo1.TrackingTooltipTextColor := Pesgo1.PEargb(0, 0, 225, 0);\par
    end;\par
\par
    Pesgo1.TrackingText := s;\par
\par
\}\par
\par
  End\par
Else If nChart = 106 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{106  Scientific Graph showing date time handling\}\par
\par
    dt := Now - 700;\par
\par
    // Enable Gestures //\par
    Pesgo1.Touch.InteractiveGestures := [igZoom, igPan];\par
    Pesgo1.Touch.InteractiveGestureOptions := [igoPanInertia];\par
\par
    // Enable MouseWheel Zooming\par
    Pesgo1.MouseWheelFunction := sgMouseWheelHorzVertZoom;\par
    Pesgo1.MouseDraggingX := True;  // note that pan gestures require MouseDragging to be enabled\par
    Pesgo1.MouseDraggingY := True;  // also, pan gestures should have ScrollingHorzZooom enabled\par
\par
    // Enable MouseWheel Zoom Smoothness\par
    Pesgo1.MouseWheelZoomSmoothness := 5;\par
    Pesgo1.PinchZoomSmoothness := 2;\par
\par
    // Allow zooming and panning //\par
    Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
    Pesgo1.ScrollingHorzZoom := True;\par
    Pesgo1.ScrollingVertZoom := True;\par
\par
    // Enable Plotting style gradient and bevel features //\par
    Pesgo1.AreaGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.AreaBevelStyle := sgMediumSmooth;\par
    Pesgo1.SplineGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.SplineBevelStyle := sgMediumSplineBevel;\par
\par
    // Enable ZoomWindow //\par
    Pesgo1.ZoomWindow := True;\par
\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 600;\par
\par
    // Enable double precision which is usually\par
    // required for date time handling\par
    // This means we pass x data to XDataII\par
    Pesgo1.UsingXDataII := True;\par
\par
    // Pass XDataII and YData //\par
    For p := 0 To 599 do\par
    Begin\par
        d := (dt + (p * 0.25));\par
        Pesgo1.XDataII[0, p] := d;\par
        Pesgo1.YData[0, p] := (150 + (Sin(p * 0.034) * 60.0) + (Random * 30.0) + (p / 2.0)) - (35.0 + (Random * 20.0));\par
    End;\par
\par
    // Enable DateTimeMode //\par
    Pesgo1.DateTimeMode := sgVBDateTime;\par
\par
    // Cursor prompting in top left corner //\par
    Pesgo1.CursorMode := sgInvertedRect;\par
    Pesgo1.CursorPromptTracking := True;\par
    Pesgo1.CursorPromptStyle := sgXandYValue;\par
    Pesgo1.AllowDataHotSpots := True;\par
    Pesgo1.MouseCursorControl := True;\par
    Pesgo1.HotSpotSize := eHotSpotSize(12);\par
\par
    // v9 Features\par
    Pesgo1.CursorPromptLocation := eCursorPromptLocation.sgTooltip;\par
    Pesgo1.TrackingTooltipMaxWidth := 150;\par
\par
     // Set some various properties //\par
    Pesgo1.BitmapGradientMode := False;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.MarkDataPoints := True;\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.FixedFonts := True;\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
\par
    // You may modify date label formats with //\par
    // PEP_nTIMELABELTYPE    //\par
    // PEP_nDAYLABELTYPE     //\par
    // PEP_nMONTHLABELTYPE   //\par
    // PEP_nYEARLABELTYPE    //\par
\par
    // subset colors //\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(96, 0, 198, 0);\par
\par
    Pesgo1.GradientBars := 8;\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgLarge;\par
    Pesgo1.ScrollingHorzZoom := True;\par
\par
    Pesgo1.PlottingMethod := sgPointsPlusLine;\par
\par
    Pesgo1.MainTitle := 'Zoom and study x axis';\par
    Pesgo1.SubTitle := 'scaling from years to seconds';\par
    Pesgo1.XAxisLabel := 'Zoom and study x axis';\par
\par
    // Sets various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
\par
  End\par
Else If nChart = 107 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{107  Scientific Graph showing rect selector\}\par
\par
    //! Zooming in now draws a rectangle instead. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    Pesgo1.MainTitle := 'Mark a few data points to highlight';\par
\par
    // Enable Rectangle Selector //\par
    Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
    Pesgo1.ZoomLimits := sgAxisSquare;\par
\par
    Pesgo1.ZoomInterfaceOnly := sgRectangleSelector;\par
    Pesgo1.UndoZoomMenu := sgHideMenu;\par
    Pesgo1.AllowMaximization := False;\par
\par
    // Set properties related to annotations //\par
    Pesgo1.AllowAnnotationControl := True;\par
    Pesgo1.ShowAnnotations := True;\par
    Pesgo1.GraphAnnotationTextSize := 90;\par
\{\par
    ///////////////////////////////////////////\par
    // Look in ZoomIn event for code below ////\par
    ///////////////////////////////////////////\par
\par
    Pesgo1.GraphAnnotationY[0] := Pesgo1.ZoomMaxY;\par
    Pesgo1.GraphAnnotationX[0] := Pesgo1.ZoomMinX;\par
    Pesgo1.GraphAnnotationType[0] := PEGAT_TOPLEFT;\par
\par
    Pesgo1.GraphAnnotationY[1] := Pesgo1.ZoomMinY;\par
    Pesgo1.GraphAnnotationX[1] := Pesgo1.ZoomMaxX;\par
    Pesgo1.GraphAnnotationType[1] := PEGAT_BOTTOMRIGHT;\par
\par
    Pesgo1.GraphAnnotationY[2] := Pesgo1.ZoomMaxY;\par
    Pesgo1.GraphAnnotationX[2] := Pesgo1.ZoomMinX;\par
    Pesgo1.GraphAnnotationType[2] := PEGAT_ELLIPSE_FILL;\par
    Pesgo1.GraphAnnotationText[2] := 'Region of Interest';\par
    Pesgo1.GraphAnnotationGradientStyle[2] := ePlotGradientStyle.sgRadialCenteredPG;\par
    Pesgo1.GraphAnnotationGradientColor[2] := Pesgo1.PEargb(5, 255, 255, 255);\par
    Pesgo1.GraphAnnotationColor[2] := Pesgo1.PEargb(195, 55, 55, 55);\par
    Pesgo1.GraphAnnotationBevelStyle[2] := eBevelStyle.sgThinSmooth;\par
\par
    Pesgo1.PEactions := sgResetImage; // call PEresetimage\par
    Pesgo1.PEactions := sgInvalidateImage; // call InvalidateRect forcing paint\par
\}\par
\par
  End\par
Else If nChart = 108 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{108  Scientific Graph showing inverted y axis\}\par
\par
    //! Note scale increasing in postive values downward. //\par
\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 24;\par
\par
    // Make sure zeros are plotted //\par
    Pesgo1.NullDataValueX := -999;\par
    Pesgo1.NullDataValueY := -999;\par
\par
    // Invert polarity of Y axis //\par
    Pesgo1.InvertedYAxis := True;\par
\par
    // Pass data and since InvertedYAxis := True then make sure YData is\par
    // multiplies by -1\par
    For p := 0 To 23 Do\par
    Begin\par
        Pesgo1.XData[0, p] := p * 10;\par
        Pesgo1.YData[0, p] := -1 * (0 + (Sin(p * 0.074) * 60) + (p / 2));\par
    End;\par
\par
    // Change Titles and Labels //\par
    Pesgo1.MainTitle := 'Drilling Depth';\par
    Pesgo1.SubTitle := '';\par
    Pesgo1.YAxisLabel := 'Depth (ft)';\par
    Pesgo1.XAxisLabel := 'Minutes';\par
\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgLightInset;\par
\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(128, 0, 198, 198);\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.MarkDataPoints := False;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.GradientBars := 8;\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgMedium;\par
    Pesgo1.ScrollingHorzZoom := True;\par
    Pesgo1.PlottingMethod := sgPointsPlusLine;\par
\par
    // v7.2 new features //\par
    Pesgo1.PointGradientStyle := sgVerticalAscentInversePG;\par
    Pesgo1.PointBorderColor := Pesgo1.PEargb(100, 0, 0, 0);\par
    Pesgo1.LineSymbolThickness := 3;\par
    Pesgo1.AreaBorder := 1;\par
    Pesgo1.AllowSvgExport := True;\par
\par
    // Sets various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
\par
    // v9 features\par
    Pesgo1.CursorPromptTracking := true;\par
    Pesgo1.CursorPromptStyle := sgXandYValue;\par
    Pesgo1.CursorPromptLocation := sgTooltip;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
\par
  End\par
Else If nChart = 109 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{109  Scientific Graph showing axis formatting\}\par
\par
    //! Note YAxis and XAxis grid number formatting. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Change data to make it larger\par
    Pesgo1.Subsets := 4;\par
    Pesgo1.Points := 12;\par
    For s := 0 To 3 Do //4-1\par
    Begin\par
        For p := 0 To 11 Do  //12-1\par
        Begin\par
            Pesgo1.XData[s, p] := (p + 1) * 10;\par
            Pesgo1.YData[s, p] := (p + 1) * 500 + (Random * 2500);\par
        End;\par
    End;\par
\par
    // Supply formatting string //\par
    Pesgo1.AxisFormatY := '$|,.00|';\par
    Pesgo1.AxisFormatX := '|.0|sec';\par
\par
    // Labels //\par
    Pesgo1.MainTitle := 'Dollars per Second';\par
    Pesgo1.YAxisLabel := 'Dollars';\par
    Pesgo1.XAxisLabel := 'Time';\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgMedLine;\par
    Pesgo1.PlottingMethod := sgPointsPlusSpline;\par
    Pesgo1.BestFitDegree := sgDegree4;\par
\par
    // v7.2 new features //\par
    Pesgo1.PointGradientStyle := sgVerticalAscentInversePG;\par
    Pesgo1.PointBorderColor := Pesgo1.PEargb(100, 0, 0, 0);\par
    Pesgo1.LineSymbolThickness := 3;\par
    Pesgo1.AreaBorder := 1;\par
    Pesgo1.AllowSvgExport := True;\par
\par
  End\par
Else If nChart = 110 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{110  Scientific Graph showing log-log axes\}\par
\par
    //! Zoom this chart to see how ProEssentials handles log scales. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Set Log scales //\par
    Pesgo1.YAxisScaleControl := sgLog;\par
    Pesgo1.XAxisScaleControl := sgLog;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
    Pesgo1.FontSize := sgLarge;\par
\par
    // Change data so it varies over wider range //\par
    Pesgo1.Subsets := 2;\par
    Pesgo1.Points := 500;\par
\par
    For s:=0 to 1 do\par
    Begin\par
        For p:=0 to 499 do\par
        Begin\par
            Pesgo1.XData[s,p] := (p+1)*1700.00;\par
            Pesgo1.YData[s,p] := (p+1)*100.00 + (Random*(850*(p+1)*(s+1)));\par
        End;\par
    End;\par
\par
    Pesgo1.PlottingMethod := sgPoint;\par
    Pesgo1.MarkDataPoints := False;\par
    Pesgo1.SubsetPointTypes[0] := PEPT_DOTSOLID;\par
    Pesgo1.SubsetPointTypes[1] := PEPT_DOTSOLID;\par
\par
    Pesgo1.MainTitle := 'Zoom with mouse wheel, axes look good';\par
    Pesgo1.SubTitle := 'Click+Drag shows your Tooling code';\par
    Pesgo1.XAxisLabel := 'Log X';\par
\par
    // v9 features\par
    Pesgo1.CursorMode := eCursorMode.sgCrossHair;\par
\par
    Pesgo1.MouseCursorControl := true;\par
    Pesgo1.AllowDataHotSpots := true;\par
    Pesgo1.MouseCursorControlClosestPoint := false;\par
    Pesgo1.MouseDraggingX := false;\par
    Pesgo1.MouseDraggingY := false;\par
\par
    Pesgo1.CacheBmp2 := True;\par
    Pesgo1.ImprovedCursor := True;\par
    Pesgo1.DrawCursorToCache := True;\par
    Pesgo1.CursorColor := Pesgo1.PEargb(255,255,0,0);\par
    Pesgo1.CursorVLineType := PELT_DASH;\par
    Pesgo1.CursorHLineType := PELT_DASH;\par
\par
    Pesgo1.AllowZooming := sgNoZooming;\par
    Pesgo1.MouseWheelFunction := sgMouseWheelHorzVertZoom;\par
    Pesgo1.MouseWheelZoomSmoothness := 8;\par
\par
    Pesgo1.Invalidate();\par
    UpdateWindow(Pesgo1.Handle);\par
    Pesgo1.CursorSubset := 0;\par
    Pesgo1.CursorPoint := 0;\par
\par
\{\par
    /////////////////////\par
    // MouseDown event //\par
    /////////////////////\par
    bDragging := 1;\par
\par
    //** get last mouse location within control\par
    PEvgetW(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
\par
    nA := 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
    nX := pt.x;   //Initialize nX and nY with mouse location\par
    nY := pt.y;\par
    PEconvpixeltograph(Pesgo1.hObject, @nA, @nX, @nY, @fX, @fY, 0, 0, 0);\par
\par
    //** Check move-to location and restrain to the chart's extents.\par
    //** Note that you can only expect to read valid ManualMinX type\par
    //** properties after an initial PEactions = 0 or PEactions = 1\par
    //** has been executed.\par
    if (fX <= Pesgo1.ManualMinX) then\par
         fX := Pesgo1.ManualMinX\par
    else if (fX >= Pesgo1.ManualMaxX) then\par
         fX := Pesgo1.ManualMaxX;\par
\par
    If (fY <= Pesgo1.ManualMinY) then\par
         fY := Pesgo1.ManualMinY\par
    else if (fY >= Pesgo1.ManualMaxY) then\par
         fY := Pesgo1.ManualMaxY;\par
\par
    dDragStartX := fX;\par
    dDragStartY := fY;\par
\par
    Pesgo1.CursorPromptStyle := Pesgvcl.eCursorPromptStyle.sgNoPrompt;\par
\par
    /////////////////////\par
    // MouseUp event   //\par
    /////////////////////\par
\par
    bDragging := 0;\par
    Pesgo1.CursorPromptStyle := Pesgvcl.eCursorPromptStyle.sgXandYValue;\par
    Pesgo1.Invalidate();\par
    Pesgo1.ShowingQuickAnnotations := false;\par
    Pesgo1.HidingQuickAnnotations := true;\par
    //** Windows functions causes an immediate WM_PAINT to be triggered **'\par
    UpdateWindow(Pesgo1.Handle);\par
\par
\par
    /////////////////////\par
    // MouseMove event //\par
    /////////////////////\par
\par
    //** get last mouse location within control \par
    PEvgetW(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
\par
    nA := 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
    nX := pt.x;   //Initialize nX and nY with mouse location\par
    nY := pt.y;\par
    PEconvpixeltograph(Pesgo1.hObject, @nA, @nX, @nY, @fX, @fY, 0, 0, 0);\par
\par
    //** Check move-to location and restrain to the chart's extents.\par
    //** Note that you can only expect to read valid ManualMinX type\par
    //** properties after an initial PEactions = 0 or PEactions = 1\par
    //** has been executed.\par
    if (fX <= Pesgo1.ManualMinX) then\par
         fX := Pesgo1.ManualMinX\par
    else if (fX >= Pesgo1.ManualMaxX) then\par
         fX := Pesgo1.ManualMaxX;\par
\par
    If (fY <= Pesgo1.ManualMinY) then\par
         fY := Pesgo1.ManualMinY\par
    else if (fY >= Pesgo1.ManualMaxY) then\par
         fY := Pesgo1.ManualMaxY;\par
\par
    If (dDragStartX < fX) then\par
    begin\par
         dLeft := dDragStartX;\par
         dRight := fX;\par
    end\par
    else\par
    begin\par
        dLeft := fX;\par
        dRight := dDragStartX;\par
    end;\par
\par
    If (dDragStartY > fY) then\par
    begin\par
         dTop := dDragStartY;\par
         dBottom := fY;\par
    end\par
    else\par
    begin\par
         dTop := fY;\par
         dBottom := dDragStartY;\par
    end;\par
\par
    Pesgo1.GraphAnnotationX[0] := dLeft;\par
    Pesgo1.GraphAnnotationY[0] := dTop;\par
    Pesgo1.GraphAnnotationType[0] := (PEGAT_TOPLEFT + 1) * -1;\par
\par
    Pesgo1.GraphAnnotationX[1] := dRight;\par
    Pesgo1.GraphAnnotationY[1] := dBottom;\par
    Pesgo1.GraphAnnotationType[1] := (PEGAT_BOTTOMRIGHT + 1) * -1;\par
\par
    Pesgo1.GraphAnnotationX[2] := dRight;\par
    Pesgo1.GraphAnnotationY[2] := dBottom;\par
    Pesgo1.GraphAnnotationType[2] := (PEGAT_ROUNDRECT_FILL + 1) * -1;\par
    Pesgo1.GraphAnnotationColor[2] := Pesgo1.PEargb(70, 198, 198, 198);\par
    Pesgo1.GraphAnnotationText[2] := '';\par
    Pesgo1.GraphAnnotationGradientStyle[2] := Pesgvcl.ePlotGradientStyle.sgRadialBottomRightPG;\par
    Pesgo1.GraphAnnotationGradientColor[2] := Pesgo1.PEargb(170, 255, 255, 255);\par
\par
    Pesgo1.GraphAnnotationX[3] := dRight;\par
    Pesgo1.GraphAnnotationY[3] := dBottom;\par
    Pesgo1.GraphAnnotationType[3] := (PEGAT_ROUNDRECT_MEDIUM + 1) * -1;\par
    Pesgo1.GraphAnnotationColor[3] := Pesgo1.PEargb(255, 255, 255, 255);\par
    Pesgo1.GraphAnnotationText[3] := '';\par
\par
    CenteredXInLog := (Math.Log10(fX) + Math.Log10(dDragStartX)) / 2.0;\par
    CenteredYInLog := (Math.Log10(fY) + Math.Log10(dDragStartY)) / 2.0;\par
    dX := (fX - dDragStartX);\par
    sX := FormatFloat('#.00', dX);\par
    sX2 := '|c<~ ' + sX + ' ~>';\par
    dY := (fY - dDragStartY);\par
    sY := FormatFloat('#.00', dY);\par
    sY2 := '|D<~ ' + sY + ' ~>';\par
\par
    Pesgo1.GraphAnnotationX[4] := Math.Power(10.0, CenteredXInLog);\par
    Pesgo1.GraphAnnotationY[4] := dTop;\par
    Pesgo1.GraphAnnotationColor[4] := Pesgo1.PEargb(255, 0, 255, 0);\par
    Pesgo1.GraphAnnotationType[4] := (PEGAT_NOSYMBOL + 1) * -1;\par
    Pesgo1.GraphAnnotationText[4] := sX2;\par
\par
    Pesgo1.GraphAnnotationX[5] := dRight;\par
    Pesgo1.GraphAnnotationY[5] := Math.Power(10.0, CenteredYInLog);\par
    Pesgo1.GraphAnnotationType[5] := (PEGAT_NOSYMBOL + 1) * -1;\par
    Pesgo1.GraphAnnotationColor[5] := Pesgo1.PEargb(255, 0, 255, 0);\par
    Pesgo1.GraphAnnotationText[5] := sY2;\par
\par
    Pesgo1.GraphAnnotationTextSize := 120;\par
\par
    Pesgo1.ShowGraphAnnotations := true;\par
    Pesgo1.ShowAnnotations := true;\par
\par
    Pesgo1.ShowingQuickAnnotations := true;\par
\par
    //** Performs a PEreinitializecustoms, PEresetimage, and InvalidateRect **'\par
    Pesgo1.PEactions := sgReinitCustoms;\par
    Pesgo1.PEactions := sgResetImage;\par
    Pesgo1.PEactions := sgInvalidateImage;\par
\par
    //** Windows functions causes an immediate WM_PAINT to be triggered **'\par
    UpdateWindow(Pesgo1.Handle);\par
\par
\}\par
\par
  End\par
Else If nChart = 111 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{111  Scientific Graph showing financial scaling\}\par
\par
    //! Note YAxis and XAxis grid number formatting. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    Pesgo1.SpecialScalingY := sgfinancialscaling;\par
\par
    // Enable Zooming, Zoom graph to see how y axis changes. //\par
    Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
    Pesgo1.MouseDraggingX := True;\par
    Pesgo1.MouseDraggingY := True;\par
\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 24;\par
\par
    // Pass Data //\par
    For p := 0 To 23 do\par
    Begin\par
        Pesgo1.XData[0, p] := p * 10;\par
        Pesgo1.YData[0, p] := 20 + (0 + (Sin(p * 0.074) * 4) + (p / 20));\par
    End;\par
\par
    // Set some colors and etc //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgMedLine;\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255, 55, 55, 55);\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
\par
    Pesgo1.MarkDataPoints := False;\par
    Pesgo1.MainTitle := 'Stock Value';\par
    Pesgo1.SubTitle := '';\par
    Pesgo1.YAxisLabel := 'Value';\par
    Pesgo1.XAxisLabel := 'Days';\par
\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
\par
    Pesgo1.GradientBars := 8;\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgSmall;\par
    Pesgo1.ScrollingHorzZoom := True;\par
    Pesgo1.PlottingMethod := sgPointsPlusLine;\par
\par
    Pesgo1.PointGradientStyle := sgVerticalAscentInversePG;\par
    Pesgo1.PointBorderColor := Pesgo1.PEargb(100, 0, 0, 0);\par
    Pesgo1.LineSymbolThickness := 3;\par
    Pesgo1.AreaBorder := 1;\par
\par
    // Sets various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
    Pesgo1.AllowSvgExport := True;\par
\par
    // v9 features\par
    Pesgo1.CursorPromptTracking := true;\par
    Pesgo1.CursorPromptStyle := eCursorPromptStyle.sgXandYValue;\par
    Pesgo1.CursorPromptLocation := eCursorPromptLocation.sgTooltip;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
\par
  End\par
Else If nChart = 112 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{112  Scientific Graph showing manual min and max y\}\par
\par
    //! Very simple example showing how to control min and max of an axis. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Manually Control Y Axis //\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 0;\par
    Pesgo1.ManualMaxY := 1000;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
    Pesgo1.YAxisLongTicks := True;\par
\par
  End\par
Else If nChart = 113 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{113  Scientific Graph showing manual line density\}\par
\par
    //! Very simple example showing how to control grid line and grid tick density. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Manually Control Y Axis Grid Line Density //\par
    Pesgo1.ManualYAxisLine := 250;  // Grid line every 250 units\par
    Pesgo1.ManualYAxisTick := 25;   // Tick line every 25 units\par
    Pesgo1.ManualYAxisTicknLine := True;\par
\par
    // Manually Control Y Axis //\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 0;\par
    Pesgo1.ManualMaxY := 1000;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
    Pesgo1.YAxisLongTicks := True;\par
\par
  End\par
Else If nChart = 114 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{114  Scientific Graph using double precision data\}\par
\par
    //! Working with double precision data. //\par
\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 24;\par
\par
    // Enable Double precision x and y data\par
    // Double precision will give 15 significant degits\par
    // where as single precision offers 7 digits.\par
    // 1205.5346 can not be accurately stored as single precision\par
    Pesgo1.UsingXDataII := True;\par
    Pesgo1.UsingYDataII := True;\par
\par
    // Pass data to XDataII and YDataII for double precision\par
    For p := 0 To 23 do\par
    Begin\par
        Pesgo1.XDataII[0, p] := p * 10 + 0.0123456789;\par
        Pesgo1.YDataII[0, p] := -1 * (0 + (Sin(p * 0.074) * 60) + (p / 2)) + 0.0123456789 + (Random*85 * (p+1));\par
    End;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgLightLine;\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
    Pesgo1.YAxisLongTicks := True;\par
    Pesgo1.BestFitDegree := sgDegree4;\par
    Pesgo1.PlottingMethod := sgPointsPlusBFC;\par
    Pesgo1.YAxisLongTicks := True;\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
\par
    // Change Titles and Labels //\par
    Pesgo1.MainTitle := 'Double Precision Data';\par
    Pesgo1.SubTitle := '';\par
\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255, 145, 0, 145);\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.MarkDataPoints := True;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.FixedFonts := True;\par
\par
    Pesgo1.GradientBars := 8;\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgMedium;\par
    Pesgo1.ScrollingHorzZoom := True;\par
\par
    // Sets various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
    Pesgo1.AllowSvgExport := True;\par
\par
    // v9 features\par
    Pesgo1.CursorPromptTracking := true;\par
    Pesgo1.CursorPromptStyle := eCursorPromptStyle.sgXandYValue;\par
    Pesgo1.CursorPromptLocation := eCursorPromptLocation.sgTooltip;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
  End\par
Else If nChart = 115 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{115  Scientific Graph showing real-time 1\}\par
\par
    Pesgo1.Subsets := 4;\par
    Pesgo1.Points := 100000;\par
\par
    Pesgo1.MultiAxesSubsets[0] := 1;\par
    Pesgo1.MultiAxesSubsets[1] := 1;\par
    Pesgo1.MultiAxesSubsets[2] := 1;\par
    Pesgo1.MultiAxesSubsets[3] := 1;\par
\par
    Pesgo1.OverlapMultiAxes[0] := 2;\par
    Pesgo1.OverlapMultiAxes[1] := 1;\par
    Pesgo1.OverlapMultiAxes[2] := 1;\par
\par
    // Manually configure x and y axes //\par
    Pesgo1.ManualScaleControlX := sgManualMinAndMax;\par
    Pesgo1.ManualMinX := 0;\par
    Pesgo1.ManualMaxX := 100;\par
\par
    Pesgo1.WorkingAxis := 0;\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 0;\par
    Pesgo1.ManualMaxY := 30;\par
    Pesgo1.YAxisLabel := 'Signal 1';\par
\par
    Pesgo1.WorkingAxis := 1;\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 10;\par
    Pesgo1.ManualMaxY := 35;\par
    Pesgo1.YAxisLabel := 'Signal 2';\par
\par
    Pesgo1.WorkingAxis := 2;\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 30;\par
    Pesgo1.ManualMaxY := 40;\par
    Pesgo1.YAxisLabel := 'Signal 3';\par
    Pesgo1.PlottingMethod := ePlottingMethod.sgPoint;\par
\par
    Pesgo1.WorkingAxis := 3;\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 42;\par
    Pesgo1.ManualMaxY := 48;\par
    Pesgo1.YAxisLabel := 'Signal 4';\par
    Pesgo1.PlottingMethod := ePlottingMethod.sgPoint;\par
    Pesgo1.WorkingAxis := 0;\par
\par
    // Clear out default data //\par
    PEvsetW(Pesgo1.HObject, PEP_faXDATA, ptx2, 400000);\par
    Pesgo1.YData[0, 0] := 0;   Pesgo1.YData[0, 1] := 0;\par
    Pesgo1.YData[0, 2] := 0;   Pesgo1.YData[0, 3] := 0;\par
\par
    //Set various properties //\par
    Pesgo1.MainTitle := 'Scientific Real-Time Example';\par
    Pesgo1.SubTitle := '';\par
    Pesgo1.NoRandomPointsToExport := True;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.AllowBar := False;\par
    Pesgo1.AllowPopup := False;\par
    Pesgo1.AllowSubsetsPage := false;\par
    Pesgo1.AllowTextExport := false;\par
    Pesgo1.AllowEmfExport := false;\par
    Pesgo1.AllowWmfExport := false;\par
    Pesgo1.AllowSvgExport := false;\par
\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.PrepareImages := True;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := False;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
\par
    Pesgo1.FixedFonts := True;\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255, 255, 255, 255);\par
    Pesgo1.SubsetColors[1] := Pesgo1.PEargb(255, 0, 255, 255);\par
    Pesgo1.SubsetColors[2] := Pesgo1.PEargb(255, 255, 255, 0);\par
    Pesgo1.SubsetColors[3] := Pesgo1.PEargb(255, 0, 255, 0);\par
\par
    Pesgo1.DataShadows := sgNo3D;\par
    Pesgo1.SubsetLineTypes[0] := PELT_THINSOLID;\par
    Pesgo1.SubsetLineTypes[1] := PELT_THINSOLID;\par
    Pesgo1.SubsetLineTypes[2] := PELT_THINSOLID;\par
    Pesgo1.SubsetLineTypes[3] := PELT_THINSOLID;\par
\par
    Pesgo1.ImageAdjustRight := 100;\par
    Pesgo1.ImageAdjustLeft := 20;\par
\par
    // Improves metafile exports //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    // Setting to help with new Direct3D rendering and example expanded to 400K points //\par
    Pesgo1.NullDataGaps := false;\par
    Pesgo1.HourGlassThreshold := 10000000;\par
    Pesgo1.Filter2D := sgFastestFilter;\par
    Pesgo1.AutoImageReset := false;   // important for Direct3D rendering\par
\par
    Pesgo1.RenderEngine := sgDirect3D;\par
\par
    // Composite2D3D // Faster settings are 1-force only one D2D layer in back, 2-force only one D2D layer in front\par
    // Default setting 0 creates 2 D2D layers, one in back ground and one in foreground, allowing normal separation\par
    // of graphics as properties dictate.\par
    Pesgo1.Composite2D3D := sgBackgroundLayer;\par
\par
    // Reset image //\par
    Pesgo1.Force3dxVerticeRebuild := true;\par
    Pesgo1.Force3dxNewColors := true;\par
\par
    // Reset image //\par
    Pesgo1.PEactions := sgReinitAndReset;\par
\par
    // Start Timer //\par
    Timer1.Interval := 25;\par
    Timer1.Enabled := True;\par
\par
\{\par
    ////////////////////////////////////////\par
    // Code from the Timer Event is below //\par
    ////////////////////////////////////////\par
\par
    // Repass the data, with PEvset call //\par
    Pesgo1.Subsets := 4;\par
    Pesgo1.Points := 100000;\par
\par
    fShift := (Random * 4500); // randomize the start of waveform data to produce variation\par
    i := trunc(fShift);\par
    PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 0, 100000, @pty2^[i], 0);\par
    PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 100000, 100000, @pty2^[i + 125000], 0);\par
    PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 200000, 100000, @pty2^[i + 250000], 0);\par
    PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 300000, 100000, @pty2^[i + 375000], 0);\par
\par
    if (Pesgo1.RenderEngine = sgDirect3D) then\par
        PEreconstruct3dpolygons(Pesgo1.hObject)\par
    else\par
    begin\par
        PEreinitialize(Pesgo1.hObject); // Because 115 create sets AutoImageReset = False, we need to call PEreinitialize to re-filter new data\par
        PEresetimage(Pesgo1.hObject, 0, 0);\par
    end;\par
    Pesgo1.PEactions := sgInvalidateImage;\par
\}\par
\par
  End\par
Else If nChart = 116 Then\par
  Begin\par
\{*********************************************************************'\par
'*********************************************************************\}\par
\{116  Scientific Graph showing real-time 2\}\par
\par
    //! Chart fills 100 points autoscaling x axis is it\par
    //! is filled.  Once 100 point have been passed, the\par
    //! chart then acts as a strip chart.\par
\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 100;\par
\par
    // Set Manual Y scale //\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 1;\par
    Pesgo1.ManualMaxY := 100;\par
\par
    // Clear out default data //\par
    Pesgo1.XData[0, 0] := 0;     Pesgo1.XData[0, 1] := 0;\par
    Pesgo1.XData[0, 2] := 0;     Pesgo1.XData[0, 3] := 0;\par
    Pesgo1.YData[0, 0] := 0;     Pesgo1.YData[0, 1] := 0;\par
    Pesgo1.YData[0, 2] := 0;     Pesgo1.YData[0, 3] := 0;\par
\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkInset;\par
\par
    // Set various other properties //\par
    Pesgo1.MainTitle := 'Scientific Real-Time Example';\par
    Pesgo1.SubTitle := '';\par
    Pesgo1.NoRandomPointsToExport := True;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.AllowBar := False;\par
    Pesgo1.AllowPopup := False;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.FixedFonts := True;\par
\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgLarge;\par
    Pesgo1.FontSizeGlobalCntl := 1.4;\par
\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255, 0, 150, 200);\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMTHICKSOLID;\par
    Pesgo1.PlottingMethod := sgPointsPlusBFC;\par
    Pesgo1.AutoMinMaxPaddingX := 0;\par
    Pesgo1.PointGradientStyle := sgVerticalAscentInversePG;\par
    Pesgo1.PointBorderColor := Pesgo1.PEargb(100, 0, 0, 0);\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
    // set various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.PEactions := sgReinitAndReset;\par
\par
    //Initialize Counters and Timer\par
    m_nRealTimeCounter := 1;\par
    m_nSinCounter := 1;\par
    Timer1.Interval := 25;\par
    Timer1.Enabled := True;\par
\{\par
    ////////////////////////////////////////\par
    // Code from the Timer Event is below //\par
    ////////////////////////////////////////\par
\par
    newy := 50 + (Sin(m_nSinCounter * 0.075) * 30) + (Random * 15);\par
    newx := m_nRealTimeCounter;\par
\par
    // Append new values  //\par
    PEvset(Pesgo1.hObject, PEP_faAPPENDYDATA, @newy, 1);\par
    PEvset(Pesgo1.hObject, PEP_faAPPENDXDATA, @newx, 1);\par
\par
    // Increment counter //\par
    m_nRealTimeCounter := m_nRealTimeCounter + 1;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter := m_nSinCounter + 1;\par
    If (m_nSinCounter > 30000) Then m_nSinCounter := 1;\par
\par
    // Update image and force paint //\par
    Pesgo1.PEnarg1 := 0;\par
    Pesgo1.PEnarg2 := 0;\par
    Pesgo1.PEactions := sgReinitAndReset;  // Calls PEresetimage\par
\}\par
  End\par
Else If nChart = 117 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{117  Scientific Graph showing real-time 3\}\par
\par
    //! Chart fills 100 points but x axis is initially\par
    //! manually scaled.  Once 100 point have been passed,\par
    //! the chart switches to autoscaling the x axis.\par
\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 100;\par
\par
    // Set Manual Y scale //\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 1;\par
    Pesgo1.ManualMaxY := 100;\par
\par
    // Set Manual X scale //\par
    Pesgo1.ManualScaleControlX := sgManualMinAndMax;\par
    Pesgo1.ManualMinX := 1;\par
    Pesgo1.ManualMaxX := 100;\par
\par
    // Clear out default data //\par
    Pesgo1.XData[0, 0] := 0;   Pesgo1.XData[0, 1] := 0;\par
    Pesgo1.XData[0, 2] := 0;   Pesgo1.XData[0, 3] := 0;\par
    Pesgo1.YData[0, 0] := 0;   Pesgo1.YData[0, 1] := 0;\par
    Pesgo1.YData[0, 2] := 0;   Pesgo1.YData[0, 3] := 0;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkShadow;\par
\par
    // Set various properties //\par
    Pesgo1.MainTitle := 'Scientific Real-Time Example';\par
    Pesgo1.SubTitle := '';\par
    Pesgo1.NoRandomPointsToExport := True;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.AllowBar := False;\par
    Pesgo1.AllowPopup := False;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.FixedFonts := True;\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255, 200,150,0);\par
\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgLarge;\par
    Pesgo1.FontSizeGlobalCntl := 1.4;\par
\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMTHICKSOLID;\par
    Pesgo1.PlottingMethod := sgPointsPlusBFL;\par
    Pesgo1.AutoMinMaxPaddingX := 0;\par
    Pesgo1.PointGradientStyle := sgVerticalAscentInversePG;\par
    Pesgo1.PointBorderColor := Pesgo1.PEargb(100, 0, 0, 0);\par
\par
    Pesgo1.ImageAdjustLeft := 50;\par
    Pesgo1.ImageAdjustRight := 0;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
    // export settings //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.PEactions := sgReinitAndReset;\par
\par
    // Initialize Counters and Timer //\par
    m_nRealTimeCounter := 1;\par
    m_nSinCounter := 1;\par
    Timer1.Interval := 25;\par
    Timer1.Enabled := True;\par
\{\par
    ////////////////////////////////////////\par
    // Code from the Timer Event is below //\par
    ////////////////////////////////////////\par
\par
    newy := 50 + (Sin(m_nSinCounter * 0.075) * 30) + (Random * 15);\par
    newx := m_nRealTimeCounter;\par
\par
    // Append new values //\par
    PEvset(Pesgo1.hObject, PEP_faAPPENDYDATA, @newy, 1;\par
    PEvset(Pesgo1.hObject, PEP_faAPPENDXDATA, @newx, 1;\par
\par
    // Increment counter //\par
    m_nRealTimeCounter := m_nRealTimeCounter + 1;\par
\par
    // Switch to AutoScaling x axis after receiving 100 data points //\par
    If m_nRealTimeCounter := 100 Then Pesgo1.ManualScaleControlX := sgAutoScale;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter := m_nSinCounter + 1;\par
    If (m_nSinCounter > 30000) Then m_nSinCounter := 1;\par
\par
    // Update image and force paint //\par
    Pesgo1.PEnarg1 := 0;\par
    Pesgo1.PEnarg2 := 0;\par
    Pesgo1.PEactions := sgReinitAndReset;  // Calls PEresetimage\par
\}\par
\par
  End\par
Else If nChart = 118 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{118  Scientific Graph showing real-time 4\}\par
\par
    //! Chart fills 100 points and once 100 points have\par
    //! been passed, old data is over-written as more\par
    //! data is passed to chart.\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 100;\par
\par
    // Set Manual Y scale //\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 1;\par
    Pesgo1.ManualMaxY := 100;\par
\par
    // Set Manual X scale //\par
    Pesgo1.ManualScaleControlX := sgManualMinAndMax;\par
    Pesgo1.ManualMinX := 1;\par
    Pesgo1.ManualMaxX := 100;\par
\par
    // Show Annotations //\par
    Pesgo1.ShowAnnotations := True;\par
\par
    // Clear out default data //\par
    Pesgo1.XData[0, 0] := 0;    Pesgo1.XData[0, 1] := 0;\par
    Pesgo1.XData[0, 2] := 0;    Pesgo1.XData[0, 3] := 0;\par
    Pesgo1.YData[0, 0] := 0;    Pesgo1.YData[0, 1] := 0;\par
    Pesgo1.YData[0, 2] := 0;    Pesgo1.YData[0, 3] := 0;\par
\par
    // Set various properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgLightLine;\par
\par
    Pesgo1.MainTitle := 'Scientific Real-Time Example';\par
    Pesgo1.SubTitle := '';\par
    Pesgo1.NoRandomPointsToExport := True;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.AllowBar := False;\par
    Pesgo1.AllowPopup := False;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.FixedFonts := True;\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(60, 0,200,200);\par
\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
\par
    Pesgo1.FontSize := sgLarge;\par
    Pesgo1.FontSizeGlobalCntl := 1.4;\par
\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMTHICKSOLID;\par
    Pesgo1.PlottingMethod := sgArea;\par
    Pesgo1.AutoMinMaxPaddingX := 0;\par
    Pesgo1.PointGradientStyle := sgVerticalAscentInversePG;\par
    Pesgo1.PointBorderColor := Pesgo1.PEargb(100, 0, 0, 0);\par
    Pesgo1.GridStyle := sgDash;\par
\par
    Pesgo1.ImageAdjustLeft := 50;\par
    Pesgo1.ImageAdjustRight := 0;\par
\par
    // export settings //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
    Pesgo1.PEactions := sgReinitAndReset;\par
\par
    // Initialize Counters and Timer\par
    m_nRealTimeCounter := 1;\par
    m_nSinCounter := 1;\par
    Timer1.Interval := 25;\par
    Timer1.Enabled := True;\par
\{\par
    ////////////////////////////////////////\par
    // Code from the Timer Event is below //\par
    ////////////////////////////////////////\par
\par
    // New y value and x value //\par
    newy := 50 + (Sin(m_nSinCounter * 0.075) * 30) + (Random * 15);\par
    newx := m_nRealTimeCounter;\par
\par
    // Update new data at current index //\par
    Pesgo1.YData[0, m_nRealTimeCounter] := newy;\par
    Pesgo1.XData[0, m_nRealTimeCounter] := newx;\par
\par
    Pesgo1.VertLineAnnotation[0] := newx;\par
    Pesgo1.VertLineAnnotationType[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.VertLineAnnotationColor[0] := Pesgo1.PEargb(255, 0, 0, 155);\par
\par
    // Increment counter //\par
    m_nRealTimeCounter := m_nRealTimeCounter + 1;\par
\par
    // Reset counter at end of data //\par
    If m_nRealTimeCounter = 100 Then m_nRealTimeCounter := 0;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter := m_nSinCounter + 1;\par
    If (m_nSinCounter > 30000) Then m_nSinCounter := 1;\par
\par
    // Update image and force paint //\par
    Pesgo1.PEnarg1 := 0;\par
    Pesgo1.PEnarg2 := 0;\par
    Pesgo1.PEactions := sgReinitAndReset;  // Calls PEresetimage\par
\}\par
\par
  End\par
Else If nChart = 119 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{119  Scientific Graph showing real-time 5\}\par
\par
    //! Chart holds 2000 points.  Data is fed into\par
    //! data arrays at current data index.  Once 2000\par
    //! points have been passed, 250 are truncated as\par
    //! data is shifted to make room for 250 more data\par
    //! points.\par
\par
    //! Depending upon ZoomMode property, this example with\par
    //! either show most current 1 minutes or all data in\par
    //! object.\par
\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 2000;\par
\par
    Pesgo1.DateTimeMode := sgVBDateTime; // Date/Time Model\par
    Pesgo1.UsingXDataII := True;         // Using Double Precision XDataII\par
\par
    // Some functional attributes        // 1440 is minutes in a day\par
    ZoomInterval := (1 / 1440);          // 1 minute scale zoom interval\par
    ZoomSmallInterval := (0.25 / 1440);   // 15 second scale adjustment\par
\par
    // Extents to show all data points\par
    StartTime := Now;\par
    Pesgo1.ManualScaleControlX := sgManualMin;\par
    Pesgo1.ManualMinX := StartTime;\par
    Pesgo1.ManualMaxX := Pesgo1.ManualMinX + ZoomInterval;\par
\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 1;\par
    Pesgo1.ManualMaxY := 100;\par
\par
    // Set Zoomed partial Range of X Scale //\par
    ZoomStart := StartTime;\par
    ZoomEnd := ZoomStart + ZoomInterval;\par
    Pesgo1.ZoomMinX := ZoomStart;\par
    Pesgo1.ZoomMaxX := ZoomEnd;\par
    Pesgo1.ZoomMinY := 1;\par
    Pesgo1.ZoomMaxY := 100;\par
    Pesgo1.ZoomMode := True;\par
    // If ZoomMode is True, you will see 1 minute of data //\par
    // If ZoomMode is False, you will see all data in object //\par
\par
    // Clear out default data\par
    // No need to clear out XData since using XDataII\par
    Pesgo1.YData[0, 0] := 0;   Pesgo1.YData[0, 1] := 0;\par
    Pesgo1.YData[0, 2] := 0;   Pesgo1.YData[0, 3] := 0;\par
\par
    // Set various properties\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.MainTitle := 'Scientific Real-Time Example';\par
    Pesgo1.SubTitle := '';\par
    Pesgo1.NoRandomPointsToExport := True;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.AllowBar := False;\par
    Pesgo1.AllowPopup := False;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.FixedFonts := True;\par
\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255,200,200,0);\par
\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgLarge;\par
    Pesgo1.FontSizeGlobalCntl := 1.4;\par
\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMTHICKSOLID;\par
    Pesgo1.PlottingMethod := sgLine;\par
    Pesgo1.AutoMinMaxPaddingX := 0;\par
    Pesgo1.PointGradientStyle := sgVerticalAscentInversePG;\par
    Pesgo1.PointBorderColor := Pesgo1.PEargb(100, 0, 0, 0);\par
    Pesgo1.GridStyle := sgDash;\par
\par
    // export settings //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
    Pesgo1.PEactions := sgReinitAndReset;\par
\par
    // Initialize Counters and Timer //\par
    m_nRealTimeCounter := 1;\par
    m_nSinCounter := 1;\par
    Timer1.Interval := 500;\par
    Timer1.Enabled := True;\par
\par
\{\par
    ////////////////////////////////////////\par
    // Code from the Timer Event is below //\par
    ////////////////////////////////////////\par
\par
    // New y value and x value //\par
    newy := 50 + (Sin(m_nSinCounter * 0.075) * 30) + (Random * 15);\par
    newx2 := Now;\par
\par
    // Shift data when counter reaches end of data. //\par
    If m_nRealTimeCounter >= 1999 Then\par
    Begin\par
        // Shift Data by 250 data points, oldest 250 will be lost.\par
        m_nRealTimeCounter := m_nRealTimeCounter - 250;\par
        PEvset(Pesgo1.hObject, PEP_faAPPENDYDATA, @NewYData[0], 250);\par
        PEvset(Pesgo1.hObject, PEP_faAPPENDXDATAII, @NewYData[0], 250);\par
    End;\par
\par
    // Store new values at current index //\par
    Pesgo1.XDataII[0, m_nRealTimeCounter] := newx2;\par
    Pesgo1.YData[0, m_nRealTimeCounter] := newy;\par
\par
    // Increment index counter //\par
    m_nRealTimeCounter := m_nRealTimeCounter + 1;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter := m_nSinCounter + 1;\par
    If (m_nSinCounter > 30000) Then m_nSinCounter := 1;\par
\par
    // If current time is beyond zoom max, the re-adjust zoom max //\par
    If newx2 > ZoomEnd Then\par
    Begin\par
        ZoomEnd := ZoomEnd + ZoomSmallInterval;\par
        ZoomStart := ZoomEnd - ZoomInterval;\par
        Pesgo1.ZoomMinX := ZoomStart;\par
        Pesgo1.ZoomMaxX := ZoomEnd;\par
        Pesgo1.ManualMinX := Pesgo1.XDataII[0, 1];\par
        Pesgo1.ManualMaxX := ZoomEnd;\par
    End;\par
\par
    // Update image and force paint //\par
    Pesgo1.PEnarg1 := 0;\par
    Pesgo1.PEnarg2 := 0;\par
    Pesgo1.PEactions := sgReinitAndReset;  // Calls PEresetimage\par
    Pesgo1.PEactions := sgInvalidateImage;  // Calls InvalidateRect\par
\}\par
\par
  End\par
Else If nChart = 120 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{120  Scientific Graph showing 2D contour colors\}\par
\par
    // Enable dragging mouse with middle button //\par
    Pesgo1.MouseDraggingX := True;\par
    Pesgo1.MouseDraggingY := True;\par
\par
   // Code to get partial data from a binary file //\par
   nStartRow := 100;\par
   nEndRow := 150;\par
   nTargetRows := nEndRow - nStartRow + 1;\par
\par
   nStartCol := 200;\par
   nEndCol := 250;\par
   nTargetCols := nEndCol - nStartCol + 1;\par
\par
   nQ := nTargetRows * nTargetCols;\par
\par
   GetMem(pElevData, SizeOf(LongInt) * (2250000) );\par
\par
   AssignFile(pfile, 'terrain2.bin');\par
   Reset(pfile, 4);\tab // Record size = 4\par
   BlockRead(pfile, pElevData[0], 2250000);\par
   CloseFile(pfile);\par
\par
   GetMem(pMyXData, SizeOf(Single) * nQ);\par
   GetMem(pMyYData, SizeOf(Single) * nQ);\par
   GetMem(pMyZData, SizeOf(Single) * nQ);\par
\par
   rowcounter := 0;\par
   colcounter := 0;\par
\par
   for Row := 0 To 1499 do\par
   begin\par
       for Col := 0 To 1499 do\par
       begin\par
           foundtargetindex := false;\par
\par
           if (Row >= nStartRow) and (Row <= nEndRow) Then\par
           begin\par
               if (Col >= nStartCol) and (Col <= nEndCol) Then\par
               begin\par
                   foundtargetindex := TRUE;\par
                   o := (rowcounter * nTargetRows) + colcounter;\par
                   pMyXData[o] := Col + 1;\par
                   ftmp := pElevData[(Row * 1500) + Col];\par
                    if (ftmp < 14100.0) then ftmp := 0.00;   // testing / creating null data portions\par
                   pMyZData[o] := ftmp * 0.01;\par
                   pMyYData[o] := Row + 1;\par
               end;\par
           end;\par
           if (foundtargetindex) Then\par
               colcounter := colcounter + 1;\par
       end;\par
       if (foundtargetindex) Then\par
           rowcounter := rowcounter + 1;\par
   end;\par
\par
   Pesgo1.Subsets := nTargetRows;\par
   Pesgo1.Points := nTargetCols;\par
\par
   // Perform the actual transfer of data //\par
   PEvsetW(Pesgo1.hObject, PEP_faXDATA, pMyXData, nQ);\par
   PEvsetW(Pesgo1.hObject, PEP_faYDATA, pMyYData, nQ);\par
   PEvsetW(Pesgo1.hObject, PEP_faZDATA, pMyZData, nQ);\par
\par
   FreeMem(pElevData, SizeOf(Single) * 2250000);\par
   FreeMem(pMyXData, SizeOf(Single) * nQ);\par
   FreeMem(pMyYData, SizeOf(Single) * nQ);\par
   FreeMem(pMyZData, SizeOf(Single) * nQ);\par
\par
   Pesgo1.ContourLegendPrecision := 1; // This is an easier method of controlling legend precision\par
   Pesgo1.MouseWheelFunction := eMouseWheelFunction.sgMouseWheelHorzVertZoom;\par
\par
   // Set Contour Color regions //\par
   // v9 features, // optional method of setting sizes of contour color regions\par
   Pesgo1.ContourColorProportions[0] := 0.1;\par
   Pesgo1.ContourColorProportions[1] := 0.05;\par
   Pesgo1.ContourColorProportions[2] := 0.1;\par
   Pesgo1.ContourColorProportions[3] := 0.63;\par
   Pesgo1.ContourColorProportions[4] := 0.06;\par
   Pesgo1.ContourColorProportions[5] := 0.06;\par
   Pesgo1.ContourColorBlends := 10;  // this must be set before COLORSET, COLORSET ALWAYS LAST\par
   Pesgo1.ContourColorAlpha := 155;\par
   Pesgo1.ContourColorSet := eContourColorSet.sgCC_BlueCyanGreenYellowBrownWhite;\par
\par
   Pesgo1.AutoMinMaxPadding := 0;\par
\par
   // For when ViewingStyle is monochrome //\par
   for s := 0 To 99 do\par
       Pesgo1.SubsetShades[s] := Pesgo1.PEargb(255, 50 + (s * 2), 50 + (s * 2), 50 + (s * 2));\par
\par
   // Set Various Other Properties //\par
   Pesgo1.BitmapGradientMode := True;\par
   Pesgo1.QuickStyle := sgMedLine;\par
   Pesgo1.BorderTypes := sgInset;\par
\par
   // Set the plotting method //\par
   Pesgo1.AllowContourColors := True;\par
   Pesgo1.AllowContourLines := True;\par
   Pesgo1.AllowContourColorsShadows := True;\par
\par
   Pesgo1.PlottingMethod := sgContourColors;\par
\par
   Pesgo1.DataShadowMenu := eMenuControl.sgHideMenu;\par
\par
   Pesgo1.ContourStyleLegend := True;\par
   Pesgo1.LegendLocation := sgLegendLeft;\par
   Pesgo1.GridInFront := True;\par
   Pesgo1.GridLineControl := sgYPlusXAxis;\par
   Pesgo1.PrepareImages := True;\par
   Pesgo1.CacheBmp := True;\par
   Pesgo1.ZoomStyle := sgRO2NOT;\par
   Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
\par
   Pesgo1.MouseWheelFunction := eMouseWheelFunction.sgMouseWheelHorzVertZoom;\par
   Pesgo1.MouseWheelZoomSmoothness := 4;\par
   Pesgo1.MouseWheelZoomFactor := 1.15;\par
   Pesgo1.GridBands := false;\par
\par
    // Disable other non contour plotting method //\par
    Pesgo1.AllowLine := False;\par
    Pesgo1.AllowPoint := False;\par
    Pesgo1.AllowBar := False;\par
    Pesgo1.AllowArea := False;\par
    Pesgo1.AllowSpline := False;\par
    Pesgo1.AllowPointsPlusLine := False;\par
    Pesgo1.AllowPointsPlusSpline := False;\par
    Pesgo1.AllowBestFitCurve := False;\par
    Pesgo1.AllowBestFitLine := False;\par
    Pesgo1.AllowStick := False;\par
\par
    // Set Titles //\par
    Pesgo1.MainTitle := 'Elevation Example';\par
    Pesgo1.SubTitle := '';\par
\par
    // So contour goes to edge of grid //\par
    Pesgo1.AutoMinMaxPadding := 0;\par
\par
    // Enable Zooming //\par
    Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
\par
    // Set small font size //\par
    Pesgo1.FontSize := eFontSize.sgMedium;\par
    PEsgo1.FixedFonts := True;\par
\par
    // Disable appropriate tabs //\par
    Pesgo1.AllowAxisPage := False;\par
    Pesgo1.AllowStylePage := False;\par
    Pesgo1.AllowSubsetsPage := False;\par
\par
    Pesgo1.ScrollingVertZoom := True;\par
    Pesgo1.ScrollingHorzZoom := True;\par
\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
\par
    // Sets various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
\par
    Pesgo1.AllowDataHotSpots := true; // try both ways true and false;\par
    Pesgo1.CursorPromptTracking := true;\par
    Pesgo1.CursorPromptStyle := eCursorPromptStyle.sgZValue;\par
\par
    // v9 features\par
    Pesgo1.TrackingTooltipTitle := 'USA Dallas area';\par
    Pesgo1.CursorPromptLocation := eCursorPromptLocation.sgTooltip;\par
    Pesgo1.TrackingCustomDataText := true;\par
    Pesgo1.HandCursor := 1; // ARROW\par
\par
    // v9 features\par
    Pesgo1.GraphBmpAlways := true;\par
    Pesgo1.GraphBackColor := 1; // empty color\par
    Pesgo1.GraphBmpFilename := 'usmid.jpg';\par
    Pesgo1.GraphBmpStyle := eBitmapStyle.sgBitBltZooming;\par
\par
    // v9 features\par
    // optionally control the relationship between the zoomable background bitmap and the data units.\par
    //Pesgo1.GraphBmpMinX := 200.0;\par
    //Pesgo1.GraphBmpMaxX := 260.0;\par
    //Pesgo1.GraphBmpMinY := 100.0;\par
    //Pesgo1.GraphBmpMaxY := 160.0;\par
\par
    Pesgo1.Composite2D3D := eComposite2D3D.sgForegroundLayer;\par
    Pesgo1.RenderEngine := eRenderEngine.sgDirect3D;\par
\par
    Pesgo1.Force3dxNewColors := true;\par
    Pesgo1.Force3dxVerticeRebuild := true;\par
\par
    \{   \par
        ////////////////////////////////////////\par
        // Pesgo1CustomTrackingDataText //\par
        //////////////////////////////////\par
        s := 'X: ' + FormatFloat('#.00', Pesgo1.CursorValueX) + chr(10);\par
        s := s + 'Y: ' + FormatFloat('#.00', Pesgo1.CursorValueY) + chr(10);\par
        s := s + 'Z: ' + FormatFloat('#.00', Pesgo1.CursorValueZ) + ' ';\par
        Pesgo1.TrackingText := s;\par
\par
\par
        ///////////////////////////\par
        // Pesgo1MouseMove //\par
        /////////////////////\par
        PEvgetW(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
        PEvgetW(Pesgo1.hObject, PEP_rectGRAPH, @r);\par
        if ((X > r.Left) and (X < r.Right) and (Y > r.Top) and (Y < r.Bottom)) then\par
        begin\par
            if (Pesgo1.AllowDataHotSpots = false) then\par
                Form3.Caption := 'Interpolated Z: ' + FormatFloat('#.00', Pesgo1.CursorValueZ)\par
            else\par
            begin\par
                PEgethotspot(Pesgo1.hObject, pt.X, pt.Y);\par
                PEvgetW(Pesgo1.hObject, PEP_structHOTSPOTDATA, @hsd);\par
                if (hsd.nHotSpotType = PEHS_DATAPOINT) then\par
                begin\par
                    Form3.Caption := 'Z Data: ' + FormatFloat('#.00', Pesgo1.ZData[hsd.w1, hsd.w2]);\par
                end;\par
            end;\par
        end;\par
    \}\par
\par
\par
  End\par
Else If nChart = 121 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{121  Scientific Graph showing 2D contour lines\}\par
\par
    // Enable dragging mouse with middle button //\par
    Pesgo1.MouseDraggingX := True;\par
    Pesgo1.MouseDraggingY := True;\par
\par
   // Code to get partial data from a binary file //\par
   nStartRow := 300;\par
   nEndRow := 350;\par
   nTargetRows := nEndRow - nStartRow + 1;\par
\par
   nStartCol := 50;\par
   nEndCol := 100;\par
   nTargetCols := nEndCol - nStartCol + 1;\par
\par
   nQ := nTargetRows * nTargetCols;\par
\par
   GetMem(pElevData, SizeOf(LongInt) * (2250000) );\par
\par
   AssignFile(pfile, 'terrain2.bin');\par
   Reset(pfile, 4);\tab // Record size = 4\par
   BlockRead(pfile, pElevData[0], (2250000) );\par
   CloseFile(pfile);\par
\par
   GetMem(pMyXData, SizeOf(Single) * nQ);\par
   GetMem(pMyYData, SizeOf(Single) * nQ);\par
   GetMem(pMyZData, SizeOf(Single) * nQ);\par
\par
   rowcounter := 0;\par
   colcounter := 0;\par
\par
   for Row := 0 To 1499 do\par
   begin\par
       for Col := 0 To 1499 do\par
       begin\par
           foundtargetindex := false;\par
           if (Row >= nStartRow) and (Row <= nEndRow) Then\par
           begin\par
               if (Col >= nStartCol) and (Col <= nEndCol) Then\par
               begin\par
                   foundtargetindex := TRUE;\par
                   o := (rowcounter * nTargetRows) + colcounter;\par
                   pMyXData[o] := Col + 1;\par
                   ftmp := pElevData[(Row * 1500) + Col] * 0.1;\par
                   pMyZData[o] := ftmp;\par
                   pMyYData[o] := Row + 1;\par
               end;\par
           end;\par
           if (foundtargetindex) Then\par
               colcounter := colcounter + 1;\par
       end;\par
       if (foundtargetindex) Then\par
           rowcounter := rowcounter + 1;\par
   end;\par
\par
   Pesgo1.Subsets := nTargetRows;\par
   Pesgo1.Points := nTargetCols;\par
\par
   // Perform the actual transfer of data //\par
   PEvsetW(Pesgo1.hObject, PEP_faXDATA, pMyXData, nQ);\par
   PEvsetW(Pesgo1.hObject, PEP_faYDATA, pMyYData, nQ);\par
   PEvsetW(Pesgo1.hObject, PEP_faZDATA, pMyZData, nQ);\par
\par
   FreeMem(pElevData, SizeOf(Single) * 2250000);\par
   FreeMem(pMyXData, SizeOf(Single) * nQ);\par
   FreeMem(pMyYData, SizeOf(Single) * nQ);\par
   FreeMem(pMyZData, SizeOf(Single) * nQ);\par
\par
   Pesgo1.ContourLegendPrecision := 1; // This is an easier method of controlling legend precision\par
   Pesgo1.MouseWheelFunction := eMouseWheelFunction.sgMouseWheelHorzVertZoom;\par
\par
   // Set Contour Color regions //\par
   Pesgo1.ContourColorBlends := 10;\par
   Pesgo1.ContourColorSet := eContourColorSet.sgCC_BlueCyanGreenYellowBrownWhite;\par
\par
   For s := 0 To 36 do\par
        Pesgo1.SubsetShades[s] := Pesgo1.PEargb(255, 20 + (s * 6), 20 + (s * 6), 20 + (s * 6));\par
\par
   Pesgo1.ContourStyleLegend := True;\par
   Pesgo1.GraphDataLabels := True;\par
\par
    // v9.5\par
    Pesgo1.AllowAnnotationControl := true;\par
\par
   // Set some random annotations //\par
   for s := 0 to 29 do\par
   begin\par
       Pesgo1.GraphAnnotationX[s] := nStartCol + (Random * 50);\par
       Pesgo1.GraphAnnotationY[s] := nStartRow + (Random * 50);\par
       Pesgo1.GraphAnnotationType[s] := PEGAT_SMALLDOTSOLID;\par
       Pesgo1.GraphAnnotationColor[s] := Pesgo1.PEargb(128, 198, 0, 0);\par
       Pesgo1.GraphAnnotationGradientStyle[s] := sgVerticalAscentInversePG;\par
       Pesgo1.GraphAnnotationShadow[s] := True;\par
   end;\par
   for s := 30 to 59 do\par
   begin\par
       Pesgo1.GraphAnnotationX[s] := nStartCol + (Random * 50);\par
       Pesgo1.GraphAnnotationY[s] := nStartRow + (Random * 50);\par
       Pesgo1.GraphAnnotationType[s] := PEGAT_SMALLDOTSOLID;\par
       Pesgo1.GraphAnnotationColor[s] := Pesgo1.PEargb(128, 0, 198, 0);\par
       Pesgo1.GraphAnnotationGradientStyle[s] := sgVerticalAscentInversePG;\par
       Pesgo1.GraphAnnotationShadow[s] := True;\par
   end;\par
   Pesgo1.ShowAnnotations := True;\par
   Pesgo1.GraphAnnotationShadows := True;\par
\par
   // Set Various Other Properties //\par
   Pesgo1.BitmapGradientMode := False;\par
   Pesgo1.QuickStyle := sgLightInset;\par
\par
   // Set the plotting method //\par
   Pesgo1.AllowContourColors := True;\par
   Pesgo1.AllowContourLines := True;\par
\par
   Pesgo1.PlottingMethod := sgContourLines;\par
\par
   Pesgo1.DataShadowMenu := eMenuControl.sgHideMenu;\par
   Pesgo1.MarkDataPointsMenu := eMenuControl.sgHideMenu;\par
\par
   Pesgo1.LegendLocation := sgLegendLeft;\par
   Pesgo1.GridInFront := True;\par
   Pesgo1.GridLineControl := sgYPlusXAxis;\par
   Pesgo1.GridStyle := sgDot;\par
   Pesgo1.PrepareImages := True;\par
   Pesgo1.CacheBmp := True;\par
   Pesgo1.ZoomStyle := sgRO2NOT;\par
   Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
\par
   // Disable other non contour plotting method //\par
   Pesgo1.AllowLine := False;\par
   Pesgo1.AllowPoint := False;\par
   Pesgo1.AllowBar := False;\par
   Pesgo1.AllowArea := False;\par
   Pesgo1.AllowSpline := False;\par
   Pesgo1.AllowSplineArea := False;\par
   Pesgo1.AllowPointsPlusLine := False;\par
   Pesgo1.AllowPointsPlusSpline := False;\par
   Pesgo1.AllowBestFitCurve := False;\par
   Pesgo1.AllowBestFitLine := False;\par
   Pesgo1.AllowStick := False;\par
\par
   // Set Titles //\par
   Pesgo1.MainTitle := 'Elevation Example';\par
   Pesgo1.SubTitle := '';\par
   Pesgo1.ShowYAxis := sgGridLabels;\par
   Pesgo1.ShowXAxis := sgGridLabels;\par
\par
   // So contour goes to edge of grid //\par
   Pesgo1.AutoMinMaxPadding := 0;\par
\par
   // Enable Zooming //\par
   Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
\par
   // Disable appropriate tabs //\par
   Pesgo1.AllowAxisPage := False;\par
   Pesgo1.AllowStylePage := False;\par
   Pesgo1.AllowSubsetsPage := False;\par
\par
   Pesgo1.ScrollingVertZoom := True;\par
   Pesgo1.ScrollingHorzZoom := True;\par
\par
   Pesgo1.TextShadows := sgShadowBoldText;\par
   Pesgo1.MainTitleBold := True;\par
   Pesgo1.SubTitleBold := True;\par
   Pesgo1.LabelBold := True;\par
   Pesgo1.FontSize := sgMedium;\par
   PEsgo1.FixedFonts := True;\par
\par
    // Sets various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
  End\par
Else If nChart = 122 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{122  Scientific Graph showing large 2D contour with many colors\}\par
\par
    // Enable dragging mouse with middle button //\par
    Pesgo1.MouseDraggingX := True;\par
    Pesgo1.MouseDraggingY := True;\par
\par
    // Code to get partial data from a binary file //\par
    nStartRow := 1;\par
    nEndRow := 1000;\par
    nTargetRows := nEndRow - nStartRow + 1;\par
\par
    nStartCol := 1;\par
    nEndCol := 1000;\par
    nTargetCols := nEndCol - nStartCol + 1;\par
\par
    nQ := nTargetRows * nTargetCols;\par
\par
    GetMem(pElevData, SizeOf(LongInt) * (2250000) );\par
\par
    AssignFile(pfile, 'terrain2.bin');\par
    Reset(pfile, 4);\tab // Record size = 4\par
    BlockRead(pfile, pElevData[0], (2250000) );\par
    CloseFile(pfile);\par
\par
    GetMem(pMyXData, SizeOf(Single) * nTargetCols); // v9.5\par
    GetMem(pMyYData, SizeOf(Single) * nTargetRows);\par
    GetMem(pMyZData, SizeOf(Single) * nQ);\par
\par
    rowcounter := 0;\par
    colcounter := 0;\par
\par
    for Row := 0 To 1499 do\par
    begin\par
       for Col := 0 To 1499 do\par
       begin\par
           foundtargetindex := false;\par
\par
           if (Row >= nStartRow) and (Row <= nEndRow) Then\par
           begin\par
               if (Col >= nStartCol) and (Col <= nEndCol) Then\par
               begin\par
                    foundtargetindex := TRUE;\par
                    if (Row = nStartRow) then pMyXData[Col - nStartCol] := Col + 1;  // v9.5\par
                    if (Col = nStartCol) then pMyYData[Row - nStartRow] := Row + 1;\par
                    // See our help, topic SubsetByPoint to understand the below formula\par
                    o := (rowcounter * nTargetRows) + colcounter;\par
                    pMyZData[o] := pElevData[(Row * 1500) + Col] * 0.1;\par
               end;\par
           end;\par
           if (foundtargetindex) Then\par
               colcounter := colcounter + 1;\par
       end;\par
       if (foundtargetindex) Then\par
           rowcounter := rowcounter + 1;\par
    end;\par
\par
    Pesgo1.Subsets := nTargetRows;\par
    Pesgo1.Points := nTargetCols;\par
\par
    // Perform the actual transfer of data //\par
    PEvsetW(Pesgo1.hObject, PEP_faXDATA, pMyXData, nTargetCols);\par
    PEvsetW(Pesgo1.hObject, PEP_faYDATA, pMyYData, nTargetRows);\par
    PEvsetW(Pesgo1.hObject, PEP_faZDATA, pMyZData, nQ);\par
    Pesgo1.DuplicateDataX := eDuplicateData.sgPointIncrement;\par
    Pesgo1.DuplicateDataY := eDuplicateDAta.sgSubsetIncrement;\par
\par
    FreeMem(pElevData, SizeOf(Single) * 2250000);\par
    FreeMem(pMyXData, SizeOf(Single) * nTargetCols);\par
    FreeMem(pMyYData, SizeOf(Single) * nTargetRows);\par
    FreeMem(pMyZData, SizeOf(Single) * nQ);\par
\par
    Pesgo1.ContourStyleLegend := True;\par
    Pesgo1.ContourLegendPrecision := 1;\par
    Pesgo1.MouseWheelFunction := eMouseWheelFunction.sgMouseWheelHorzVertZoom;\par
\par
    // Set Contour Color regions //\par
    Pesgo1.SubsetColors[-1] := 0; // setting index to -1 sizes array to item value\par
    For s := 0 To 10 do\par
    begin\par
       Pesgo1.SubsetColors[s] := Pesgo1.PEargb(255, 0, 31 + (s * 21), 95 + (s * 15));\par
       Pesgo1.SubsetColors[s + 11] := Pesgo1.PEargb(255, 0, 95 + (s * 15), 0);\par
    end;\par
    For s := 0 To 14 do\par
       Pesgo1.SubsetColors[s + 22] := Pesgo1.PEargb(255, 128 + (s * 9), 128 + (s * 9), 128 + (s * 9));\par
\par
    For s := 0 To 36 do\par
       Pesgo1.SubsetShades[s] := Pesgo1.PEargb(255, 20 + (s * 6), 20 + (s * 6), 20 + (s * 6));\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := TRUE;\par
    Pesgo1.QuickStyle := eQuickStyle.sgDarkShadow;\par
    Pesgo1.BorderTypes := eTABorders.sgNoBorder;\par
    Pesgo1.GridBold := true;\par
\par
    // Set the plotting method //\par
    Pesgo1.AllowContourColors := True;\par
    Pesgo1.AllowContourLines := False;\par
    Pesgo1.AllowContourColorsShadows := True;\par
\par
    Pesgo1.PlottingMethod := ePlottingMethod.sgContourColorsShadows;\par
\par
    Pesgo1.LegendLocation := sgLegendLeft;\par
    Pesgo1.GridInFront := True;\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
    Pesgo1.GridStyle := sgDot;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
    Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
    Pesgo1.ScrollingVertZoom := True;\par
    Pesgo1.ScrollingHorzZoom := True;\par
\par
    Pesgo1.MouseWheelFunction := eMouseWheelFunction.sgMouseWheelHorzVertZoom;\par
    Pesgo1.MouseWheelZoomSmoothness := 3;\par
    Pesgo1.MouseWheelZoomFactor := 1.2;\par
    Pesgo1.GridBands := false;\par
\par
    // Disable other non contour plotting method //\par
    Pesgo1.AllowLine := False;\par
    Pesgo1.AllowPoint := False;\par
    Pesgo1.AllowBar := False;\par
    Pesgo1.AllowArea := False;\par
    Pesgo1.AllowSplineArea := False;\par
    Pesgo1.AllowSpline := False;\par
    Pesgo1.AllowPointsPlusLine := False;\par
    Pesgo1.AllowPointsPlusSpline := False;\par
    Pesgo1.AllowBestFitCurve := False;\par
    Pesgo1.AllowBestFitLine := False;\par
    Pesgo1.AllowStick := False;\par
\par
    Pesgo1.DataShadowMenu := eMenuControl.sgHideMenu;\par
    Pesgo1.MarkDataPointsMenu := eMenuControl.sgHideMenu;\par
\par
    // v9.5\par
    Pesgo1.AllowAnnotationControl := true;\par
    Pesgo1.ShowAnnotationTextMenu := eMenuControl.sgShowMenu;\par
\par
    // Add some random graph annotations //  // v9.5\par
    aCnt := 0;\par
\par
    for annot := 0 to 9 do\par
    begin\par
        nRndRow := Random(nTargetRows);\par
        nRndCol := Random(nTargetCols);\par
        Pesgo1.GraphAnnotationX[aCnt] := nStartCol + nRndCol;\par
        Pesgo1.GraphAnnotationY[aCnt] := nStartRow + nRndRow;\par
        Pesgo1.GraphAnnotationType[aCnt] := PEGAT_SMALLDOTSOLID;\par
        Pesgo1.GraphAnnotationColor[aCnt] := Pesgo1.PEargb(255,200,200,200);\par
        Pesgo1.GraphAnnotationShadow[aCnt] := true;\par
        aCnt := aCnt + 1;\par
    end;\par
    for annot := 0 to 9 do\par
    begin\par
        nRndRow := Random(nTargetRows);\par
        nRndCol := Random(nTargetCols);\par
        Pesgo1.GraphAnnotationX[aCnt] := nStartCol + nRndCol;\par
        Pesgo1.GraphAnnotationY[aCnt] := nStartRow + nRndRow;\par
        Pesgo1.GraphAnnotationType[aCnt] := PEGAT_SMALLDOWNTRIANGLESOLID;\par
        Pesgo1.GraphAnnotationColor[aCnt] := Pesgo1.PEargb(255,255,255,255);\par
        Pesgo1.GraphAnnotationShadow[aCnt] := true;\par
        aCnt := aCnt + 1;\par
        Pesgo1.GraphAnnotationX[aCnt] := Pesgo1.GraphAnnotationX[aCnt-1];\par
        Pesgo1.GraphAnnotationY[aCnt] := Pesgo1.GraphAnnotationY[aCnt-1];\par
        Pesgo1.GraphAnnotationType[aCnt] := PEGAT_POINTER;\par
        Pesgo1.GraphAnnotationText[aCnt] := 'Annotation ' + IntToStr(annot);\par
        Pesgo1.GraphAnnotationColor[aCnt] := Pesgo1.PEargb(255,255,255,255);\par
        aCnt := aCnt + 1;\par
    end;\par
\par
    Pesgo1.ShowAnnotations := true;\par
    Pesgo1.GraphAnnotationSizeCntl := 0.7;\par
    Pesgo1.GraphAnnotationTextSize := 100;\par
    Pesgo1.MaximumSymbolSize := eMinimumPointSize.sgLargeMPS;\par
    Pesgo1.MinimumPointSize := eMinimumPointSize.sgLargeMPS;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
    Pesgo1.ShowGraphAnnotations := true;\par
    Pesgo1.GraphAnnotationShadows := true;\par
\par
    // Set Titles //\par
    Pesgo1.MainTitle := 'Elevation Example';\par
    Pesgo1.SubTitle := '';\par
\par
    // So contour goes to edge of grid //\par
    Pesgo1.AutoMinMaxPadding := 0;\par
\par
    // Set small font size //\par
    Pesgo1.FontSize := sgMedium;\par
    PEsgo1.FixedFonts := True;\par
\par
    // Disable appropriate tabs //\par
    Pesgo1.AllowAxisPage := False;\par
    Pesgo1.AllowStylePage := False;\par
    Pesgo1.AllowSubsetsPage := False;\par
\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
\par
    // Sets various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
    Pesgo1.AllowEmfExport := false;\par
    Pesgo1.AllowWmfExport := false;\par
    Pesgo1.AllowSvgExport := false;\par
\par
    Pesgo1.RenderEngine := eRenderEngine.sgDirect3D;\par
    Pesgo1.Force3dxVerticeRebuild := True;\par
    Pesgo1.Force3dxNewColors := True;\par
\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
    // v9 features\par
    Pesgo1.CursorPromptTracking := true;\par
    Pesgo1.CursorPromptStyle := eCursorPromptStyle.sgXYZValues;\par
    Pesgo1.CursorPromptLocation := eCursorPromptLocation.sgText;\par
    Pesgo1.HourGlassThreshold := 99999999;\par
\par
\par
  End\par
Else If nChart = 123 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{123  Scientific Graph showing large quantity of data\}\par
\par
    //! NOTE: See the MFC PEDEMO example project for this example 123.\par
    //! The MFC example plays a wav direct to sound system and is real time updated.\par
    //! We hadn't had a chance yet to port this example to Delphi.\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Enable Gestures //\par
    Pesgo1.Touch.InteractiveGestures := [igZoom, igPan];\par
    Pesgo1.Touch.InteractiveGestureOptions := [igoPanInertia];\par
\par
    // Enable ZoomWindow //\par
    Pesgo1.ZoomWindow := True;\par
    Pesgo1.MouseWheelFunction := sgMouseWheelHorzZoom;\par
    Pesgo1.AllowZooming := sgHorzZooming;\par
\par
    // Enable middle mouse dragging //\par
    Pesgo1.MouseDraggingX := True;\par
    Pesgo1.ScrollingHorzZoom := True;\par
\par
    Pesgo1.MouseWheelZoomSmoothness := 4;\par
    Pesgo1.PinchZoomSmoothness := 2;\par
\par
    // Set the amount of data\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 1000000;\par
\par
    // Declared variables above...\par
    // MyXData3 = array[0..1000000] of Single;\par
    // MyYData3 = array[0..1000000] of Single;\par
    // ptx3: ^MyXData3;\par
    // pty3: ^MyYData3;\par
    // result : LongInt;\par
\par
    if (ptx3 = Nil) then   // v9.5 only allocate and set global memory once\par
    begin\par
      GetMem(ptx3, SizeOf(Single) * 1000000);\par
      GetMem(pty3, SizeOf(Single) * 1000000);\par
\par
      For p := 0 To 999999 Do\par
      begin\par
          ptx3^[p] := p + 1;\par
          pty3^[p] := (Sin(0.0003 * p) * 500);\par
      end;\par
\par
      // Change some of the data so we can see some\par
      // variations in data\par
      For j := 0 To 9 Do\par
          For k := 0 To 10000 Do\par
              pty3^[(j * 100000) + k] := pty3^[(j * 100000) + k] - 50 + (Random * 100);\par
    end;\par
\par
    // set address to shared memory //\par
    PEvsetW(Pesgo1.hObject, PEP_faXDATAPTR, ptx3, 1000000);\par
    PEvsetW(Pesgo1.hObject, PEP_faYDATAPTR, pty3, 1000000);\par
\par
    // no longer passing and storing data in chart, above code shares memory location\par
    //PEvsetW(Pesgo1.hObject, PEP_faXDATA, ptx3, 1000000);\par
    //PEvsetW(Pesgo1.hObject, PEP_faYDATA, pty3, 1000000);\par
    //FreeMem(ptx3, SizeOf(Single) * 1000000);\par
    //FreeMem(pty3, SizeOf(Single) * 1000000);\par
\par
    Pesgo1.IncludeDataLabelsMenu := sgHideMenu;\par
    Pesgo1.LegendLocationMenu := sgHideMenu;\par
    Pesgo1.MarkDataPointsMenu := sgHideMenu;\par
    Pesgo1.DataShadowMenu := sgHideMenu;\par
    Pesgo1.DataPrecisionMenu := sgHideMenu;\par
\par
    // Set plotting method to line and allow zooming\par
    Pesgo1.PlottingMethod := sgLine;\par
    Pesgo1.AllowPlotCustomization := False;\par
\par
    Pesgo1.NoRandomPointsToExport := True;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.AllowBar := False;\par
    Pesgo1.AllowPopup := True;\par
    Pesgo1.AllowSubsetsPage := false;\par
    Pesgo1.AllowTextExport := false;\par
    Pesgo1.AllowEmfExport := false;\par
    Pesgo1.AllowWmfExport := false;\par
    Pesgo1.AllowSvgExport := false;\par
\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255, 0, 200, 200);\par
\par
    // Set the padding between data and edge of chart\par
    Pesgo1.AutoMinMaxPadding := 1;\par
\par
    // Disable auto scaling of data\par
    Pesgo1.AutoScaleData := False;\par
\par
    Pesgo1.SubsetLineTypes[0] := PELT_THINSOLID;\par
    Pesgo1.LineShadows := False;\par
\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
\par
    Pesgo1.AntiAliasGraphics := True;\par
    Pesgo1.AntiAliasText := True;\par
\par
    // set various export defaults  //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
\par
    Pesgo1.RenderEngine := sgDirect3D;\par
\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255, 0, 255, 0);\par
\par
    // Improves performance by forcing Direct2D content into one layer,\par
    // The full setting for both forground and background layers is optional though for this and many\par
    // implementations, this level of detail may not be necessary.\par
    Pesgo1.Composite2D3D := sgForegroundLayer;\par
\par
    Pesgo1.Force3dxNewColors := True;\par
    Pesgo1.Force3dxVerticeRebuild := True;\par
\par
\par
  End\par
Else If nChart = 124 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{124  Scientific Graph showing programmatic horizontal zooming\}\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    //! Zoom logic here.  It's important that if using MultiAxesSubsets //\par
    //! that AllowZooming is set to PEAZ_HORIZONTAL. //\par
    Pesgo1.AllowZooming := sgHorzZooming;\par
    Pesgo1.ScrollingHorzZoom := True;\par
\par
    // Select desired zoom extents and enable zoomed mode\par
    Pesgo1.ZoomMinX := 40000;\par
    Pesgo1.ZoomMaxX := 60000;\par
    Pesgo1.ZoomMode := True;\par
\par
    // Repass the data, adding more data //\par
    Pesgo1.Subsets := 2;\par
    Pesgo1.Points := 100000;\par
\par
    GetMem(ptx4, SizeOf(Single) * 200000);\par
    GetMem(pty4, SizeOf(Single) * 200000);\par
\par
    // Prepare data in temp arrays, make sure to use Single (4 byte floats) //\par
    For j := 0 To 99999 do\par
    begin\par
        ptx4^[j] := j + 1;\par
        pty4^[j] := (Sin(0.0003 * j) * 500);\par
        ptx4^[100000 + j] := j + 1;\par
        pty4^[100000 + j] := (Sin(0.00023 * j) * 500);\par
    end;\par
\par
    j := 0;\par
    repeat\par
        For k := 0 To 300 do\par
        begin\par
            pty4^[j + k] := pty4^[j + k] - 50 + (Random * 100);\par
            pty4^[100000 + j + k] := pty4^[j + k] - 50 + (Random * 100);\par
            pty4^[j + k] := pty4^[j + k] + (Sin(0.00033 * j) * 300);\par
        end;\par
        j := j + 1000;\par
    until j > 89000;\par
\par
    // Perform the actual transfer of data //\par
    PEvsetW(Pesgo1.hObject, PEP_faXDATA, ptx4, 200000);\par
    PEvsetW(Pesgo1.hObject, PEP_faYDATA, pty4, 200000);\par
\par
    FreeMem(ptx4, SizeOf(Single) * 200000);\par
    FreeMem(pty4, SizeOf(Single) * 200000);\par
\par
    Pesgo1.MultiAxesSubsets[0] := 1; //1 subset on first axis\par
    Pesgo1.MultiAxesSubsets[1] := 1; //1 subset on second axis\par
    Pesgo1.MultiAxesSizing := True;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgLightLine;\par
\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255, 0, 170, 170);\par
    Pesgo1.SubsetColors[1] := Pesgo1.PEargb(255, 170, 170, 0);\par
    Pesgo1.PlottingMethod := sgLine;\par
\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[1] := PELT_MEDIUMSOLID;\par
\par
    Pesgo1.TextShadows := sgShadowNoText;\par
    Pesgo1.LegendStyle := sgInsideAxis;\par
\par
    Pesgo1.WorkingAxis := 0;\par
    Pesgo1.YAxisLabel := '';\par
    Pesgo1.WorkingAxis := 1;\par
    Pesgo1.YAxisLabel := '';\par
    Pesgo1.WorkingAxis := 0;\par
\par
  End\par
Else If nChart = 125 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{125  Scientific Graph showing scatter plus data-point dragging\}\par
\par
    //! Click and Drag symbols with mouse. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Change the data to that of a scatter plot //\par
    Pesgo1.Subsets := 4;\par
    Pesgo1.Points := 12;\par
    For s := 0 To 3 do\par
        For p := 0 To 11 do\par
        begin\par
            Pesgo1.XData[s, p] := 25 + (Random * 25);\par
            Pesgo1.YData[s, p] := 90 + (Random * 25);\par
        end;\par
\par
    // Set the PlottingMethod to point //\par
    Pesgo1.PlottingMethod := sgPointsPlusLine;\par
\par
    // Enable data hot spots //\par
    Pesgo1.AllowDataHotSpots := True;\par
\par
    // Make Data hots spot locations larger //\par
    Pesgo1.HotSpotSize := sgLargeHotSpots;\par
\par
    // Disable some types of plotting methods //\par
    Pesgo1.AllowSpline := False;\par
    Pesgo1.AllowSplineArea := False;\par
    Pesgo1.AllowPointsPlusSpline := False;\par
    Pesgo1.AllowBestFitLine := False;\par
    Pesgo1.AllowBestFitCurve := False;\par
    Pesgo1.AllowArea := False;\par
\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
\par
\{\par
    /////////////////////////////////////////////////\par
    // Code below is how dragging logic is formed ///\par
    /////////////////////////////////////////////////\par
\par
    /// Unit Scope variables //\par
    bDragging : Integer;\par
    nDragIndexS : Longint;\par
    nDragIndexP : Longint;\par
\par
    /////////////////////////////////////////\par
    /// From the DataHotSpot event handler //\par
    /////////////////////////////////////////\par
    If nChart = 125 then\par
    begin\par
        bDragging := 1;             // Start dragging process, set flag to true\par
        nDragIndexS := SubsetIndex; // Store subset index\par
        nDragIndexP := PointIndex;  // Store point index\par
    end;\par
\par
    ///////////////////////////////////////\par
    /// From the MouseMove event handler //\par
    ///////////////////////////////////////\par
    If (nChart = 125) AND (bDragging = 1) Then\par
    begin\par
        get last mouse location within control\par
        PEvget(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
\par
    nA := 0;      // Initialize axis, non-zero only if using MultiAxesSubsets\par
    nX := pt.x;   // Initialize nX and nY with mouse location\par
    nY := pt.y;\par
    PEconvpixeltograph(Pesgo1.hObject, @nA, @nX, @nY, @fX, @fY, 0, 0, 0);\par
\par
    // Check move-to location and restrain to the chart's extents.\par
    // Note that you can only expect to read valid ManualMinX type\par
    // properties after an initial PEactions = 0 or PEactions = 1\par
    // has been executed.\par
    if (fX <= Pesgo1.ManualMinX) then\par
        fX := Pesgo1.ManualMinX\par
    else if (fX >= Pesgo1.ManualMaxX) then\par
        fX := Pesgo1.ManualMaxX;\par
\par
    If (fY <= Pesgo1.ManualMinY) then\par
        fY := Pesgo1.ManualMinY\par
    else if (fY >= Pesgo1.ManualMaxY) then\par
        fY := Pesgo1.ManualMaxY;\par
\par
    // Change XData and YData to new location //\par
    Pesgo1.XData[nDragIndexS, nDragIndexP] := fX;\par
    Pesgo1.YData[nDragIndexS, nDragIndexP] := fY;\par
\par
    // Performs a PEreinitializecustoms, PEresetimage, and InvalidateRect **'\par
    Pesgo1.PEactions := sgReinitCustoms;\par
    Pesgo1.PEactions := sgResetImage;\par
    Pesgo1.PEactions := sgInvalidateImage;\par
\par
    // Windows functions causes an immediate WM_PAINT to be triggered **'\par
    UpdateWindow(Pesgo1.Handle);\par
    end;\par
\par
    ////////////////////////////////////\par
    // From the MouseUp event handler //\par
    ////////////////////////////////////\par
    bDragging := False;\par
\}\par
\par
  End\par
Else If nChart = 126 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{126  Scientific Graph showing Bubble Chart\}\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Change the data to that of a scatter plot //\par
    Pesgo1.Subsets:=4;\par
    Pesgo1.Points:=12;\par
\par
    For s:=0 to 3 do\par
    Begin\par
        For p:=0 to 11 do\par
        begin\par
            Pesgo1.XData[s,p] := 25 + (Random * 25);\par
            Pesgo1.YData[s,p] := 90 + (Random * 25);\par
\par
            // Bubble Charts Use ZData also //\par
            Pesgo1.ZData[s,p] := 10 + (Random * 25);\par
        end;\par
    end;\par
\par
    // Set the PlottingMethod to Bubble //\par
    Pesgo1.PlottingMethod := sgBubble;\par
\par
    // Enable data hot spots //\par
    Pesgo1.AllowDataHotSpots := True;\par
\par
    // Make Data hots spot locations larger //\par
    Pesgo1.HotSpotSize := sgLargeHotSpots;\par
\par
    // Set Various Other Properties ///\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgLightInset;\par
\par
    // Disable some types of plotting methods //\par
    Pesgo1.AllowBubble := True;\par
    Pesgo1.AllowSpline := False;\par
    Pesgo1.AllowSplineArea := False;\par
    Pesgo1.AllowPointsPlusSpline := False;\par
    Pesgo1.AllowBestFitLine := False;\par
    Pesgo1.AllowBestFitCurve := False;\par
    Pesgo1.AllowArea := False;\par
\par
   End\par
Else If nChart = 127 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{127  Scientific Graph showing Custom Menu\}\par
\par
    //! This example shows how to implement custom popup menus. //\par
    //! Right click the control and look toward the bottom of popup. //\par
    //! The last 3 menu items are custom menus implemented with the following code. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Get rid of Help menu item //\par
    Pesgo1.HelpMenu := sgHideMenu;\par
\par
    // Create custom menu to show printing logic for placing multiple images //\par
    // on one page //\par
\par
    // Create four menu items on bottom of built-in menu //\par
    // Item 0 creates a separator line\par
    // Item 1 is a checked/unchecked menu option\par
    // Item 2 is a popup with 3 options\par
    // Item 3 is a simple menu item\par
\par
    // Set all text //\par
    Pesgo1.CustomMenuText[0] := '|';\par
    Pesgo1.CustomMenuText[1] := 'Print in Monochrome Viewing Style';\par
    Pesgo1.CustomMenuText[2] := 'Print Orientation|Land Scape|Portrait|Just an item to disable';\par
    Pesgo1.CustomMenuText[3] := 'Click Here to Print';\par
\par
    // Make Item 1 default to checked //\par
    // 1 below represents menu index, 0 will always be second index for non-popup menu items //\par
    Pesgo1.CustomMenuState[1 , 0] := sgChecked;\par
\par
    // Make Item 2 sub 2 default to checked //\par
    // Note this is a popup menu item, and second index is 0 for main popup, and 1+n for sub-popup items.\par
    Pesgo1.CustomMenuState[2 , 2] := sgChecked;\par
\par
    // Make Item 2 sub 3 grayed //\par
    // (2) is the menu index, (3) is to control 3rd sub popup menu item.\par
    Pesgo1.CustomMenu[2 ,3] := sgGrayCustomMenu;\par
\par
    // Set all menu items to bottom location //\par
    Pesgo1.CustomMenuLocation[0] := sgBottomOfMenu;\par
    Pesgo1.CustomMenuLocation[1] := sgBottomOfMenu;\par
    Pesgo1.CustomMenuLocation[2] := sgBottomOfMenu;\par
    Pesgo1.CustomMenuLocation[3] := sgBottomOfMenu;\par
\par
    // Set Various Other Properties ///\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgLightNoBorder;\par
\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMTHINSOLID;\par
    Pesgo1.SubsetLineTypes[1] := PELT_MEDIUMTHINSOLID;\par
    Pesgo1.SubsetLineTypes[2] := PELT_MEDIUMTHINSOLID;\par
    Pesgo1.SubsetLineTypes[3] := PELT_MEDIUMTHINSOLID;\par
\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
    Pesgo1.DataShadows := sgWithShadows;\par
    Pesgo1.GridStyle := sgThin;\par
    Pesgo1.FontSize := sgSmall;\par
\par
\{\par
    //////////////////////////////////////////////////////////\par
    // Code from CustomMenu event ////////////////////////////\par
    //////////////////////////////////////////////////////////\par
\par
    if (MenuIndex = 1) Then\par
    begin\par
        // Reverse option //\par
        n := Integer(Pesgo1.CustomMenuState[menuindex, 0]);\par
        if (n = PECMS_UNCHECKED) Then\par
            n := PECMS_CHECKED\par
        else\par
            n := PECMS_UNCHECKED;\par
        Pesgo1.CustomMenuState[menuindex, 0] := eCustomMenuState(n);\par
        exit;\par
    end;\par
\par
    if (MenuIndex = 2) Then\par
    begin\par
        // Option Explicit so first set all to unchecked //\par
        Pesgo1.CustomMenuState[MenuIndex,1] := sgUnChecked;\par
        Pesgo1.CustomMenuState[MenuIndex,2] := sgUnChecked;\par
        Pesgo1.CustomMenuState[MenuIndex,3] := sgUnChecked;\par
\par
        // Next set the selected item //\par
        Pesgo1.CustomMenuState[MenuIndex, SubMenuIndex] := sgChecked;\par
        exit\par
    end;\par
\par
    if (MenuIndex = 3) Then\par
    begin\par
        // Perform the actual print //\par
\par
        // Get Mono/Color menu setting //\par
        nMono := Integer(Pesgo1.CustomMenuState[1, 0]);\par
\par
        // Get Orientation setting //\par
        n := Integer(Pesgo1.CustomMenuState[2, 1]);\par
        if n = 0 Then\par
            nOrient := 2   // Portrait\par
        else\par
            nOrient := 1;  // Landscape\par
\par
        // Save current viewing style type properties //\par
        nQS := Pesgo1.QuickStyle;\par
        nBG := Pesgo1.BitmapGradientMode;\par
\par
        // Set Viewing Style with respect to retrieved menu state //\par
        if (nMono <> 0) Then\par
        begin\par
            Pesgo1.ViewingStyle := sgMonochrome;\par
            PEnset(Pesgo1.hObject, PEP_dwMONOGRAPHBACKCOLOR, 1);\par
\par
            // Make sure white is used as background //\par
            Pesgo1.DeskGradientStyle := sgVerticalGradient;\par
            Pesgo1.DeskGradientStart := RGB(255,255,255);\par
            Pesgo1.DeskGradientEnd := RGB(255,255,255);\par
\par
            // Make sure white is used as background\par
            Pesgo1.GraphGradientStyle := sgVerticalGradient;\par
            Pesgo1.GraphGradientStart := RGB(255,255,255);\par
            Pesgo1.GraphGradientEnd := RGB(255,255,255);\par
\par
            // Remove any possible desk bmp //\par
            Pesgo1.DeskBmpStyle := sgNoBmp;\par
        end\par
        else\par
        begin\par
            Pesgo1.ViewingStyle := sgColor;\par
            Pesgo1.GraphBackColor := 1;\par
\par
            // Force a white graph background //\par
            Pesgo1.GraphGradientStyle := sgVerticalGradient;\par
            Pesgo1.GraphGradientStart := RGB(255,255,255);\par
            Pesgo1.GraphGradientEnd := RGB(255,255,255);\par
        end;\par
\par
        // Set some other properties good for mono printing //\par
        Pesgo1.DataShadows := sgNo3D;\par
        Pesgo1.GridStyle := sgDot;\par
\par
        // Set background bitmap/example logo //\par
        Pesgo1.BitmapGradientMode := True;\par
        Pesgo1.GraphBmpStyle := sgBitBltBottomRight;\par
        Pesgo1.GraphBmpFilename := 'getthep.bmp';\par
\par
        //! Note, GraphBackColor or MonoGraphBackColor is set above //\par
        PEreinitializecustoms(Pesgo1.hObject);\par
\par
        PEprintgraph(Pesgo1.hObject, 0, 0, 0, nOrient);\par
\par
        // Reset properties back to original //\par
        Pesgo1.BitmapGradientMode := nBG;\par
        Pesgo1.QuickStyle := nQS;\par
        Pesgo1.DataShadows := sgWithShadows;\par
        Pesgo1.GridStyle := sgThin;\par
        Pesgo1.ViewingStyle := sgColor;\par
\par
        PEreinitializecustoms(Pesgo1.hObject);\par
        PEresetimage(Pesgo1.hObject, 0, 0);\par
    end;\par
\}\par
\par
  End\par
Else If nChart = 128 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{128  Scientific Graph showing Partial Axis\}\par
\par
    //! Note Right Y Axes do not take up entire axis height. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Seperate subsets into separate axes //\par
    Pesgo1.MultiAxesSubsets[0] := 2;\par
    Pesgo1.MultiAxesSubsets[1] := 2;\par
    Pesgo1.MultiAxesSizing := True;\par
\par
    // First Multi Axes //\par
    Pesgo1.WorkingAxis := 0;\par
    Pesgo1.RYAxisComparisonSubsets := 1;  // First multi axes, set second subset on right //\par
\par
    // Set Partial Right Y Axis Settings //\par
    Pesgo1.AxisSizeRY := 60;       // Set to 60% of axis height\par
    Pesgo1.AxisLocationRY := 40;   // Top justify so set to 100 - 60\par
\par
    Pesgo1.PlottingMethod := sgBar;\par
    Pesgo1.PlottingMethodII := sgLine2;\par
    Pesgo1.RYAxisColor := Pesgo1.PEargb(255,0,198,198);\par
    Pesgo1.RYAxisLabel := '60% Axis Height';\par
\par
    // Second Multi Axes //\par
    Pesgo1.WorkingAxis := 1;\par
    Pesgo1.RYAxisComparisonSubsets := 1;  // Second multi axes, set second subset on right //\par
\par
    // Set Partial Right Y Axis Settings //\par
    Pesgo1.AxisSizeRY := 40;      // Set to 40% of axis height\par
    Pesgo1.AxisLocationRY := 0;   // Bottom Justify always set to 0\par
\par
    Pesgo1.PlottingMethod := sgBar;\par
    Pesgo1.PlottingMethodII := sgLine2;\par
    Pesgo1.RYAxisColor := Pesgo1.PEargb(255,0,198,0);\par
    Pesgo1.RYAxisLabel := '40% Axis Height';\par
\par
    Pesgo1.WorkingAxis := 0;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgMedLine;\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
    Pesgo1.LegendStyle := sgInsideAxis;\par
    Pesgo1.MarkDataPoints := True;\par
    Pesgo1.GridStyle := sgDot;\par
\par
End\par
Else If nChart = 129 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{129  Scientific Graph showing vertical Y axis grid numbers\}\par
\par
    //! Vertical Y Axis Grid Numbers and Special Y Axis Grid Label Locations //\par
    //! Try Zooming and Scrolling vertically. //\par
\par
    //! This feature is ideally suited for using many left and/or right y axes. //\par
    //! It's also handy when screen real-estate is limited as it always is. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Seperate subsets into separate axes //\par
    Pesgo1.MultiAxesSubsets[0] := 2;\par
    Pesgo1.MultiAxesSubsets[1] := 2;\par
\par
    // Overlap both multi axes //\par
    Pesgo1.OverlapMultiAxes[0] := 2;\par
\par
    // Set Vertical Grid Numbers //\par
    Pesgo1.YAxisVertGridNumbers := True;\par
    Pesgo1.VGNAxisLabelLocation := True;\par
\par
    // First Multi Axes //\par
    Pesgo1.WorkingAxis := 0;\par
    Pesgo1.RYAxisComparisonSubsets := 1;  // First multi axes, set second subset on right //\par
\par
    Pesgo1.PlottingMethod := sgArea;\par
    Pesgo1.PlottingMethodII := sgPointsPlusLine2;\par
\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(255, 198, 0, 0);\par
    Pesgo1.YAxisLabel := 'Subset1|4';     // |4 is equivalent of PEGAT_DOTSOLID\par
\par
    Pesgo1.RYAxisColor := Pesgo1.PEargb(255, 0, 198, 198);\par
    Pesgo1.RYAxisLabel := 'Subset 2|10';  // |10 is equivalent of PEGAT_UPTRIANGLESOLID\par
\par
    Pesgo1.ShowYAxis := sgGridLabels;\par
    Pesgo1.ShowRYAxis := sgGridLabels;\par
\par
    // Second Multi Axes //\par
    Pesgo1.WorkingAxis := 1;\par
    Pesgo1.RYAxisComparisonSubsets := 1;   // Second multi axes, set second subset on right //\par
\par
    Pesgo1.PlottingMethod := sgArea;\par
    Pesgo1.PlottingMethodII := sgPointsPlusLine2;\par
    \par
    Pesgo1.YAxisColor := Pesgo1.PEargb(255, 198, 198, 0);\par
    Pesgo1.YAxisLabel := 'Subset3|6';    // |6 is equivalent of PEGAT_SQUARESOLID\par
\par
    Pesgo1.RYAxisColor := Pesgo1.PEargb(255, 0, 198, 0);\par
    Pesgo1.RYAxisLabel := 'Subset 4|12'; // |12 is equivalent of PEGAT_DOWNTRIANGLESOLID\par
\par
    Pesgo1.ShowYAxis := sgGridLabels;\par
    Pesgo1.ShowRYAxis := sgGridLabels;\par
\par
    Pesgo1.WorkingAxis := 0;\par
\par
    Pesgo1.ShowLegend := False;  // No need for legend, we've placed legend along axes\par
\par
    // Set Various Other Properties ///\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgMedLine;\par
    Pesgo1.GridLineControl := sgNoGrid;\par
    Pesgo1.MarkDataPoints := True;\par
    Pesgo1.GridStyle := sgDot;\par
    Pesgo1.BestFitDegree := sgDegree4;\par
\par
    Pesgo1.ScrollingHorzZoom := True;\par
    Pesgo1.ScrollingVertZoom := True;\par
\par
    Pesgo1.TickColor := 1;\par
    Pesgo1.MainTitle := 'ZOOM and SCROLL the chart!';\par
\par
    Pesgo1.ImageAdjustLeft := 50;\par
    Pesgo1.ImageAdjustRight := 50;\par
\par
End\par
Else If nChart = 130 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{130  Scientific Graph showing Extra X axes\}\par
\par
    //! Extra top and bottom x axes //\par
    //! Try Zooming and Scrolling. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Seperate subsets into separate axes //\par
    Pesgo1.MultiAxesSubsets[0] := 2;\par
    Pesgo1.MultiAxesSubsets[1] := 2;\par
\par
    // Overlap both multi axes //\par
    Pesgo1.OverlapMultiAxes[0] := 2;\par
\par
    // Last subset, first axes on right //\par
    Pesgo1.TXAxisComparisonSubsets := 1;\par
\par
    Pesgo1.WorkingAxis := 0;\par
    Pesgo1.RYAxisComparisonSubsets := 1;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(255, 198, 0, 0);\par
    Pesgo1.XAxisColor := Pesgo1.PEargb(255, 198, 0, 0);\par
    Pesgo1.RYAxisColor := Pesgo1.PEargb(255, 0, 198, 198);\par
    Pesgo1.TXAxisColor := Pesgo1.PEargb(255, 0, 198, 198);\par
    Pesgo1.PlottingMethod := sgArea;\par
    Pesgo1.PlottingMethodII := sgPointsPlusBFC2;\par
\par
    Pesgo1.WorkingAxis := 1;\par
    Pesgo1.RYAxisComparisonSubsets := 1;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(255, 198, 198, 0);\par
    Pesgo1.RYAxisColor := Pesgo1.PEargb(255, 0, 198, 0);\par
    Pesgo1.PlottingMethod := sgArea;\par
    Pesgo1.PlottingMethodII := sgPointsPlusBFC2;\par
\par
    ea.nSize := sizeof(EXTRAAXIS);\par
    ea.fMin := 10.0;\par
    ea.fMax := 310.0;\par
    StringToWideChar('Extra Axis 1', ea.szLabel, 129);\par
    ea.fManualLine := 0;\par
    ea.fManualTick := 0;\par
    StringToWideChar('', ea.szFormat, 33);\par
    ea.nShowAxis := PESA_ALL;\par
    ea.nShowTickMark := PESTM_TICKS_INSIDE;\par
    ea.bInvertedAxis := 0;\par
    ea.bLogScale := 0;\par
    ea.dwColor := Integer( Pesgo1.PEargb(255, 198, 198, 0) );\par
\par
    // Create extra bottom axis //\par
    Pesgo1.WorkingAxis := 0;\par
    PEvsetW(Pesgo1.hobject, PEP_structEXTRAAXISX, @ea, 1);\par
\par
    // Create extra top axis //\par
    ea.fMin := -100.0;\par
    ea.fMax := 100.0;\par
    StringToWideChar('Top Extra Axis 1', ea.szLabel, 129);\par
    ea.dwColor := Integer(Pesgo1.PEargb(255, 0, 198, 0));\par
    PEvsetW(Pesgo1.hObject , PEP_structEXTRAAXISTX, @ea, 1);\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkInset;\par
    Pesgo1.BestFitDegree := sgDegree4;\par
\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[1] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[2] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[3] := PELT_MEDIUMSOLID;\par
\par
    Pesgo1.ScrollingHorzZoom := True;\par
    Pesgo1.ScrollingVertZoom := True;\par
    PEsgo1.TickColor := 1;\par
    Pesgo1.MainTitle := 'ZOOM and SCROLL the chart';\par
    Pesgo1.AllowSubsetsPage := False;\par
\par
End\par
Else If nChart = 131 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{131  Scientific Graph showing Grid Aspect\}\par
\par
    //! Showing how to force a grid aspect ratio //\par
    //! In this case, always square, resize to demo. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // ratio is height / width and 1.0 creates a square\par
    Pesgo1.GridAspect := 1.0;\par
\par
    // Set Various Other Properties ///\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkShadow;\par
\par
    Pesgo1.MainTitle := 'Grid is always Square';\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
\par
End\par
Else If nChart = 132 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{132  Scientific Graph showing Custom Grid Numbers\}\par
\par
    //! Example showing custom event based grid number formattimg //\par
    //! An event gets triggered for each major grid line getting drawn. //\par
    //! It gives the developer an opportunity to modify the string as needed. //\par
\par
    //! ProEssentials' image construction logic related to control-realestate utilization  //\par
    //! is quite complex.  Don't be suprised if this event gets triggered more than  //\par
    //! once for each image per gridline because grid number space lies within our internal logic  //\par
    //! and is modified by this event,  Zoom and scroll chart. //\par
\par
    //! HIGHLY RECOMMENDED: Do not debug this type of code with breakpoints,     //\par
    //! Use debug strings and monitor their output during image construction.    //\par
    //! This is generally good advice for all ProEssentials based code because   //\par
    //! a breakpoint may trigger a WM_PAINT and cause ProEssentials to rebuild   //\par
    //! its image.  This is only related to placing breakpoints within a stretch //\par
    //! of ProEssentials type code which could cause an image to be constructed  //\par
    //! prematurely before other inter-related properties are allowed to set.    //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
\par
    // Seperate subsets into separate axes //\par
    Pesgo1.MultiAxesSubsets[0] := 2;\par
    Pesgo1.MultiAxesSubsets[1] := 2;\par
    Pesgo1.MultiAxesSizing := True;\par
\par
    // Overlap both multi axes //\par
    Pesgo1.OverlapMultiAxes[0] := 2;\par
\par
    Pesgo1.WorkingAxis := 0;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(255, 0,198,0);\par
    Pesgo1.PlottingMethod := sgPointsPlusSpline;\par
    Pesgo1.PlottingMethodII := sgPointsPlusBFC2;\par
    Pesgo1.YAxisLabel := 'Not Formatted';\par
    Pesgo1.ComparisonSubsets := 1;\par
\par
    Pesgo1.WorkingAxis := 1;\par
    Pesgo1.YAxisColor := Pesgo1.PEargb(255, 0,198,198);\par
    Pesgo1.PlottingMethod := sgPointsPlusSpline;\par
    Pesgo1.PlottingMethodII := sgPointsPlusBFC2;\par
    Pesgo1.YAxisLabel := 'Formatting This Axis';\par
    Pesgo1.ComparisonSubsets := 1;\par
\par
    // Enable formatting events for second y axis because WorkingAxis is current 1 //\par
    Pesgo1.CustomGridNumbersY := True;\par
\par
    // Reset WorkingAxis to zero //\par
    Pesgo1.WorkingAxis := 0;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkInset;\par
    Pesgo1.BorderTypes := sgDropShadow;\par
    Pesgo1.MarkDataPoints := True;\par
    Pesgo1.AllowMaximization := False;\par
    Pesgo1.ScrollingVertZoom := True;\par
    Pesgo1.ScrollingHorzZoom := True;\par
\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255,0,198,0);\par
    Pesgo1.SubsetColors[1] := Pesgo1.PEargb(255,0,120,0);\par
    Pesgo1.SubsetColors[2] := Pesgo1.PEargb(255,0,198,198);\par
    Pesgo1.SubsetColors[3] := Pesgo1.PEargb(255,0,120,120);\par
\par
\{\par
    ///////////////////////////////////////////////////////////////\par
    /////// Code from CUSTOMGRIDNUMBER event //////////////////////\par
    ///////////////////////////////////////////////////////////////\par
    if (nAxisType = 0) then\par
    begin\par
        // Left Y Axis //\par
        if (dNumber = -400.0) then\par
            strcopy(szData, 'Low Value')\par
        else if (dNumber = -200.0) then\par
            strcopy(szData, 'Medium Low Value')\par
        else if (dNumber = 0.0) then\par
            strcopy(szData, 'Medium Value')\par
        else if (dNumber = 200.0) then\par
            strcopy(szData, 'Medium High Value')\par
        else if (dNumber = 400.0) then\par
            strcopy(szData, 'High Value')\par
   end;\par
\}\par
\par
End\par
Else If nChart = 133 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{133  Scientific Graph showing Point types and colors\}\par
\par
    //! Example showing per subset use of PointTypes and PointColors properties //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph;\par
    Pesgo1.Points := 12;\par
\par
    // First and Second subsets use SubsetPointColors feature //\par
    Pesgo1.SubsetForPointColors[0] := 0;\par
    Pesgo1.SubsetForPointColors[1] := 1;\par
\par
    // Third and Fourth subsets will use SubsetPointTypes feature //\par
    Pesgo1.SubsetForPointTypes[0] := 2;\par
    Pesgo1.SubsetForPointTypes[1] := 3;\par
\par
    // Set SubsetPointColors for first two subsets //\par
    // Also set SubsetPointTypes for last two subsets //\par
\par
    for s:=0 to 3 do\par
    begin\par
        for p:=0 to 11 do\par
        begin\par
            case s of  // Subset Index //\par
            0:\par
            begin\par
                // Set Point Color //\par
                Pesgo1.PointColors[s,p] := Pesgo1.PEargb(255, 15 + ((p + 1) * 20), 0, 0);\par
                // Set YData //\par
                Pesgo1.YData[s,p] :=  ((p + 1) * 50) + (Random* 250);\par
           end;\par
\par
           1:\par
           begin\par
                // Set Point Color //\par
                Pesgo1.PointColors[s,p] := Pesgo1.PEargb(255, 0, 15 + ((p + 1) * 20), 0);\par
                // Set YData //\par
                Pesgo1.YData[s,p] :=  ((p + 1) * 50) + (Random* 250)+ 350;\par
            end;\par
\par
            2:\par
            begin\par
                // Set Point Type //\par
                Pesgo1.PointTypes[s,p] := p;\par
                // Set YData //\par
                Pesgo1.YData[s,p] :=  ((p + 1) * 50) + (Random* 250)+ 700;\par
            end;\par
\par
            3:\par
            begin\par
                // Set Point Type //\par
                Pesgo1.PointTypes[s,p] := p;\par
                // Set YData //\par
                Pesgo1.YData[s,p] :=  ((p + 1) * 50) + (Random* 250)+ 1050;\par
            end;\par
\par
            end;\par
        end;\par
    end;\par
\par
    // Set Various Other Properties ///\par
    pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgMedLine;\par
    Pesgo1.MarkDataPoints := True;\par
    Pesgo1.PointSize := sgLargePoints;\par
    Pesgo1.ShowLegend := False;\par
    Pesgo1.PlottingMethod := sgPointsPlusLine;\par
\par
End\par
Else If nChart = 134 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{134  Scientific Graph showing multiple y axes with equally spaced gridlines\}\par
\par
    //! This example shows a clean approach with multiple left and right y axes\par
    //! where axes have proportional number of y axis grid lines with respect to\par
    //! height of axis. Resulting in equally spaced y axis grid lines across all\par
    //! axes.\par
\par
    // v8 new features\par
    Pesgo1.AxisBorders := True;\par
    Pesgo1.SolidLineOverArea := 1;\par
\par
    // Enable middle mouse dragging //\par
    Pesgo1.MouseDraggingX := True;\par
    Pesgo1.MouseDraggingY := True;\par
\par
    // Enable Bar Glass Effect //\par
    Pesgo1.BarGlassEffect := True;\par
\par
    // Enable Plotting style gradient and bevel features //\par
    Pesgo1.AreaGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.AreaBevelStyle := sgMediumSmooth;\par
    Pesgo1.SplineGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.SplineBevelStyle := sgMediumSplineBevel;\par
\par
    Pesgo1.Subsets := 4;\par
    Pesgo1.Points := 12;\par
\par
    // Change Data to match example scales which are manually configured //\par
    For s := 0 To 3 do\par
    begin\par
        For p := 0 To 11 do\par
        begin\par
            Pesgo1.XData[s, p] := (p + 1) * 10.0;\par
\par
            If s = 0 Then\par
                ftmp := 0.01 + (Random * 4)\par
            Else If s = 1 Then\par
                ftmp := 400 + (Random * 450)\par
            Else If s = 2 Then\par
                ftmp := 0.01 + (Random * 25)\par
            Else\par
                ftmp := 0.01 + (Random * 65);\par
\par
            Pesgo1.YData[s, p] := ftmp;\par
        end;\par
    end;\par
\par
    // Now sub-divide subsets into 4 individual axes //\par
    // Each axis with one subset in each //\par
    Pesgo1.MultiAxesSubsets[0] := 1;\par
    Pesgo1.MultiAxesSubsets[1] := 1;\par
    Pesgo1.MultiAxesSubsets[2] := 1;\par
    Pesgo1.MultiAxesSubsets[3] := 1;\par
\par
    // Create Overlapped Axes //\par
    Pesgo1.OverlapMultiAxes[0] := 1;\par
    Pesgo1.OverlapMultiAxes[1] := 1;\par
    Pesgo1.OverlapMultiAxes[2] := 2;\par
\par
    // Set Proportions of Axes  //\par
    Pesgo1.MultiAxesProportions[0] := 0.2;\par
    Pesgo1.MultiAxesProportions[1] := 0.5;\par
    Pesgo1.MultiAxesProportions[2] := 0.3;\par
\par
    // Set up First axis parameters //\par
    Pesgo1.WorkingAxis := 0;\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 0;\par
    Pesgo1.ManualMaxY := 5;\par
    Pesgo1.ManualYAxisTicknLine := True;\par
    Pesgo1.ManualYAxisLine := 2.5;\par
    Pesgo1.ManualYAxisTick := 0.5;\par
    Pesgo1.ShowTickMarkY := sgTicksHide;\par
    Pesgo1.YAxisLabel := 'NPSHR (feet)';\par
    Pesgo1.PlottingMethod := sgBar;\par
\par
    // Set up Second axis parameters //\par
    Pesgo1.WorkingAxis := 1;\par
    Pesgo1.RYAxisComparisonSubsets := 1;\par
    Pesgo1.ManualScaleControlRY := sgManualMinAndMax;\par
    Pesgo1.ManualMinRY := 400;\par
    Pesgo1.ManualMaxRY := 900;\par
    Pesgo1.ManualRYAxisTicknLine := True;\par
    Pesgo1.ManualRYAxisLine := 100;\par
    Pesgo1.ManualRYAxisTick := 20;\par
    Pesgo1.ShowTickMarkRY := sgTicksHide;\par
    Pesgo1.RYAxisLabel := 'Total Head (feet)';\par
    Pesgo1.PlottingMethodII := sgPointsPlusSpline2;\par
\par
    // Set up Third axis parameters //\par
    Pesgo1.WorkingAxis := 2;\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 0;\par
    Pesgo1.ManualMaxY := 30;\par
    Pesgo1.ManualYAxisTicknLine := True;\par
    Pesgo1.ManualYAxisLine := 10;\par
    Pesgo1.ManualYAxisTick := 2;\par
    Pesgo1.ShowTickMarkY := sgTicksHide;\par
    Pesgo1.YAxisLabel := 'Efficiency (%)';\par
    Pesgo1.PlottingMethod := sgPointsPlusSpline;\par
\par
    // Set up Fourth axis parameters //\par
    Pesgo1.WorkingAxis := 3;\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 0;\par
    Pesgo1.ManualMaxY := 75;\par
    Pesgo1.ManualYAxisTicknLine := True;\par
    Pesgo1.ManualYAxisLine := 25;\par
    Pesgo1.ManualYAxisTick := 5;\par
    Pesgo1.ShowTickMarkY := sgTicksHide;\par
    Pesgo1.YAxisLabel := 'Power(HP)';\par
    Pesgo1.PlottingMethod := sgPointsPlusSpline;\par
\par
    // Done Setting Y Axis Parameters, reset WorkingAxis //\par
    Pesgo1.WorkingAxis := 0;\par
\par
    // Set various other properties //\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
    Pesgo1.MultiAxisStyle := sgGroupAxes;\par
    Pesgo1.LegendStyle := sgInsideOverlap;\par
\par
    Pesgo1.XAxisLabel := 'Flow (gpm)';\par
\par
    Pesgo1.BorderTypes := sgSingleLine;\par
    Pesgo1.FixedFonts := True;\par
    Pesgo1.FontSize := sgLarge;\par
    Pesgo1.MainTitle := '';\par
    Pesgo1.SubTitle := '';\par
    Pesgo1.SubTitleFont := 'Courier New';\par
\par
    Pesgo1.FontSizeMSCntl := 1.1;\par
    Pesgo1.FontSizeMBCntl := 1.1;\par
\par
    Pesgo1.MultiSubTitles[0] := 'PUMP PREDICTED PERFORMANCE|Units: US Customary|Date: 06/07/2002';\par
    Pesgo1.MultiSubTitles[1] := 'Impeller Diameter (in): Max = 11.875, Rated = 11.72, Min =11.062||';\par
\par
    Pesgo1.MultiBottomTitles[1] := 'Customer:  Since fixed length courier font, you can create rows by number of spaces, ||';\par
    Pesgo1.MultiBottomTitles[0] := 'Pump Model:  or, v5 has a table annotation feature which could be used to add text here. ||';\par
\par
    Pesgo1.YAxisOnRight := True;\par
\par
    Pesgo1.SubsetLabels[0] := 'NPSHR';\par
    Pesgo1.SubsetLabels[1] := 'Head';\par
    Pesgo1.SubsetLabels[2] := 'Efficiency';\par
    Pesgo1.SubsetLabels[3] := 'Power';\par
\par
    Pesgo1.MultiAxisStyleMenu := sgShowMenu;\par
    Pesgo1.DataShadows := sgWithShadows;\par
    Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
\par
    Pesgo1.SimpleLineLegend := True;\par
    Pesgo1.SimplePointLegend := True;\par
\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255, 198, 0, 0);\par
    Pesgo1.SubsetColors[1] := Pesgo1.PEargb(255, 0, 198, 198);\par
    Pesgo1.SubsetColors[2] := Pesgo1.PEargb(255, 198, 198, 0);\par
    Pesgo1.SubsetColors[3] := Pesgo1.PEargb(255, 0, 198, 0);\par
\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.GradientBars := 8;\par
    Pesgo1.DataShadows := sgWithShadows;\par
\par
    // set various export defaults  //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasGraphics := True;\par
    Pesgo1.AntiAliasText := True;\par
\par
End\par
Else If nChart = 135 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{135  Scientific Graph showing millisecond date time handling\}\par
\par
    //! This example shows millisecond support on date-time scales.\par
    //! Zoom chart to see how axis structure changes.\par
\par
    dt := Now;\par
\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 600;\par
\par
    // Enable double precision which is usually //\par
    // required for date time handling. //\par
    // This means we pass x data to XDataII //\par
    Pesgo1.UsingXDataII := True;\par
\par
    // Pass XDataII and YData //\par
    For p := 0 To 599 do\par
    begin\par
        Pesgo1.XDataII[0, p] := (dt + 0.5 + (p * 0.0000025));\par
        Pesgo1.YData[0, p] := (150 + (Sin(p * 0.034) * 60) + (Random * 30) + (p / 2)) - (35 + (Random * 20));\par
    end;\par
\par
    // Enable DateTimeMode //\par
    Pesgo1.DateTimeMode := sgVBDateTime;\par
    Pesgo1.DateTimeShowSeconds := True;\par
    Pesgo1.DateTimeMilliSeconds := True;\par
\par
    // Allow zooming and panning //\par
    Pesgo1.AllowZooming := sgHorzZooming;\par
    Pesgo1.ScrollingHorzZoom := True;\par
\par
    // Cursor prompting in top left corner //\par
    Pesgo1.CursorMode := sgInvertedRect;\par
    Pesgo1.CursorPromptTracking := True;\par
    Pesgo1.CursorPromptStyle := sgXandYValue;\par
    Pesgo1.FontSizeCPCntl := 1.5;\par
    Pesgo1.AllowDataHotSpots := True;\par
    Pesgo1.MouseCursorControl := True;\par
    Pesgo1.AutoMinMaxPaddingX := 1;\par
\par
    // Enable middle mouse dragging //\par
    Pesgo1.MouseDraggingX := True;\par
    Pesgo1.MouseDraggingY := True;\par
\par
    // Enable Plotting style gradient and bevel features //\par
    Pesgo1.AreaGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.AreaBevelStyle := sgMediumSmooth;\par
    Pesgo1.SplineGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.SplineBevelStyle := sgMediumSplineBevel;\par
\par
    // Enable ZoomWindow //\par
    Pesgo1.ZoomWindow := True;\par
\par
    // Set Various Other Properties ///\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.MarkDataPoints := True;\par
    Pesgo1.FixedFonts := True;\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
\par
    // subset colors //\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(100, 0, 200, 200);\par
\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgLarge;\par
    Pesgo1.FontSizeGlobalCntl := 1.4;\par
    Pesgo1.ScrollingHorzZoom := True;\par
\par
    Pesgo1.PlottingMethod := sgLine;\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMTHICKSOLID;\par
    Pesgo1.MainTitle := '';\par
    Pesgo1.SubTitle := ' ';\par
    Pesgo1.GridStyle := sgDot;\par
\par
    // set various export defaults  //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasGraphics := True;\par
    Pesgo1.AntiAliasText := True;\par
\par
End\par
Else If nChart = 136 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{136  Scientific Graph showing High Low Area\}\par
\par
    //! New high-low area plotting method.  This plotting type is created by\par
    //! setting PlottingMethod to PEGPM_SPECIFICPLOTMODE, and then\par
    //! SpecificPlotMode set to PESPM_HIGHLOWAREA. This is similar to how\par
    //! open-high-low-close and box-plot charts are created.\par
    //! You can also use this plotting type per subset as shown in example 022.\par
\par
    // Enable middle mouse dragging //\par
    Pesgo1.MouseDraggingX := True;\par
    Pesgo1.MouseDraggingY := True;\par
\par
    // Enable Bar Glass Effect //\par
    Pesgo1.BarGlassEffect := True;\par
\par
    // Enable Plotting style gradient and bevel features //\par
    Pesgo1.AreaGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.AreaBevelStyle := sgMediumSmooth;\par
    Pesgo1.SplineGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.SplineBevelStyle := sgMediumSplineBevel;\par
\par
    // Enable ZoomWindow //\par
    Pesgo1.ZoomWindow := True;\par
\par
    Pesgo1.Subsets := 3;\par
    Pesgo1.Points := 600;\par
\par
    // Pass XData and YData //\par
    For p := 0 To 599 do\par
    begin\par
        Pesgo1.XData[0, p] := (p + 1);\par
        Pesgo1.XData[1, p] := (p + 1);\par
        Pesgo1.XData[2, p] := (p + 1);\par
\par
        f1 := 150 + (Sin(p * 0.03) * 100) + (Random * 2);\par
        Pesgo1.YData[0, p] := f1;\par
        f2 := 25 + (Sin(p * 0.07) * 50) + (Random * 2);\par
        Pesgo1.YData[1, p] := f2;\par
        f3 := ((f1 + f2) / 2) + (Random * 20) + 25;\par
        Pesgo1.YData[2, p] := f3;\par
    end;\par
\par
    // Set Plotting Style and Comparison Subsets //\par
    Pesgo1.PlottingMethod := sgSpecificPlotMode;\par
    Pesgo1.SpecificPlotMode := sgHighLowArea;\par
    Pesgo1.ComparisonSubsets := 1;\par
\par
    // Subset colors //\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(225, 255, 255, 0);\par
    Pesgo1.SubsetColors[1] := Pesgo1.PEargb(125, 0, 0, 190);\par
    Pesgo1.SubsetColors[2] := Pesgo1.PEargb(150, 255, 0, 0);\par
\par
    // Set Line Styles //\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[1] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[2] := PELT_MEDIUMSOLID;\par
\par
    // Allow zooming and panning //\par
    Pesgo1.AllowZooming := sgHorzZooming;\par
    Pesgo1.ScrollingHorzZoom := True;\par
    Pesgo1.ScrollingScaleControl := True;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgMedLine;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
    Pesgo1.FixedFonts := True;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgMedium;\par
    Pesgo1.AutoMinMaxPaddingX := 0;\par
    Pesgo1.ManualScaleControlX := sgManualMin;\par
    Pesgo1.ManualMinX := 0;\par
    Pesgo1.AllowBar := False;\par
\par
    Pesgo1.MainTitle := 'High Low Area';\par
    Pesgo1.SubTitle := 'Inverted data uses secondary color, intersecting point is interpolated.';\par
\par
    // set various export defaults  //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasGraphics := True;\par
    Pesgo1.AntiAliasText := True;\par
\par
\par
End\par
Else If nChart = 137 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{137  Scientific Graph showing Error Bars\}\par
\par
    erroramount := 2.5;  // e = Error Bar Amount\par
    ac1 := Integer(Pesgo1.PEargb(255, 255, 0, 0)); // error bar color\par
    ac2 := Integer(Pesgo1.PEargb(255, 0, 255, 255));\par
\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 9;\par
\par
    // Pass XData and YData //\par
    For p := 0 To 8 do\par
    begin\par
        Pesgo1.XData[0, p] := (p + 1) * 10;\par
        Pesgo1.YData[0, p] := 25 + (Random * 10);\par
    end;\par
\par
    // This code shows how to learn axis range without having to perform a cpu intensive image build //\par
    // Do partial initialization, read axis extents to know how to adjust scales, and continue //\par
    Pesgo1.PEactions := sgReinitialize;\par
    dRange := Pesgo1.ManualMaxY - Pesgo1.ManualMinY;\par
\par
    // Manually Control Y Axis as we learned extents above //\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := Pesgo1.ManualMinY - erroramount - (dRange * 0.1);\par
    Pesgo1.ManualMaxY := Pesgo1.ManualMaxY + erroramount + (dRange * 0.1);\par
\par
    // Set Plotting Style and Comparison Subsets //\par
    Pesgo1.PlottingMethod := sgPointsPlusLine;\par
    Pesgo1.PointSize := sgMediumPoints;\par
    Pesgo1.MinimumPointSize := sgLargeMPS;\par
    Pesgo1.GraphAnnotMinSymbolSize := sgLargeMPS;\par
\par
    // Adding dash symbols at each end of error bar //\par
    // along with line connecting dashes.           //\par
    c := 0;\par
    For p := 0 To 8 do\par
    begin\par
        Pesgo1.GraphAnnotationX[c] := Pesgo1.XData[0, p];\par
        Pesgo1.GraphAnnotationY[c] := Pesgo1.YData[0, p] + erroramount;\par
        Pesgo1.GraphAnnotationType[c] := PEGAT_THINSOLIDLINE;\par
        Pesgo1.GraphAnnotationColor[c] := Cardinal(ac1);\par
        Pesgo1.GraphAnnotationText[c] := '';\par
        c := c + 1;\par
\par
        Pesgo1.GraphAnnotationX[c] := Pesgo1.XData[0, p];\par
        Pesgo1.GraphAnnotationY[c] := Pesgo1.YData[0, p] - erroramount;\par
        Pesgo1.GraphAnnotationType[c] := PEGAT_LINECONTINUE;\par
        Pesgo1.GraphAnnotationColor[c] := Cardinal(ac1);\par
        Pesgo1.GraphAnnotationText[c] := '';\par
        c := c + 1;\par
\par
        Pesgo1.GraphAnnotationX[c] := Pesgo1.XData[0, p];\par
        Pesgo1.GraphAnnotationY[c] := Pesgo1.YData[0, p] + erroramount;\par
        Pesgo1.GraphAnnotationType[c] := PEGAT_DASH;\par
        Pesgo1.GraphAnnotationColor[c] := Cardinal(ac2);\par
        Pesgo1.GraphAnnotationText[c] := '';\par
        c := c + 1;\par
\par
        Pesgo1.GraphAnnotationX[c] := Pesgo1.XData[0, p];\par
        Pesgo1.GraphAnnotationY[c] := Pesgo1.YData[0, p] - erroramount;\par
        Pesgo1.GraphAnnotationType[c] := PEGAT_DASH;\par
        Pesgo1.GraphAnnotationColor[c] := Cardinal(ac2);\par
        Pesgo1.GraphAnnotationText[c] := '';\par
        c := c + 1;\par
    end;\par
\par
    Pesgo1.ShowAnnotations := True;\par
    Pesgo1.AnnotationsInFront := False;\par
\par
    // Subset colors //\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(225, 255, 255, 0);\par
\par
    // Set Line Styles //\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMSOLID;\par
\par
    // Allow zooming and panning //\par
    Pesgo1.AllowZooming := sgHorzZooming;\par
    Pesgo1.ScrollingHorzZoom := True;\par
    Pesgo1.ScrollingScaleControl := True;\par
\par
    // Set Various Other Properties ///\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkInset;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
    Pesgo1.FixedFonts := True;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgMedium;\par
    Pesgo1.AutoMinMaxPaddingX := 5;\par
    Pesgo1.AutoMinMaxPaddingY := 40;\par
    Pesgo1.GridLineControl := sgNoGrid;\par
\par
    Pesgo1.MainTitle := 'Error Bars via Graph Annotations';\par
    Pesgo1.SubTitle := '';\par
\par
    // set various export defaults  //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasGraphics := True;\par
    Pesgo1.AntiAliasText := True;\par
  End\par
Else If nChart = 138 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{138  Scientific Graph showing real-time 6\}\par
\par
    //! Chart holds 8M points.  Data is fed into data arrays at current data index.\par
    //! This type of real-time allows best method for incrementally updating large quantity of data.\par
    //! This example uses Direct3D, historically with non Direct3D this type of implementation\par
    //! would become slower and slower over time as data increased.  With Direct3D this chart will not\par
    //! slow down over time and though this example's timer is at 1 second, it could be faster.\par
\par
    Pesgo1.Subsets := 1;\par
    Pesgo1.Points := 8000000;\par
\par
    // Slower to initial initialize, but allows for incremental changes with RealTimeStartingIndex and RealTimeQuanity settings.\par
    // All Subsets will be updated at location of RealTimeStartingIndex.\par
    Pesgo1.DynamicBuffers := True;\par
\par
    // We create our own date-time format as Direct3D does not inherently work well with double precision floats.\par
    StartTime := (DayOf(Now) * 86400 + HourOf(Now) * 3600 + MinuteOf(Now) * 60 + SecondOf(Now));\par
\par
    // For this type of real-time, NullDataGaps must be false and NullData is not used.  Setting these NullData properties means all data will be considered valid.\par
    Pesgo1.NullDataValueY := -999.9;\par
    Pesgo1.NullDataValueX := -999.9;\par
    Pesgo1.NullDataGaps := False;\par
\par
    // For this type of real-time, ManualMinX and ManualMax must best set and never adjusted, unless a lengthier full reset\par
    // where Pesgo1.PeData.RealTimeQuantity = 0 and Pesgo1.PeData.RealTimeStartingIndex = 0 and Pesgo1.PeFunction.Force3dxVerticeRebuild = true\par
    // is used.  As shown below, the Zoom settings can be used to change the data viewed while the manual extents remain the same.\par
\par
    Pesgo1.ManualScaleControlX := sgManualMinAndMax;\par
    Pesgo1.ManualMinX := 0;\par
    Pesgo1.ManualMaxX := 8000000;\par
\par
    Pesgo1.ManualScaleControlY := sgManualMinAndMax;\par
    Pesgo1.ManualMinY := 1;\par
    Pesgo1.ManualMaxY := 100;\par
\par
    //Set Zoomed partial Range of X Scale//\par
    Pesgo1.ZoomMinX := 0;\par
    Pesgo1.ZoomMaxX := 180;\par
    Pesgo1.ZoomMinY := 1;\par
    Pesgo1.ZoomMaxY := 100;\par
    Pesgo1.ZoomMode := False; // later we will set true\par
\par
    Pesgo1.HourGlassThreshold := 100000000;\par
    Pesgo1.ZoomWindow := True;\par
    Pesgo1.ScrollingHorzZoom := True;\par
    Pesgo1.MouseWheelFunction := sgMouseWheelHorzZoom;\par
\par
    Pesgo1.CustomGridNumbersX := True;\par
    Pesgo1.CustomGridNumbersZoomAxisX := True;\par
    Pesgo1.XAxisLabel := 'Days:Hours:Minutes:Seconds';\par
\par
    // Clear out default data and set to data in far right outer coordinates //\par
    Pesgo1.XData[0, 7999999] := 8e20; // pre allocates so below spoon feed per index doesn't thrash memory manager\par
    for j := 0 to 7999999 do\par
        Pesgo1.XData[0, j] := 8e20 + j;\par
\par
    Pesgo1.XDAta[0, 0] := 0.0;\par
    Pesgo1.YData[0, 0] := 0.0;\par
    Pesgo1.YData[0, 1] := 0.0;\par
    Pesgo1.YData[0, 2] := 0.0;\par
    Pesgo1.YData[0, 3] := 0.0;\par
    Pesgo1.YData[0, 7999999] := 0;\par
\par
    // Set Various Other Properties ///\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := sgDarkNoBorder;\par
\par
    //Set various properties//\par
    Pesgo1.MainTitle := 'Scientific Real-Time Example';\par
    Pesgo1.SubTitle := '';\par
    Pesgo1.NoRandomPointsToExport := True;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.AllowBar := False;\par
    Pesgo1.AllowPlotCustomization := False;\par
    Pesgo1.AllowPopup := True;\par
    Pesgo1.AllowPage2 := False;\par
    Pesgo1.AllowAxisPage := False;\par
    Pesgo1.AllowSubsetsPage := False;\par
    Pesgo1.AllowTextExport := False;\par
    Pesgo1.AllowEmfExport := False;\par
    Pesgo1.AllowWmfExport := False;\par
    Pesgo1.AllowSvgExport := False;\par
\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
    Pesgo1.FixedFonts := True;\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(255, 200, 200, 0);\par
\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgLarge;\par
\par
    Pesgo1.PlottingMethod := sgLine;\par
    Pesgo1.DataShadows := sgNo3D;\par
\par
    Pesgo1.AutoMinMaxPaddingX := 0;\par
    Pesgo1.GridStyle := sgDash;\par
\par
    // Set various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.RenderEngine := sgDirect3D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
    Pesgo1.Force3dxVerticeRebuild := True;\par
    Pesgo1.Invalidate();\par
    Pesgo1.ZoomMode := True;\par
\par
    // Initialize Counters and Timer //\par
    m_nRealTimeCounter := 1;\par
    m_nSinCounter := 1;\par
    Timer1.Interval := 1000;\par
    Timer1.Enabled := True;\par
\par
\{\par
    //////////////////////////////////////////////////////\par
    // Timer Event ///////////////////////////////////////\par
    //////////////////////////////////////////////////////\par
    newy := 50 + (Sin(m_nSinCounter * 0.075) * 30) + (Random * 15);\par
    newx := (DayOf(Now) * 86400 + HourOf(Now) * 3600 + MinuteOf(Now) * 60 + SecondOf(Now));\par
    newx := newx - StartTime;\par
\par
    // Store new values at current index //\par
    Pesgo1.XData[0, m_nRealTimeCounter] := newx;\par
    Pesgo1.YData[0, m_nRealTimeCounter] := newy;\par
\par
    Pesgo1.RealTimeQuantity := 1;\par
    Pesgo1.RealTimeStartingIndex := m_nRealTimeCounter;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter := m_nSinCounter + 1;\par
    if (m_nSinCounter > 30000) then  m_nSinCounter := 1;\par
\par
    // Increment index counter //\par
    m_nRealTimeCounter := m_nRealTimeCounter + 1;\par
\par
    if (Pesgo1.ZoomMaxX - Pesgo1.ZoomMinX <= 181) then\par
    begin\par
        if (newx >= Pesgo1.ZoomMaxX) then\par
        begin\par
            Pesgo1.ZoomMaxX := newx + 90;\par
            Pesgo1.ZoomMinX := (newx + 90) - 180;\par
        end;\par
    end;\par
\par
    // Update image and force paint //\par
    Pesgo1.Force3dxVerticeRebuild := True;\par
    Pesgo1.Invalidate();\par
\par
    //////////////////////////////////////////////////////\par
    // CustomGridNumber Event, simple formatting x axis //\par
    //////////////////////////////////////////////////////\par
    if (nCurrentChart = 138) then\par
    begin\par
      nDays := Trunc(dNumber / 86400);\par
      dDaysRemainder := Trunc(dNumber) Mod 86400;\par
\par
      nHours := Trunc(dDaysRemainder / 3600);\par
      dHrsRemainder := Trunc(dDaysRemainder) Mod 3600;\par
\par
      nMinutes := Trunc(dHrsRemainder / 60);\par
      dMinRemainder := Trunc(dHrsRemainder) Mod 60;\par
\par
      nSecs := Trunc(dMinRemainder);\par
\par
      sTmp := Format('%d:%d:%d:%d',[nDays, nHours, nMinutes, nSecs]);\par
      StringToWideChar(sTmp, szData, 97);\par
    end;\par
\par
\}\par
\par
  End\par
Else If nChart = 139 Then\par
  Begin\par
\{*********************************************************************\par
*********************************************************************\}\par
\{139  Scientific Graph showing WaveData-Heatmap-Spectrogram\}\par
\par
    Pesgo1.Subsets := 183;\par
    Pesgo1.Points := 512;\par
\par
    Pesgo1.DuplicateDataX := eDuplicateData.sgPointIncrement;\par
    Pesgo1.DuplicateDataY := eDuplicateData.sgSubsetIncrement;\par
\par
    Pesgo1.XData[0, 511] := 0;   // pre allocates memory so guaranteed we never have to reallocate as we spoon feed below\par
    Pesgo1.YData[0, 182] := 0;   // note that we use SubsetIncrement above so think of it as a one dimensional array\par
    Pesgo1.ZData[182, 511] := 0;\par
\par
     //will load the TAB delimited TXT here\par
     sl := TStringList.Create;\par
     //will process each TAB delimited line here\par
     slRow := TStringList.Create;\par
     slRow.StrictDelimiter := true;\par
     slRow.Delimiter := #9; //TAB\par
     StringGrid1 := TStringGrid.Create(Self);\par
     try\par
       //load the tab delimited txt file\par
       sl.LoadFromFile('heatmap.txt') ;\par
       StringGrid1.RowCount := sl.Count;\par
\par
       nSubsetCount := 0;\par
       nPointCount := 0;\par
\par
       //for each tab delimited line\par
       for line := 0 to -1 + sl.Count do\par
       begin\par
         //"load" the line into a stringlist\par
\par
         if (sl[line].Length < 3) then Continue;\par
\par
         slRow.DelimitedText := sl[line];\par
         StringGrid1.Rows[line].Assign(slRow);\par
\par
         x := strtofloat(StringGrid1.Rows[line][0]);\par
         y := strtofloat(StringGrid1.Rows[line][1]);\par
         z := strtofloat(StringGrid1.Rows[line][2]);\par
\par
         if (nSubsetCount = 0) then Pesgo1.XData[0, nPointCount] := x + 20.0;\par
         if (nPointCount = 0) then Pesgo1.YData[0, nSubsetCount] := y  * (line + 1000) / 100.0;   //make the data more log like to match YAxisScaleControl = Log\par
         Pesgo1.ZData[nSubsetCount, nPointCount] := z;\par
         nPointCount := nPointCount + 1;\par
         if (nPointCount > 511) then\par
         begin\par
             nPointCount := 0;\par
             nSubsetCount := nSubsetCount + 1;\par
         end;\par
       end;\par
     finally\par
       slRow.Free;\par
       sl.Free;\par
       StringGrid1.Free;\par
     end;\par
\par
    // Log y scale\par
    Pesgo1.YAxisScaleControl := sgLog;\par
    Pesgo1.FontSize := sgLarge;\par
    Pesgo1.FixedFonts := True;\par
\par
    // Set Various Other Properties //\par
    Pesgo1.BitmapGradientMode := TRUE;\par
    Pesgo1.QuickStyle := eQuickStyle.sgDarkShadow;\par
    Pesgo1.BorderTypes := eTABorders.sgNoBorder;\par
    Pesgo1.GridBold := true;\par
\par
    // Set the plotting method //\par
    Pesgo1.AllowContourColors := True;\par
    Pesgo1.AllowContourLines := False;\par
    Pesgo1.AllowContourColorsShadows := True;\par
\par
    // Set Contour Color regions //\par
    Pesgo1.ContourColorBlends := 10;\par
    Pesgo1.ContourColorSet := eContourColorSet.sgCC_BlueCyanGreenYellowBrownWhite;\par
\par
    Pesgo1.ContourLegendPrecision := 2;\par
    Pesgo1.ContourStyleLegend := true;\par
\par
    Pesgo1.DataShadowMenu := eMenuControl.sgHideMenu;\par
\par
    Pesgo1.PlottingMethod := ePlottingMethod.sgContourColors;\par
\par
    Pesgo1.LegendLocation := sgLegendLeft;\par
    Pesgo1.GridInFront := True;\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
    Pesgo1.GridStyle := sgDot;\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
    Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
    Pesgo1.ScrollingVertZoom := True;\par
    Pesgo1.ScrollingHorzZoom := True;\par
\par
    Pesgo1.MouseWheelFunction := eMouseWheelFunction.sgMouseWheelHorzVertZoom;\par
    Pesgo1.MouseWheelZoomSmoothness := 2;\par
    Pesgo1.MouseWheelZoomFactor := 1.4;\par
    Pesgo1.GridBands := false;\par
\par
    // Disable other non contour plotting method //\par
    Pesgo1.AllowLine := False;\par
    Pesgo1.AllowPoint := False;\par
    Pesgo1.AllowBar := False;\par
    Pesgo1.AllowArea := False;\par
    Pesgo1.AllowSplineArea := False;\par
    Pesgo1.AllowSpline := False;\par
    Pesgo1.AllowPointsPlusLine := False;\par
    Pesgo1.AllowPointsPlusSpline := False;\par
    Pesgo1.AllowBestFitCurve := False;\par
    Pesgo1.AllowBestFitLine := False;\par
    Pesgo1.AllowStick := False;\par
\par
    Pesgo1.DataShadowMenu := eMenuControl.sgHideMenu;\par
    Pesgo1.MarkDataPointsMenu := eMenuControl.sgHideMenu;\par
\par
    // Set Titles //\par
    Pesgo1.MainTitle := 'Spectogram Heatmap WaveData Example';\par
    Pesgo1.SubTitle := '';\par
\par
    // So contour goes to edge of grid //\par
    Pesgo1.AutoMinMaxPadding := 0;\par
\par
    // Disable appropriate tabs //\par
    Pesgo1.AllowAxisPage := False;\par
    Pesgo1.AllowStylePage := False;\par
    Pesgo1.AllowSubsetsPage := False;\par
\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
\par
    // Sets various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
    Pesgo1.AllowEmfExport := false;\par
    Pesgo1.AllowWmfExport := false;\par
    Pesgo1.AllowSvgExport := false;\par
\par
    Pesgo1.RenderEngine := eRenderEngine.sgDirect3D;\par
    Pesgo1.Force3dxVerticeRebuild := True;\par
    Pesgo1.Force3dxNewColors := True;\par
\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
    // v9 features\par
    Pesgo1.CursorPromptTracking := true;\par
    Pesgo1.CursorPromptStyle := eCursorPromptStyle.sgXYZValues;\par
    Pesgo1.CursorPromptLocation := eCursorPromptLocation.sgText;\par
    Pesgo1.HourGlassThreshold := 99999999;\par
\par
\par
\par
\par
  End\par
Else If nChart = 199 Then\par
  Begin\par
\par
\par
End;\par
\par
Pesgo1.PEactions := sgReinitAndReset;\par
\par
If (Form3.Visible = False) Then Form3.Show;\par
\par
End;\par
\par
\{//////////////////////\}\par
\{create the most basic graph\}\par
procedure TForm3.CreateSimpleSGraph;\par
\par
Var\par
    s : Integer;\par
    p : Integer;\par
    fOffset : Single;\par
\par
begin\par
\par
    // v9 features\par
    Pesgo1.CursorPromptTracking := true;\par
    Pesgo1.CursorPromptLocation := eCursorPromptLocation.sgTooltip;\par
    Pesgo1.CursorPromptStyle := eCursorPromptStyle.sgXandYValue;\par
\par
    // Enable Bar Glass Effect //\par
    Pesgo1.BarGlassEffect := True;\par
\par
    // Enable Plotting style gradient and bevel features //\par
    Pesgo1.AreaGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.AreaBevelStyle := sgMediumSmooth;\par
    Pesgo1.SplineGradientStyle := sgRadialBottomRightPG;\par
    Pesgo1.SplineBevelStyle := sgMediumSplineBevel;\par
\par
    // v7.2 new features //\par
    Pesgo1.PointGradientStyle := sgVerticalAscentInversePG;\par
    Pesgo1.PointBorderColor := Pesgo1.PEargb(100, 0, 0, 0);\par
    Pesgo1.LineSymbolThickness := 3;\par
    Pesgo1.AreaBorder := 1;\par
    Pesgo1.AllowSvgExport := True;\par
\par
    Pesgo1.PrepareImages := True;\par
    Pesgo1.CacheBmp := True;\par
\par
    // Set Subsets, Points, and fill with YData\par
    Pesgo1.Subsets := 4;\par
    Pesgo1.Points := 120;\par
    For s := 0 To 3 do //4-1\par
      begin\par
        fOffset := (Random * 250);\par
        For p := 0 To 119 do  //12-1\par
         Begin\par
            Pesgo1.XData[s, p] := (p + 1) * 100;\par
            Pesgo1.YData[s, p] := (p + 1) + (Random * 250) + (Sin((p + fOffset) * 0.03) * 700) - ((s * 140));\par
         end;\par
      End;\par
\par
    Pesgo1.DataShadows := sgWithShadows;\par
    Pesgo1.FocalRect := False;\par
    Pesgo1.PlottingMethod := sgPointsPlusSpline;\par
    Pesgo1.GridLineControl := sgYPlusXAxis;\par
    Pesgo1.GridStyle := sgDot;\par
    Pesgo1.AllowZooming := sgHorzPlusVertZooming;\par
    Pesgo1.ZoomStyle := sgRO2NOT;\par
\par
    // Enable middle mouse dragging //\par
    Pesgo1.MouseDraggingY := True;\par
    Pesgo1.MouseDraggingX := True;\par
\par
    Pesgo1.MainTitle := 'Test Results';\par
    Pesgo1.SubTitle := '';\par
    Pesgo1.YAxisLabel := 'Performance';\par
    Pesgo1.XAxisLabel := 'Duration';\par
\par
    // Set SubsetLabels property array for 4 subsets\par
    Pesgo1.SubsetLabels[0] := 'Horsepower';\par
    Pesgo1.SubsetLabels[1] := 'Torque';\par
    Pesgo1.SubsetLabels[2] := 'Temperature';\par
    Pesgo1.SubsetLabels[3] := 'Pressure';\par
\par
    // this is how to change subset colors\par
    Pesgo1.SubsetColors[0] := Pesgo1.PEargb(128, 198, 0, 0);\par
    Pesgo1.SubsetColors[1] := Pesgo1.PEargb(128, 0, 198, 198);\par
    Pesgo1.SubsetColors[2] := Pesgo1.PEargb(128, 198, 198, 0);\par
    Pesgo1.SubsetColors[3] := Pesgo1.PEargb(128, 0, 198, 0);\par
\par
    // this is how to change line types\par
    Pesgo1.SubsetLineTypes[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[1] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[2] := PELT_MEDIUMSOLID;\par
    Pesgo1.SubsetLineTypes[3] := PELT_MEDIUMSOLID;\par
\par
    // this is how to change point types\par
    Pesgo1.SubsetPointTypes[0] := PEPT_DOTSOLID;\par
    Pesgo1.SubsetPointTypes[1] := PEPT_UPTRIANGLESOLID;\par
    Pesgo1.SubsetPointTypes[2] := PEPT_SQUARESOLID;\par
    Pesgo1.SubsetPointTypes[3] := PEPT_DOWNTRIANGLESOLID;\par
    Pesgo1.SubsetPointTypes[4] := PEPT_DOTSOLID;\par
    Pesgo1.SubsetPointTypes[5] := PEPT_SQUARESOLID;\par
    Pesgo1.SubsetPointTypes[6] := PEPT_DIAMONDSOLID;\par
    Pesgo1.SubsetPointTypes[7] := PEPT_SQUARESOLID;\par
\par
    Pesgo1.SimpleLineLegend := True;\par
    Pesgo1.SimplePointLegend := True;\par
    Pesgo1.LegendStyle := sgOneLine;\par
    Pesgo1.MultiAxisStyle := sgSeparateAxes;\par
\par
    Pesgo1.GradientBars := 8;\par
    Pesgo1.TextShadows := sgShadowBoldText;\par
    Pesgo1.MainTitleBold := True;\par
    Pesgo1.SubTitleBold := True;\par
    Pesgo1.LabelBold := True;\par
    Pesgo1.LineShadows := True;\par
    Pesgo1.FontSize := sgLarge;\par
    Pesgo1.ScrollingHorzZoom := True;\par
    Pesgo1.DataPrecision := sgOneDecimal;\par
\par
    Pesgo1.FixedFonts := True;\par
    Pesgo1.BitmapGradientMode := True;\par
    Pesgo1.QuickStyle := eQuickStyle.sgDarkNoBorder;\par
\par
    Pesgo1.AutoMinMaxPadding := 1;\par
    Pesgo1.ImageAdjustLeft := 20;\par
    Pesgo1.ImageAdjustRight := 20;\par
    Pesgo1.ImageAdjustTop := 10;\par
\par
    // Sets various export defaults //\par
    Pesgo1.DpiX := 600;\par
    Pesgo1.DpiY := 600;\par
\par
    Pesgo1.ExportSizeDef := sgExportNoSizeOrPixels;\par
    Pesgo1.ExportTypeDef := sgExportPng;\par
    Pesgo1.ExportDestDef := sgExportToClipboard;\par
    Pesgo1.ExportUnitXDef := '1280';\par
    Pesgo1.ExportUnitYDef := '768';\par
    Pesgo1.ExportImageDpi := 300;\par
\par
    Pesgo1.RenderEngine := sgDirect2D;\par
    Pesgo1.AntiAliasText := True;\par
    Pesgo1.AntiAliasGraphics := True;\par
\par
end;\par
\par
\{//////////////////////////////////\}\par
procedure TForm3.FormCreate(Sender: TObject);\par
var\par
    j: Integer;\par
    fShift: Single;\par
begin\par
    GetMem(ptx2, SizeOf(Single) * 400000);\par
    GetMem(pty2, SizeOf(Single) * 500000);\par
\par
    for j := 0 to 99999 do\par
    begin\par
        ptx2^[j] := (j + 1) * 0.01;\par
        ptx2^[j + 100000] := (j + 1) * 0.01;\par
        ptx2^[j + 200000] := (j + 1) * 0.01;\par
        ptx2^[j + 300000] := (j + 1) * 0.01;\par
    end;\par
    fShift := Random * 90.0;\par
    for j := 0 to 124999 do\par
        pty2^[j] := (Sin(0.003 * j + fShift) * 5) + 10 + (Random * 100) / 10;\par
    fShift := Random * 90.0;\par
    for j := 0 to 124999 do\par
        pty2^[j + 125000] := (Sin(0.002 * j + fShift) * 5) + 20 + (Random * 100) / 10;\par
    fShift := Random * 90.0;\par
    for j := 0 to 124999 do\par
        pty2^[j + 250000] := (Sin(0.003 * j + fShift) * 5) + 30 + (Random * 100) / 10;\par
    fShift := Random * 90.0;\par
    for j := 0 to 124999 do\par
        pty2^[j + 375000] := (Sin(0.003 * j + fShift) * 5) + 40 + (Random * 100) / 10;\par
\par
end;\par
\par
procedure TForm3.FormDestroy(Sender: TObject);\par
begin\par
    FreeMem(ptx2, SizeOf(Single) * 400000);\par
    FreeMem(pty2, SizeOf(Single) * 500000);\par
\par
    if (ptx3 <> Nil) then\par
    begin\par
      FreeMem(ptx3, SizeOf(Single) * 1000000);\par
      FreeMem(pty3, SizeOf(Single) * 1000000);\par
      ptx3 := Nil;\par
      pty3 := Nil;\par
    end;\par
\par
end;\par
\par
procedure TForm3.FormResize(Sender: TObject);\par
begin\par
Pesgo1.left := 0;\par
Pesgo1.top := 0;\par
Pesgo1.Width := Form3.ClientWidth;\par
Pesgo1.Height := Form3.ClientHeight;\par
end;\par
\par
\{//////////////////////////////////\}\par
procedure TForm3.Pesgo1CursorMoved(Sender: TObject);\par
var\par
nChart : Integer;\par
s : String;\par
label finish;\par
\par
begin\par
\par
\{check to see if a list item has been selected\}\par
if form1.list1.ItemIndex < 0 then goto finish;\par
\{pull the 3 digit number out of the index and convert it to an integer\}\par
s := form1.list1.items.strings[form1.list1.ItemIndex];\par
s:=Copy(s,1,3);\par
nChart := StrToInt(s);\par
\par
If nChart = 105 Then\par
begin\par
    Form3.Caption := 'Subsets ' + InttoStr(Pesgo1.CursorSubset) + ' Point ' + inttoStr(Pesgo1.CursorPoint) + ' YData = ' + floattoStr(Pesgo1.YData[Pesgo1.CursorSubset, Pesgo1.CursorPoint]);\par
    Pesgo1.CursorColor := Pesgo1.SubsetColors[Pesgo1.CursorSubset];\par
end;\par
finish:\par
end;\par
\par
//////////////////////////////////\par
procedure TForm3.Pesgo1ZoomIn(Sender: TObject);\par
\par
Var\par
nChart : Integer;\par
s : String;\par
label finish;\par
\par
begin\par
\par
\{check to see if a list item has been selected\}\par
if form1.list1.ItemIndex < 0 then goto finish;\par
\{pull the 3 digit number out of the index and convert it to an integer\}\par
s := form1.list1.items.strings[form1.list1.ItemIndex];\par
s:=Copy(s,1,3);\par
nChart := StrToInt(s);\par
\par
If nChart = 107 Then\par
  Begin\par
    Pesgo1.GraphAnnotationY[0] := Pesgo1.ZoomMaxY;\par
    Pesgo1.GraphAnnotationX[0] := Pesgo1.ZoomMinX;\par
    Pesgo1.GraphAnnotationType[0] := PEGAT_TOPLEFT;\par
\par
    Pesgo1.GraphAnnotationY[1] := Pesgo1.ZoomMinY;\par
    Pesgo1.GraphAnnotationX[1] := Pesgo1.ZoomMaxX;\par
    Pesgo1.GraphAnnotationType[1] := PEGAT_BOTTOMRIGHT;\par
\par
    Pesgo1.GraphAnnotationY[2] := Pesgo1.ZoomMaxY;\par
    Pesgo1.GraphAnnotationX[2] := Pesgo1.ZoomMinX;\par
    Pesgo1.GraphAnnotationType[2] := PEGAT_ELLIPSE_FILL;\par
    Pesgo1.GraphAnnotationText[2] := 'Region of Interest';\par
    Pesgo1.GraphAnnotationGradientStyle[2] := sgRadialCenteredPG;\par
    Pesgo1.GraphAnnotationGradientColor[2] := Pesgo1.PEargb(5, 255, 255, 255);\par
    Pesgo1.GraphAnnotationColor[2] := Pesgo1.PEargb(195, 55, 55, 55);\par
    Pesgo1.GraphAnnotationBevelStyle[2] := sgThinSmooth;\par
\par
    Pesgo1.PEactions := sgResetImage; //call PEresetimage\par
    Pesgo1.PEactions := sgInvalidateImage; //call InvalidateRect forcing paint\par
  End;\par
\par
finish:\par
end;\par
\par
//////////////////////////////////\par
procedure TForm3.Timer1Timer(Sender: TObject);\par
\par
Var\par
newy : Single;\par
newx : Single;\par
newx2 : Double;\par
t : Longint;\par
nChart : Integer;\par
s : String;\par
NewYData : Array[0..250] of Single;\par
NewXDataii : Array[0..250] of Double;\par
fShift: Single;\par
i: Integer;\par
label finish;\par
\par
begin\par
\par
\{check to see if a list item has been selected\}\par
if form1.list1.ItemIndex < 0 then goto finish;\par
\{pull the 3 digit number out of the index and convert it to an integer\}\par
s := form1.list1.items.strings[form1.list1.ItemIndex];\par
s:=Copy(s,1,3);\par
nChart := StrToInt(s);\par
\par
If nChart = 115 Then\par
  Begin\par
\par
    // Repass the data, this time with PEvset call //\par
    Pesgo1.Subsets := 4;\par
    Pesgo1.Points := 100000;\par
\par
\tab\tab fShift := (Random * 4500); // randomize the start of waveform data to produce variation\par
    i := trunc(fShift);\par
 \tab\tab PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 0, 100000, @pty2^[i], 0);\par
 \tab\tab PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 100000, 100000, @pty2^[i + 125000], 0);\par
 \tab\tab PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 200000, 100000, @pty2^[i + 250000], 0);\par
 \tab\tab PEvsetEx(Pesgo1.hObject, PEP_faYDATA, 300000, 100000, @pty2^[i + 375000], 0);\par
\par
    if (Pesgo1.RenderEngine = sgDirect3D) then\par
        PEreconstruct3dpolygons(Pesgo1.hObject)\par
    else\par
    begin\par
        PEreinitialize(Pesgo1.hObject); // Because 115 create sets AutoImageReset = False, we need to call PEreinitialize to re-filter new data\par
  \tab     PEresetimage(Pesgo1.hObject, 0, 0);\par
    end;\par
    Pesgo1.PEactions := sgInvalidateImage;\par
\par
   End\par
Else If nChart = 116 Then\par
   Begin\par
\par
    // New y value and x value //\par
    newy := 50 + (Sin(m_nSinCounter * 0.075) * 30) + (Random * 15);\par
    newx := m_nRealTimeCounter;\par
\par
    // Append new values //\par
    PEvsetW(Pesgo1.hObject, PEP_faAPPENDYDATA, @newy, 1);\par
    PEvsetW(Pesgo1.hObject, PEP_faAPPENDXDATA, @newx, 1);\par
\par
    // Increment counter //\par
    m_nRealTimeCounter := m_nRealTimeCounter + 1;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter := m_nSinCounter + 1;\par
    If (m_nSinCounter > 30000) Then m_nSinCounter := 1;\par
\par
    // Update image and force paint //\par
    Pesgo1.PEnarg1 := 0;\par
    Pesgo1.PEnarg2 := 0;\par
    Pesgo1.PEactions := sgReinitAndReset;  // Calls PEresetimage\par
\par
   End\par
Else If nChart = 117 Then\par
   Begin\par
    // New y value and x value //\par
    newy := 50 + (Sin(m_nSinCounter * 0.075) * 30) + (Random * 15);\par
    newx := m_nRealTimeCounter;\par
\par
    // Append new values  //\par
    PEvsetW(Pesgo1.hObject, PEP_faAPPENDYDATA, @newy, 1);\par
    PEvsetW(Pesgo1.hObject, PEP_faAPPENDXDATA, @newx, 1);\par
\par
    // Increment counter //\par
    m_nRealTimeCounter := m_nRealTimeCounter + 1;\par
\par
    // Switch to AutoScaling x axis after receiving 100 data points //\par
    If m_nRealTimeCounter = 100 Then Pesgo1.ManualScaleControlX := sgAutoScale;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter := m_nSinCounter + 1;\par
    If (m_nSinCounter > 30000) Then m_nSinCounter := 1;\par
\par
    // Update image and force paint //\par
    Pesgo1.PEnarg1 := 0;\par
    Pesgo1.PEnarg2 := 0;\par
    Pesgo1.PEactions := sgReinitAndReset;  // Calls PEresetimage\par
  End\par
Else If nChart = 118 Then\par
  Begin\par
    // New y value and x value //\par
    newy := 50 + (Sin(m_nSinCounter * 0.075) * 30) + (Random * 15);\par
    newx := m_nRealTimeCounter;\par
\par
    // Update new data at current index //\par
    Pesgo1.YData[0, m_nRealTimeCounter] := newy;\par
    Pesgo1.XData[0, m_nRealTimeCounter] := newx;\par
\par
    Pesgo1.VertLineAnnotation[0] := newx;\par
    Pesgo1.VertLineAnnotationType[0] := PELT_MEDIUMSOLID;\par
    Pesgo1.VertLineAnnotationColor[0] := Pesgo1.PEargb(255, 0, 0, 155);\par
\par
    // Increment counter //\par
    m_nRealTimeCounter := m_nRealTimeCounter + 1;\par
\par
    // Reset counter at end of data //\par
    If m_nRealTimeCounter = 100 Then m_nRealTimeCounter := 0;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter := m_nSinCounter + 1;\par
    If (m_nSinCounter > 30000) Then m_nSinCounter := 1;\par
\par
    // Update image and force paint //\par
    Pesgo1.PEnarg1 := 0;\par
    Pesgo1.PEnarg2 := 0;\par
    Pesgo1.PEactions := sgReinitAndReset;  // Calls PEresetimage\par
\par
  End\par
Else If nChart = 119 Then\par
  Begin\par
\par
    // New y value and x value //\par
    newy := 50 + (Sin(m_nSinCounter * 0.075) * 30) + (Random * 15);\par
    newx2 := Now;\par
\par
    // Shift data when counter reaches end of data. //\par
    If m_nRealTimeCounter >= 1999 Then\par
    Begin\par
        // Shift Data by 250 data points, oldest 250 will be lost.\par
        m_nRealTimeCounter := m_nRealTimeCounter - 250;\par
\par
        For t := 0 To 249 do\par
        begin\par
           NewYData[t] := 0.0;\par
           NewXDataii[t] := 0.0;\par
        end;\par
\par
        PEvsetW(Pesgo1.hObject, PEP_faAPPENDYDATA, @NewYData[0], 250);\par
        PEvsetW(Pesgo1.hObject, PEP_faAPPENDXDATAII, @NewXDataii[0], 250);\par
    End;\par
\par
    // Store new values at current index //\par
    Pesgo1.XDataII[0, m_nRealTimeCounter] := newx2;\par
    Pesgo1.YData[0, m_nRealTimeCounter] := newy;\par
\par
    // Increment index counter //\par
    m_nRealTimeCounter := m_nRealTimeCounter + 1;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter := m_nSinCounter + 1;\par
    If (m_nSinCounter > 30000) Then m_nSinCounter := 1;\par
\par
    // If current time is beyond zoom max, the re-adjust zoom max //\par
    If newx2 > ZoomEnd Then\par
    Begin\par
        ZoomEnd := ZoomEnd + ZoomSmallInterval;\par
        ZoomStart := ZoomEnd - ZoomInterval;\par
        Pesgo1.ZoomMinX := ZoomStart;\par
        Pesgo1.ZoomMaxX := ZoomEnd;\par
        Pesgo1.ManualMinX := Pesgo1.XDataII[0, 1];\par
        Pesgo1.ManualMaxX := ZoomEnd;\par
    End;\par
\par
    // Update image and force paint //\par
    Pesgo1.PEnarg1 := 0;\par
    Pesgo1.PEnarg2 := 0;\par
    Pesgo1.PEactions := sgReinitAndReset;  // Calls PEresetimage\par
    Pesgo1.PEactions := sgInvalidateImage;  // Calls InvalidateRect\par
\par
  End\par
Else If nChart = 138 Then\par
  Begin\par
\par
    // New y value and x value //\par
    newy := 50 + (Sin(m_nSinCounter * 0.075) * 30) + (Random * 15);\par
\par
    newx := (DayOf(Now) * 86400 + HourOf(Now) * 3600 + MinuteOf(Now) * 60 + SecondOf(Now));\par
    newx := newx - StartTime;\par
\par
    // Store new values at current index //\par
    Pesgo1.XData[0, m_nRealTimeCounter] := newx;\par
    Pesgo1.YData[0, m_nRealTimeCounter] := newy;\par
\par
    Pesgo1.RealTimeQuantity := 1;\par
    Pesgo1.RealTimeStartingIndex := m_nRealTimeCounter;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter := m_nSinCounter + 1;\par
    if (m_nSinCounter > 30000) then  m_nSinCounter := 1;\par
\par
    // Increment index counter //\par
    m_nRealTimeCounter := m_nRealTimeCounter + 1;\par
\par
    if (Pesgo1.ZoomMaxX - Pesgo1.ZoomMinX <= 181) then\par
    begin\par
        if (newx >= Pesgo1.ZoomMaxX) then\par
        begin\par
            Pesgo1.ZoomMaxX := newx + 90;\par
            Pesgo1.ZoomMinX := (newx + 90) - 180;\par
        end;\par
    end;\par
\par
    // Update image and force paint //\par
    Pesgo1.Force3dxVerticeRebuild := True;\par
    Pesgo1.Invalidate();\par
\par
End;\par
\par
finish:\par
end;\par
\par
procedure TForm3.FormShow(Sender: TObject);\par
begin\par
\par
Form3.left := 0;\par
Form3.top := Trunc(Screen.Height / 3);\par
\par
if (Screen.Width > 1920) then\par
  Form3.Width := 1920\par
else\par
  Form3.Width := Screen.Width;\par
\par
Form3.Height := Trunc(Screen.Height * 1.9 / 3);\par
\par
end;\par
\par
procedure TForm3.Pesgo1DataHotSpot(Sender: TObject; DblClick, SubsetIndex,\par
  PointIndex: Integer);\par
Var\par
nChart : Integer;\par
s : String;\par
begin\par
\par
\{check to see if a list item has been selected\}\par
if form1.list1.ItemIndex < 0 then exit;\par
\{pull the 3 digit number out of the index and convert it to an integer\}\par
s := form1.list1.items.strings[form1.list1.ItemIndex];\par
s:=Copy(s,1,3);\par
nChart := StrToInt(s);\par
\par
If nChart = 125 then\par
   begin\par
      bDragging := 1;             //Start dragging process, set flag to true\par
      nDragIndexS := SubsetIndex; //Store subset index\par
      nDragIndexP := PointIndex;  //Store point index\par
   end;\par
end;\par
\par
\par
\par
procedure TForm3.Pesgo1MouseDown(Sender: TObject; Button: TMouseButton;\par
  Shift: TShiftState; X, Y: Integer);\par
Var\par
    s: string;\par
    nChart : Integer;\par
    nA : Longint;\par
    nX : Longint;\par
    nY : Longint;\par
    fX : Double;\par
    fY : Double;\par
    pt : TPOINT;\par
\par
Begin\par
\{check to see if a list item has been selected\}\par
if form1.list1.ItemIndex < 0 then exit;\par
\{pull the 3 digit number out of the index and convert it to an integer\}\par
s := form1.list1.items.strings[form1.list1.ItemIndex];\par
s:=Copy(s,1,3);\par
nChart := StrToInt(s);\par
\par
if (nChart = 110) Then\par
begin\par
    bDragging := 1;\par
\par
    \{** get last mouse location within control **\}\par
    PEvgetW(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
\par
    nA := 0;      \{Initialize axis, non-zero only if using MultiAxesSubsets\}\par
    nX := pt.x;   \{Initialize nX and nY with mouse location\}\par
    nY := pt.y;\par
    PEconvpixeltograph(Pesgo1.hObject, @nA, @nX, @nY, @fX, @fY, 0, 0, 0);\par
\par
    //** Check move-to location and restrain to the chart's extents.\par
    //** Note that you can only expect to read valid ManualMinX type\par
    //** properties after an initial PEactions = 0 or PEactions = 1\par
    //** has been executed.\par
    if (fX <= Pesgo1.ManualMinX) then\par
         fX := Pesgo1.ManualMinX\par
    else if (fX >= Pesgo1.ManualMaxX) then\par
         fX := Pesgo1.ManualMaxX;\par
\par
    If (fY <= Pesgo1.ManualMinY) then\par
         fY := Pesgo1.ManualMinY\par
    else if (fY >= Pesgo1.ManualMaxY) then\par
         fY := Pesgo1.ManualMaxY;\par
\par
    dDragStartX := fX;\par
    dDragStartY := fY;\par
\par
    Pesgo1.CursorPromptStyle := Pesgvcl.eCursorPromptStyle.sgNoPrompt;\par
end\par
End;\par
\par
procedure TForm3.Pesgo1MouseMove(Sender: TObject; Shift: TShiftState; X,\par
  Y: Integer);\par
Var\par
    s: string;\par
    s2 : WideString;\par
    nChart : Integer;\par
    nA : Longint;\par
    nX : Longint;\par
    nY : Longint;\par
    fX : Double;\par
    fY : Double;\par
    pt : TPOINT;\par
    hsd : THotSpotData;\par
    nResult: Integer;\par
    r: TRECT;\par
    CenteredXInLog: Double;\par
    CenteredYInLog: Double;\par
    dX: Double;\par
    dY: Double;\par
    sX: string;\par
    sX2 : WideString;\par
    sY: string;\par
    sY2 : WideString;\par
    dLeft: Double;\par
    dTop: Double;\par
    dRight: Double;\par
    dBottom: Double;\par
\par
Begin\par
\{check to see if a list item has been selected\}\par
if form1.list1.ItemIndex < 0 then exit;\par
\{pull the 3 digit number out of the index and convert it to an integer\}\par
s := form1.list1.items.strings[form1.list1.ItemIndex];\par
s:=Copy(s,1,3);\par
nChart := StrToInt(s);\par
\par
if (nChart = 105) then\par
begin\par
    // get last mouse location within control //\par
    PEvgetW(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
\par
    // Call PEgethotspot //\par
    PEgethotspot(Pesgo1.hObject, pt.x, pt.y);\par
\par
    // Now look at HotSpotData structure //\par
    PEvgetW(Pesgo1.hObject, PEP_structHOTSPOTDATA, @hsd);\par
\par
    if (hsd.nHotSpotType = PEHS_DATAPOINT) Then\par
    begin\par
        s := FormatFloat('#.00', Pesgo1.YData[hsd.w1, hsd.w2]);\par
        s2 := 'DataPoint value ' + s;\par
        Form3.Caption := s2;\par
    end\par
    else if (hsd.nHotSpotType = PEHS_SUBSET) Then\par
    begin\par
        s := 'Subset Legend is ' + Pesgo1.SubsetLabels[hsd.w1];\par
        Form3.Caption := s;\par
    end\par
    else if (hsd.nHotSpotType = PEHS_POINT) Then\par
    begin\par
        s := 'Point Label is ' + Pesgo1.PointLabels[hsd.w1];\par
        Form3.Caption := s;\par
    end\par
    else\par
    begin\par
        PEvgetW(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
        nResult := PEsearchsubsetpointindex(Pesgo1.hObject, pt.x, pt.y);\par
        if (nResult <> 0) then\par
        begin\par
            s := 'Closest Subset Point s=' + IntToStr(Pesgo1.ClosestSubset);\par
            s :=  s + ', p=' + IntToStr(Pesgo1.ClosestPoint);\par
            Form3.Caption := s;\par
        end\par
        else\par
            Form3.Caption := 'No Hot Spot';\par
    end;\par
end\par
else if (nChart = 110) AND (bDragging = 1) Then\par
begin\par
    \{** get last mouse location within control **\}\par
    PEvgetW(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
\par
    nA := 0;      \{Initialize axis, non-zero only if using MultiAxesSubsets\}\par
    nX := pt.x;   \{Initialize nX and nY with mouse location\}\par
    nY := pt.y;\par
    PEconvpixeltograph(Pesgo1.hObject, @nA, @nX, @nY, @fX, @fY, 0, 0, 0);\par
\par
    //** Check move-to location and restrain to the chart's extents.\par
    //** Note that you can only expect to read valid ManualMinX type\par
    //** properties after an initial PEactions = 0 or PEactions = 1\par
    //** has been executed.\par
    if (fX <= Pesgo1.ManualMinX) then\par
         fX := Pesgo1.ManualMinX\par
    else if (fX >= Pesgo1.ManualMaxX) then\par
         fX := Pesgo1.ManualMaxX;\par
\par
    If (fY <= Pesgo1.ManualMinY) then\par
         fY := Pesgo1.ManualMinY\par
    else if (fY >= Pesgo1.ManualMaxY) then\par
         fY := Pesgo1.ManualMaxY;\par
\par
    If (dDragStartX < fX) then\par
    begin\par
         dLeft := dDragStartX;\par
         dRight := fX;\par
    end\par
    else\par
    begin\par
        dLeft := fX;\par
        dRight := dDragStartX;\par
    end;\par
\par
    If (dDragStartY > fY) then\par
    begin\par
         dTop := dDragStartY;\par
         dBottom := fY;\par
    end\par
    else\par
    begin\par
         dTop := fY;\par
         dBottom := dDragStartY;\par
    end;\par
\par
    Pesgo1.GraphAnnotationX[0] := dLeft;\par
    Pesgo1.GraphAnnotationY[0] := dTop;\par
    Pesgo1.GraphAnnotationType[0] := (PEGAT_TOPLEFT + 1) * -1;\par
\par
    Pesgo1.GraphAnnotationX[1] := dRight;\par
    Pesgo1.GraphAnnotationY[1] := dBottom;\par
    Pesgo1.GraphAnnotationType[1] := (PEGAT_BOTTOMRIGHT + 1) * -1;\par
\par
    Pesgo1.GraphAnnotationX[2] := dRight;\par
    Pesgo1.GraphAnnotationY[2] := dBottom;\par
    Pesgo1.GraphAnnotationType[2] := (PEGAT_ROUNDRECT_FILL + 1) * -1;\par
    Pesgo1.GraphAnnotationColor[2] := Pesgo1.PEargb(70, 198, 198, 198);\par
    Pesgo1.GraphAnnotationText[2] := '';\par
    Pesgo1.GraphAnnotationGradientStyle[2] := Pesgvcl.ePlotGradientStyle.sgRadialBottomRightPG;\par
    Pesgo1.GraphAnnotationGradientColor[2] := Pesgo1.PEargb(170, 255, 255, 255);\par
\par
    Pesgo1.GraphAnnotationX[3] := dRight;\par
    Pesgo1.GraphAnnotationY[3] := dBottom;\par
    Pesgo1.GraphAnnotationType[3] := (PEGAT_ROUNDRECT_MEDIUM + 1) * -1;\par
    Pesgo1.GraphAnnotationColor[3] := Pesgo1.PEargb(255, 255, 255, 255);\par
    Pesgo1.GraphAnnotationText[3] := '';\par
\par
    CenteredXInLog := (Math.Log10(fX) + Math.Log10(dDragStartX)) / 2.0;\par
    CenteredYInLog := (Math.Log10(fY) + Math.Log10(dDragStartY)) / 2.0;\par
    dX := (fX - dDragStartX);\par
    sX := FormatFloat('#.00', dX);\par
    sX2 := '|c<~ ' + sX + ' ~>';\par
    dY := (fY - dDragStartY);\par
    sY := FormatFloat('#.00', dY);\par
    sY2 := '|D<~ ' + sY + ' ~>';\par
\par
    Pesgo1.GraphAnnotationX[4] := Math.Power(10.0, CenteredXInLog);\par
    Pesgo1.GraphAnnotationY[4] := dTop;\par
    Pesgo1.GraphAnnotationColor[4] := Pesgo1.PEargb(255, 0, 255, 0);\par
    Pesgo1.GraphAnnotationType[4] := (PEGAT_NOSYMBOL + 1) * -1;\par
    Pesgo1.GraphAnnotationText[4] := sX2;\par
\par
    Pesgo1.GraphAnnotationX[5] := dRight;\par
    Pesgo1.GraphAnnotationY[5] := Math.Power(10.0, CenteredYInLog);\par
    Pesgo1.GraphAnnotationType[5] := (PEGAT_NOSYMBOL + 1) * -1;\par
    Pesgo1.GraphAnnotationColor[5] := Pesgo1.PEargb(255, 0, 255, 0);\par
    Pesgo1.GraphAnnotationText[5] := sY2;\par
\par
    Pesgo1.GraphAnnotationTextSize := 120;\par
\par
    Pesgo1.ShowGraphAnnotations := true;\par
    Pesgo1.ShowAnnotations := true;\par
\par
    Pesgo1.ShowingQuickAnnotations := true;\par
\par
    //** Performs a PEreinitializecustoms, PEresetimage, and InvalidateRect **'\par
    Pesgo1.PEactions := sgReinitCustoms;\par
    Pesgo1.PEactions := sgResetImage;\par
    Pesgo1.PEactions := sgInvalidateImage;\par
\par
    //** Windows functions causes an immediate WM_PAINT to be triggered **'\par
    UpdateWindow(Pesgo1.Handle);\par
end\par
else if (nChart = 120) Then\par
begin\par
    \{** get last mouse location within control **\}\par
    PEvgetW(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
\par
    PEvgetW(Pesgo1.hObject, PEP_rectGRAPH, @r);\par
\par
    if ((X > r.Left) and (X < r.Right) and (Y > r.Top) and (Y < r.Bottom)) then\par
    begin\par
        if (Pesgo1.AllowDataHotSpots = false) then\par
            Form3.Caption := 'Interpolated Z: ' + FormatFloat('#.00', Pesgo1.CursorValueZ)\par
        else\par
        begin\par
            PEgethotspot(Pesgo1.hObject, pt.X, pt.Y);\par
            PEvgetW(Pesgo1.hObject, PEP_structHOTSPOTDATA, @hsd);\par
\par
            if (hsd.nHotSpotType = PEHS_DATAPOINT) then\par
            begin\par
                Form3.Caption := 'Z Data: ' + FormatFloat('#.00', Pesgo1.ZData[hsd.w1, hsd.w2]);\par
            end;\par
        end;\par
    end;\par
end\par
else if (nChart = 125) AND (bDragging = 1) Then\par
begin\par
    \{** get last mouse location within control **\}\par
    PEvgetW(Pesgo1.hObject, PEP_ptLASTMOUSEMOVE, @pt);\par
\par
    nA := 0;      \{Initialize axis, non-zero only if using MultiAxesSubsets\}\par
    nX := pt.x;   \{Initialize nX and nY with mouse location\}\par
    nY := pt.y;\par
    PEconvpixeltograph(Pesgo1.hObject, @nA, @nX, @nY, @fX, @fY, 0, 0, 0);\par
\par
    //** Check move-to location and restrain to the chart's extents.\par
    //** Note that you can only expect to read valid ManualMinX type\par
    //** properties after an initial PEactions = 0 or PEactions = 1\par
    //** has been executed.\par
    if (fX <= Pesgo1.ManualMinX) then\par
         fX := Pesgo1.ManualMinX\par
    else if (fX >= Pesgo1.ManualMaxX) then\par
         fX := Pesgo1.ManualMaxX;\par
\par
    If (fY <= Pesgo1.ManualMinY) then\par
         fY := Pesgo1.ManualMinY\par
    else if (fY >= Pesgo1.ManualMaxY) then\par
         fY := Pesgo1.ManualMaxY;\par
\par
    //** Change XData and YData to new location **'\par
    Pesgo1.XData[nDragIndexS, nDragIndexP] := fX;\par
    Pesgo1.YData[nDragIndexS, nDragIndexP] := fY;\par
\par
    //** Performs a PEreinitializecustoms, PEresetimage, and InvalidateRect **'\par
    Pesgo1.PEactions := sgReinitCustoms;\par
    Pesgo1.PEactions := sgResetImage;\par
    Pesgo1.PEactions := sgInvalidateImage;\par
\par
    //** Windows functions causes an immediate WM_PAINT to be triggered **'\par
    UpdateWindow(Pesgo1.Handle);\par
end;\par
\par
end;\par
\par
procedure TForm3.Pesgo1MouseUp(Sender: TObject; Button: TMouseButton;\par
  Shift: TShiftState; X, Y: Integer);\par
Var\par
    s: string;\par
    nChart : Integer;\par
begin\par
    \{check to see if a list item has been selected\}\par
    if form1.list1.ItemIndex < 0 then exit;\par
    \{pull the 3 digit number out of the index and convert it to an integer\}\par
    s := form1.list1.items.strings[form1.list1.ItemIndex];\par
    s:=Copy(s,1,3);\par
    nChart := StrToInt(s);\par
\par
    if ((nChart = 110) and (bDragging <> 0)) then\par
    begin\par
      bDragging := 0;\par
      Pesgo1.CursorPromptStyle := Pesgvcl.eCursorPromptStyle.sgXandYValue;\par
      Pesgo1.Invalidate();\par
      Pesgo1.ShowingQuickAnnotations := false;\par
      Pesgo1.HidingQuickAnnotations := true;\par
      //** Windows functions causes an immediate WM_PAINT to be triggered **'\par
      UpdateWindow(Pesgo1.Handle);\par
    end;\par
\par
    bDragging := 0;\par
end;\par
\par
procedure TForm3.Pesgo1CustomMenu(Sender: TObject; MenuIndex,\par
  SubmenuIndex: Integer);\par
\par
Var\par
n : Integer;\par
nMono : Integer;\par
nOrient : Integer;\par
nQS  : eQuickStyle;\par
nBG  : Boolean;\par
\par
begin\par
    if (MenuIndex = 1) Then\par
    begin\par
        // Reverse option //\par
        n := Integer(Pesgo1.CustomMenuState[menuindex, 0]);\par
        if (n = PECMS_UNCHECKED) Then\par
            n := PECMS_CHECKED\par
        else\par
            n := PECMS_UNCHECKED;\par
        Pesgo1.CustomMenuState[menuindex, 0] := eCustomMenuState(n);\par
        exit;\par
    end;\par
\par
    if (MenuIndex = 2) Then\par
    begin\par
        // Option Explicit so first set all to unchecked //\par
        Pesgo1.CustomMenuState[MenuIndex,1] := sgUnChecked;\par
        Pesgo1.CustomMenuState[MenuIndex,2] := sgUnChecked;\par
        Pesgo1.CustomMenuState[MenuIndex,3] := sgUnChecked;\par
\par
        // Next set the selected item //\par
        Pesgo1.CustomMenuState[MenuIndex, SubMenuIndex] := sgChecked;\par
        exit\par
    end;\par
\par
    if (MenuIndex = 3) Then\par
    begin\par
        // Perform the actual print //\par
\par
        // Get Mono/Color menu setting //\par
        nMono := Integer(Pesgo1.CustomMenuState[1, 0]);\par
\par
        // Get Orientation setting //\par
        n := Integer(Pesgo1.CustomMenuState[2, 1]);\par
        if n = 0 Then\par
            nOrient := 2   // Portrait\par
        else\par
            nOrient := 1;  // Landscape\par
\par
        // Save current viewing style type properties //\par
        nQS := Pesgo1.QuickStyle;\par
        nBG := Pesgo1.BitmapGradientMode;\par
\par
        // Set Viewing Style with respect to retrieved menu state //\par
        if (nMono <> 0) Then\par
        begin\par
            Pesgo1.ViewingStyle := sgMonochrome;\par
            PEnset(Pesgo1.hObject, PEP_dwMONOGRAPHBACKCOLOR, 1);\par
\par
            // Make sure white is used as background //\par
            Pesgo1.DeskGradientStyle := sgVerticalGradient;\par
            Pesgo1.DeskGradientStart := Pesgo1.PEargb(255, 255,255,255);\par
            Pesgo1.DeskGradientEnd := Pesgo1.PEargb(255, 255,255,255);\par
\par
            // Make sure white is used as background\par
            Pesgo1.GraphGradientStyle := sgVerticalGradient;\par
            Pesgo1.GraphGradientStart := Pesgo1.PEargb(255, 255,255,255);\par
            Pesgo1.GraphGradientEnd := Pesgo1.PEargb(255, 255,255,255);\par
\par
            // Remove any possible desk bmp //\par
            Pesgo1.DeskBmpStyle := sgNoBmp;\par
        end\par
        else\par
        begin\par
            Pesgo1.ViewingStyle := sgColor;\par
            Pesgo1.GraphBackColor := 1;\par
\par
            // Force a white graph background //\par
            Pesgo1.GraphGradientStyle := sgVerticalGradient;\par
            Pesgo1.GraphGradientStart := Pesgo1.PEargb(255, 255,255,255);\par
            Pesgo1.GraphGradientEnd := Pesgo1.PEargb(255, 255,255,255);\par
        end;\par
\par
        // Set some other properties good for mono printing //\par
        Pesgo1.DataShadows := sgNo3D;\par
        Pesgo1.GridStyle := sgDot;\par
\par
        // Set background bitmap/example logo //\par
        Pesgo1.BitmapGradientMode := True;\par
        Pesgo1.GraphBmpStyle := sgBitBltBottomRight;\par
        Pesgo1.GraphBmpFilename := 'getthep.bmp';\par
\par
        //! Note, GraphBackColor or MonoGraphBackColor is set above //\par
        PEreinitializecustoms(Pesgo1.hObject);\par
\par
        PEprintgraph(Pesgo1.hObject, 0, 0, nOrient);\par
\par
        // Reset properties back to original //\par
        Pesgo1.BitmapGradientMode := nBG;\par
        Pesgo1.QuickStyle := nQS;\par
        Pesgo1.DataShadows := sgWithShadows;\par
        Pesgo1.GridStyle := sgThin;\par
        Pesgo1.ViewingStyle := sgColor;\par
\par
        PEreinitializecustoms(Pesgo1.hObject);\par
        PEresetimage(Pesgo1.hObject, 0, 0);\par
    end;\par
\par
end;\par
\par
procedure TForm3.Pesgo1CustomTrackingDataText(Sender: TObject);\par
Var\par
nChart : Integer;\par
s : String;\par
fX: Double;\par
fY: Double;\par
begin\par
    \{check to see if a list item has been selected\}\par
    if form1.list1.ItemIndex < 0 then exit;\par
    \{pull the 3 digit number out of the index and convert it to an integer\}\par
    s := form1.list1.items.strings[form1.list1.ItemIndex];\par
    s:=Copy(s,1,3);\par
    nChart := StrToInt(s);\par
\par
    if (nChart = 105) then\par
    begin\par
        fX := Pesgo1.CursorValueX;\par
        fY := Pesgo1.CursorValueY;\par
\par
        s := 'X Axis: ' + FormatFloat('#.00', fX) + chr(10);\par
        s := s + 'Y Axis: ' + FormatFloat('#.00', fY) + ' ';\par
\par
        if (fY < 0.0) then\par
        begin\par
            Pesgo1.TrackingTooltipTitle := 'N E G A T I V E ';\par
            Pesgo1.TrackingTooltipBkColor := Pesgo1.PEargb(0, 0, 0, 0);\par
            Pesgo1.TrackingTooltipTextColor := Pesgo1.PEargb(0, 245, 0, 0);\par
        end\par
        else\par
        begin\par
            Pesgo1.TrackingTooltipTitle := 'P O S I T I V E ';\par
            Pesgo1.TrackingTooltipBkColor := Pesgo1.PEargb(0, 50, 50, 50);\par
            Pesgo1.TrackingTooltipTextColor := Pesgo1.PEargb(0, 0, 225, 0);\par
        end;\par
\par
        Pesgo1.TrackingText := s;\par
    end\par
    else if (nChart = 120) then\par
    begin\par
        s := 'X: ' + FormatFloat('#.00', Pesgo1.CursorValueX) + chr(10);\par
        s := s + 'Y: ' + FormatFloat('#.00', Pesgo1.CursorValueY) + chr(10);\par
        s := s + 'Z: ' + FormatFloat('#.00', Pesgo1.CursorValueZ) + ' ';\par
        Pesgo1.TrackingText := s;\par
    end;\par
\par
\par
\par
\par
\par
\par
end;\par
\par
procedure TForm3.Pesgo1CustomGridnumbers(Sender: TObject; nAxisType,\par
  nAxisIndex: Integer; dNumber: Double; szData: PWideChar);\par
var\par
nDays: Integer;\par
nHours: Integer;\par
nMinutes: Integer;\par
nSecs: Integer;\par
dDaysRemainder: Double;\par
dHrsRemainder: Double;\par
dMinRemainder: Double;\par
sTmp: String;\par
begin\par
\par
\tab\tab\tab  if ((nAxisType = 0) And (nCurrentChart = 132)) then  // y axis\par
       begin\par
           // Left Y Axis //\par
           if (dNumber = -400.0) then\par
               StringToWideChar('Low Value', szData, 97)\par
           else if (dNumber = -200.0) then\par
               StringToWideChar('Medium Low Value', szData, 97)\par
           else if (dNumber = 0.0) then\par
               StringToWideChar('Medium Value', szData, 97)\par
           else if (dNumber = 200.0) then\par
               StringToWideChar('Medium High Value', szData, 97)\par
           else if (dNumber = 400.0) then\par
               StringToWideChar('High Value', szData, 97)\par
       end;\par
\par
\tab\tab\tab  if (nCurrentChart = 138) then\par
       begin\par
          nDays := Trunc(dNumber / 86400);\par
          dDaysRemainder := Trunc(dNumber) Mod 86400;\par
\par
          nHours := Trunc(dDaysRemainder / 3600);\par
          dHrsRemainder := Trunc(dDaysRemainder) Mod 3600;\par
\par
          nMinutes := Trunc(dHrsRemainder / 60);\par
          dMinRemainder := Trunc(dHrsRemainder) Mod 60;\par
\par
          nSecs := Trunc(dMinRemainder);\par
\par
          sTmp := Format('%d:%d:%d:%d',[nDays, nHours, nMinutes, nSecs]);\par
          StringToWideChar(sTmp, szData, 97);\par
       end;\par
\par
end;\par
\par
end.\par
\par
}
 