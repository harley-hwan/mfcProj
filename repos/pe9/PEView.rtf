{\rtf1\ansi\deff0{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\f0\fs22\lang1033 // PEView.cpp : implementation file\par
//\par
\par
#include "stdafx.h"\par
#include "PEDemo.h"\par
#include "PEView.h"\par
#include "Pegrpapi.h"\par
#include "math.h"\par
#include <ATLConv.h>\par
#include <fstream>\par
#include <string>\par
#include <sstream>\par
\par
#ifdef _DEBUG\par
//#define new DEBUG_NEW\par
#undef THIS_FILE\par
static char THIS_FILE[] = __FILE__;\par
#endif\par
\par
\par
typedef struct header \par
\{\par
    char Chunk_id[4]; // only RIFF supported\par
    int Length;   \par
    char Format[4];  // only WAVE supported\par
    char ChunkName[4];\par
    int ChunkLength;\par
    short int CompressionCode; \par
    short int NumberOfChannels;\par
    int SampleRate;\par
    int ByteRate; \par
    short int BlockAlign;\par
    short int BitPerSample;\par
\} header;\par
\par
extern DWORD bPlayingSong;\par
extern HWAVEOUT m_hWaveOut; \par
#define BLOCK_SIZE 2048 \par
#define BLOCK_COUNT 5 \par
static WAVEHDR* allocateBlocks(int size, int count);\par
static void freeBlocks(WAVEHDR* blockArray);\par
static void writeAudio(HWAVEOUT hWaveOut, LPSTR data, int size, WAVEHDR*, int*, volatile int* );\par
static CRITICAL_SECTION m_waveCriticalSection;\par
WAVEHDR* allocateBlocks(int size, int count)\par
\{\par
   unsigned char* buffer;  int i; WAVEHDR* blocks;\par
   DWORD totalBufferSize = (size + sizeof(WAVEHDR)) * count;\par
   if((buffer = (unsigned char*) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, totalBufferSize)) == NULL) \{ return 0; \}\par
   blocks = (WAVEHDR*)buffer;\par
   buffer += sizeof(WAVEHDR) * count;\par
   for(i=0; i<count; i++) \par
   \{\par
      blocks[i].dwBufferLength = size;\par
      blocks[i].lpData = (LPSTR) buffer;\par
      buffer += size;\par
   \}\par
   return blocks;\par
\}\par
void freeBlocks(WAVEHDR* blockArray) \{ HeapFree(GetProcessHeap(), 0, blockArray); \}\par
void writeAudio(HWAVEOUT hWaveOut, LPSTR data, int size, WAVEHDR* waveBlocks, int* waveCurrentBlock, volatile int* waveFreeBlockCount)\par
\{\par
    // WaveOut implementation inspired by David Overton's article on PlanetSourceCode from 2002.\par
    // Note our .NET examples use the windows media player dll and require a timer to update where as this logic can update as\par
    // driver is passed wave data. \par
    WAVEHDR* current;\par
    DWORD_PTR remain;\par
    current = &(waveBlocks[*waveCurrentBlock]);\par
    while(size > 0) \par
    \{\par
        if(current->dwFlags & WHDR_PREPARED) \{ waveOutUnprepareHeader(hWaveOut, current, sizeof(WAVEHDR)); \}\par
        if(size < (int)(BLOCK_SIZE - current->dwUser)) \{ memcpy(current->lpData + current->dwUser, data, size); current->dwUser += size; break; \}\par
        remain = BLOCK_SIZE - current->dwUser;\par
        memcpy(current->lpData + current->dwUser, data, remain);\par
        size -= (int) remain; data += remain;\par
        current->dwBufferLength = BLOCK_SIZE;\par
        waveOutPrepareHeader(hWaveOut, current, sizeof(WAVEHDR));\par
        waveOutWrite(hWaveOut, current, sizeof(WAVEHDR));\par
        EnterCriticalSection(&m_waveCriticalSection);\par
        (*waveFreeBlockCount)--;\par
        LeaveCriticalSection(&m_waveCriticalSection);\par
        while(!(*waveFreeBlockCount)) \{ Sleep(10); \}\par
        (*waveCurrentBlock)++;\par
        (*waveCurrentBlock) %= BLOCK_COUNT;\par
        current = &(waveBlocks[*waveCurrentBlock]);\par
        current->dwUser = 0;\par
    \}\par
\}\par
UINT MyThreadProc( LPVOID pParam )\par
\{\par
    BOOL bLocalPlaying = TRUE;\par
    WAVEHDR* m_waveBlocks;\par
    volatile int m_waveFreeBlockCount;\par
    int m_waveCurrentBlock;\par
    HANDLE m_hWaveFile;\par
    WAVEFORMATEX m_wfx; \par
    char m_buffer[1024]; \par
    m_waveBlocks = allocateBlocks(BLOCK_SIZE, BLOCK_COUNT);\par
    if (!m_waveBlocks) \{ return 0; \}\par
    m_waveFreeBlockCount = BLOCK_COUNT; m_waveCurrentBlock = 0;\par
    InitializeCriticalSection(&m_waveCriticalSection);\par
    if((m_hWaveFile = CreateFile(TEXT("triumphantfeelingss.wav"),GENERIC_READ,FILE_SHARE_READ,NULL,OPEN_EXISTING,0,NULL)) == INVALID_HANDLE_VALUE) \{ return 0; \}\par
    DWORD fs, fs2;\par
    fs = GetFileSize(m_hWaveFile, &fs2);\par
    DWORD nDataLength; DWORD nCnt = 0; DWORD readBytes; header h;\par
    ReadFile(m_hWaveFile, &h, sizeof(header), &readBytes, NULL); nCnt += readBytes;\par
    if (h.BitPerSample == 0 || h.NumberOfChannels == 0 || h.BitPerSample != 16) \{ return 0; \}\par
    if (h.ChunkLength > 16)\par
    \{\par
        ReadFile(m_hWaveFile, m_buffer, sizeof(char) * h.ChunkLength - 16, &readBytes, NULL);\par
        nCnt += readBytes;\par
    \}\par
    ReadFile(m_hWaveFile, m_buffer, sizeof(char)*4, &readBytes, NULL); nCnt += readBytes;\par
    ReadFile(m_hWaveFile, &nDataLength, sizeof(DWORD), &readBytes, NULL); nCnt += readBytes;\par
    m_wfx.nSamplesPerSec = 16000;  m_wfx.wBitsPerSample = 16; m_wfx.nChannels = 2; m_wfx.cbSize = 0; \par
    m_wfx.wFormatTag = WAVE_FORMAT_PCM; m_wfx.nBlockAlign = (m_wfx.wBitsPerSample * m_wfx.nChannels) >> 3;\par
    m_wfx.nAvgBytesPerSec = m_wfx.nBlockAlign * m_wfx.nSamplesPerSec;\par
    if(waveOutOpen(&m_hWaveOut, WAVE_MAPPER, &m_wfx, (DWORD_PTR) &CPEView::waveOutProc, (DWORD_PTR)&m_waveFreeBlockCount, CALLBACK_FUNCTION) != MMSYSERR_NOERROR) \par
        return 0;\par
    HWND hParent = (HWND) pParam;\par
    bPlayingSong = 1;\par
    while(bPlayingSong) \par
    \{\par
      if (bPlayingSong != 1)\par
      \{\par
          SetFilePointer(m_hWaveFile, (bPlayingSong * 4) , NULL, FILE_BEGIN);\par
          nCnt = bPlayingSong * 4;\par
          bPlayingSong = 1;\par
      \}\par
      if(!ReadFile(m_hWaveFile, m_buffer, sizeof(m_buffer), &readBytes, NULL)) \{ break; \}\par
      if(readBytes == 0) \{ break; \}\par
      nCnt += readBytes;\par
      if (nCnt >= nDataLength + sizeof(h)) \{break;\}\par
      if(readBytes < sizeof(m_buffer)) \{ memset(m_buffer + readBytes, 0, sizeof(m_buffer) - readBytes); \}\par
      writeAudio(m_hWaveOut, m_buffer, sizeof(m_buffer), m_waveBlocks, &m_waveCurrentBlock, &m_waveFreeBlockCount );\par
      ::PostMessage(hParent, WM_DEMO_SONG_POSITION, 0,(LPARAM)(nCnt / 4));\par
    \}\par
    bPlayingSong = 0;\par
    ::PostMessage(hParent, WM_DEMO_SONG_POSITION, 1, 0);\par
    while(m_waveFreeBlockCount < BLOCK_COUNT)\par
    Sleep(10);\par
    for(int i=0; i<m_waveFreeBlockCount; i++) \par
    if(m_waveBlocks[i].dwFlags & WHDR_PREPARED)\par
    waveOutUnprepareHeader(m_hWaveOut, &m_waveBlocks[i], sizeof(WAVEHDR));\par
    DeleteCriticalSection(&m_waveCriticalSection);\par
    freeBlocks(m_waveBlocks);\par
    waveOutClose(m_hWaveOut);  m_hWaveOut = 0;\par
    CloseHandle(m_hWaveFile);  m_hWaveFile = 0;\par
    return 0;   \par
\}\par
\par
#define GetRandom( min, max ) ((rand() % (int)(((max)+1) - (min))) + (min))\par
\par
#pragma warning( disable : 4244 )\par
#pragma warning(disable:4996) \par
\par
#define TIMER1\tab 1\par
\par
extern TCHAR szDirectory[MAX_PATH];\par
extern BOOL bOsXP;\par
\par
BOOL bDragging = FALSE;\par
long nDragIndexS = 0;\par
long nDragIndexP = 0;\par
\par
double dDragStartX = 0;\par
double dDragStartY = 0;\par
\par
//***************************************************************************\par
// CPEView\par
\par
IMPLEMENT_DYNCREATE(CPEView, CView)\tab\par
\par
void CALLBACK CPEView::waveOutProc(HWAVEOUT hWaveOut, UINT uMsg, DWORD dwInstance, DWORD dwParam1,DWORD dwParam2 )\par
\{\par
    if(uMsg != WOM_DONE)\par
        return;\par
    int* freeBlockCounter = (int*)dwInstance;\par
    EnterCriticalSection(&m_waveCriticalSection);\par
    (*freeBlockCounter)++;\par
    LeaveCriticalSection(&m_waveCriticalSection);\par
\}\par
void CALLBACK CPEView::TimeProc( UINT uID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2)\par
\{\par
    // not using this, just tinkering \par
    // to use, somewhere in code, add m_nMediaTimer = timeSetEvent( 20, 4, &CPEView::TimeProc, (DWORD_PTR) this->m_hWnd, TIME_PERIODIC);\par
    // and respective kill timer logic\par
\}\par
//***************************************************************************\par
LRESULT CPEView::OnDemoSongPosition( WPARAM wp, LPARAM lp )\par
\{\par
    int n;\par
    double d;\par
    TCHAR c[20];\par
    if (wp == 1 && m_nLastSelection == 123 && m_hPE)\par
    \{\par
        PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORIZONTAL);\par
\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, TEXT(" Play"));\par
        DWORD dwCellColor = PERGB(255, 0, 255, 0);\par
        PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 0, &dwCellColor);\par
        ::InvalidateRect(m_hPE, 0, FALSE);\par
    \}\par
\par
    if (bPlayingSong && m_nLastSelection == 123 && m_hPE)\par
    \{\par
        PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_NONE);\par
        // Note, mousewheel zooming is still available, only click and drag zoom is set to none\par
\par
        DWORD dwCellColor = PERGB(255, 255, 0, 0);\par
        PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 0, &dwCellColor);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, TEXT(" Stop"));\par
\par
        int nVType = PELT_MEDIUMSOLID;\par
        double dXLoc = ((double) lp) + 1;\par
        DWORD color = PERGB( 255, 255, 0, 0);\par
        PEvset(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, &nVType, 1);\par
        PEvset(m_hPE, PEP_faVERTLINEANNOTATION, &dXLoc, 1);\par
        PEvset(m_hPE, PEP_dwaVERTLINEANNOTATIONCOLOR, &color, 1 );\par
        int z = 1; PEvset(m_hPE, PEP_naVERTLINEANNOTATIONZOOM, &z, 1 );\par
\par
        PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
        \par
        if (PEnget(m_hPE, PEP_bZOOMMODE))\par
        \{\par
            // Test Left Mouse Button not pressed, user may be dragging ZoomBox and it would be ugly to change scale while dragging chart //\par
            if ((GetKeyState(VK_LBUTTON) & 0x80) == 0)\par
            \{\par
                double dMinX, dMaxX, dRangeX;\par
                PEvget(m_hPE, PEP_fZOOMMINX, &dMinX);\par
                PEvget(m_hPE, PEP_fZOOMMAXX, &dMaxX);\par
\par
                BOOL bChangeXView = FALSE;\par
                if (dXLoc > dMaxX)\par
                    bChangeXView = TRUE;\par
\par
                dRangeX = dMaxX - dMinX;\par
\par
                if (dRangeX < 16000)\par
                \{\par
                    if (bChangeXView)\par
                    \{\par
                        // set new viewing x axis range //\par
                        PEvset(m_hPE, PEP_fZOOMMAXX, &dXLoc, 1);\par
                        dMinX = dXLoc - dRangeX;\par
                        PEvset(m_hPE, PEP_fZOOMMINX, &dMinX, 1);\par
                    \}\par
                    // hide the moving vertical line annotation index 0, line type -1 hides line\par
                    n = -1; PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, 0, &n);\par
                    // add line annotations (index 1 and 2) to create a simple custom x axis, one left one right\par
                    d = dXLoc - dRangeX; PEvsetcell(m_hPE, PEP_faVERTLINEANNOTATION, 1, &d);\par
                    n = PELAT_GRIDTICK; PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, 1, &n);\par
                    _stprintf(c, TEXT("|h%.3f"), d/16000.0F); PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 1, c);\par
                    d = dXLoc; PEvsetcell(m_hPE, PEP_faVERTLINEANNOTATION, 2, &d);\par
                    n = PELAT_GRIDTICK; PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, 2, &n);\par
                    _stprintf(c, TEXT("|h%.3f"), d/16000.0F); PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 2, c);\par
                    PEnset(m_hPE, PEP_nSHOWXAXIS, PESA_EMPTY);\par
                    // set the bottom margin //\par
                    PEszset(m_hPE, PEP_szBOTTOMMARGIN, TEXT("XX"));\par
                \}\par
                else\par
                \{\par
                    if (bChangeXView)\par
                    \{\par
                        // set new viewing x axis range //\par
                        PEvset(m_hPE, PEP_fZOOMMINX, &dXLoc, 1);\par
                        dMaxX = dXLoc + dRangeX;\par
                        PEvset(m_hPE, PEP_fZOOMMAXX, &dMaxX, 1);\par
                    \}\par
                    // Ok to show full x axis //\par
                    PEnset(m_hPE, PEP_nSHOWXAXIS, PESA_ALL);\par
                    // Resize, truncate to just the one moving vertical line annoation\par
                    d = 1.0F; PEvsetcell(m_hPE, PEP_faVERTLINEANNOTATION, -1, &d);\par
                    n = 1.0F; PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, -1, &n);\par
                    lstrcpy(c, TEXT("1")); PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, -1, c);\par
                    // set the first line annotation type to show a medium solid line \par
                    n = PELT_MEDIUMTHINSOLID; PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, 0, &n);\par
                    // remove the bottom margin //\par
                    PEszset(m_hPE, PEP_szBOTTOMMARGIN, TEXT(""));\par
                \}\par
                PEreinitializecustoms(m_hPE); // to cause chart's scrollbars to sync to the new min max values\par
            \}\par
        \}\par
        ::InvalidateRect(m_hPE, 0, FALSE);\par
    \}\par
    return 0;\par
\}\par
\par
CPEView::CPEView() : m_hPE(0), m_nLastSelection(-1), m_pFixedFont(0), m_nTimer(0)\par
\{\par
\par
    m_tmpSongYData  = NULL;// v9.5 This example now demonstrates sharing memory of the app with the chart, no data is transferred or copied.\par
    m_tmpSongXData = NULL;\par
    m_nSongSize = 0;\par
\par
    m_nAnimationViewIndex = 0; // v9.5 example 403 pressing 0,1,2 key animation \par
    m_nCurrentAnnotation = -1;\par
    m_pAnnotationStartIndices = new int[25];\par
\par
    m_nMediaTimer = 0;\par
\par
    m_pGlobalElevData = 0;\par
\tab m_nRealTimeCounter = 0;\par
\tab m_nSinCounter = 0;\par
\tab m_bAntiAliasText = true;\par
\tab m_bAntiAliasGraphics = true;\par
\tab m_nRENDER_GDILEGACYType = PERE_DIRECT2D; // matches example 030 default, the initial chart shown\par
\par
\tab m_pGlobalXData = new float[400000];\par
\par
\tab int j;\par
    for (j = 0; j <= 99999; j++)\par
    \{\par
        m_pGlobalXData[j] = (j + 1) * .01F;\par
        m_pGlobalXData[j + 100000] = (j + 1) * .01F;\par
        m_pGlobalXData[j + 200000] = (j + 1) * .01F;\par
        m_pGlobalXData[j + 300000] = (j + 1) * .01F;\par
    \}\par
\par
\tab m_pGlobalYData = new float[500000];\par
\par
\tab float fShift = (float) GetRandom(1, 90);\par
\tab for (j=0; j<=124999; j++)\par
\tab\tab m_pGlobalYData[j] = (sin(0.003F * (double) j + fShift) * 5.0F) + 10 + (float) GetRandom(1, 100)/10.0F ;\par
\tab fShift = (float) GetRandom(1, 90);\par
\tab for (j=0; j<=124999; j++)\par
\tab\tab m_pGlobalYData[j+125000] = (sin(0.002F * (double) j + fShift) * 5.0F) + 20 + (float) GetRandom(1, 100)/10.0F ;\par
\tab fShift = (float) GetRandom(1, 90);\par
\tab for (j=0; j<=124999; j++)\par
\tab\tab m_pGlobalYData[j+250000] = (sin(0.003F * (double) j + fShift) * 5.0F) + 30 + (float) GetRandom(1, 100)/10.0F ;\par
    fShift = (float) GetRandom(1, 90);\par
\tab for (j=0; j<=124999; j++)\par
\tab\tab m_pGlobalYData[j+375000] = (sin(0.003F * (double) j + fShift) * 5.0F) + 40 + (float) GetRandom(1, 100)/10.0F ;\par
\}\par
\par
CPEView::~CPEView()\par
\{\par
    if (m_pAnnotationStartIndices) \{ delete m_pAnnotationStartIndices; \}\par
\par
    if (m_hPE)\par
    \{\par
        PEdestroy(m_hPE);\par
        m_hPE = 0; \par
    \}\par
\par
\tab if( m_pFixedFont )\par
\tab\tab delete m_pFixedFont;\par
\par
    if (m_pGlobalElevData)\par
        delete m_pGlobalElevData;\par
\par
    if (m_pGlobalXData)\par
        delete m_pGlobalXData;\par
\par
    if (m_pGlobalYData)\par
        delete m_pGlobalYData;\par
\par
    if (m_tmpSongXData) // v9.5 \par
        delete m_tmpSongXData;\par
    if (m_tmpSongYData)\par
        delete m_tmpSongYData;\par
\par
\}\par
\par
BEGIN_MESSAGE_MAP(CPEView, CView)\par
\tab //\{\{AFX_MSG_MAP(CPEView)\par
\tab ON_WM_CREATE()\par
\tab ON_WM_SIZE()\par
\tab ON_WM_ERASEBKGND()\par
\tab ON_WM_TIMER()\par
\tab //\}\}AFX_MSG_MAP\par
\tab ON_MESSAGE( WM_CHANGE_SAMPLE, OnSelectionChanged )\par
\tab ON_MESSAGE( WM_CHANGE_DEMO_RENDERENGINE, OnRENDER_GDILEGACYTypeChanged )\par
\tab ON_MESSAGE( WM_CHANGE_ANTIALIASMODE, OnAntiAliasModeChanged )\par
\tab ON_MESSAGE( WM_DEMO_SONG_POSITION, OnDemoSongPosition )\par
\par
END_MESSAGE_MAP()\par
\par
//***************************************************************************\par
// CPEView diagnostics\par
\par
#ifdef _DEBUG\par
void CPEView::AssertValid() const\par
\{\par
\tab CView::AssertValid();\par
\}\par
\par
void CPEView::Dump(CDumpContext& dc) const\par
\{\par
\tab CView::Dump(dc);\par
\}\par
#endif //_DEBUG\par
\par
//***************************************************************************\par
// CPEView message handlers\par
int CPEView::OnCreate(LPCREATESTRUCT lpCreateStruct) \par
\{\par
    if (CView::OnCreate(lpCreateStruct) == -1)\par
\tab\tab return -1;\par
\tab\par
\tab // Set Default Chart //\par
\tab ChangeGraph( 30 );  \par
\par
\tab return 0;\par
\}\par
\par
void CPEView::OnSize(UINT nType, int cx, int cy) \par
\{\par
\tab CView::OnSize(nType, cx, cy);\par
\tab if( m_hPE )\par
\tab\tab ::MoveWindow( m_hPE, 0, 0, cx, cy, FALSE);\par
\tab\par
\}\par
\par
BOOL CPEView::OnEraseBkgnd(CDC* pDC) \par
\{\par
\tab if(\tab ::IsWindow(m_hPE))\tab\tab\tab   // Don't do anything, prevents the control from flashing.\par
\tab\tab return TRUE;\par
\tab return CView::OnEraseBkgnd(pDC);\par
\par
\}\par
\par
//***************************************************************************\par
LRESULT CPEView::OnSelectionChanged( WPARAM nSampleNumber, LPARAM lparam )\par
\{\par
    if (bPlayingSong)\par
    \{\par
        bPlayingSong = 0;\par
        ::SendMessage(this->m_hWnd, WM_DEMO_SONG_POSITION, 1, 0);\par
    \}\par
\par
\tab ChangeGraph( nSampleNumber );\par
\tab return 1;\par
\}\par
\par
//***************************************************************************\par
LRESULT CPEView::OnRENDER_GDILEGACYTypeChanged( WPARAM nMetaFileType, LPARAM lparam )\par
\{\par
    if (nMetaFileType != m_nRENDER_GDILEGACYType)\par
    \{\par
\tab     m_nRENDER_GDILEGACYType = nMetaFileType;\par
\tab     PEnset(m_hPE, PEP_nRENDERENGINE, m_nRENDER_GDILEGACYType);\par
\par
\tab     PEreinitialize( m_hPE );\par
\tab     PEresetimage( m_hPE, 0, 0 );\par
\tab     Invalidate();\par
    \}\par
\tab return 1;\par
\}\par
\par
//***************************************************************************\par
LRESULT CPEView::OnAntiAliasModeChanged( WPARAM _text, LPARAM _graphics )\par
\{\par
\tab if (_text)\par
\tab\tab m_bAntiAliasText = true;\par
\tab else\par
\tab\tab m_bAntiAliasText = false;\par
\par
\tab if (_graphics)\par
\tab\tab m_bAntiAliasGraphics = true;\par
\tab else\par
\tab\tab m_bAntiAliasGraphics = false;\par
\par
\tab PEnset(m_hPE, PEP_bANTIALIASTEXT, _text);\par
\tab PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, _graphics);\par
\tab PEreinitialize( m_hPE );\par
\tab PEresetimage( m_hPE, 0, 0 );\par
\tab Invalidate();\par
\par
\tab return 1;\par
\}\par
\par
//***************************************************************************\par
void CPEView::ChangeGraph( int nSampleNumber ) \par
\{\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
\par
\tab if( m_nTimer )\par
\tab\{\par
\tab\tab KillTimer( m_nTimer );\par
\tab\tab m_nTimer = 0;\par
\tab\}\par
\par
\tab if( m_hPE )\par
\tab\tab PEdestroy(m_hPE);\par
\par
\tab if( m_nLastSelection != nSampleNumber )\par
\tab\{\par
\tab\tab m_nLastSelection = nSampleNumber;\par
\tab\tab switch( m_nLastSelection )\par
\tab\tab\{\par
\tab\par
\tab\tab\tab // GRAPH OBJECT //\par
\tab\tab\tab case 0:\par
\tab\tab\tab\tab CreateSimpleGraph();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 1:\par
\tab\tab\tab\tab CreateAutoStatGraph();\par
    \tab\tab\tab break;\par
\tab\tab\tab case 2:\par
\tab\tab\tab\tab CreateScrollingSubsetGraph();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 3:\par
\tab\tab\tab\tab CreateRightComparisonSubsetGraph();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 4:\par
\tab\tab\tab\tab CreateSimpleHighLowClose();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 5:\par
\tab\tab\tab\tab CreateCustomYAxis();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 6:\par
\tab\tab\tab\tab CreateNullDataGaps();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 7:\par
\tab\tab\tab\tab CreatePEconvpixeltograph();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 8:\par
\tab\tab\tab\tab CreatePointColors();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 9:\par
\tab\tab\tab\tab CreateBestFitCoeffs();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 10:\par
\tab\tab\tab\tab CreateStackedBar();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 11:\par
\tab\tab\tab\tab CreateMultiSubTitles();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 12:\par
\tab\tab\tab\tab CreateMultiAxesSubsets1();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 13:\par
\tab\tab\tab\tab CreateMultiAxesSubsets2();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 14:\par
\tab\tab\tab\tab CreatePEgethotspot();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 15:\par
\tab\tab\tab\tab CreateGraphAnnotations();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 16:\par
\tab\tab\tab\tab CreateGraphDateTimeHandling();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 17:\par
\tab\tab\tab\tab RealTimeGraph();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 18:\par
\tab\tab\tab\tab CreateUsePEvset();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 19:\par
\tab\tab\tab\tab CreateGraphwithlargedata();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab\par
\tab\tab\tab case 20:\par
\tab\tab\tab\tab GraphRealTime2();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 21:\par
\tab\tab\tab\tab GraphShowingHatching();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 22:\par
\tab\tab\tab\tab GraphMixingPlottingMethods();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 23:\par
\tab\tab\tab\tab GraphShowingBitmapsGradients();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 24:\par
\tab\tab\tab\tab GraphBackgroundBitmap();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 25:\par
\tab\tab\tab\tab GraphFloatingStackedBars();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 26:\par
\tab\tab\tab\tab GraphSimpleTableAnnotation();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 27:\par
\tab\tab\tab\tab GraphStackedTableAnnotations();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 28:\par
\tab\tab\tab\tab GraphTableAnnotationsRealTime();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 29:\par
\tab\tab\tab\tab GraphTableAnnotationTableSpaced();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 30:\par
\tab\tab\tab\tab GraphTableAnnotationHotSpots();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 31:\par
\tab\tab\tab\tab GraphWithObstacles();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 32:\par
\tab\tab\tab\tab GraphWith16Axes();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 33:\par
\tab\tab\tab\tab GraphWithSubsetOrderControl();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 34:\par
\tab\tab\tab\tab GraphWithMoveableTable();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 35:\par
\tab\tab\tab\tab GraphWithDemographicPyramid();\par
\tab\tab\tab\tab break;\par
\par
\tab\tab\tab // SCIENTIFIC GRAPH OBJECT //\par
\tab\tab\tab case 100:\par
\tab\tab\tab\tab CreateSimpleSGraph();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 101:\par
\tab\tab\tab\tab SGWithLineAnnotations();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 102:\par
\tab\tab\tab\tab CreatePEvsetEx();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 103:\par
\tab\tab\tab\tab CreateOverlapedMultiAxes1();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 104:\par
\tab\tab\tab\tab CreateOverlapedMultiAxes2();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 105:\par
\tab\tab\tab\tab CreateDataCursor();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 106:\par
\tab\tab\tab\tab CreateSGraphDateTimeHandling();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 107:\par
\tab\tab\tab\tab CreateSGraphRectSelector();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 108:\par
\tab\tab\tab\tab CreateSGraphInvertedYAxis();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 109:\par
\tab\tab\tab\tab CreateSGraphAxisFormatting();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 110:\par
\tab\tab\tab\tab CreateSGraphLogAxes();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 111:\par
\tab\tab\tab\tab CreateSGraphFinancialScaling();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 112:\par
\tab\tab\tab\tab CreateSGraphManualMinMaxY();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 113:\par
\tab\tab\tab\tab CreateSGraphManualLineDensity();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 114:\par
\tab\tab\tab\tab CreateSGraphDoublePrecisionData();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 115:\par
\tab\tab\tab\tab CreateSGraphRealTime1();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 116:\par
\tab\tab\tab\tab CreateSGraphRealTime2();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 117:\par
\tab\tab\tab\tab CreateSGraphRealTime3();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 118:\par
\tab\tab\tab\tab CreateSGraphRealTime4();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 119:\par
\tab\tab\tab\tab CreateSGraphRealTime5();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 120:\par
\tab\tab\tab\tab CreateSGraph2DContour1();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 121:\par
\tab\tab\tab\tab CreateSGraph2DContour2();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 122:\par
\tab\tab\tab\tab CreateSGraph2DContour3();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 123:\par
\tab\tab\tab\tab CreateSGraphLargeData();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 124:\par
\tab\tab\tab\tab CreateSGraphProgrammaticZoom();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 125:\par
\tab\tab\tab\tab CreateSGraphScatterPlusDrag();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 126:\par
\tab\tab\tab\tab SGraphBubbleChart();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 127:\par
\tab\tab\tab\tab SGraphCustomMenus();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 128:\par
\tab\tab\tab\tab SGraphPartialAxes();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 129:\par
\tab\tab\tab\tab SGraphVerticalGridNumbers();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 130:\par
\tab\tab\tab\tab SGraphExtraXAxes();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 131:\par
\tab\tab\tab\tab SGraphGridAspect();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 132:\par
\tab\tab\tab\tab SGraphCustomGridNumberFormatting();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 133:\par
\tab\tab\tab\tab SGraphUsingPointTypesPointColors();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 134:\par
\tab\tab\tab\tab SGraphWithCleanAxes();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 135:\par
\tab\tab\tab\tab CreateSGraphDateTimeHandling2();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 136:\par
\tab\tab\tab\tab CreateSGraphHighLowArea();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 137:\par
\tab\tab\tab\tab CreateSGraphErrorBars();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 138:\par
\tab\tab\tab\tab CreateSGraphRealTime6();\par
\tab\tab\tab\tab break;\par
            case 139:\par
                CreateSGraphHeatmap();\par
                break;\par
\par
\tab\tab\tab\tab // POLAR / SMITH OBJECT //\par
\tab\tab\tab case 200:\par
\tab\tab\tab\tab CreateSimplePolar();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 201:\par
\tab\tab\tab\tab PChartPGrid();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 202:\par
\tab\tab\tab\tab PChartBiPolarGrid();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 203:\par
\tab\tab\tab\tab PChartSmithChart();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 204:\par
\tab\tab\tab\tab PChartRose();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 205:\par
\tab\tab\tab\tab PChartFancyTicks();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 206:\par
\tab\tab\tab\tab PChartWithAnnotations();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab\par
\tab\tab\tab // PIE CHART OBJECT //\par
\tab\tab\tab case 300:\par
\tab\tab\tab\tab CreateSimplePie();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 301:\par
\tab\tab\tab\tab PCExploded();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 302:\par
\tab\tab\tab\tab PCNewLegend();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 303:\par
\tab\tab\tab\tab PCWithHatching();\par
\tab\tab\tab\tab break;\par
\par
\tab\tab\tab // 3D SCIENTIFIC GRAPH OBJECT //\par
\tab\tab\tab case 400:\par
\tab\tab\tab\tab Create3DSimpleWireFrame();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 401:\par
\tab\tab\tab\tab CreateLargeSurfaceFlattenedFlyBy();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 402:\par
\tab\tab\tab\tab Create3DContouredSurface();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 403:\par
\tab\tab\tab\tab Create3DCustomPolygonColors();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 404:\par
\tab\tab\tab\tab Create3DScatterChart();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 405:\par
\tab\tab\tab\tab Create3DBarChart();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 406:\par
\tab\tab\tab\tab Create3DPolygonData();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 407:\par
\tab\tab\tab\tab Create3DWaterfall();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 408:\par
\tab\tab\tab\tab Create3DLargeShadedSurface();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 409:\par
\tab\tab\tab\tab Create2DContourWithShadow();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 410:\par
\tab\tab\tab\tab Create3DSurfaceRealtime();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 411:\par
\tab\tab\tab\tab Create3DScatterWaterfallRealtime();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 412:\par
\tab\tab\tab\tab Create3DBarRealtime();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab case 413:\par
\tab\tab\tab\tab Create2DLineRealtime();\par
\tab\tab\tab\tab break;\par
\tab\tab\tab default:\par
\tab\tab\tab\tab if( m_hPE )\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab PEdestroy(m_hPE);\par
\tab\tab\tab\tab\tab Invalidate();\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab break;\par
\tab\tab\}\par
\par
\tab\tab PEnset(m_hPE, PEP_bANTIALIASTEXT, m_bAntiAliasText);\par
\tab\tab PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, m_bAntiAliasGraphics);\par
\tab\tab PEnset(m_hPE, PEP_nRENDERENGINE, m_nRENDER_GDILEGACYType);\par
\par
\tab\tab PEreinitialize( m_hPE );\par
\tab\tab PEresetimage( m_hPE, 0, 0 );\par
\tab\}\par
\par
\tab CWnd* pParent = GetParent()->GetParent();\par
\tab if (pParent) \{pParent->SetWindowText(TEXT(" Thank you! "));\}\par
\par
\tab pParent = AfxGetMainWnd();\par
\tab if (pParent) \{pParent->SetWindowText(TEXT("ProEssentials v9"));\}\par
\}\par
\par
//***************************************************************************\par
//000  //* Simple Graph //*\par
void CPEView::CreateSimpleGraph()\par
\{\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. // \par
\par
    // Simple example show the basics of a graph object. //\par
    // Graph's generally only contain YData because we assume\par
    // data is plotted equally spaced left to right.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_GRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
    if (m_hPE) \par
    \{\par
        PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);  // v9\par
\par
        // Enable Bar Glass Effect //\par
        PEnset(m_hPE, PEP_bBARGLASSEFFECT, TRUE);\par
\par
        // Enable Plotting style gradient and bevel features //\par
        PEnset(m_hPE, PEP_nAREAGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
        PEnset(m_hPE, PEP_nAREABEVELSTYLE, PEBS_MEDIUM_SMOOTH);\par
        PEnset(m_hPE, PEP_nSPLINEGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
        PEnset(m_hPE, PEP_nSPLINEBEVELSTYLE, PESBS_MEDIUM_SMOOTH);\par
\par
        // v7.2 new features //\par
        PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
        PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
        PEnset(m_hPE, PEP_nLINESYMBOLTHICKNESS, 3);\par
        PEnset(m_hPE, PEP_nAREABORDER, 1);\par
        PEnset(m_hPE, PEP_bALLOWSVGEXPORT, 1);\par
\par
        // Prepare images in memory //\par
        PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
\par
        // Pass Data //\par
        PEnset(m_hPE, PEP_nSUBSETS, 4);\par
        PEnset(m_hPE, PEP_nPOINTS, 12);\par
\par
        float fY;\par
        for (int s=0; s<=3; s++)\par
        \{\par
            for (int p=0; p<=11; p++)\par
            \{\par
                fY = (((float) (p + 1)) * 50.0F) + ((float) GetRandom(2, 250)) + 700.0F - ((float) (s * 140.0F)) + ((float) GetRandom(2, 250)) / 250.0F;\par
                PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &fY);\par
            \}\par
        \}\par
\par
        PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
        PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
        PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_AREA);\par
        PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
        PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
        PEnset(m_hPE, PEP_bALLOWRIBBON, TRUE);\par
        PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
        PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
        // Enable middle mouse dragging //\par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
        PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Units Sold per Month"));\par
        PEszset(m_hPE, PEP_szSUBTITLE, TEXT("")); \par
        PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Units Sold"));\par
        PEszset(m_hPE, PEP_szXAXISLABEL, TEXT("Month"));\par
\par
        // subset labels //\par
        PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("Texas"));\par
        PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Florida" ));\par
        PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 2, TEXT("Washington" ));\par
        PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 3, TEXT("California" ));\par
\par
        // point labels //\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 0, TEXT("January" ));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 1, TEXT("February" ));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 2, TEXT("March" ));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 3, TEXT("April" ));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 4, TEXT("May" ));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 5, TEXT("June" ));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 6, TEXT("July" ));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 7, TEXT("August" ));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 8, TEXT("September" ));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 9, TEXT("October" ));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 10, TEXT("November" ));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 11, TEXT("December" ));\par
\par
        // subset colors //\par
        DWORD dwArray[4] = \{ PERGB(128,198,0,0), PERGB(128,0, 198, 198 ), PERGB(128,198,198,0 ), PERGB(128,0,198,0 ) \};\par
        PEvsetEx(m_hPE, PEP_dwaSUBSETCOLORS, 0, 4, dwArray, 0);\par
\par
        // subset line types //\par
        int nLineTypes[] = \{ PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, \par
            PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, \par
            PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, PELT_MEDIUMSOLID\};\par
        PEvset(m_hPE, PEP_naSUBSETLINETYPES, nLineTypes, 8);\par
\par
        // subset point types //\par
        int nPointTypes[] = \{ PEPT_DOTSOLID, PEPT_UPTRIANGLESOLID, \par
            PEPT_SQUARESOLID, PEPT_DOWNTRIANGLESOLID, PEPT_DOTSOLID, \par
            PEPT_SQUARESOLID, PEPT_DIAMONDSOLID, PEPT_UPTRIANGLESOLID \};\par
        PEvset(m_hPE, PEP_naSUBSETPOINTTYPES, nPointTypes, 8);\par
\par
        PEnset(m_hPE, PEP_bSIMPLEPOINTLEGEND, TRUE);\par
        PEnset(m_hPE, PEP_bSIMPLELINELEGEND, TRUE);\par
        PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE);\par
\par
        // Allow stacked type graphs //\par
        PEnset(m_hPE, PEP_bNOSTACKEDDATA, FALSE);\par
\par
        // Various other features //\par
        PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
        PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
        PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
        PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
        PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
        PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
        PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
        PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
\par
        PEnset(m_hPE, PEP_nDATAPRECISION, 1);\par
        PEnset(m_hPE, PEP_nGRAPHPLUSTABLE, PEGPT_BOTH);\par
        PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
\par
        PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 20);\par
        PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 20);\par
        PEnset(m_hPE, PEP_nIMAGEADJUSTTOP, 10);\par
\par
        // Set export defaults //\par
        PEnset(m_hPE, PEP_nDPIX, 600);\par
        PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
        PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
        PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
        PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
        PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
        PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
        PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
        // These get set as part of demo controls, but your code will likely use\par
        //PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
        //PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, TRUE);  \par
        //PEnset(m_hPE, PEP_bANTIALIASTEXT, TRUE);\par
\par
        // Set Demo's RenderEngine to Direct2D // \par
        CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX, 0 );\par
    \}\par
\}\par
\par
//***************************************************************************\par
//001  Graph With Auto Statistical Subsets\par
void CPEView::CreateAutoStatGraph()\par
\{    \par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Below tells object to automatically generate statistical\par
    // comparison subsets, object will actually have\par
    // 6 subsets when finished initializing.\par
    int nArray[2];\par
    nArray[0] = PEAS_AVGAP;\par
    nArray[1] = PEAS_AVGPP;\par
    PEvset (m_hPE, PEP_naAUTOSTATSUBSETS, nArray, 2);\par
\par
    // Other various properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_LINE);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_INSIDE_AXIS);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSLINE);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
\tab\par
\}\par
\par
//***************************************************************************\par
//002  Graph With Permanent and Scrolling Subsets\par
void CPEView::CreateScrollingSubsetGraph()\par
\{    \par
    //! Scroll vertical scroll bar to revolve subsets. //\par
\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // tells object to automatically generate statistical\par
    // comparison subsets, the object will have\par
    // 6 subsets when finished reinitializing.\par
    int nArray[2];\par
    nArray[0] = PEAS_AVGAP;\par
    nArray[1] = PEAS_AVGPP;\par
\par
    PEvset (m_hPE, PEP_naAUTOSTATSUBSETS, nArray, 2);\par
\par
    // Since we are scrolling subsets one at a time,\par
    // we can set the PEAS_AVGAP and PEAS_AVGPP subsets as\par
    // permanent. This allows individual subsets to be\par
    // compared to the averages of all points.\par
    nArray[0] = 4;  // fourth subset\par
    nArray[1] = 5;  // fifth subset\par
    PEvset(m_hPE, PEP_naRANDOMSUBSETSTOGRAPH, nArray, 2);\par
\par
    // If we comment this line out, you will only see the\par
    // 5th and 6th subset selected above. RandomSubsetsToGraph\par
    // will either control which subset you see or which\par
    // subsets are permanent if ScrollingSubsets is non-zero.\par
    PEnset(m_hPE, PEP_nSCROLLINGSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nTABLEWHAT, PETW_ALLSUBSETS);\par
\par
    // Add a table //\par
    PEnset(m_hPE, PEP_nGRAPHPLUSTABLE, PEGPT_BOTH);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 0);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
\par
    // Other various properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_NO_BORDER);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_INSIDE_AXIS);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSLINE);\par
    PEnset(m_hPE, PEP_nBESTFITDEGREE, PEBFD_4TH);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_3D);\par
\par
\}\par
\par
//***************************************************************************\par
//003 Graph With Right Y Axis Comparison Subsets\par
void CPEView::CreateRightComparisonSubsetGraph()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Set plotting method to Bar //3\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
\par
    // Designate last 2 subsets as right y axis comparison subsets\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 2);\par
\par
    // Set Comparison PlottingMethod\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSLINE);\par
\par
    // Label Right Y Axis //\par
    TCHAR szBuf[] = TEXT("Expected");\par
    PEszset(m_hPE, PEP_szRYAXISLABEL, szBuf);\par
\par
    // Other various properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    DWORD dwColors[] = \{PERGB( 128,100, 0, 0), PERGB( 128,0, 100, 100), PERGB( 128,198, 198, 0), PERGB( 128,0, 198, 0) \};\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwColors, 4);\par
\}\par
\par
//***************************************************************************\par
//004 Graph showing simple high-low-close\par
void CPEView::CreateSimpleHighLowClose()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Set PlottingMethod and SpecificPlotMode Type //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_SPECIFICPLOTMODE);\tab\par
    PEnset(m_hPE, PEP_nSPECIFICPLOTMODE, PESPM_HIGHLOWCLOSE);\tab\par
\par
    // setting this true causes high-low-close to be multi colored\par
    PEnset(m_hPE, PEP_bSPECIFICPLOTMODECOLOR, TRUE);\par
\par
    // Change Data to something more appropriate //\par
    PEnset(m_hPE, PEP_nSUBSETS, 3);\tab\tab // set number of subsets\par
    PEnset(m_hPE, PEP_nPOINTS, 12);\tab\tab // number of data points\par
\par
    // Pass YData, Line Start, Line End, and Close Value // \par
    float faYdata[3][12];\par
    srand( (unsigned)time( NULL ) );\par
\par
    for( int s=0; s<3; s++ )\par
    \{\par
        for( int p=0; p<12; p++ )\par
        \{\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab   \par
            if( s == 0 )\par
            \{\par
                faYdata[s][p] = (float) ((p + 1) * 10 + ( GetRandom(0,1) ));\par
                PEvsetcellEx (m_hPE, PEP_faYDATA, s, p, &faYdata[s][p]);\par
            \}\par
            else if( s == 1 )\par
            \{\par
                faYdata[s][p] = (float)((p + 1) * 40 + ( GetRandom(0,1) ));\par
                PEvsetcellEx (m_hPE, PEP_faYDATA, s, p, &faYdata[s][p]);\par
            \}\par
            else if( s == 2 )\par
            \{\par
                faYdata[s][p] = (float)((p + 1) * 20 + ( GetRandom(0,1) ));\par
                PEvsetcellEx (m_hPE, PEP_faYDATA, s, p, &faYdata[s][p]);\par
            \}\par
        \}\par
    \}\par
\}\par
\par
//***************************************************************************\par
//005  Graph With Custom Y Axis\par
void CPEView::CreateCustomYAxis()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Change to Spline //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_SPLINEAREA);\par
\par
    // Disable default scale //\par
    PEnset(m_hPE, PEP_nSHOWYAXIS, PESA_EMPTY);\par
\par
    // Generally, a custom y axis will need manual range control //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
\par
    double manminY = 0.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &manminY, 1);\par
\par
    double manmaxY = 1500.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &manmaxY, 1);\par
\par
    // Create custom grid lines with HorzLineAnnotations //\par
    // Note that GridLineControl will control these annotations //\par
    double horzlineannot = 200.0F;\par
    PEvsetcell(m_hPE, PEP_faHORZLINEANNOTATION, 0, &horzlineannot);\par
    int horzlinetyp = PELAT_GRIDLINE;\par
    PEvsetcell(m_hPE, PEP_naHORZLINEANNOTATIONTYPE, 0, &horzlinetyp);\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 0, TEXT("|LLow Value"));\par
\par
    horzlineannot = 500.0F;\par
    PEvsetcell(m_hPE, PEP_faHORZLINEANNOTATION, 1, &horzlineannot);\par
    horzlinetyp = PELAT_GRIDLINE;\par
    PEvsetcell(m_hPE, PEP_naHORZLINEANNOTATIONTYPE, 1, &horzlinetyp);\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 1, TEXT("|LMedium Value"));\par
\par
    horzlineannot = 800.0F;\par
    PEvsetcell(m_hPE, PEP_faHORZLINEANNOTATION, 2, &horzlineannot);\par
    horzlinetyp = PELAT_GRIDLINE;\par
    PEvsetcell(m_hPE, PEP_naHORZLINEANNOTATIONTYPE, 2, &horzlinetyp);\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 2, TEXT("|LHigh Value"));\par
\par
    horzlineannot = 350.0F;\par
    PEvsetcell(m_hPE, PEP_faHORZLINEANNOTATION, 3, &horzlineannot);\par
    horzlinetyp = PELAT_GRIDTICK;\par
    PEvsetcell(m_hPE, PEP_naHORZLINEANNOTATIONTYPE, 3, &horzlinetyp);\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 3, TEXT(""));\par
\par
    horzlineannot = 650.0F;\par
    PEvsetcell(m_hPE, PEP_faHORZLINEANNOTATION, 4, &horzlineannot);\par
    horzlinetyp = PELAT_GRIDTICK;\par
    PEvsetcell(m_hPE, PEP_naHORZLINEANNOTATIONTYPE, 4, &horzlinetyp);\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 4, TEXT(""));\par
\par
    // Set LeftMargin to allocate space for line annotation text //\par
    // Use the longest string used in annotations.\par
\par
    PEszset(m_hPE, PEP_szLEFTMARGIN, TEXT("Medium Value "));\par
\par
    // Set this to see annotations //\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
\par
    // Increase line annotation text size //\par
    PEnset(m_hPE, PEP_nLINEANNOTATIONTEXTSIZE, 100);\par
\par
    // Put Grid In Front of Bars //\par
    PEnset(m_hPE, PEP_bGRIDINFRONT, TRUE);\par
\par
    // Other various properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_INSET);\par
\par
\}\par
\tab\par
//***************************************************************************\par
//006  Graph showing use of Null Data Gaps\par
void CPEView::CreateNullDataGaps()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Change Null Data Value //\par
    // Note that Scientific Graph has NullDataValueX and NullDataValueY //\par
    double nulldataval = -9999.0F;\par
    PEvset(m_hPE, PEP_fNULLDATAVALUE, &nulldataval, 1);\par
\par
    // Change to two subsets and set a few data points to nulls //\par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\par
\par
    float f1 = -9999.0F;\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 3, &f1);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 4, &f1);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 5, &f1);\par
\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 1, 5, &f1);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 1, 7, &f1);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 1, 9, &f1);\par
\par
    // Set line Plotting Method //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
\par
    // Enable Null Data Gaps //\par
    // Using NullDataGaps, the subset's line will stop before null data values //\par
    // If this line is commented out, then line will extend to next non-null //\par
    PEnset(m_hPE, PEP_bNULLDATAGAPS, TRUE); \par
\par
    // Other various properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_INSET);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
\par
\}\par
\par
//***************************************************************************\par
//007  Graph showing use of PEconvpixeltograph\par
void CPEView::CreatePEconvpixeltograph()\par
\{\par
    //! Look at main TitleBar.  As you move mouse, see the coordinates of the\par
    //! mouse in the titlebar.  \par
\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    \par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Other various properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_SHADOW);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINT);\par
\par
    // Set last 1 subset to right y axis \par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_LINE);\par
\par
    // Set cursor related properties \par
    // v9 feature\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_YVALUE);\par
    PEnset(m_hPE, PEP_bTRACKINGCUSTOMDATATEXT, TRUE);\par
\par
    PEnset(m_hPE, PEP_nCURSORMODE, PECM_DATACROSS);\par
\par
    // This will allow you to move cursor by clicking data point //\par
    PEnset(m_hPE, PEP_bMOUSECURSORCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
\par
    // No need to actually click data point, click close to the data point //\par
    // v9 feature\par
    PEnset(m_hPE, PEP_bMOUSECURSORCONTROLCLOSESTPOINT, TRUE);\par
\par
    ////////////////////////////////////////////////\par
    // From OnCommand which handles notifications //\par
    //////////////////////////////////////////////// \par
/*\par
    if ((m_nLastSelection == 7) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
    \{\par
        int nA, nX, nY;\par
        double fX, fY;\par
        POINT pt;\par
        RECT r;\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        // test to see if this is within grid area //\par
        PEvget(m_hPE, PEP_rectGRAPH, &r);\par
        if ((pt.x > r.left) && (pt.x < r.right) && (pt.y > r.top) && (pt.y < r.bottom))\par
        \{    \par
            nA = 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
            nX = pt.x;   //Initialize nX and nY with mouse location\par
            nY = pt.y;\par
            PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
            TCHAR  buffer[48]; \par
            _stprintf(buffer, TEXT("%.2f : %.2f"), fX, fY);\par
\par
            CWnd* pParent = GetParent()->GetParent();\par
            if (pParent) \{pParent->SetWindowText(buffer);\}\par
\par
            pParent = AfxGetMainWnd();\par
            if (pParent) \{pParent->SetWindowText(TEXT("PEconvpixeltograph"));\}\par
        \}\par
        else\par
        \{\par
            CWnd* pParent = GetParent()->GetParent();\par
            if (pParent) \{pParent->SetWindowText(TEXT("Outside Grid"));\}\par
\par
            pParent = AfxGetMainWnd();\par
            if (pParent) \{pParent->SetWindowText(TEXT("PEconvpixeltograph"));\}\par
        \}\par
        return TRUE;\par
    \}\par
    else if ((m_nLastSelection == 7) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))\par
    \{\par
        if (PEnget(m_hPE, PEP_nTRACKINGPROMPTTRIGGER) == PETPT_MOUSEMOVE)\par
        \{\par
            int nA, nX, nY;\par
            double fX, fY, fRY;\par
            POINT pt;\par
            RECT r;\par
\par
            // get last mouse location within control //\par
            PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
            // test to see if this is within grid area //\par
            PEvget(m_hPE, PEP_rectGRAPH, &r);\par
            if ((pt.x > r.left) && (pt.x < r.right) && (pt.y > r.top) && (pt.y < r.bottom))\par
            \{    \par
                nA = 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
                nX = pt.x;   //Initialize nX and nY with mouse location\par
                nY = pt.y;\par
\tab\tab\tab\tab\par
                // read the left y axis value\par
                PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, FALSE, 0, 0);\par
\par
                // read the right y axis value \par
                PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fRY, TRUE, 0, 0);\par
\par
                TCHAR  buffer[48]; \par
                _stprintf(buffer, TEXT("Left Y <- %.2f : %.2f -> Right Y"), fY, fRY);\par
\par
                PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
            \}\par
        \}\par
        else\par
        \{\par
            // Not a MouseMove, must be a CursorMove trigger \par
            int nSubset, nPoint;\par
            float fY;\par
            TCHAR buffer[48];\par
\par
            nSubset = PEnget(m_hPE, PEP_nCURSORSUBSET);\par
            nPoint = PEnget(m_hPE, PEP_nCURSORPOINT);\par
\par
            PEvgetcellEx(m_hPE, PEP_faYDATA, nSubset, nPoint, &fY);\par
\par
            if (nSubset < 3)\par
                _stprintf(buffer, TEXT("Left Y <- %.2f"), fY);\par
            else\par
                _stprintf(buffer, TEXT("%.2f -> Right Y"), fY);\par
            PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
        \}\par
        return TRUE;\par
    \}\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
//008  Graph showing use of PointColors\par
void CPEView::CreatePointColors()\par
\{\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Vertical scroll bar revolves through subsets. //\par
\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    DWORD color;\par
    // Now to control color on per point basis, we use the\par
    // PointColors property array to assign a color to each\par
    // piece of YData. \par
    for (int s=0;s<=3;s++)  //4-1\par
    \{    \par
        for (int p=0;p<=11;p++)\par
        \{\par
            switch(s)\par
            \{    \par
            case 0:\par
                color = PERGB( 55, 15 + ((p + 1) * 20), 0, 0);  \par
                PEvsetcellEx(m_hPE, PEP_dwaPOINTCOLORS, s, p, &color);\par
                break;\par
            case 1:\par
                color = PERGB( 55, 0, 15 + ((p + 1) * 20), 0);\par
                PEvsetcellEx(m_hPE, PEP_dwaPOINTCOLORS, s, p, &color);\par
                break;\par
            case 2:\par
                color =  PERGB( 55, 0, 0, 15 + ((p + 1) * 20));\par
                PEvsetcellEx(m_hPE, PEP_dwaPOINTCOLORS, s, p, &color);\par
                break;\par
            case 3:\par
                color = PERGB( 55, 0, 15 + ((p + 1) * 20), 15 + ((p + 1) * 20));\par
                PEvsetcellEx(m_hPE, PEP_dwaPOINTCOLORS, s, p, &color);\par
                break;\par
            default:\par
                break;\par
            \}\par
        \}\par
    \}\par
\par
    // Set SubsetColor to match brightest PointColor for each subset //\par
    color = PERGB( 55, 198, 0, 0);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &color);\par
\par
    color = PERGB( 55, 0, 198, 0);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 1, &color);\par
\par
    color = PERGB( 55, 0, 0, 198);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 2, &color);\par
\par
    color = PERGB( 55, 0, 198, 198);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 3, &color);\par
\par
    // Show 1 subset at a time //\par
    PEnset(m_hPE, PEP_nSCROLLINGSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nTABLEWHAT, PETW_ALLSUBSETS);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
\par
    // Change some colors //\par
    PEnset(m_hPE, PEP_dwGRAPHBACKCOLOR, 1);\par
    PEnset(m_hPE, PEP_nGRAPHGRADIENTSTYLE, 0);\par
    PEnset(m_hPE, PEP_dwSHADOWCOLOR, PERGB( 255,0, 0, 0));\par
\par
    // Add a table //\par
    PEnset(m_hPE, PEP_nGRAPHPLUSTABLE, PEGPT_BOTH);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 0);\par
\par
    // Slant the Point Labels //\par
    PEnset(m_hPE, PEP_nFORCEVERTICALPOINTS, PEFVP_SLANTED);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_3D);\par
    PEnset(m_hPE, PEP_nBARBEVELSTYLE, PEBS_THICK_SMOOTH);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_INSET);\par
\par
\}\par
\par
//***************************************************************************\par
//009  Graph showing use of BestFitCoeffs\par
void CPEView::CreateBestFitCoeffs()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_NONE);\par
\par
    // Reduce to just two subsets //\par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\par
\par
    // Set BestFitDegree and Plotting Method //\par
    PEnset(m_hPE, PEP_nBESTFITDEGREE, PEBFD_3RD);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSBFC);\par
\par
    // Call PEreinitialize and PEresetimage //\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE,0,0);\par
\par
    // Now add annotations that represents coefficients //\par
\par
    // First subset's coeffs. //\par
    TCHAR charbuff[128];\par
    TCHAR tempbuff[128];\par
    double c1;\par
    PEvgetcell(m_hPE, PEP_faBESTFITCOEFFS, 3, &c1);\par
    _stprintf(tempbuff, TEXT("%.4f"), c1);\par
    lstrcpy(charbuff, TEXT("Texas y = ")); \par
    lstrcat(charbuff, tempbuff);\tab\par
    lstrcat(charbuff, TEXT("x^3 "));\par
\par
    PEvgetcell(m_hPE, PEP_faBESTFITCOEFFS, 2, &c1);\par
    if(c1 != 0)\par
    \{\par
        if(c1 >=0) lstrcat(charbuff, TEXT("+ "));\par
        _stprintf(tempbuff, TEXT("%.4f"), c1);\par
        lstrcat(charbuff, tempbuff);\par
        lstrcat(charbuff, TEXT("x^2 "));\par
    \}\par
\par
    PEvgetcell(m_hPE, PEP_faBESTFITCOEFFS, 1, &c1);\par
    if(c1 != 0)\par
    \{\par
        if(c1 >=0) lstrcat(charbuff, TEXT("+ "));\par
        _stprintf(tempbuff, TEXT("%.4f"), c1);\par
        lstrcat(charbuff, tempbuff); \par
        lstrcat(charbuff, TEXT("x "));\par
    \}\par
\par
    PEvgetcell(m_hPE, PEP_faBESTFITCOEFFS, 0, &c1);\par
    if(c1 != 0)\par
    \{\par
        if(c1 >=0) lstrcat(charbuff, TEXT("+ "));\par
        _stprintf(tempbuff, TEXT( "%.4f"), c1);\par
        lstrcat(charbuff, tempbuff); \par
    \}\par
    lstrcat(charbuff, TEXT("\\n")); //Line feed\par
\par
    // Second subset's coeffs. //\par
    PEvgetcell(m_hPE, PEP_faBESTFITCOEFFS, 13, &c1);\par
    _stprintf(tempbuff, TEXT("%.4f"), c1);\par
    lstrcat(charbuff, TEXT("Florida y = ")); \par
    lstrcat(charbuff, tempbuff);\tab\par
    lstrcat(charbuff, TEXT("x^3 "));\par
\par
    PEvgetcell(m_hPE, PEP_faBESTFITCOEFFS, 12, &c1);\par
    if(c1 != 0)\par
    \{\par
        if(c1 >=0) lstrcat(charbuff, TEXT("+ "));\par
        _stprintf(tempbuff, TEXT("%.4f"), c1);\par
        lstrcat(charbuff, tempbuff); \par
        lstrcat(charbuff, TEXT("x^2 "));\par
    \}\par
\par
    PEvgetcell(m_hPE, PEP_faBESTFITCOEFFS, 11, &c1);\par
    if(c1 != 0)\par
    \{\par
        if(c1 >=0) lstrcat(charbuff, TEXT("+ "));\par
        _stprintf(tempbuff,TEXT( "%.4f"), c1);\par
        lstrcat(charbuff, tempbuff); \par
        lstrcat(charbuff, TEXT("x "));\par
    \}\par
\par
    PEvgetcell(m_hPE, PEP_faBESTFITCOEFFS, 10, &c1);\par
    if(c1 != 0)\par
    \{\par
        if(c1 >=0) lstrcat(charbuff, TEXT("+ "));\par
        _stprintf(tempbuff, TEXT("%.4f"), c1);\par
        lstrcat(charbuff, tempbuff);\par
    \}\par
\par
    // Put text into a line annotation //\par
    double lpvdest;\par
    int lat = -1; // line annotation type of -1 means place text only\par
\par
    PEvget(m_hPE, PEP_fMANUALMAXY, &lpvdest); // determine location of maximum y range\par
    lpvdest -= 1; // reduce annotation location slightly so that annotation does not get clipped.\par
\par
    // Set annotation properties for location, type, and text //\par
    PEvsetcell(m_hPE, PEP_faHORZLINEANNOTATION, 0, &lpvdest);\par
    PEvsetcell(m_hPE, PEP_naHORZLINEANNOTATIONTYPE, 0, &lat);\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 0, &charbuff);\par
\par
    // Increases line annotation text size to max\par
    PEnset(m_hPE, PEP_nLINEANNOTATIONTEXTSIZE, 100); \par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
\}\par
\par
//***************************************************************************\par
//010  Graph showing Stacked Bar\par
void CPEView::CreateStackedBar()\par
\{\par
    //! Try this... Right Click chart and change the Plotting Method to Horizontal Bar Stacked. //\par
\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Enable Stacked type charts //\par
    PEnset(m_hPE, PEP_bNOSTACKEDDATA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWHORZBARSTACKED, TRUE);\par
\par
    // Set plotting method //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BARSTACKED);\par
\par
    // Add a table //\par
    PEnset(m_hPE, PEP_nGRAPHPLUSTABLE, PEGPT_BOTH);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 2);\par
\par
\par
\}\par
\par
//***************************************************************************\par
//011  Graph showing MultiSubTitles\par
void CPEView::CreateMultiSubTitles()\par
\{\par
    //! Look for the text immediately above and below image. //\par
\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
    \par
    //! Note that strings below always have two pipe symbols "|" //\par
\par
    // Set Multi Sub and Bottom Titles //\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("Top Left|Top Center|Top Right"));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 1, TEXT("|Second Line only centered|"));\par
\par
    // Note that bottom titles get drawn from bottom up //\par
    PEvsetcell(m_hPE, PEP_szaMULTIBOTTOMTITLES, 0, TEXT("Second Line only on left||"));\par
    PEvsetcell(m_hPE, PEP_szaMULTIBOTTOMTITLES, 1, TEXT("Bottom Left|Bottom Center|Bottom Right"));\par
\par
    // Other various properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_LINE);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
\par
\}\par
\par
//***************************************************************************\par
//012  Graph showing MultiAxesSubsets 1\par
void CPEView::CreateMultiAxesSubsets1()\par
\{\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. // \par
\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
    \par
    // Now sub-divide subsets into 4 individual axes //\par
    // Each axis with one subset in each //\par
    int nArray[4] = \{1,1,1,1\};\par
    PEvset (m_hPE, PEP_naMULTIAXESSUBSETS, nArray, 4);\par
\par
    // Set first axis parameters //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Label 1"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
\par
    // Set second axis parameters //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Label 2"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
\par
    // Set third axis parameters //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 2);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Label 3"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
\par
    // Set fourth axis parameters //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 3);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Label 4"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
\par
    // Reset WorkingAxis when done //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
\par
    // Add Axis Separator //\par
    PEnset(m_hPE, PEP_nMULTIAXESSEPARATORS, PEMAS_THIN);\par
\par
    // Axis Sizing //\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
\par
    // Other various properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
\par
    // Set some random annotations //       \par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
\par
    double d;  \tab int t;   float f;\par
    int aCnt = 0;\par
    TCHAR szAnnotText[128];\par
    for (int annot = 0; annot < 5; annot++)\par
    \{\par
        int nRndRow = 0;\par
        int nRndCol = (int)(GetRandom(1, PEnget(m_hPE, PEP_nPOINTS)));\par
        d = nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("Axis0 %d"), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        t = 0; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONAXIS, aCnt, &t);\par
        aCnt++;\par
    \}\par
    for (int annot = 0; annot < 5; annot++)\par
    \{\par
        int nRndRow = 1;\par
        int nRndCol = (int)(GetRandom(1, PEnget(m_hPE, PEP_nPOINTS)));\par
        d = nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("Axis1 %d"), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        t = 1; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONAXIS, aCnt, &t);\par
        aCnt++;\par
    \}\par
    for (int annot = 0; annot < 5; annot++)\par
    \{\par
        int nRndRow = 2;\par
        int nRndCol = (int)(GetRandom(1, PEnget(m_hPE, PEP_nPOINTS)));\par
        d = nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("Axis1 %d"), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        t = 2; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONAXIS, aCnt, &t);\par
        aCnt++;\par
    \}\par
    for (int annot = 0; annot < 5; annot++)\par
    \{\par
        int nRndRow = 3;\par
        int nRndCol = (int)(GetRandom(1, PEnget(m_hPE, PEP_nPOINTS)));\par
        d = nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("Axis1 %d"), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        t = 3; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONAXIS, aCnt, &t);\par
        aCnt++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 100);\par
    PEnset(m_hPE, PEP_nMAXIMUMSYMBOLSIZE, PEMPS_LARGE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTMINSYMBOLSIZE, PEMPS_LARGE);\par
\par
\par
\}\par
\par
//***************************************************************************\par
//013  Graph showing MultiAxesSubsets 2\par
void CPEView::CreateMultiAxesSubsets2()\par
\{\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. // \par
\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Now sub-divide subsets 4 into individual axes //\par
    // Each axis with 2 subsets in each //\par
    int nArray[2] = \{2,2\};\par
    PEvset (m_hPE, PEP_naMULTIAXESSUBSETS, nArray, 2);\par
\par
    // Set first axis parameters //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Label 1"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSLINE);\par
    PEnset(m_hPE, PEP_nCOMPARISONSUBSETS, 1);\par
\par
    // Set second axis parameters //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Label 2"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSLINE);\par
    PEnset(m_hPE, PEP_nCOMPARISONSUBSETS, 1);\par
\par
    // Reset WorkingAxis when done //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
\par
    // Separate Axes //\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLE, PEMAS_SEPARATE_AXES);\par
\par
    // Axis Sizing //\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
\par
    // Legend Inside Each Axis //\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_INSIDE_AXIS);\par
\par
    // Other various properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_INSET);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
\par
    // Set some random annotations //       \par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
\par
    double d;  \tab int t;   float f;\par
    int aCnt = 0;\par
    TCHAR szAnnotText[128];\par
    for (int annot = 0; annot < 5; annot++)\par
    \{\par
        int nRndRow = 0; // subset\par
        int nRndCol = (int)(GetRandom(1, PEnget(m_hPE, PEP_nPOINTS)));\par
        d = nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("Axis0 %d"), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        t = 0; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONAXIS, aCnt, &t);\par
        aCnt++;\par
    \}\par
    for (int annot = 0; annot < 5; annot++)\par
    \{\par
        int nRndRow = 2; // subset\par
        int nRndCol = (int)(GetRandom(1, PEnget(m_hPE, PEP_nPOINTS)));\par
        d = nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("Axis1 %d"), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        t = 1; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONAXIS, aCnt, &t);\par
        aCnt++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 100);\par
    PEnset(m_hPE, PEP_nMAXIMUMSYMBOLSIZE, PEMPS_LARGE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTMINSYMBOLSIZE, PEMPS_LARGE);\par
\par
\}\par
\par
//***************************************************************************\par
//014  Graph showing use of PEgethotspot\par
void CPEView::CreatePEgethotspot()\par
\{\par
    //! Move mouse over subset legends, point labels, or data points //\par
    //! and watch title bar. \par
\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Enable some various hot spots //\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWSUBSETHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_nHOTSPOTSIZE, PEHSS_LARGE);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSSPLINE);\par
    PEnset(m_hPE, PEP_nCOMPARISONSUBSETS, 2);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSLINE);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
\par
\tab PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
\tab PEnset(m_hPE, PEP_bTRACKINGCUSTOMDATATEXT, TRUE);\par
\par
    ///////////////////////////////////////////////////\par
    // Code below is found in the OnCommand function //\par
    /////////////////////////////////////////////////// \par
/*\par
    else if ((m_nLastSelection == 14) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
    \{\par
        POINT pt;\par
        HOTSPOTDATA hsd;\par
        TCHAR buffer[128];\par
        TCHAR buffer2[64];\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        // call PEgethotspot //\par
        PEgethotspot(m_hPE, pt.x, pt.y);\par
\par
        // now look at HotSpotData structure //\par
        PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
        if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
        \{\par
            // get ydata value at hot spot //\par
            float yvalue;\par
            PEvgetcellEx(m_hPE, PEP_faYDATA, hsd.w1, hsd.w2, &yvalue);\par
            _stprintf(buffer, TEXT("DataPoint value %.2f"), yvalue);\par
        \}\par
        else if (hsd.nHotSpotType == PEHS_SUBSET) \par
        \{\par
            PEvgetcell(m_hPE, PEP_szaSUBSETLABELS, hsd.w1, buffer2);\par
            _stprintf(buffer, TEXT("Subset Legend is %s"), buffer2);\par
        \}\par
        else if (hsd.nHotSpotType == PEHS_POINT) \par
        \{\par
            PEvgetcell(m_hPE, PEP_szaPOINTLABELS, hsd.w1, buffer2);\par
            _stprintf(buffer, TEXT("Point Label is %s"), buffer2);\par
        \}\par
        else\par
        \{\par
            // v9 features \par
            int nResult;\par
            nResult = PEsearchsubsetpointindex(m_hPE, pt.x, pt.y);\par
            if (nResult)\par
            \{\par
                int nCS = PEnget(m_hPE, PEP_nCLOSESTSUBSETINDEX);\par
                int nCP = PEnget(m_hPE, PEP_nCLOSESTPOINTINDEX);\par
                \{\par
                    lstrcpy(buffer, TEXT(" "));\par
                    _stprintf(buffer, TEXT("Closest Subset Point s=%d,p=%d"), nCS, nCP);\par
                \}\par
            \}\par
            else\par
                lstrcpy(buffer, TEXT("No hotspot, Outside of charting area"));\par
       \}\par
\par
       CWnd* pParent = GetParent()->GetParent();\par
       if (pParent) \{pParent->SetWindowText(buffer);\}\par
       return TRUE;\par
    \}\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
//015  Graph showing use of GraphAnnotations\par
void CPEView::CreateGraphAnnotations()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWANNOTATIONTEXTMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONTEXT, TRUE);\par
\par
    // simplify chart by reducing subsets //\par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
    // set second subset on right y axis.\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_LINE);\par
    // no table //\par
    PEnset(m_hPE, PEP_nGRAPHPLUSTABLE, PEGPT_GRAPH);\par
    // small font //\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
\par
    // Add some various graph annotations //\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 115);\par
\par
    // Controls default placement of all annotations //\par
    PEnset(m_hPE, PEP_bANNOTATIONSINFRONT, FALSE);\par
\par
    // Give user ability to show or hide annotations ///\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
\par
    double val;\par
    // Place a symbol //\par
    val = 1.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &val);\par
    val = 1095.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &val);\par
    int symbol = PEGAT_SMALLDOTSOLID;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 0, &symbol);\par
    DWORD col2 = PERGB(225, 198, 98, 0);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 0, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 0, TEXT("Dot Gradient Shadow"));\par
    int gradient = PEPGS_RADIAL_TOP_LEFT;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONGRADIENTSTYLE, 0, &gradient);\par
    int shadow = 1;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONSHADOW, 0, &shadow);\par
    int NoBold = 0;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONBOLD, 0, &NoBold);\par
\par
    // Draw some lines //\par
    val = 1.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 1, &val);\par
    val = 1020.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 1, &val);\par
    symbol = PEGAT_THINSOLIDLINE;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 1, &symbol);\par
    col2 = PERGB(255, 0, 198, 198);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 1, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 1, TEXT("Start"));\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONBOLD, 1, &NoBold);\par
\par
    val = 2.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 2, &val);\par
    val = 1120.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 2, &val);\par
    symbol = PEGAT_LINECONTINUE;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 2, &symbol);\par
    col2 = 0;\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 2, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 2, TEXT(""));\par
\par
    val = 3.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 3, &val);\par
    val = 1020.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 3, &val);\par
    symbol = PEGAT_LINECONTINUE;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 3, &symbol);\par
    col2 = PERGB(128, 0, 0, 198);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 3, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 3, TEXT("End"));\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONBOLD, 3, &NoBold);\par
\par
    // How to place an ellipse, rectangle, or roundrect. //\par
    val = 4.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 4, &val);\par
    val = 1120.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 4, &val);\par
    symbol = PEGAT_TOPLEFT;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 4, &symbol);\par
    col2 = PERGB(128, 0, 0, 0);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 4, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 4, TEXT(""));\par
 \par
    val = 5.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 5, &val);\par
    val = 1020.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 5, &val);\par
    symbol = PEGAT_BOTTOMRIGHT;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 5, &symbol);\par
    col2 = PERGB(128, 0, 0, 0);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 5, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 5, TEXT(""));\par
\par
    val = 5.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 6, &val);\par
    val = 1020.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 6, &val);\par
    symbol = PEGAT_ELLIPSE_FILL;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 6, &symbol);\par
    col2 = PERGB(155, 234, 123, 53);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 6, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 6, TEXT(""));\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONGRADIENTSTYLE, 6, &gradient);\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONSHADOW, 6, &shadow);\par
\par
    // Set all indices (4, 5, and 6) to show shadow //\par
    symbol = TRUE;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONSHADOW, 4, &symbol);\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONSHADOW, 5, &symbol);\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONSHADOW, 6, &symbol);\par
\par
    // Sets all indices (4, 5, and 6) to In_Front position, others in background due to AnnotationsInFront = False //\par
    int nAIF = PEAIF_IN_FRONT;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONINFRONT, 4, &nAIF);\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONINFRONT, 5, &nAIF);\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONINFRONT, 6, &nAIF);\par
\par
    // Place a polygon //\par
    val = 6.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 7, &val);\par
    val = 1120.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 7, &val);\par
    symbol = PEGAT_STARTPOLY;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 7, &symbol);\par
    col2 = PERGB(128, 0, 0, 0);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 7, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 7, TEXT(""));\par
 \par
    val = 7.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 8, &val);\par
    val = 1120.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 8, &val);\par
    symbol = PEGAT_ADDPOLYPOINT;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 8, &symbol);\par
    col2 = PERGB(128, 0, 0, 0);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 8, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 8, TEXT(""));\par
\par
    val = 7.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 9, &val);\par
    val = 1020.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 9, &val);\par
    symbol =  PEGAT_ENDPOLYGON_HATCH_CROSS;  //  PEGAT_ENDPOLYGON;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 9, &symbol);\par
    col2 = PERGB(255, 0, 0, 0);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 9, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 9, TEXT(""));\par
\par
    // Place a paragraph of text //\par
    val = 0.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 10, &val);\par
    val = 0.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 10, &val);\par
    symbol = PEGAT_STARTTEXT;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 10, &symbol);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 10, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 10, TEXT("A line of text.\\n"));\par
\par
    val = 0.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 11, &val);\par
    val = 0.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 11, &val);\par
    symbol = PEGAT_ADDTEXT;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 11, &symbol);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 11, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 11, TEXT("Col1   Col2\\n"));\par
\par
    val = 0.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 12, &val);\par
    val = 0.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 12, &val);\par
    symbol = PEGAT_ADDTEXT;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 12, &symbol);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 12, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 12, TEXT("on     off\\n"));\par
\par
    val = 7.75F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 13, &val);\par
    val = 1050.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 13, &val);\par
    symbol = PEGAT_PARAGRAPH;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 13, &symbol);\par
    col2 = PERGB(255, 88, 88, 88);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 13, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 13, TEXT(""));\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONFONT, 13, TEXT("Courier New"));\par
\par
    // Draw an Arrow Pointer annotation //\par
    val = 2.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 14, &val);\par
    val = 1130.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 14, &val);\par
    symbol = PEGAT_POINTER_ARROW_MEDIUM;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 14, &symbol);\par
    col2 = PERGB(255, 0, 198, 198);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 14, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 14, TEXT("Move toward Start"));\par
    symbol = TRUE;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONSHADOW, 14, &symbol);\par
\par
    // Draw an Arrow Annotation //\par
    val = 1.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 15, &val);\par
    val = 1250.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 15, &val);\par
    symbol = PEGAT_THINSOLIDLINE;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 15, &symbol);\par
    col2 = PERGB(128, 128, 200, 198);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 15, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 15, TEXT(""));\par
\par
    val = 2.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 16, &val);\par
    val = 1290.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 16, &val);\par
    symbol = PEGAT_ARROWSOLID_SMALL;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 16, &symbol);\par
    col2 = PERGB(128, 128, 200, 198);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 16, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 16, TEXT(""));\par
\par
    // Place a symbol with respect to right y axis //\par
    val = 11.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 17, &val);\par
    val = 900.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 17, &val);\par
    symbol = PEGAT_SMALLDOTSOLID + 1000;  // 1000 denotes annotation on right axis\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 17, &symbol);\par
    col2 = PERGB(255, 88, 88, 88);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 17, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 17, TEXT("900 Right Axis"));\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONGRADIENTSTYLE, 17, &gradient);\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONSHADOW, 17, &shadow);\par
\par
    // Draw Angled Text Annotation //\par
    val = 1.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 18, &val);\par
    val = 1250.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 18, &val);\par
    symbol = PEGAT_NULL_PEN;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 18, &symbol);\par
    col2 = PERGB(0, 0, 0, 0);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 18, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 18, TEXT(""));\par
\par
    val = 2.5F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 19, &val);\par
    val = 1290.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 19, &val);\par
    symbol = PEGAT_ANGLED_TEXT;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 19, &symbol);\par
    col2 = PERGB(255, 88, 88, 88);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 19, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 19, TEXT("Hello"));\par
\par
    // Show annotations shadows //\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONSHADOWS, TRUE);\par
\par
    // Allow user to move ArrowPointer annotation //\par
    PEnset(m_hPE, PEP_nGRAPHANNOTMOVEABLE, 1);\par
    PEnset(m_hPE, PEP_bALLOWGRAPHANNOTHOTSPOTS, 1);\par
\par
    // Other various properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_INSET);\par
\par
\}\par
\par
//***************************************************************************\par
//016  Graph showing date time handling\par
void CPEView::CreateGraphDateTimeHandling()\par
\{\par
    //! This examples shows Date/Time handling vith the Graph Object.\par
    //! The Graph is suited to show discontinuous date/time scales.\par
    //! Discontinuous for example, 8am to 5pm, Monday to Friday.\par
\par
    //! Here's a tip, when debugging your data-passing logic, use the\par
    //! built-in text export feature to verify that data is as\par
    //! expected.\par
\par
    int i=0;\par
    double d, d2;\par
    RECT rect;\par
    GetClientRect( &rect );\par
    int c = 60000;\par
\par
    // Construct a Graph Object //\par
    m_hPE = PEcreate(PECONTROL_GRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    if (m_hPE) \par
    \{\par
        // Enable MouseWheel and Pinch Smoothing //\par
        PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 5);\par
        PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
        float fzf = 1.4F; PEvset(m_hPE, PEP_fMOUSEWHEELZOOMFACTOR, &fzf, 1);\par
        fzf = 1.15F; PEvset(m_hPE, PEP_fPINCHZOOMFACTOR, &fzf, 1);\par
\par
        // Enable MouseWheel Zooming\par
        PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZ_ZOOM);\par
\par
        // Enable ZoomWindow Feature //\par
        PEnset(m_hPE, PEP_bZOOMWINDOW, 1);\par
\par
        // Enable middle mouse dragging //\par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
        // Enable Plotting style gradient and bevel features //\par
        PEnset(m_hPE, PEP_nAREABEVELSTYLE, PEBS_THIN_SMOOTH);\par
        PEnset(m_hPE, PEP_nSPLINEBEVELSTYLE, PESBS_THIN_SMOOTH);\par
\par
        // v7.2 new features //\par
        PEnset(m_hPE, PEP_nAREABORDER, 1);\par
        PEnset(m_hPE, PEP_bALLOWSVGEXPORT, 1);\par
\par
        // Define how much data is in chart //\par
        PEnset(m_hPE, PEP_nSUBSETS, 2);\par
        PEnset(m_hPE, PEP_nPOINTS, 60000);\par
\par
        // Set Date Time Handling related properties //\par
        PEnset(m_hPE, PEP_nDELTAX, 5);  //5 minutes between data points\par
        PEnset(m_hPE, PEP_nDELTASPERDAY, 96);  //96 data points in one day\par
        double srtime = 0.333333333333334F;\par
        PEvset(m_hPE, PEP_fSTARTTIME, &srtime, 1);\par
        PEnset(m_hPE, PEP_bUSINGXDATAII, TRUE);\par
\par
        TM petm;\par
        CTime t = CTime::GetCurrentTime();\par
        petm.nDay = t.GetDay();\par
        petm.nMonth = t.GetMonth();\par
        petm.nYear = t.GetYear() - 1900 - 2;\par
        petm.nHour = t.GetHour();\par
        petm.nMinute = t.GetMinute();\par
        petm.nSecond = t.GetSecond();\par
        petm.nMilliSecond = 0;\par
        PEcreateserialdate(&d2, &petm, PEDTM_VB);\par
        d = floor(d2);\par
\par
        float val1;\par
        double val2;\par
\par
        // PreAllocates memory, best to use PEvset like in exp 018 but for simplicity we spoon feed.\par
        // Setting last point first helps spoon feeding large data sets.\par
        val1 = 0.0F; val2 = 0.0F;\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 1, 59999, &val1);\par
        PEvsetcellEx(m_hPE, PEP_faXDATAII, 0, 59999, &val2);\par
\par
        for (int p=0; p<60000; p++)\par
        \{\par
            val1 = 55 + GetRandom(1, 55);\par
            val1 += (sin(0.0003F * (double) p) * 500.0F);\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, 0, p, &val1);\par
\par
            val1 = 5 + GetRandom(1, 55);\par
            val1 += (sin(0.003F * (double) p) * 400.0F);\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, 1, p, &val1);\par
\par
            //! Make sure your XData is constructed so that every XData is \par
            //! DeltaX apart and there are DeltasPerDay worth of data points \par
            //! in each day. Well, at least for intraday data.  Daily/Weekly/Monthly \par
            //! data is much easier to work with, \par
\par
            //! Also note that if you do not set XData, ProEssentials will\par
            //! automatically construct your XData with respect to the\par
            //! AutoXData, DeltaX, StartTime, and DeltasPerDay properties.\par
\par
            // Construct XDataII to match parameters above //\par
\tab         // every 5 minutes, 60 minutes in an hour, 24 hours in a day\par
            val2 = d + srtime + ((((double) i * 5.0F) / 60.0F) / 24.0F);\par
            PEvsetcellEx(m_hPE, PEP_faXDATAII, 0, p, &val2);\par
\par
            i = i ++;\par
            if (i >= 96)  // 96 data points per day\par
            \{\par
                i = 0;\par
                d += 1;\par
            \}\par
        \}\par
\par
        // This empties PointLabels array and invokes virtual point labels //\par
        // which are the point number.\par
        PEvsetcell(m_hPE, PEP_szaPOINTLABELS, -1, TEXT("0"));\par
\par
        // You can modify date label formats with //\par
        PEnset(m_hPE, PEP_nYEARMONTHDAYPROMPT, 2);\par
\par
        // PEP_nTIMELABELTYPE\par
        // PEP_nDAYLABELTYPE\tab\par
        // PEP_nMONTHLABELTYPE\par
        // PEP_nYEARLABELTYPE \par
\par
        // Enable DateTimeMode //\par
        PEnset(m_hPE, PEP_nDATETIMEMODE, PEDTM_VB);\par
\par
        // Enable Zooming, zoom the chart and see how structure //\par
        // of x axis changes as you zoom //\par
        PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORIZONTAL);\par
\par
        // Set various properties //\par
        PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
        DWORD rgbcol = PERGB(255, 192, 192, 192);\par
        PEvset(m_hPE, PEP_dwDESKCOLOR, &rgbcol, 1);\par
        rgbcol = PERGB(48, 0, 215, 0);\par
        PEvset(m_hPE, PEP_dwGRAPHBACKCOLOR, &rgbcol, 1);\par
        PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &rgbcol); \par
        rgbcol = PERGB(255, 255, 255, 255);\par
        PEvset(m_hPE, PEP_dwGRAPHFORECOLOR, &rgbcol, 1);\par
        PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_NONE);\par
        PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
        PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
        PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
        PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
        PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
        PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_LINE);\par
\par
        PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
        PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
        PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
        PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
        PEnset(m_hPE, PEP_bSCROLLINGSCALECONTROL, TRUE);\par
        PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_AREA);\par
\par
        PEnset(m_hPE, PEP_nSOLIDLINEOVERAREA, 1);\par
\par
        DWORD dwArray[2] = \{ PERGB(175,198,0,0), PERGB(85,0, 0, 198 ) \};\par
        PEvsetEx(m_hPE, PEP_dwaSUBSETCOLORS, 0, 2, dwArray, 0);\par
\par
        int nGradient[2] = \{ PEPGS_RADIAL_TOP_LEFT, PEPGS_RADIAL_BOTTOM_RIGHT  \};\par
        PEvsetW(m_hPE, PEP_naSUBSETGRADIENTSTYLE, nGradient, 2);\par
\par
        PEnset(m_hPE, PEP_bSHOWLEGEND, FALSE);\par
\par
        PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Zoom Gradually inward and study x axis"));\par
        PEszset(m_hPE, PEP_szSUBTITLE, TEXT("repeat using popup menu to adjust x axis point labels vertical"));\par
        PEszset(m_hPE, PEP_szXAXISLABEL, TEXT("Zoom Gradually inward and study x axis"));\par
\par
        // Set export defaults //\par
        PEnset(m_hPE, PEP_nDPIX, 600);\par
        PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
        PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
        PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
        PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
        PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
        PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
        PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
        // v9 features\par
        PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
        PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
        PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
        PEnset(m_hPE, PEP_nTRACKINGTOOLTIPMAXWIDTH, 100);\par
\par
        PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
        CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
    \}\par
 \par
\}\par
\par
//***************************************************************************\par
//017  Graph showing real-time data handling\par
void CPEView::RealTimeGraph()\par
\{\par
    //! If RenderEngine is not Direct2D, use BitmapGradientMode=False for max speed.\par
    //! See Timer section below that includes update logic\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct a Graph Object //\par
    m_hPE = PEcreate(PECONTROL_GRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // No Shadows //\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_NONE);\par
\par
    // No Flicker //\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
\par
    // Set Subsets and Points //\par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\tab\tab\par
    PEnset(m_hPE, PEP_nPOINTS, 200);\tab\par
\par
    PEnset(m_hPE, PEP_nPOINTSTOGRAPH, 200);  // set to lower number to show earliest \par
    PEnset(m_hPE, PEP_nPOINTSTOGRAPHINIT, PEPTGI_LASTPOINTS);\tab    \tab\tab\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINT); \par
\par
    // subset line types //\par
    int nLineTypes[] = \{ PELT_THINSOLID, PELT_THINSOLID \};\par
    PEvset(m_hPE, PEP_naSUBSETLINETYPES, nLineTypes, 2);\par
\par
    // subset point types //\par
    int nPointTypes[] = \{ PEPT_SQUARESOLID, PEPT_PLUS\};\par
    PEvset(m_hPE, PEP_naSUBSETPOINTTYPES, nPointTypes, 2);\par
\par
    // main title\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Simple Graph Real Time"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("")); \par
\par
    // Not ideal for real-time, but good for presentation/demonstration \par
    PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
    PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
    PEnset(m_hPE, PEP_nLINESYMBOLTHICKNESS, 3);\par
    PEnset(m_hPE, PEP_nAREABORDER, 1);\par
\par
    // Manually configure scales //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
\par
    double manminY = 1.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &manminY, 1);\par
    double manmaxY = 100.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &manmaxY, 1);\par
\par
    PEszset(m_hPE, PEP_szMANUALMAXPOINTLABEL, TEXT("000.000" ));\par
    PEszset(m_hPE, PEP_szMANUALMAXDATASTRING, TEXT("00:00:00xx"));\par
\par
    PEnset(m_hPE, PEP_bNOSTACKEDDATA, TRUE); \par
    PEnset(m_hPE, PEP_bNORANDOMPOINTSTOGRAPH, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWHISTOGRAM, FALSE);\tab\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, FALSE);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 1);\tab\tab\tab\tab\tab\tab\tab\tab\tab   \par
\par
    // Needed to allocate point labels so append logic works //\par
    // Set last point label, Points - 1 //\par
    PEszset(m_hPE, PEP_szaPOINTLABELS, TEXT(""));\par
\par
    float f1 = 0.0F;\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 0, &f1);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 1, &f1);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 2, &f1);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 3, &f1);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, TRUE); \par
    PEnset(m_hPE, PEP_bANTIALIASTEXT, TRUE); \par
\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
\par
    int dwSC[] = \{ PERGB(128,0,198,0), PERGB( 128,145,145,145) \};\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwSC, 2);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
    m_nTimer = SetTimer( TIMER1, 25, NULL );\par
\par
    ////////////////////////////////////////////////////////////\par
    // the following code can be found in the OnTimer Handler //\par
    ////////////////////////////////////////////////////////////\par
/*\par
    PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, FALSE); // best for real time  \par
\par
    t = CTime::GetCurrentTime();\par
    ttext = t.Format("%I:%M:%S");\par
\par
    // Changing this variable increases throughput to chart, try 1, 10, 20, to 200\par
    nAmountToUpdate = 1;  \par
\par
    // Update text to go with data //\par
    for (i=0; i<nAmountToUpdate; i++)\par
        PEvset(m_hPE, PEP_szaAPPENDPOINTLABELDATA, (void *) (LPCTSTR) ttext, 1);\par
\par
    // make some random data //\par
    for (i = 0; i < nAmountToUpdate; i++)\par
    \{\par
        // note this is subset 0 data\par
        r1 = (float) GetRandom(1, 60);  r2 = (float) GetRandom(1, 100);\par
        fNew[i] = r1 + (r2 * .0001F);\par
        r1 = (float) GetRandom(1, 60);  r2 = (float) GetRandom(1, 100);\par
        fNew[i + 1] = r1 + (r2 * .0001F);\par
\par
        // note this is subset 1 data, offset by nAmountToUpdate index as first subset data preceeds second subset data\par
        r1 = (float) GetRandom(1, 90);  r2 = (float) GetRandom(1, 100);\par
        fNew[nAmountToUpdate] = r1 + (r2 * .0001F);\par
        r1 = (float) GetRandom(1, 90);  r2 = (float) GetRandom(1, 100);\par
        fNew[nAmountToUpdate + i] = r1 + (r2 * .0001F);\par
    \}\par
\par
    // Transfer new YData //\par
    // This will also update and view new image //\par
    // Note last argument is nAmountToUpdate, it will look for 2 subsets worth or 2 * nAmountToUpdate\par
    PEvset(m_hPE, PEP_faAPPENDYDATA, &fNew[0], nAmountToUpdate);\par
*/\par
 \par
\}\tab\tab\tab\par
\par
//***************************************************************************\par
//018  Graph showing use of PEvset\par
void CPEView::CreateUsePEvset()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Repass the data, this time with PEvset call //\par
    float MyYData[48];  // 4 * 12 = 48\par
    srand( (unsigned)time( NULL ) );\tab //seed for random data\par
\par
    for (int s=0;s<=3;s++)\par
    \{    \par
        for (int p=0;p<=11;p++)\par
        \{\par
            int o = (s * 12) + p;  //12 = Points property\par
            MyYData[o] = 5 + GetRandom(1, 10);\par
        \}\par
    \}\par
    PEvset(m_hPE, PEP_faYDATA, &MyYData[0], 48);\par
\}\par
\par
//***************************************************************************\par
//019  Graph showing large quantity of data\par
void CPEView::CreateGraphwithlargedata()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Enable MouseWheel and Pinch Smoothing //\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 5);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 3);\par
    float fzf = 1.2F; PEvset(m_hPE, PEP_fMOUSEWHEELZOOMFACTOR, &fzf, 1);\par
    fzf = 1.1F; PEvset(m_hPE, PEP_fPINCHZOOMFACTOR, &fzf, 1);\par
\par
    // Enable MouseWheel Zooming\par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZ_ZOOM);\par
\par
    // Disable some features not ideal for larger data sets.\par
    PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, 0);\par
    PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(0, 0, 0, 0));\par
    PEnset(m_hPE, PEP_nLINESYMBOLTHICKNESS, 0);\par
\par
    // Enable ZoomWindow Feature //\par
    PEnset(m_hPE, PEP_bZOOMWINDOW, 1);\par
\par
    // Repass the data, this time with PEvset call //\par
    PEnset(m_hPE, PEP_nSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPOINTS, 100000);\par
\par
    float* MyYData;  \par
    MyYData = new float[100000];\par
\par
    srand( (unsigned)time( NULL ) );\tab //seed for random data\par
    int j;\par
    for (j=0;j<=99999;j++)\par
    \{\par
        MyYData[j] = (sin(0.0003F * (double) j) * 500.0F);\par
    \}\par
\par
    // Change some of the data so we can see some //\par
    // variations in data //\par
    for (j=0; j<=99999; j+=10000)\par
    \{\par
        for (int k=0; k<=4999; k++)\par
        \{\par
            MyYData[j + k] = MyYData[j + k] - 50 + GetRandom(1, 100);\par
        \}\par
    \}\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faYDATA, MyYData, 100000);\par
    delete MyYData;\par
\par
    // This empties PointLabels array and invokes virtual point labels //\par
    // which are the point number.\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, -1, TEXT("0"));\par
\par
    // Set plotting method to line and allow zooming //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_LINE);\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORIZONTAL);\par
    PEnset(m_hPE, PEP_bALLOWPLOTCUSTOMIZATION, FALSE);\par
\par
    int nLT = PELT_THINSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &nLT);\par
\par
    // This allows plotting of zero values //\par
    double dNill = -99999.0F;\par
    PEvset(m_hPE, PEP_fNULLDATAVALUE, &dNill, 1);\par
\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_SHADOW);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_NONE);\par
\par
\tab PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
\tab PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
\tab PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    if (PEnget(m_hPE, PEP_bISDXAVAILABLE))\par
    \{\par
        PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D);\par
        PEnset(m_hPE, PEP_bFORCE3DXNEWCOLORS, 1);\par
        PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, 1);\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
    \}\par
    else\par
    \{\par
        PEnset(m_hPE, PEP_nRENDERENGINE, PERE_HYBRID);\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_HYBRID );\par
    \}\par
\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
    ::UpdateWindow(m_hPE);\par
    pWnd->Invalidate(FALSE);\par
    pWnd->UpdateWindow();\par
\par
\}\par
\par
//***************************************************************************\par
//020  Graph showing real-time PEpartialresetimage\par
void CPEView::GraphRealTime2()\par
\{\par
    //! This example demonstrates the PEpartialresetimage feature.\par
    //! Rarely needed but can help when application needs many charts, each with many points, all updating.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_GRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // No Flicker //\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);  //! Important for PEpartialresetimage to work.\par
    PEnset(m_hPE, PEP_bAUTOIMAGERESET, FALSE);\par
    PEnset(m_hPE, PEP_nSPEEDBOOST, 0);\par
    PEnset(m_hPE, PEP_nHOURGLASSTHRESHOLD, 40000);\par
\par
    // Set Subsets and Points //\par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\par
    PEnset(m_hPE, PEP_nPOINTS, 15000);\par
\par
    // Pass 80% of the  data, first one subset, then next subset //\par
    float* MyYData;  \par
    MyYData = new float[12000];\par
\par
    srand( (unsigned)time( NULL ) );\tab //seed for random data\par
    int j;\par
    for (j=0;j<=11999;j++)\par
        MyYData[j] = (sin(0.003F * (double) j) * 500.0F) + GetRandom(2, 50);\par
\par
    // Perform the actual transfer of data, first subset //\par
    PEvsetEx(m_hPE, PEP_faYDATA, 0, 12000, MyYData, 0);\par
\par
    srand( (unsigned)time( NULL ) );\tab //seed for random data\par
    for (j=0;j<=11999;j++)\par
        MyYData[j] = (cos(0.003F * (double) j) * 500.0F) + GetRandom(2, 50);\par
\par
    // Perform the actual transfer of data, second subset //\par
    PEvsetEx(m_hPE, PEP_faYDATA, 15000, 12000, MyYData, 0);\par
    delete MyYData;\par
\par
    TCHAR szTmp[48];\par
    TCHAR szTmp2[10];\par
    // Setting last point label first allocates memory and speeds up subsequent logic //\par
    lstrcpy(szTmp, TEXT(" "));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 11999, szTmp);\par
    for (j=0;j<=11999;j++)\par
    \{\par
        lstrcpy(szTmp, TEXT("Test "));\par
        _itot(j+1, szTmp2, 10);\par
        lstrcat(szTmp, szTmp2);\par
        PEvsetcell(m_hPE, PEP_szaPOINTLABELS, j, szTmp);\par
    \}\par
\par
    // Set up two axes, just because it's easy ///   \tab\par
    int nMA[] = \{ 1, 1 \};\par
    PEvset(m_hPE, PEP_naMULTIAXESSUBSETS, nMA, 2);\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLE, PEMAS_SEPARATE_AXES);\par
\par
    // Manually configure top scale scale //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
\par
    double manminY = -600.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &manminY, 1);\par
    double manmaxY = 600.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &manmaxY, 1);\par
\par
    // Manually configure bottom scale scale //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
\par
    manminY = -600.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &manminY, 1);\par
    manmaxY = 600.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &manmaxY, 1);\par
\par
    // Real-Time related properties for Graph Objects // \par
    PEszset(m_hPE, PEP_szMANUALMAXPOINTLABEL, TEXT("Test XXXXXXX" ));\par
    PEszset(m_hPE, PEP_szMANUALMAXDATASTRING, TEXT("12345"));\par
\par
    // Set Various Other Properties //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Graph Real Time Example"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("")); // no subtitle\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_LINE);\tab   \par
    PEnset(m_hPE, PEP_bALLOWPLOTCUSTOMIZATION, FALSE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_NONE);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 1);\tab\tab\tab\tab\tab\tab\tab\tab\tab   \par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
\par
    int lt = PELT_THINSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &lt);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 1, &lt);\par
\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_NONE);\par
\par
    // Enable MouseWheel Zooming\par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZPLUSVERT_ZOOM);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    int dwSC[] = \{ PERGB( 255,0,198,0), PERGB( 255,198,0,198) \};\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwSC, 2);\par
\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_INSIDE_AXIS);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_YAXIS);\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
    PEnset(m_hPE, PEP_nBORDERTYPES, PETAB_INSET);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_FRAMED_RECT);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    // HYBRID or GDI draw fastest //\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_HYBRID);\par
\par
    // Set Demo's RenderEngine to Hybrid //\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_HYBRID );\par
\par
    m_nRealTimeCounter = 12000;\par
    m_nSinCounter = 12000;\par
\par
    m_nTimer = SetTimer( TIMER1, 50, NULL );\par
\par
/*\par
    ////////////////////////////////////////////////////////////\par
    // the following code can be found in the OnTimer Handler //\par
    ////////////////////////////////////////////////////////////\par
\par
    // Graph Real Time Feed using PEpartialresetimage //\par
    if (m_nRealTimeCounter >= 15000)\par
    \{\par
        // When we reach the end of our data, we shift 20% to the\par
        // left and make room for another 3000 quick updates.\par
        PEvset(m_hPE, PEP_szaAPPENDPOINTLABELDATA, NULL, 3000);\par
        PEvset(m_hPE, PEP_faAPPENDYDATA, NULL, 3000);\par
\par
        // We need to perform a complete image update here.\par
        PEresetimage(m_hPE, 0, 0);\par
        ::InvalidateRect(m_hPE, NULL, FALSE);\par
        ::UpdateWindow(m_hPE);\par
        m_nRealTimeCounter = 12000;\par
    \}\par
\par
    float MyYData;  \par
    // First Subset //\par
    MyYData = (sin(0.003F * (double) m_nSinCounter) * 500.0F); \par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, m_nRealTimeCounter, &MyYData);\par
\par
    // Second Subset //\par
    MyYData = (cos(0.003F * (double) m_nSinCounter) * 500.0F); \par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 1, m_nRealTimeCounter, &MyYData);\par
\par
    // Set an example string associated with data //\par
    TCHAR szTmp[48];\par
    TCHAR szTmp2[10];\par
    lstrcpy(szTmp, TEXT("Test "));\par
    _itot(m_nSinCounter, szTmp2, 10);\par
    lstrcat(szTmp, szTmp2);\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, m_nRealTimeCounter, szTmp);\par
\par
    // This call performs a quick partial draw to an internal cached bmp. \par
    PEpartialresetimage(m_hPE, m_nRealTimeCounter, 1);\par
\par
    // Invalidate control, only invalidate vertical charting area and \par
    // approximate horizontal location of new data added.\par
    int nA;\par
    int nX;\par
    int nY;\par
    double fX;\par
    double fY;\par
    RECT r;\par
\par
    nA = 0;\tab\tab\tab\tab //Initialize axis, non-zero only if using MultiAxesSubsets\par
    fX = (double) m_nRealTimeCounter - 5.0F;  // Approximate horizontal location\par
    fY = 0;\tab\tab\tab\tab // not important, we will user vertical extents from PEP_rectGRAPH\par
\par
    // This call finds pixel location for fX and fY graph coordinates.\par
    PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, TRUE);\par
\par
    PEvget(m_hPE, PEP_rectGRAPH, &r);  // get vertical extents of charting area.\par
    r.left = nX;\par
    r.right = nX + 50; // 50 pixels close to new data location\par
\par
    //////// For comparison purposes, you can uncomment the line below // \par
    //////// Calling PEresetimage with each timer event causes CPU usage to go to 100% \par
    // PEpartialresetimage allows the same visual output while using 2% or less of the CPU\par
    // ::PEresetimage(m_hPE, 0, 0); \par
\par
    ::InvalidateRect(m_hPE, &r, FALSE);\par
\par
    m_nRealTimeCounter ++;\par
    m_nSinCounter ++;\par
\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
//021  Graph showing hatching\par
void CPEView::GraphShowingHatching()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    int nHatchType[4];\par
    nHatchType[0] = PEHS_BDIAGONAL;\par
    nHatchType[1] = PEHS_CROSS;\par
    nHatchType[2] = PEHS_DIAGCROSS;\par
    nHatchType[3] = PEHS_FDIAGONAL;\par
    PEvset(m_hPE, PEP_naSUBSETHATCH, nHatchType, 4);\par
\par
    // Set Other Various Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_nBORDERTYPES, PETAB_THIN_LINE);\par
\tab     \par
    // Enable Stacked type charts //\par
    PEnset(m_hPE, PEP_bNOSTACKEDDATA, FALSE);\par
\par
    // Set plotting method //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BARSTACKED);\par
    PEnset(m_hPE, PEP_dwHATCHBACKCOLOR, PERGB( 25, 0, 0, 0));\par
    PEnset(m_hPE, PEP_bDATASHADOWS, PEDS_NONE); \par
    PEnset(m_hPE, PEP_bBARGLASSEFFECT, FALSE);\par
\par
    DWORD dwArray[4] = \{ PERGB(228,198,0,0), PERGB(228,0, 198, 198 ), PERGB(228,198,198,0 ), PERGB(228,0,198,0 ) \};\par
    PEvsetEx(m_hPE, PEP_dwaSUBSETCOLORS, 0, 4, dwArray, 0);\par
\par
    // Add a table //\par
    PEnset(m_hPE, PEP_nGRAPHPLUSTABLE, PEGPT_BOTH);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 0);\par
\}\par
\par
//***************************************************************************\par
//022  Graph showing mixing Plotting Methods\par
void CPEView::GraphMixingPlottingMethods()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Set plotting method per subset //\par
    int nPlotType[4];\par
    nPlotType[0] = PEGPM_HIGHLOWAREA;\par
    nPlotType[1] = PEGPM_HIGHLOWAREA;\par
    nPlotType[2] = PEGPM_LINE;\par
    nPlotType[3] = PEGPM_BAR;\par
    PEvset(m_hPE, PEP_naPLOTTINGMETHODS, nPlotType, 4);\par
\par
    // Set subset labels for high low area //\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("High"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Low"));\par
\par
    // Remove plotting styles from menu //\par
    PEnset(m_hPE, PEP_nPLOTMETHODMENU, PEMC_HIDE);\par
\par
    // Set Other Various Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_LINE);\par
\par
    // Make the line types bold //\par
    int nLT; nLT = PELT_MEDIUMSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &nLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 1, &nLT);\par
    nLT = PELT_THICKDOT;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 2, &nLT);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
\par
    // Change the Bar's color //\par
    int nBarColor = PERGB( 32,0,0,150);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 3, &nBarColor);\par
\par
    // Add a table //\par
    PEnset(m_hPE, PEP_nGRAPHPLUSTABLE, PEGPT_BOTH);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 0);\par
\}\par
\par
//***************************************************************************\par
//023  Graph showing Bitmaps and Gradients\par
void CPEView::GraphShowingBitmapsGradients()\par
\{\par
    //! Top image is tiled. //\par
    //! Bottom image is StretchBlt'ed within axis area. //\par
    //! Click bottom of top axis and drag to resize axes. //\par
\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_dwDESKCOLOR, 1);\par
    PEnset(m_hPE, PEP_dwDESKGRADIENTSTART, PERGB( 255,0, 0, 110));\par
    PEnset(m_hPE, PEP_dwDESKGRADIENTEND, PERGB( 255,0, 0, 220));\par
    PEnset(m_hPE, PEP_nDESKGRADIENTSTYLE, PEGS_VERTICAL);\par
    PEszset(m_hPE, PEP_szDESKBMPFILENAME, TEXT("gigasoft.jpg"));\par
    PEnset(m_hPE, PEP_nDESKBMPSTYLE, PEBS_BITBLT_TOP_RIGHT);\par
\par
    // Now sub-divide subsets into 2 individual axes //\par
    // Each axis with a bitmap //\par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\par
    int nArray[2] = \{1,1\};\par
    PEvset (m_hPE, PEP_naMULTIAXESSUBSETS, nArray, 2);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_INSIDE_AXIS);\par
\par
    PEnset(m_hPE, PEP_bGRIDINFRONT, TRUE);\par
    PEnset(m_hPE, PEP_bGRIDBOLD, TRUE);\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("Research"));\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Reward" ));\par
\par
    // Set first axis parameters //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_dwGRAPHBACKCOLOR, 1);\par
    PEszset(m_hPE, PEP_szGRAPHBMPFILENAME, TEXT("darkcir.jpg"));\par
    PEnset(m_hPE, PEP_nGRAPHBMPSTYLE, PEBS_TILED_BITBLT);\par
\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Research"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSSPLINE);\par
\par
    // Set second axis parameters //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_dwGRAPHBACKCOLOR, 1);\par
    PEszset(m_hPE, PEP_szGRAPHBMPFILENAME, TEXT("demo2.png"));\par
    PEnset(m_hPE, PEP_nGRAPHBMPSTYLE, PEBS_STRETCHBLT);\par
\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Reward"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSSPLINE);\par
\par
    // Reset WorkingAxis when done //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
\par
    // Set Various Other Properties //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTTOP, 650);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 200);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 200);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 200);\par
\par
    PEnset(m_hPE, PEP_dwTICKCOLOR, 1);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_3D);\par
    PEnset(m_hPE, PEP_dwGRAPHFORECOLOR, PERGB( 255,128,128,128));\par
\par
    // Make the line types bold //\par
    int nLT;\par
    nLT = PELT_MEDIUMSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &nLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 1, &nLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 2, &nLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 3, &nLT);\par
\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLE, PEMAS_SEPARATE_AXES);\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
\}\par
\par
//***************************************************************************\par
//024  Graph showing Background Bitmap\par
void CPEView::GraphBackgroundBitmap()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_dwDESKCOLOR, 1);\par
    PEszset(m_hPE, PEP_szDESKBMPFILENAME, TEXT("cloud.jpg"));\par
    PEnset(m_hPE, PEP_nDESKBMPSTYLE, PEBS_TILED_BITBLT);\par
    PEnset(m_hPE, PEP_dwGRAPHFORECOLOR, PERGB( 255,0,0,0));\par
    PEnset(m_hPE, PEP_dwTEXTCOLOR, PERGB(255,0,0,0));\par
\par
    // Now sub-divide subsets into 2 axes //\par
    // Each axis to be transarent //\par
    int nArray[2] = \{2,2\};\par
    PEvset (m_hPE, PEP_naMULTIAXESSUBSETS, nArray, 2);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_INSIDE_AXIS);\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
\par
    // Set first axis parameters //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT(""));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
    PEnset(m_hPE, PEP_dwGRAPHBACKCOLOR, 1);\par
    PEnset(m_hPE, PEP_nGRAPHGRADIENTSTYLE, PEGS_NO_GRADIENT);\par
\par
    // Set second axis parameters //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT(""));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_dwGRAPHBACKCOLOR, 1);\par
    PEnset(m_hPE, PEP_nGRAPHGRADIENTSTYLE, PEGS_NO_GRADIENT);\par
\par
    // Reset WorkingAxis when done //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
\par
    // Set Various Other Properties //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLE, PEMAS_SEPARATE_AXES);\par
\par
    PEnset(m_hPE, PEP_dwTICKCOLOR, 1);\par
    PEnset(m_hPE, PEP_nBORDERTYPES, PETAB_NO_BORDER);\par
    PEnset(m_hPE, PEP_nPOINTSIZE, PEPS_LARGE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
\par
    // Make the line types bold //\par
    int nLT;\par
    nLT = PELT_MEDIUMSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &nLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 1, &nLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 2, &nLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 3, &nLT);\par
\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTTOP, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
\par
    PEnset(m_hPE, PEP_nGRAPHPLUSTABLE, PEGPT_GRAPH);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_3D);\par
\par
\par
\}\par
\par
//***************************************************************************\par
//025  Graph showing Floating Stacked Bars\par
void CPEView::GraphFloatingStackedBars()\par
\{\par
    //! Try this... Right Click chart and change the Plotting Method to Horizontal Bar Stacked. //\par
\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Enable Stacked type charts //\par
    PEnset(m_hPE, PEP_bNOSTACKEDDATA, FALSE);\par
\par
    // Set plotting method //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BARSTACKED);\par
\par
    // // Floating stacked Bars are constructed by setting ZData //\par
    float* MyZData;  \par
    MyZData = new float[12];  // Only need 12 pieces of ZData because PEP_nPOINTS = 12\par
    for (int j=0;j<12;j++)\par
        MyZData[j] = fabs(sin((0.3F * (double) j)) * 800.0F) + 400;\par
\par
    // Perform the actual transfer of data  //\par
    PEvset(m_hPE, PEP_faZDATA, MyZData, 12);\par
    delete MyZData;\par
    \par
    // Enable floating stacked bar features //\par
    PEnset(m_hPE, PEP_bFLOATINGSTACKEDBARS, TRUE);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_SHADOW);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
    PEnset(m_hPE, PEP_nGRAPHPLUSTABLE, PEGPT_BOTH);\par
    PEnset(m_hPE, PEP_bGRIDINFRONT, TRUE);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 0);\par
\par
    PEnset(m_hPE, PEP_bALLOWHORZBARSTACKED, TRUE);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_3D);\par
\par
\}\par
\par
//***************************************************************************\par
//026  Graph with Simple Table Annotation\par
void CPEView::GraphSimpleTableAnnotation()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Construct a simple table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
    PEnset(m_hPE, PEP_nTAROWS, 4);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 7);\par
\par
    // Pass the table text //\par
    TCHAR szTmp[48];\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 1, 0, TEXT(" 1 "));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 2, 0, TEXT(" 2 "));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 3, 0, TEXT(" 3 "));\par
\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 1, TEXT("Try not "));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 2, TEXT("... "));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 3, TEXT("Do "));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 4, TEXT("... "));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 5, TEXT("or "));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 6, TEXT("Do not "));\par
\par
    float fp;\par
    int nTmp;\par
    int r;\par
    for (r=1; r<4; r++)\par
    \{\par
        for (int c=1; c<7; c++)\par
        \{\par
            fp = (sin(0.3F * (double) c + 1) * 500.0F) + GetRandom(2, 50);\par
            _stprintf(szTmp, TEXT("%.3f "), fp);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, c, szTmp);\par
            nTmp = PERGB( 255, 0, 0, 0);\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
        \}\par
    \}\par
\par
    // Other Table Related Properties ///\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_TOP_LEFT);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 5, 150, 150, 150) );\par
    PEnset(m_hPE, PEP_nTAHEADERROWS, 1);\par
    PEnset(m_hPE, PEP_bTAHEADERCOLUMN, TRUE);\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 95);\par
    PEnset(m_hPE, PEP_nTAGRADIENTSTYLE,  PEPGS_VERTICAL_ASCENT);\par
    PEnset(m_hPE, PEP_dwTAGRADIENTCOLOR, PERGB( 255, 255, 255, 255) );\par
    PEnset(m_hPE, PEP_nTABEVELSTYLE, PEBS_THIN_SMOOTH);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_NO_BORDER);\par
\par
    // Construct a second simple table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 1);  // Note WorkingTable goes to 1\par
    PEnset(m_hPE, PEP_nTAROWS, 15);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 2);\par
\par
    // // Pass the table text //\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, TEXT(""));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 1, TEXT("Data"));\par
    nTmp = PETAJ_CENTER;\par
    PEvsetcellEx(m_hPE, PEP_naTAJUSTIFICATION, 0, 0, &nTmp);\par
    PEvsetcellEx(m_hPE, PEP_naTAJUSTIFICATION, 0, 1, &nTmp);\par
\par
    // First Column Text //\par
    for (r=1; r<15; r++)\par
    \{\par
        _stprintf(szTmp, TEXT("%2d"), r);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, 0, szTmp);\par
    \}\par
\par
    // // Second Column Text //\par
    for (r=1; r<15; r++)\par
    \{\par
        fp = (sin(0.3F * (double) r + 1) * 500.0F) + GetRandom(2, 50);\par
        _stprintf(szTmp, TEXT("%.2f"), fp);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, 1, szTmp);\par
    \}\par
\par
    // Other Table Related Properties ///\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_LEFT_CENTER);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 55,155,155,155));\par
    PEnset(m_hPE, PEP_nTAHEADERROWS, 1);\par
    PEnset(m_hPE, PEP_bTAHEADERCOLUMN, TRUE);\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 95);\par
    PEnset(m_hPE, PEP_nTABEVELSTYLE, PEBS_THIN_SMOOTH);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_NO_BORDER);\par
\par
    // Done setting Table Annotations ///\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_NO_BORDER);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 0);\par
    PEnset(m_hPE, PEP_bGRIDINFRONT, TRUE);\par
\par
    // Set plotting method //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSSPLINE);\par
\tab\par
\}\par
\par
//***************************************************************************\par
//027  Graph with Stacked Table Annotations\par
void CPEView::GraphStackedTableAnnotations()\par
\{\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    /////////////////////////////////////////\par
    // Construct a simple table annotation //\par
    /////////////////////////////////////////\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
    PEnset(m_hPE, PEP_nTAROWS, 1);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 2);\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 85);\par
\par
    // Pass the table text //\par
    TCHAR szTmp[48];\par
    lstrcpy(szTmp,TEXT( "Category 1"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, szTmp);\par
    lstrcpy(szTmp, TEXT("Category 2"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 1, szTmp);\par
\par
    // Set column widths ///\par
    int nWidth = 28;\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 0, &nWidth);\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 1, &nWidth);\par
\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_AXIS_0);\par
    PEnset(m_hPE, PEP_nTAAXISLOCATION, PETAAL_TOP_LEFT);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_SINGLE_LINE);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 55,255,255,255));\par
    PEnset(m_hPE, PEP_nTAGRADIENTSTYLE, PEPGS_VERTICAL);\par
\par
    int nJust = PETAJ_CENTER;\par
    PEvsetcell(m_hPE, PEP_naTAJUSTIFICATION, 0, &nJust);\par
    PEvsetcell(m_hPE, PEP_naTAJUSTIFICATION, 1, &nJust);\par
\par
    /////////////////////////////////////////\par
    // Construct a simple table annotation //\par
    /////////////////////////////////////////\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 1);\par
    PEnset(m_hPE, PEP_nTAROWS, 1);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 4);\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 85);\par
\par
    lstrcpy(szTmp, TEXT("Sub Cat 1"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, szTmp);\par
    lstrcpy(szTmp, TEXT("Sub Cat 2"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 1, szTmp);\par
    lstrcpy(szTmp, TEXT("Sub Cat 3"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 2, szTmp);\par
    lstrcpy(szTmp, TEXT("Sub Cat 4"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 3, szTmp);\par
\par
    nWidth = 14;\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 0, &nWidth);\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 1, &nWidth);\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 2, &nWidth);\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 3, &nWidth);\par
\par
    nJust = PETAJ_CENTER;\par
    PEvsetcell(m_hPE, PEP_naTAJUSTIFICATION, 0, &nJust);\par
    PEvsetcell(m_hPE, PEP_naTAJUSTIFICATION, 1, &nJust);\par
    PEvsetcell(m_hPE, PEP_naTAJUSTIFICATION, 2, &nJust);\par
    PEvsetcell(m_hPE, PEP_naTAJUSTIFICATION, 3, &nJust);\par
\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 55,240,240,240));\par
    PEnset(m_hPE, PEP_nTAGRADIENTSTYLE, PEPGS_VERTICAL);\par
\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_AXIS_0);\par
    PEnset(m_hPE, PEP_nTAAXISLOCATION, PETAAL_TOP_LEFT + PETAAL_NEW_ROW);\par
\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_SINGLE_LINE);\par
\par
    /////////////////////////////////////////\par
    // Construct a simple table annotation //\par
    /////////////////////////////////////////\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 2);\par
    PEnset(m_hPE, PEP_nTAROWS, 4);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 8);\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 85);\par
\par
    // Set Column Widths //\par
    nWidth = 7;\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 0, &nWidth);\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 1, &nWidth);\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 2, &nWidth);\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 3, &nWidth);\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 4, &nWidth);\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 5, &nWidth);\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 6, &nWidth);\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 7, &nWidth);\par
\par
    // Pass the table text //\par
    float fp;\par
    int nTmp;\par
    for (int r=0; r<4; r++)\par
    \{\par
        for (int c=0; c<8; c++)\par
        \{\par
            fp = (sin(0.3F * (double) c + 1) * 500.0F) + GetRandom(2, 50);\par
            _stprintf(szTmp, TEXT("%.2f "), fp);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, c, szTmp);\par
\par
            if (c > 5)\par
                nTmp = PERGB( 255,0, 148, 0);\par
            else if (c > 3)\par
                nTmp = PERGB( 255,148, 148, 0);\par
            else if (c > 1)\par
                nTmp = PERGB( 255,0, 148, 148);\par
            else\par
                nTmp = PERGB( 255,198, 0, 0);\par
\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
\par
            nJust = PETAJ_CENTER;\par
            PEvsetcellEx(m_hPE, PEP_naTAJUSTIFICATION, r, c, &nJust);\par
        \}\par
    \}\par
\par
    // Other Table Related Properties ///\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_AXIS_0);\par
    PEnset(m_hPE, PEP_nTAAXISLOCATION, PETAAL_TOP_LEFT + PETAAL_NEW_ROW + PETAAL_NEW_ROW);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_SINGLE_LINE);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 255, 200, 200, 200));\par
\par
    // Done setting Table Annotations ///\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_INSET);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 0);\par
\par
    double f = 1.5F;\par
    PEvset(m_hPE, PEP_fAXISNUMBERSPACING, &f, 1);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_3D);\par
    PEnset(m_hPE, PEP_bBARGLASSEFFECT, FALSE);\par
\}\par
\par
//***************************************************************************\par
//028  Graph with more Table Annotation Features\par
void CPEView::GraphTableAnnotationsRealTime()\par
\{\par
    //! Move mouse over chart to see tables update with the subset values located\par
    //! at the vertical cursor line. //\par
\par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);  //! Important for PEpartialresetimage to work.\par
\par
\par
    // Construct a simple table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
    PEnset(m_hPE, PEP_nTAROWS, 1);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 6);\par
\par
    // column index for table with 6 columns //\par
    // 0 = symbol, no default width\par
    // 1 = text, subset label, no default width\par
    // 2 = text, data value, default width set to 7 characters \par
    // 3 = symbol second subset, no default width\par
    // 4 = text, second subset label, no default width\par
    // 5 = text, second data value, default width set to 7 characters \par
\par
    TCHAR szTmp[64];\par
\par
    PEnset(m_hPE, PEP_dwTAFORECOLOR, PERGB(255, 198,0,0));\par
\par
    // Pass the table type, text, color //\par
    int nType = PEGAT_SQUARESOLID;\par
    PEvsetcellEx(m_hPE, PEP_naTATYPE, 0, 0, &nType);\par
    DWORD dwColor = PERGB(255, 198,0,0);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 0, &dwColor);\par
    lstrcpy(szTmp, TEXT("Texas "));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 1, szTmp);\par
    DWORD dwTextColor = PERGB(255, 0, 0, 0);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 1, &dwTextColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 2, &dwTextColor);\par
\par
    nType = PEGAT_SQUARESOLID;\par
    PEvsetcellEx(m_hPE, PEP_naTATYPE, 0, 3, &nType);\par
    dwColor = PERGB(255, 0, 198,198);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 3, &dwColor);\par
    lstrcpy(szTmp, TEXT("Florida "));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 4, szTmp);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 4, &dwTextColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 5, &dwTextColor);\par
\par
    int nWidth2[] = \{2, 8, 7, 2, 8, 7\};\par
    PEvset(m_hPE, PEP_naTACOLUMNWIDTH, nWidth2, 6);\par
\par
    // Other Table Related Properties ///\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_AXIS_0);\par
    PEnset(m_hPE, PEP_nTAAXISLOCATION, PETAAL_TOP_LEFT);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 255,55,155,198));\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_INSET);\par
\par
    // Construct another table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 1);\par
    PEnset(m_hPE, PEP_nTAROWS, 1);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 6);\par
\par
    // Pass the table type, text, color //\par
    nType = PEGAT_SQUARESOLID;\par
    PEvsetcellEx(m_hPE, PEP_naTATYPE, 0, 0, &nType);\par
    dwColor = PERGB( 255,198,198,0);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 0, &dwColor);\par
    lstrcpy(szTmp, TEXT("New York "));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 1, szTmp);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 1, &dwTextColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 2, &dwTextColor);\par
\par
    nType = PEGAT_SQUARESOLID;\par
    PEvsetcellEx(m_hPE, PEP_naTATYPE, 0, 3, &nType);\par
    dwColor = PERGB( 255,0,198,0);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 3, &dwColor);\par
    lstrcpy(szTmp, TEXT("California "));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 4, szTmp);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 4, &dwTextColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 5, &dwTextColor);\par
\par
    PEvset(m_hPE, PEP_naTACOLUMNWIDTH, nWidth2, 6);\par
\par
    // Other Table Related Properties //\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_AXIS_1);\par
    PEnset(m_hPE, PEP_nTAAXISLOCATION, PETAAL_TOP_LEFT);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 255,55,155,198));\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_INSET);\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
\par
    // Other various Properties //\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_SHADOW);\par
\par
    int nMAS[] = \{2, 2\};\par
    PEvset(m_hPE, PEP_naMULTIAXESSUBSETS, nMAS, 2);\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLE, PEMAS_SEPARATE_AXES);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_bSHOWLEGEND, FALSE);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORIZONTAL);\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
\par
    int nPT[] = \{PEPT_SQUARESOLID, PEPT_SQUARESOLID, PEPT_SQUARESOLID, PEPT_SQUARESOLID\};\par
    PEvset(m_hPE, PEP_naSUBSETPOINTTYPES, nPT, 4);\par
\par
    PEnset(m_hPE, PEP_nCURSORMODE, PECM_FLOATINGXY);\par
    PEnset(m_hPE, PEP_bMOUSECURSORCONTROL, TRUE);\par
\par
\par
/*\par
    ////////////////////////////////////////////////////////////////////////////////\par
    // From the OnCommand handler looking for a PEWN_MOUSEMOVE notification event //\par
    // When mouse is moved, update table annotation contents.                     //\par
    ////////////////////////////////////////////////////////////////////////////////\par
\par
    else if ((m_nLastSelection == 28) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
    \{\par
        int nX;\par
        int nY;\par
        double fX;\par
        double fY;\par
        POINT pt;\par
        int nA;\par
        TCHAR buffer[128];\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        nA = 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
        nX = pt.x;   //Initialize nX and nY with mouse location\par
        nY = pt.y;\par
        PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
        // We now know data coordinates for mouse location //\par
\par
        // Use fX to interpolate each subset to find approximate Y value //\par
        float Subset1Y, Subset2Y, Subset3Y, Subset4Y;\par
        float slope;\par
        float y0;\par
        float y1, y2, x1, x2;\par
\par
        nX = (int) floor(fX) - 1;  // nX is floor of fX\par
        x2 = nX + 1;    // x2 is right most point index\par
        x1 = nX;        // x1 is left most point index or nX\par
\par
        if (fX < 1 || fX > 12)\par
        \{\par
            lstrcpy(buffer, TEXT("        "));\par
            PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 2, buffer);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 5, buffer);\par
            PEnset(m_hPE, PEP_nWORKINGTABLE, 1);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 2, buffer);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 5, buffer);\par
            PEdrawtable(m_hPE, 0, NULL);\par
            PEdrawtable(m_hPE, 1, NULL);\par
            return TRUE;\par
        \}\par
\par
        fX -= 1.0F;\par
\par
        // 1st subset //\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 0, nX + 1, &y2);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 0, nX, &y1);\par
        slope = (y2 - y1) / (x2 - x1);\par
        y0 = y1 - (slope * x1);\par
        Subset1Y = (slope * fX) + y0;\par
\par
        // 2nd subset //\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 1, nX + 1, &y2);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 1, nX, &y1);\par
        slope = (y2 - y1) / (x2 - x1);\par
        y0 = y1 - (slope * x1);\par
        Subset2Y = (slope * fX) + y0;\par
\par
        // 3rd subset //\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 2, nX + 1, &y2);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 2, nX, &y1);\par
        slope = (y2 - y1) / (x2 - x1);\par
        y0 = y1 - (slope * x1);\par
        Subset3Y = (slope * fX) + y0;\par
\par
        // 4th subset //\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 3, nX + 1, &y2);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 3, nX, &y1);\par
        slope = (y2 - y1) / (x2 - x1);\par
        y0 = y1 - (slope * x1);\par
        Subset4Y = (slope * fX) + y0;\par
\par
        // Place text in table annotation //\par
        PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
        _stprintf(buffer, TEXT("%.2f "), Subset1Y);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 2, buffer);\par
        _stprintf(buffer, TEXT("%.2f "), Subset2Y);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 5, buffer);\par
\par
\par
        PEnset(m_hPE, PEP_nWORKINGTABLE, 1);\par
        _stprintf(buffer, TEXT("%.2f "), Subset3Y);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 2, buffer);\par
        _stprintf(buffer, TEXT("%.2f "), Subset4Y);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 5, buffer);\par
\par
        PEdrawtable(m_hPE, 0, NULL);\par
        PEdrawtable(m_hPE, 1, NULL);\par
\par
        return TRUE;\par
    \}\par
\par
*/\par
\par
\par
\}\par
\par
//***************************************************************************\par
//029  Graph with specially spaced Table Annotations\par
void CPEView::GraphTableAnnotationTableSpaced()\par
\{\par
    //! This shows how to place extra text inside table and within an axis. //\par
    //! Maximize to allow room for textual data which is drawn as fixed font size. //\par
    \par
    // This example builds upon the basic CreateSimpleGraph '000' example chart //\par
    CreateSimpleGraph();\par
\par
    // Create two y axes //\par
    int nMAS[] = \{2, 2\};\par
    PEvset(m_hPE, PEP_naMULTIAXESSUBSETS, nMAS, 2);\par
\par
    // Construct a simple table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
    PEnset(m_hPE, PEP_nTAROWS, 6);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 12);  // 12 is same number as PEP_nPOINTS\par
\par
    // Pass the table text //\par
    TCHAR szTmp[48];\par
    float fp;\par
    int r, c;\par
    DWORD dwColor;\par
    BOOL b = TRUE;\par
\par
    for (r=0; r<6; r++)\par
    \{\par
        if (b)\par
            dwColor = PERGB( 255,175,175,175);\par
        else\par
            dwColor = PERGB( 255,255,255,255);\par
        b = !b;\par
\par
        for (c=0; c<12; c++)\par
        \{\par
            fp = (sin(0.03F * (double) c + 1.0F + r) * 500.0F) + (float) GetRandom(2, 50);\par
            _stprintf(szTmp, TEXT("%.3f "), fp);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, c, szTmp);\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &dwColor);\par
        \}\par
    \}\par
\par
    // Set Table Location //\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_AXIS_1);\par
    PEnset(m_hPE, PEP_nTAAXISLOCATION, PETAAL_BOTTOM_TABLE_SPACED);\par
\par
    // Other Table Related Properties ///\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_NO_BORDER);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, 1);\par
    PEnset(m_hPE, PEP_dwTAFORECOLOR, 1);\par
\par
    // Construct a second simple table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 1); \par
    PEnset(m_hPE, PEP_nTAROWS, 6);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 12);\par
\par
    // Pass the table text //\par
    b = TRUE;\par
    for (r=0; r<6; r++)\par
    \{\par
        if (b)\par
            dwColor = PERGB( 255,175,175,175);\par
        else\par
            dwColor = PERGB( 255,255,255,255);\par
        b = !b;\par
\par
        for (c=0; c<12; c++)\par
        \{\par
            fp = (sin(0.03F * (double) c + 1.0F + (2 * r)) * 500.0F) + (float) GetRandom(2, 50);\par
            _stprintf(szTmp, TEXT("%.3f "), fp);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, c, szTmp);\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &dwColor);\par
        \}\par
    \}\par
\par
    // Set Table Location //\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_AXIS);\par
    PEnset(m_hPE, PEP_nTAAXISLOCATION, PETAAL_BOTTOM_TABLE_SPACED);\par
\par
    // Other Table Related Properties ///\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_NO_BORDER);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, 1);\par
    PEnset(m_hPE, PEP_dwTAFORECOLOR, 1);\par
\par
    // Construct a third simple table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 2); \par
    PEnset(m_hPE, PEP_nTAROWS, 2);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 13);\par
\par
    // Pass the table text //\par
    for (r=0; r<2; r++)\par
    \{\par
        for (c=1; c<13; c++)\par
        \{\par
            fp = (sin(0.03F * (double) c + 1.0F) * 500.0F) + (float) GetRandom(2, 50);\par
            _stprintf(szTmp, TEXT("%.3f "), fp);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, c, szTmp);\par
        \}\par
    \}\par
\par
    // Set Table Location //\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_TABLE);\par
    PEnset(m_hPE, PEP_nTAAXISLOCATION, PETAAL_TOP_TABLE_SPACED);\par
\par
    // Other Table Related Properties ///\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 255,0,198,198));\par
    PEnset(m_hPE, PEP_bTAHEADERCOLUMN, TRUE);\par
\par
    // Set Text for Header Column //\par
    lstrcpy(szTmp, TEXT("Table Annotation Line 1"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, szTmp);\par
    lstrcpy(szTmp, TEXT("Table Annotation Line 2"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 1, 0, szTmp);\par
\par
    // Done setting Table Annotations ///\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_INSET);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 0);\par
    PEnset(m_hPE, PEP_nGRAPHPLUSTABLE, PEGPT_BOTH);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_INSIDE_AXIS);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_YAXIS);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_SMALL);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
    PEnset(m_hPE, PEP_bSHOWLEGEND, TRUE);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSLINE);\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1);\par
    PEnset(m_hPE, PEP_dwRYAXISCOLOR, PERGB( 255,0, 198,198));\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT(""));\par
    PEszset(m_hPE, PEP_szRYAXISLABEL, TEXT(""));\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSLINE);\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1);\par
    PEnset(m_hPE, PEP_dwRYAXISCOLOR, PERGB( 255,0, 198,0));\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT(""));\par
    PEszset(m_hPE, PEP_szRYAXISLABEL, TEXT(""));\par
\par
    DWORD dwArray[4] = \{ PERGB( 128,138,0,0), PERGB( 128,0, 198, 198), PERGB( 128,138,138,0), PERGB( 128,0,198,0) \};\par
    PEvsetEx(m_hPE, PEP_dwaSUBSETCOLORS, 0, 4, dwArray, 0);\par
    PEnset(m_hPE, PEP_nSHOWTABLEANNOTATIONSMENU, PEMC_SHOW);\par
\}\par
\par
\par
//***************************************************************************\par
//030  Graph with financial data and table annotations hot spots\par
void CPEView::GraphTableAnnotationHotSpots()\par
\{\par
    //! Please read the RED text within this code window and others. \par
    //!\par
    //! Some things to try...\par
    //! 1) Right click the chart and use the popup menu to adjust viewing style and other items.\par
    //! 2) Left click and drag to zoom, use popup menu to undo zoom. Note how time scale changes.\par
    //! 3) Left click the Portfolio table to select different stocks.\par
    //! 4) Change Point Label Orientation via the popup menu and note how x axis scale changes.\par
    //! 5) The Data Cursor can be moved with arrow keys.  Click a data point and then use arrow keys.\par
    //! 6) Zoom chart and watch the Volume bar plotting method structure for different time ranges.\par
    //!    There's new drawing logic that first recongnizes all bars are connected, then as range is shrunk,\par
    //!    bar's get drawn 1 pixel apart, and finally after zooming more, bars are spaced.\par
\par
    // Note, the entire code to produce this example is shown below.\par
    // The immediate secion controls chart construction, latter sections show.\par
    // how to respond to mouse-move and table annotation hot spot events.\par
    // The final section shows how the data is loaded from a comma delimited.\par
    // file and studies calculated.\par
\par
    // This example shows a collection of features.\par
    // Table Annotation Hot Spots can turn table annotations into user interface objects.\par
    // Also shown is real-time table annotation updating and date/time handling.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_GRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // v9 features\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
    PEnset(m_hPE, PEP_nTRACKINGTOOLTIPMAXWIDTH, 100);\par
    PEnset(m_hPE, PEP_bTRACKINGCUSTOMDATATEXT, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSECURSORCONTROL, TRUE);\par
\par
    // Enable ZoomWindow //\par
    PEnset(m_hPE, PEP_bZOOMWINDOW, TRUE);\par
\par
    float fzf = 1.2F; PEvset(m_hPE, PEP_fMOUSEWHEELZOOMFACTOR, &fzf, 1);\par
    fzf = 1.1F; PEvset(m_hPE, PEP_fPINCHZOOMFACTOR, &fzf, 1);\par
\par
    // Enable MouseWheel Zooming\par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZ_ZOOM);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);  // note that pan gestures require MouseDragging to be enabled \par
\par
    // Enable MouseWheel Zoom Smoothness\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
\par
    // Enable Bar Glass Effect //\par
    PEnset(m_hPE, PEP_bBARGLASSEFFECT, TRUE);\par
\par
    // Enable Plotting style gradient and bevel features //\par
    PEnset(m_hPE, PEP_nAREAGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
    PEnset(m_hPE, PEP_nAREABEVELSTYLE, PEBS_MEDIUM_SMOOTH);\par
    PEnset(m_hPE, PEP_nSPLINEGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
    PEnset(m_hPE, PEP_nSPLINEBEVELSTYLE, PESBS_MEDIUM_SMOOTH);\par
\par
    // No Flicker //\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);  \par
\par
    // Fixed Font Sizes //\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    // YAxis Changes Range as you pan horizontally or zoom //\par
    PEnset(m_hPE, PEP_bSCROLLINGSCALECONTROL, TRUE);\par
\par
    // Construct a simple table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
    PEnset(m_hPE, PEP_nTAROWS, 17);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 1);  \par
\par
    // Pass the table text //\par
    DWORD dwColor;\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, TEXT(" MSFT"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 1, 0, TEXT(" SUNW"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 2, 0, TEXT(" ORCL"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 3, 0, TEXT(" IBM"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 4, 0, TEXT(" INTC"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 5, 0, TEXT(" NSM"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 6, 0, TEXT(" DELL"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 7, 0, TEXT(" WMT"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 8, 0, TEXT(" CVX"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 9, 0, TEXT(" PBG"));\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 10, 0, TEXT("-----------------"));\par
\par
    int nHS = 1;\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 0, 0, &nHS);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 1, 0, &nHS);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 2, 0, &nHS);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 3, 0, &nHS);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 4, 0, &nHS);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 5, 0, &nHS);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 6, 0, &nHS);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 7, 0, &nHS);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 8, 0, &nHS);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 9, 0, &nHS);\par
\par
    dwColor = PERGB( 255,198, 0, 0);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 0, &dwColor);\par
    dwColor = PERGB( 255,142, 142, 142);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 1, 0, &dwColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 2, 0, &dwColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 3, 0, &dwColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 4, 0, &dwColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 5, 0, &dwColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 6, 0, &dwColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 7, 0, &dwColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 8, 0, &dwColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 9, 0, &dwColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 10, 0, &dwColor);\par
    dwColor = PERGB( 255,150,150,150);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 11, 0, &dwColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 12, 0, &dwColor);\par
    dwColor = PERGB( 255,142,142,142);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 13, 0, &dwColor);\par
    dwColor = PERGB( 255,0,170,0);  PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 14, 0, &dwColor);\par
    dwColor = PERGB( 255,198,0,0);  PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 15, 0, &dwColor);\par
    dwColor = PERGB( 255,160,160,160);  PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 16, 0, &dwColor);\par
\par
    int nTACW = 8;\par
    PEvsetcell(m_hPE, PEP_naTACOLUMNWIDTH, 0, &nTACW);\par
\par
    // Set Table Location //\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_LEFT_CENTER);\par
\par
    // Other Table Related Properties ///\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_THIN_LINE);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 255,0, 0, 0));\par
    PEnset(m_hPE, PEP_dwTABLEFORECOLOR, PERGB(255, 190, 190, 190));\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 100);\par
\par
    // Done setting Table Annotations //\par
\par
    // Load Data and Add Studies, Total of 11 subsets when finished //\par
    // SubsetByPoint lets us add/remove points  //\par
    PEnset(m_hPE, PEP_bSUBSETBYPOINT, FALSE); \par
    LoadData(TEXT("MSFT"));\par
\par
    //! Set properties related to date/time mode //\par
    PEnset(m_hPE, PEP_nDELTASPERDAY, 1);\tab\tab // 1 data point per day\par
    PEnset(m_hPE, PEP_nDELTAX, -1);\tab\tab\tab\tab // -1 special code for daily data //\par
    PEnset(m_hPE, PEP_nDATETIMEMODE, PEDTM_VB); // How to interpret serial dates //\par
    PEnset(m_hPE, PEP_nYEARMONTHDAYPROMPT, PEDP_INSIDE_TOP);\par
    PEnset(m_hPE, PEP_nDAYLABELTYPE, PEDLT_1_CHAR);\par
    PEnset(m_hPE, PEP_nMONTHLABELTYPE, PEDLT_3_CHAR);\par
\par
    // Split up subsets among different axes //\par
    int nMAS[] = \{7, 1, 1, 2\};\par
    PEvset(m_hPE, PEP_naMULTIAXESSUBSETS, nMAS, 4);\par
    float fMAP[] = \{.55F, .15F, .15F, .15F\};\par
    PEvset(m_hPE, PEP_faMULTIAXESPROPORTIONS, fMAP, 4);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 2);\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLE, PEMAS_GROUP_ALL_AXES);\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
    PEnset(m_hPE, PEP_bYAXISONRIGHT, TRUE);\par
    PEnset(m_hPE, PEP_bSPECIFICPLOTMODECOLOR, TRUE); // Enables mult-colored candle stick fills\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_NONE);\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_nHOTSPOTSIZE, PEHSS_LARGE);\par
\par
    PEnset(m_hPE, PEP_nSHOWXAXIS, PESA_GRIDNUMBERS);\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_nPOINTSIZE, PEPS_SMALL);\par
    PEnset(m_hPE, PEP_bALLOWMAXIMIZATION, FALSE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_bSIMPLELINELEGEND, TRUE);\par
    PEnset(m_hPE, PEP_bSIMPLEPOINTLEGEND, TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_TOP_OF_AXIS);\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 1);\par
    PEnset(m_hPE, PEP_nOHLCMINWIDTH, 12); // Controls minium candle-stick width //\par
    \par
    PEnset(m_hPE, PEP_nGRAPHPLUSTABLEMENU, PEMC_HIDE);\par
    PEnset(m_hPE, PEP_nTABLEWHATMENU, PEMC_HIDE);\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLEMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATIONMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nSHOWTABLEANNOTATIONSMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
\par
    // Set up per axis properties //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_SPECIFICPLOTMODE);  \par
    PEnset(m_hPE, PEP_nSPECIFICPLOTMODE, PESPM_BOXPLOT);\par
    PEnset(m_hPE, PEP_nCOMPARISONSUBSETS, 3);\par
    PEnset(m_hPE, PEP_nSHOWYAXIS, PESA_GRIDNUMBERS);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nSHOWYAXIS, PESA_GRIDNUMBERS);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 2);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_LINE);\par
    PEnset(m_hPE, PEP_nSHOWYAXIS, PESA_GRIDNUMBERS);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 3);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_AREA);\par
    PEnset(m_hPE, PEP_nSHOWYAXIS, PESA_GRIDNUMBERS);\par
\par
    // Set Subset Colors //\par
    DWORD dwArray[11] = \{\tab PERGB( 255,160,160,160), PERGB( 255,160, 160, 160),\tab PERGB( 255,128,0,0), PERGB( 255,0,128,0),  \par
\tab\tab\tab\tab\tab\tab     PERGB( 80,235, 0, 0), PERGB( 80,235, 235, 0), PERGB( 80,0,235, 235),\tab PERGB( 255,170, 170, 170),\par
\tab\tab\tab\tab\tab\tab     PERGB( 255,0, 140, 140),PERGB( 180,0, 195, 0), PERGB( 120,165,165,165)\};\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwArray, 11);\par
\par
    int nSLT = PELT_THINSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &nSLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 1, &nSLT);\par
    nSLT = PELT_MEDIUMTHINSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 2, &nSLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 3, &nSLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 4, &nSLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 5, &nSLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 6, &nSLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 7, &nSLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 8, &nSLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 9, &nSLT);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 10, &nSLT);\par
\par
    // Set Subset Labels //\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("High"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Low"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 2, TEXT("Open"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 3, TEXT("Close"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 4, TEXT("Bollinger Upper"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 5, TEXT("SMA 20"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 6, TEXT("Bollinger Lower"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 7, TEXT("Volume"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 8, TEXT("Relative Strength Index - 10"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 9, TEXT("Fast %K"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 10, TEXT("Slow %D"));\par
\par
    PEnset(m_hPE, PEP_nGRADIENTBARS, 14);\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTTOP, 75);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 75);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 75);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    // Set some random annotations //       \par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWANNOTATIONTEXTMENU, PEMC_SHOW);\par
\par
    double d;  \tab int t;   float f;\par
    int aCnt = 0;\par
    TCHAR szAnnotText[128];\par
    for (int annot = 0; annot < 15; annot++)\par
    \{\par
        int nRndRow = (int)(GetRandom(1, 4));\par
        int nRndCol = (int)(GetRandom(1, PEnget(m_hPE, PEP_nPOINTS)));\par
        d = nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_SMALLDOWNTRIANGLESOLID; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
        t = PEAZ_GRAPH_AND_ZOOMWINDOW; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONZOOM, aCnt, &t);\par
        aCnt++;\par
        d = nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("Annotation %d"), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        aCnt++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 115);\par
    PEnset(m_hPE, PEP_nMAXIMUMSYMBOLSIZE, PEMPS_LARGE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTMINSYMBOLSIZE, PEMPS_LARGE);\par
\par
\par
    // v7.2 new features //\par
    PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
    PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
    PEnset(m_hPE, PEP_nLINESYMBOLTHICKNESS, 3);\par
    PEnset(m_hPE, PEP_nAREABORDER, 0);\par
    PEnset(m_hPE, PEP_nSOLIDLINEOVERAREA, 1);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, TRUE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
/*\par
    ///////////////////////////////////\par
    // Mouse Move Handler, OnCommand //\par
    ///////////////////////////////////\par
\par
    else if ((m_nLastSelection == 30) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
    \{\par
        int nX;\par
        int nY;\par
        double fX;\par
        double fY;\par
        double fI;\par
        POINT pt;\par
        int nA;\par
        TCHAR buffer[128];\par
        TCHAR szDate[48];\par
        TCHAR szF[48];\par
        float fHigh, fLow, fOpen, fClose, fVolume;\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        nA = 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
        nX = pt.x;   //Initialize nX and nY with mouse location\par
        nY = pt.y;\par
        PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
        // We now know data coordinates for mouse location //\par
\par
        // Code to pick closest point index //\par
        fY = modf(fX, &fI);\par
        if (fY > .5)\par
            nX = (int) floor(fX);\par
        else\par
            nX = (int) floor(fX) - 1;\par
\par
        if (fX < 1 || fX > 731)  // 731 points per subset in data file\par
        \{\par
            lstrcpy(buffer, TEXT("        "));\par
            PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 11, 0, buffer);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 12, 0, buffer);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 13, 0, buffer);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 14, 0, buffer);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 15, 0, buffer);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 16, 0, buffer);\par
            PEdrawtable(m_hPE, 0, NULL);\par
            return TRUE;\par
        \}\par
\par
        fX -= 1.0F;\par
\par
        // Get Data at closest point //\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 0, nX, &fHigh);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 1, nX, &fLow);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 2, nX, &fOpen);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 3, nX, &fClose);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 7, nX, &fVolume);\par
        PEvgetcell(m_hPE, PEP_szaPOINTLABELS, nX, szDate);\par
\par
        // Place text in table annotation //\par
        // Get numeric precision //\par
        nX = PEnget(m_hPE, PEP_nDATAPRECISION);\par
\par
        TCHAR szPrecision[10];\par
        _itot(nX, szPrecision, 10);\par
\par
        // Place text in table annotation //\par
        PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 11, 0, szDate);\par
\par
        lstrcpy(szF, TEXT("H:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
        _stprintf(buffer, szF, fHigh);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 12, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("L:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
        _stprintf(buffer, szF, fLow);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 13, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("O:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
        _stprintf(buffer, szF, fOpen);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 14, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("C:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
        _stprintf(buffer, szF, fClose);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 15, 0, buffer);\par
\par
        _stprintf(buffer, TEXT("V:%.0f "), fVolume);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 16, 0, buffer);\par
\par
        PEdrawtable(m_hPE, 0, NULL);\par
\par
        return TRUE;\par
    \}\par
\par
    ///////////////////////////////////////\par
    // Table Hot Spot Handler, OnCommand //\par
    ///////////////////////////////////////\par
\par
    else if ((m_nLastSelection == 30) && (HIWORD(wp) == PEWN_CLICKED))\par
    \{\par
        // Look for table hot spot and change financial data //\par
\par
        HOTSPOTDATA hsd;\par
\par
        // now look at HotSpotData structure //\par
        PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
        if (hsd.nHotSpotType == PEHS_TABLEANNOTATION + 0) // zero represents first table annotation\par
        \{\par
            PEnset(m_hPE, PEP_bZOOMMODE, FALSE);\par
            PEnset(m_hPE, PEP_nPOINTSTOGRAPH, 0);\par
\par
            // Change color of select table item //\par
            DWORD dwColor = PERGB( 255,142, 142, 142);\par
            for (int i=0; i<10; i++)\par
\tab             PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, i, 0, &dwColor);\par
            dwColor = PERGB( 255,198, 0, 0);\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, hsd.w1, hsd.w2, &dwColor);\par
\par
            TCHAR szSym[32];\par
            PEvgetcellEx(m_hPE, PEP_szaTATEXT, hsd.w1, hsd.w2, szSym);\par
\par
            // OK, Change Data //\par
            LoadData(&szSym[1]);  // [1] because there is a lead space character\par
\par
            PEreinitialize(m_hPE);\par
            PEresetimage(m_hPE, 0, 0);\par
            ::InvalidateRect(m_hPE, 0, 0);\par
        \}\par
\par
        // Look to see if a data hot spot was clicked //\par
\par
        if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
        \{\par
            PEnset(m_hPE, PEP_nCURSORMODE, PECM_POINT); // Enable Vertical Cursor Mode.\par
            PEnset(m_hPE, PEP_nCURSORPOINT, hsd.w2);    // Set Cursor's focus selected point.\par
            PEresetimage(m_hPE, 0, 0);\par
        \}\par
    \}\par
\par
    ////////////////////////////////////\par
    // CustomTrackingDataText Handler //\par
    ////////////////////////////////////\par
\par
    else if ((m_nLastSelection == 30) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))  // v9 feature\par
    \{\par
        int nX, nY, nA;\par
        double fX, fY,fI;\par
        POINT pt;\par
        TCHAR buffer[256];\par
        TCHAR buffer2[256];\par
        TCHAR szDate[48];\par
        TCHAR szF[48];\par
        float fHigh, fLow, fOpen, fClose, fVolume;\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        nA = 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
        nX = pt.x;   //Initialize nX and nY with mouse location\par
        nY = pt.y;\par
        PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
        // We now know data coordinates for mouse location //\par
\par
        // Code to pick closest point index //\par
        fY = modf(fX, &fI);\par
        if (fY > .5)\par
            nX = (int) floor(fX);\par
        else\par
            nX = (int) floor(fX) - 1;\par
\par
        if (fX < 1 || fX > 731)  // 731 points per subset in data file\par
        \{\par
            lstrcpy(buffer, TEXT("        "));\par
            PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
            return TRUE;\par
        \}\par
        fX -= 1.0F;\par
\par
        if (!PEnget(m_hPE, PEP_nTRACKINGPROMPTTRIGGER) == PETPT_MOUSEMOVE)\par
        \{\par
            // Trigger not mouse, must be a cursormove event, get cursor location...\par
            nX = PEnget(m_hPE, PEP_nCURSORPOINT);\par
        \}\par
\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 0, nX, &fHigh);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 1, nX, &fLow);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 2, nX, &fOpen);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 3, nX, &fClose);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 7, nX, &fVolume);\par
        PEvgetcell(m_hPE, PEP_szaPOINTLABELS, nX, szDate);\par
\par
        // Place text in table annotation //\par
        // Get numeric precision //\par
        nX = PEnget(m_hPE, PEP_nDATAPRECISION);\par
\par
        TCHAR szPrecision[10];\par
        _itot(nX, szPrecision, 10);\par
\par
        lstrcpy(buffer, szDate);\par
        lstrcat(buffer, TEXT("      \\n"));\par
\par
        lstrcpy(szF, TEXT("H: %."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f \\n"));\par
        _stprintf(buffer2, szF, fHigh);\par
        lstrcat(buffer, buffer2);\par
\par
        lstrcpy(szF, TEXT("L: %."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f \\n"));\par
        _stprintf(buffer2, szF, fLow);\par
        lstrcat(buffer, buffer2);\par
\par
        lstrcpy(szF, TEXT("O: %."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f \\n"));\par
        _stprintf(buffer2, szF, fOpen);\par
        lstrcat(buffer, buffer2);\par
\par
        lstrcpy(szF, TEXT("C: %."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f \\n"));\par
        _stprintf(buffer2, szF, fClose);\par
        lstrcat(buffer, buffer2);\par
\par
        _stprintf(buffer2, TEXT("V: %.0f "), fVolume);\par
        lstrcat(buffer, buffer2);\par
\par
        PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\par
        return TRUE;\par
    \}\par
\par
    ////////////////////////////////////\par
    // Cursor Move Handler, OnCommand //\par
    ////////////////////////////////////\par
\par
    else if ((m_nLastSelection == 30) && (HIWORD(wp) == PEWN_CURSORMOVE))\par
    \{\par
        int nX;\par
        TCHAR buffer[128];\par
        TCHAR szDate[24];\par
        TCHAR szF[24];\par
\par
        nX = PEnget(m_hPE, PEP_nCURSORPOINT);\par
\par
        float fHigh, fLow, fOpen, fClose, fVolume;\par
\par
        // Get Data at closest point //\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 0, nX, &fHigh);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 1, nX, &fLow);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 2, nX, &fOpen);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 3, nX, &fClose);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 7, nX, &fVolume);\par
        PEvgetcell(m_hPE, PEP_szaPOINTLABELS, nX, szDate);\par
\par
        // Get numeric precision //\par
        nX = PEnget(m_hPE, PEP_nDATAPRECISION);\par
\par
        TCHAR szPrecision[10];\par
        _itot(nX, szPrecision, 10);\par
\par
        // Place text in table annotation //\par
        PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 11, 0, szDate);\par
\par
        lstrcpy(szF, TEXT("H:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
        _stprintf(buffer, szF, fHigh);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 12, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("L:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
        _stprintf(buffer, szF, fLow);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 13, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("O:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
        _stprintf(buffer, szF, fOpen);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 14, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("C:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
        _stprintf(buffer, szF, fClose);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 15, 0, buffer);\par
\par
        _stprintf(buffer, TEXT("V:%.0f "), fVolume);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 16, 0, buffer);\par
\par
        PEdrawtable(m_hPE, 0, NULL);\par
    \}\par
\par
    ///////////////////////\par
    // LoadData Function //\par
    ///////////////////////\par
\par
    void CPEView::LoadData(TCHAR* pName)\par
    \{\par
        // Function to load financial data from a comma delimited file //\par
        USES_CONVERSION;\par
\par
        PEnset(m_hPE, PEP_nSUBSETS, 11);\par
        PEnset(m_hPE, PEP_nPOINTS, 1000);  // setting to a large value, later we will reduce //\par
        PEnset(m_hPE, PEP_bUSINGXDATAII, TRUE);\par
\par
        double d;\par
        TCHAR szFile[48];\par
        float f1, f2, f3, f4, f5;\par
        int nCnt = 0;\par
        int result;\par
        char szYear[3]; szYear[2] = 0;\par
        char szMonth[3]; szMonth[2] = 0;\par
        char szDay[3]; szDay[2] = 0;\par
        char szLabel[10];\par
        TM tm;\par
\par
        tm.nHour = 12; \par
        tm.nMinute = 0;\par
        tm.nSecond = 0;\par
        tm.nMilliSecond = 0;\par
\par
        lstrcpy(szFile, pName);\par
        lstrcat(szFile, TEXT(".txt"));\par
\par
        // Empty Data Before resetting //\par
        f2 = 0; \par
        PEvsetcell(m_hPE, PEP_faYDATA, -1, &f2);  // -1 special index causes array to resize to value defined by f2\par
        d = 0;  \par
        PEvsetcell(m_hPE, PEP_faXDATAII, -1, &d);  // -1 special index causes array to resize to value defined by d\par
        strcpy(szLabel,"0");  \par
        PEvsetcell(m_hPE, PEP_szaPOINTLABELS, -1, szLabel);  // -1 special index causes array to resize to value defined by szLabel\par
\par
        // Open Data File //\par
        FILE * pFile = NULL;\par
        pFile = _tfopen(szFile, TEXT("r"));\par
\par
        if (pFile)\par
        \{\par
            // Count records //\par
            while( !feof( pFile ) )\par
            \{\par
                // Parse out different fields //\par
                result = fscanf(pFile, "%c%c%c%c%c%c,%f,%f,%f,%f,%f\\n", &szYear[0], &szYear[1], &szMonth[0], &szMonth[1], &szDay[0], &szDay[1], &f1, &f2, &f3, &f4, &f5);\par
\par
                if (result == 11)\par
                \{\par
                    // Create serial date from string data and pass into XDataII //\par
                    tm.nYear = atoi(szYear);\par
                    if (tm.nYear > 90)\par
\tab                     tm.nYear = tm.nYear + 1900;\par
                    else if (tm.nYear < 10)\par
\tab                     tm.nYear = tm.nYear + 2000;\par
                    tm.nYear = tm.nYear - 1900;\par
                    tm.nMonth = atoi(szMonth);\par
                    tm.nDay = atoi(szDay);\par
                    PEcreateserialdate(&d, &tm, 1);\par
                    PEvsetcell(m_hPE, PEP_faXDATAII, nCnt, &d);\par
\par
                    // Pass OHLC Volume Data //\par
                    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, nCnt, &f2); //High\par
                    PEvsetcellEx(m_hPE, PEP_faYDATA, 1, nCnt, &f3); //Low\par
                    PEvsetcellEx(m_hPE, PEP_faYDATA, 2, nCnt, &f1); //Open\par
                    PEvsetcellEx(m_hPE, PEP_faYDATA, 3, nCnt, &f4); //Close\par
                    PEvsetcellEx(m_hPE, PEP_faYDATA, 7, nCnt, &f5); //Volume into 8th subset\par
\par
                    // Set PointLabel data, string representation of date //\tab\tab\tab\tab\par
                    szLabel[0] = 0;\par
                    strcat(szLabel, szMonth);\par
                    strcat(szLabel, "/");\par
                    strcat(szLabel, szDay);\par
                    strcat(szLabel, "/");\par
                    strcat(szLabel, szYear);\par
\par
                    const wchar_t * x = A2W((LPCSTR)szLabel);\par
                    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, nCnt, (LPVOID)x);\par
\par
                    // Store first date as StartTime property.  You must set StartTime property!\par
                    if (nCnt == 0)\par
                        PEvset(m_hPE, PEP_fSTARTTIME, &d, 1);\par
\par
                    nCnt++;\par
\tab             \}\par
            \}\par
            fclose(pFile);\par
\par
            // We now have data, let's make some studies //\par
\par
            int ID = 0;\par
            float f;\par
            double Days;\par
            int pnt, i;\par
            double Total = 0;\par
            double Total2 = 0;\par
            DWORD dw;\par
            int X = 1;\par
\par
            double SMAfBB, BBNum;\par
\par
            float* pYD3;\par
            pYD3 = new float[nCnt];\par
            if (!pYD3)\par
                return;\par
\par
            for (pnt=0; pnt<nCnt; pnt++)\par
                PEvgetcellEx(m_hPE, PEP_faYDATA, 3, pnt, &pYD3[pnt]);\par
\par
            // Middle Band = SMA       \par
            Days = 20;\par
            for (pnt=0; pnt<(nCnt-Days); pnt++)\par
            \{\par
                Total = 0;\par
                for (i=0+pnt; i<Days+pnt; i++)\par
                    Total = Total + pYD3[i];\par
                f = Total / Days; \par
                PEvsetcellEx(m_hPE, PEP_faYDATA, 5, pnt+Days-1, &f);\par
            \}\par
\par
            // Upper Band = Middle Band + [Standard Deviation * Square Root\{[Sum for x Days((Closing Price - Middle Band)^2)]/Days]\par
            for (pnt=0; pnt<(nCnt-Days); pnt++)\par
            \{\par
                Total = 0;\par
                for (i=0+pnt; i<Days+pnt; i++)\par
\tab                 Total = Total + pYD3[i];\par
                SMAfBB = Total / Days;\par
                // Find sum of Closing Price minus SMA over days and square\par
                BBNum = 0;\tab\par
                for (i=0+pnt; i<Days+pnt; i++)\par
                    BBNum = ((pYD3[i] - SMAfBB) * (pYD3[i] - SMAfBB)) + BBNum;\par
\par
                f = SMAfBB + 2.0F * sqrt(BBNum / Days);\par
                PEvsetcellEx(m_hPE, PEP_faYDATA, 4, pnt+Days-1, &f);  // upper \par
            \}\par
\par
            // Lower Band = Middle Band - [Standard Deviation * Square Root\{[Sum for x Days((Closing Price - Middle Band)^2)]/Days]\par
            for (pnt=0; pnt<(nCnt-Days); pnt++)\par
            \{\par
                Total = 0;\par
                for (i=0+pnt; i<Days+pnt; i++)\par
                    Total = Total + pYD3[i];\par
                SMAfBB = Total / Days;\par
                // Find sum of Closing Price minus SMA over days and square\par
                BBNum = 0;\tab\par
                for (i=0+pnt; i<Days+pnt; i++)\par
                    BBNum = ((pYD3[i] - SMAfBB) * (pYD3[i] - SMAfBB)) + BBNum;\par
\par
                f = SMAfBB - 2.0F * sqrt(BBNum / Days);\par
                PEvsetcellEx(m_hPE, PEP_faYDATA, 6, pnt+Days-1, &f);  // upper \par
            \}\par
\par
            Total = 0;\par
            Total2 = 0;\par
            float RS = 0;\par
            float RSI = 0;\par
            X = 1;\par
            int LowerCount = 0;\par
            int UpperCount = 0;\par
\par
            // How many days do you want to check\par
            Days = 10;\par
\par
            float* pUpperArray;\par
            float* pLowerArray;\par
            pUpperArray = new float[nCnt];\par
            pLowerArray = new float[nCnt];\par
\par
            for (i=1; i<=Days; i++)\par
            \{\par
                if ((pYD3[i] - pYD3[i - 1]) < 0)\par
                \{\par
                    pLowerArray[LowerCount] = (pYD3[i] - pYD3[i - 1]);\par
                    LowerCount = LowerCount + 1;\par
                \}\par
                else\par
                \{\par
                    pUpperArray[UpperCount] = (pYD3[i] - pYD3[i - 1]);\par
                    UpperCount = UpperCount + 1;\par
                \}\par
            \}\par
\tab         \par
            // Total the amounts over the period\par
            Total = 0;\par
            for (i=0; i<LowerCount; i++)\par
                Total = pLowerArray[i] + Total;\par
\par
            Total2 = 0;\par
            for (i=0; i<UpperCount; i++)\par
                Total2 = pUpperArray[i] + Total2;\par
\par
            // Divide up by down  \par
            RS = (Total2 / Days) / (fabs(Total) / Days);\par
\par
            // Use the RSI formula\par
            RSI = 100.0 - (100.0 / (1.0 + RS));\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, 8, Days-1, &RSI); \par
\par
            for (i=Days; i<nCnt; i++)\par
            \{\par
                if (pYD3[i] != 0 && pYD3[i - 1] != 0)\par
                \{\par
                    Total = Total * (Days - 1);\par
                    Total2 = Total2 * (Days - 1);\par
\par
                    if ((pYD3[i] - pYD3[i - 1]) < 0)\par
                        Total = (pYD3[i] - pYD3[i - 1]) + Total;\par
                    else\par
                        Total2 = (pYD3[i] - pYD3[i - 1]) + Total2;\par
\par
                    Total = Total / Days;\par
                    Total2 = Total2 / Days;\par
\par
                    RS = (Total2) / (fabs(Total));\par
                    RSI = 100.0 - (100.0 / (1.0 + RS));\par
                    PEvsetcellEx(m_hPE, PEP_faYDATA, 8, Days-1+i, &RSI); \par
                \}\par
            \}\par
\par
            // Add a mid axis line annotation \par
            d = 50.0;\tab\tab\tab PEvsetcell(m_hPE, PEP_faHORZLINEANNOTATION, 0, &d);\par
            i = 2;\tab\tab\tab\tab PEvsetcell(m_hPE, PEP_naHORZLINEANNOTATIONAXIS, 0, &i);\par
            i = 5;\tab\tab\tab\tab PEvsetcell(m_hPE, PEP_naHORZLINEANNOTATIONTYPE, 0, &i);\par
            dw = PERGB( 255,198,0,0);\tab PEvsetcell(m_hPE, PEP_dwaHORZLINEANNOTATIONCOLOR, 0, &dw);\par
            PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
\par
            // Set the working axis extents\par
            PEnset(m_hPE, PEP_nWORKINGAXIS, 2);\par
            PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
            d = 0.0;\tab\tab\tab PEvset(m_hPE, PEP_fMANUALMINY, &d, 1); \par
            d = 100.0;\tab\tab\tab PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1); \par
\par
            /////////////////////////////////////////////////////////////////////\tab\par
            // Stochastic Oscillator //\par
            ///////////////////////////\par
\par
            int SwFac, Dperiod, q;\par
            float LowMin, HighMax, SlowK, Dfactor, PercentD;\par
            LowMin = 9999.9F;\par
            HighMax = 0.0F;\par
\par
            float* pSlowOC;\par
            float* pKperiod;\par
            float* pHigh;\par
            float* pLow;\par
\par
            pSlowOC = new float[nCnt];\par
            pKperiod = new float[nCnt];\par
            pHigh = new float[nCnt];\par
            pLow = new float[nCnt];\par
\par
            for (pnt=0; pnt<nCnt; pnt++)\par
            \{\par
                PEvgetcellEx(m_hPE, PEP_faYDATA, 0, pnt, &pHigh[pnt]);\par
                PEvgetcellEx(m_hPE, PEP_faYDATA, 1, pnt, &pLow[pnt]);\par
            \}\par
\par
            // How many days do you want to check\par
            Days = 30;\par
            SwFac = 1;\par
            Dperiod = 15;\par
\par
            for (pnt=0; pnt<(nCnt-Days); pnt++)\par
            \{\par
                for (i=pnt; i<Days+pnt; i++)\par
                \{\par
                    if (pHigh[i] != 0) \par
                    \{\par
                        if (pHigh[i] > HighMax)\par
                            HighMax = pHigh[i];\par
                    \}\par
                \}\par
                for (i=pnt; i<Days+pnt; i++)\par
                \{\par
                    if (pLow[i] != 0) \par
                    \{\par
                        if (pLow[i] < LowMin)\par
                            LowMin = pLow[i];\par
                    \}\par
                \}\par
\par
                if (pYD3[(int) (Days - 1 + pnt)] != 0)\par
                    pKperiod[pnt] = ((pYD3[(int) (Days - 1 + pnt)] - LowMin) / (HighMax - LowMin)) * 100.0F;\par
\par
                LowMin = 9999.9F;\par
                HighMax = 0.0F;\par
            \} \par
\par
            for (pnt=0; pnt<nCnt-SwFac; pnt++)\par
            \{\par
                SlowK = 0;\par
                for (q = pnt; q<SwFac + pnt; q++)\par
                    SlowK = pKperiod[q] + SlowK;\par
\par
                pSlowOC[pnt] = SlowK / SwFac;\par
                PEvsetcellEx(m_hPE, PEP_faYDATA, 9, Days + pnt + SwFac, &pSlowOC[pnt]); \par
            \}                   \par
\par
            for (pnt=0; pnt<nCnt-Dperiod; pnt++)\par
            \{\par
                PercentD = 0;\par
                for (q = pnt; q<Dperiod + pnt; q++)\par
                    PercentD = pSlowOC[q] + PercentD;\par
                Dfactor = PercentD / Dperiod;\par
                PEvsetcellEx(m_hPE, PEP_faYDATA, 10, Days + pnt + Dperiod, &Dfactor); \par
            \}                   \par
\par
            // Set the working axis extents\par
            PEnset(m_hPE, PEP_nWORKINGAXIS, 3);\par
            PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
            d = 0.0;\tab\tab\tab PEvset(m_hPE, PEP_fMANUALMINY, &d, 1); \par
            d = 100.0;\tab\tab\tab PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1); \par
\par
            delete pYD3;\par
            delete pUpperArray;\par
            delete pLowerArray;\par
            delete pSlowOC;\par
            delete pKperiod;\par
            delete pHigh;\par
            delete pLow;\par
        \}\par
        else\par
        \{\par
            MessageBox(TEXT("Data File not found in program directory."));\par
            return;\par
        \}\par
\par
        // Set Points to number of records read, this requires PEP_bSUBSETBYPOINT be set to FALSE //\par
        PEnset(m_hPE, PEP_nPOINTS, nCnt);  // It's critical that points equals amount of XData passed\par
\par
    \} // End of LoadData function\par
\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
// LoadData //\par
void CPEView::LoadData(TCHAR* pName)\par
\{\par
\tab // Function to load financial data from a comma delimited file //\par
\tab USES_CONVERSION;\par
\par
\tab PEnset(m_hPE, PEP_nSUBSETS, 11);\par
\tab PEnset(m_hPE, PEP_nPOINTS, 1000);  // setting to a large value, later we will reduce //\par
\tab PEnset(m_hPE, PEP_bUSINGXDATAII, TRUE);\par
\par
\tab double d;\par
\tab TCHAR szFile[48];\par
\tab float f1, f2, f3, f4, f5;\par
\tab int nCnt = 0;\par
\tab int result;\par
\tab char szYear[3]; szYear[2] = 0;\par
\tab char szMonth[3]; szMonth[2] = 0;\par
\tab char szDay[3]; szDay[2] = 0;\par
\tab char szLabel[10];\par
\tab TM tm;\par
\par
\tab tm.nHour = 12; \par
    tm.nMinute = 0;\par
    tm.nSecond = 0;\par
    tm.nMilliSecond = 0;\par
\par
\tab lstrcpy(szFile, pName);\par
\tab lstrcat(szFile, TEXT(".txt"));\par
\par
    // Empty Data Before resetting //\par
    f2 = 0; \par
    PEvsetcell(m_hPE, PEP_faYDATA, -1, &f2);  // -1 special index causes array to resize to value defined by f2\par
    d = 0;  \par
    PEvsetcell(m_hPE, PEP_faXDATAII, -1, &d);  // -1 special index causes array to resize to value defined by d\par
    strcpy(szLabel,"0");  \par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, -1, szLabel);  // -1 special index causes array to resize to value defined by szLabel\par
\par
\tab // Open Data File //\par
\tab ::SetCurrentDirectory(szDirectory);\par
\par
\tab FILE * pFile = NULL;\par
\tab pFile = _tfopen(szFile, TEXT("r"));\par
\par
\tab if (pFile)\par
\tab\{\par
\tab\tab // Count records //\par
\tab\tab while( !feof( pFile ) )\par
\tab\tab\{\par
\tab\tab\tab // Parse out different fields //\par
\tab\tab\tab result = fscanf(pFile, "%c%c%c%c%c%c,%f,%f,%f,%f,%f\\n", &szYear[0], &szYear[1], &szMonth[0], &szMonth[1], &szDay[0], &szDay[1], &f1, &f2, &f3, &f4, &f5);\par
\par
\tab\tab\tab if (result == 11)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab // Create serial date from string data and pass into XDataII //\par
\tab\tab\tab\tab tm.nYear = atoi(szYear);\par
\tab\tab\tab\tab if (tm.nYear > 90)\par
\tab\tab\tab\tab\tab tm.nYear = tm.nYear + 1900;\par
\tab\tab\tab\tab else if (tm.nYear < 10)\par
\tab\tab\tab\tab\tab tm.nYear = tm.nYear + 2000;\par
\tab\tab\tab\tab tm.nYear = tm.nYear - 1900;\par
\tab\tab\tab\tab tm.nMonth = atoi(szMonth);\par
\tab\tab\tab\tab tm.nDay = atoi(szDay);\par
\tab\tab\tab\tab PEcreateserialdate(&d, &tm, 1);\par
\tab\tab\tab\tab PEvsetcell(m_hPE, PEP_faXDATAII, nCnt, &d);\par
\tab\tab\tab\tab\par
\tab\tab\tab\tab // Pass OHLC Volume Data //\par
\tab\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 0, nCnt, &f2); //High\par
\tab\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 1, nCnt, &f3); //Low\par
\tab\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 2, nCnt, &f1); //Open\par
\tab\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 3, nCnt, &f4); //Close\par
\tab\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 7, nCnt, &f5); //Volume into 8th subset\par
\par
\tab\tab\tab\tab // Set PointLabel data, string representation of date //\tab\tab\tab\tab\par
\tab\tab\tab\tab szLabel[0] = 0;\par
\tab\tab\tab\tab strcat(szLabel, szMonth);\par
\tab\tab\tab\tab strcat(szLabel, "/");\par
\tab\tab\tab\tab strcat(szLabel, szDay);\par
\tab\tab\tab\tab strcat(szLabel, "/");\par
\tab\tab\tab\tab strcat(szLabel, szYear);\par
\par
\tab\tab\tab\tab const wchar_t * x = A2W((LPCSTR)szLabel);\par
\tab\tab\tab\tab PEvsetcell(m_hPE, PEP_szaPOINTLABELS, nCnt, (LPVOID)x);\par
\par
\tab\tab\tab\tab // Store first date as StartTime property.  You must set StartTime property!\par
\tab\tab\tab\tab if (nCnt == 0)\par
\tab\tab\tab\tab\tab PEvset(m_hPE, PEP_fSTARTTIME, &d, 1);\par
\par
\tab\tab\tab\tab nCnt++;\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\tab fclose(pFile);\par
\par
\tab\tab // We now have data, let's make some studies //\par
\par
\tab\tab int ID = 0;\par
\tab\tab float f;\par
\tab\tab double Days;\par
\tab\tab int pnt, i;\par
\tab\tab double Total = 0;\par
\tab\tab double Total2 = 0;\par
\tab\tab DWORD dw;\par
\tab\tab int X = 1;\par
\par
\tab\tab double SMAfBB, BBNum;\par
\par
\tab\tab float* pYD3;\par
\tab\tab pYD3 = new float[nCnt];\par
\tab\tab if (!pYD3)\par
\tab\tab\tab return;\par
\par
        for (pnt=0; pnt<nCnt; pnt++)\par
            PEvgetcellEx(m_hPE, PEP_faYDATA, 3, pnt, &pYD3[pnt]);\par
\par
\tab\tab // Middle Band = SMA       \par
\tab\tab Days = 20;\par
\tab\tab for (pnt=0; pnt<(nCnt-Days); pnt++)\par
\tab\tab\{\par
\tab\tab\tab Total = 0;\par
\tab\tab\tab for (i=0+pnt; i<Days+pnt; i++)\par
\tab\tab\tab\tab Total = Total + pYD3[i];\par
\tab\tab\tab f = Total / Days; \par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 5, pnt+Days-1, &f);\par
\tab\tab\}\par
\par
        // Upper Band = Middle Band + [Standard Deviation * Square Root\{[Sum for x Days((Closing Price - Middle Band)^2)]/Days]\par
   \tab\tab for (pnt=0; pnt<(nCnt-Days); pnt++)\par
\tab\tab\{\par
\tab\tab\tab Total = 0;\par
\tab\tab\tab for (i=0+pnt; i<Days+pnt; i++)\par
\tab\tab\tab\tab Total = Total + pYD3[i];\par
\tab\tab\tab SMAfBB = Total / Days;\par
\tab\tab\tab // Find sum of Closing Price minus SMA over days and square\par
\tab\tab\tab BBNum = 0;\tab\par
\tab\tab\tab for (i=0+pnt; i<Days+pnt; i++)\par
\tab\tab\tab\tab BBNum = ((pYD3[i] - SMAfBB) * (pYD3[i] - SMAfBB)) + BBNum;\par
\par
            f = SMAfBB + 2.0F * sqrt(BBNum / Days);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 4, pnt+Days-1, &f);  // upper \par
\tab\tab\}\par
\par
        // Lower Band = Middle Band - [Standard Deviation * Square Root\{[Sum for x Days((Closing Price - Middle Band)^2)]/Days]\par
   \tab\tab for (pnt=0; pnt<(nCnt-Days); pnt++)\par
\tab\tab\{\par
\tab\tab\tab Total = 0;\par
\tab\tab\tab for (i=0+pnt; i<Days+pnt; i++)\par
\tab\tab\tab\tab Total = Total + pYD3[i];\par
\tab\tab\tab SMAfBB = Total / Days;\par
\tab\tab\tab // Find sum of Closing Price minus SMA over days and square\par
\tab\tab\tab BBNum = 0;\tab\par
\tab\tab\tab for (i=0+pnt; i<Days+pnt; i++)\par
\tab\tab\tab\tab BBNum = ((pYD3[i] - SMAfBB) * (pYD3[i] - SMAfBB)) + BBNum;\par
\par
            f = SMAfBB - 2.0F * sqrt(BBNum / Days);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 6, pnt+Days-1, &f);  // upper \par
\tab\tab\}\par
\par
\par
\tab\tab Total = 0;\par
\tab\tab Total2 = 0;\par
\tab\tab float RS = 0;\par
\tab\tab float RSI = 0;\par
\tab\tab X = 1;\par
\tab\tab int LowerCount = 0;\par
\tab\tab int UpperCount = 0;\par
\par
\tab\tab // How many days do you want to check\par
\tab\tab Days = 10;\par
        \par
\tab\tab float* pUpperArray;\par
\tab\tab float* pLowerArray;\par
\tab\tab pUpperArray = new float[nCnt];\par
\tab\tab pLowerArray = new float[nCnt];\par
\par
\par
\tab\tab for (i=1; i<=Days; i++)\par
\tab\tab\{\par
\tab\tab\tab if ((pYD3[i] - pYD3[i - 1]) < 0)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab pLowerArray[LowerCount] = (pYD3[i] - pYD3[i - 1]);\par
\tab\tab\tab\tab LowerCount = LowerCount + 1;\par
\tab\tab\tab\}\par
\tab\tab\tab else\par
\tab\tab\tab\{\par
\tab\tab\tab\tab pUpperArray[UpperCount] = (pYD3[i] - pYD3[i - 1]);\par
\tab\tab\tab\tab UpperCount = UpperCount + 1;\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\tab\par
\tab\tab // Total the amounts over the period\par
\tab\tab Total = 0;\par
\tab\tab for (i=0; i<LowerCount; i++)\par
\tab\tab\tab Total = pLowerArray[i] + Total;\par
\par
\tab\tab Total2 = 0;\par
\tab\tab for (i=0; i<UpperCount; i++)\par
\tab\tab\tab Total2 = pUpperArray[i] + Total2;\par
    \par
\tab\tab // Divide up by down  \par
\tab\tab RS = (Total2 / Days) / (fabs(Total) / Days);\par
    \par
\tab\tab // Use the RSI formula\par
\tab\tab RSI = 100.0 - (100.0 / (1.0 + RS));\par
\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 8, Days-1, &RSI); \par
\par
\tab\tab for (i=Days; i<nCnt; i++)\par
\tab\tab\{\par
\tab\tab\tab if (pYD3[i] != 0 && pYD3[i - 1] != 0)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab Total = Total * (Days - 1);\par
\tab\tab\tab\tab Total2 = Total2 * (Days - 1);\par
\tab\tab\tab\tab\par
\tab\tab\tab\tab if ((pYD3[i] - pYD3[i - 1]) < 0)\par
\tab\tab\tab\tab\tab Total = (pYD3[i] - pYD3[i - 1]) + Total;\par
\tab\tab\tab\tab else\par
\tab\tab\tab\tab\tab Total2 = (pYD3[i] - pYD3[i - 1]) + Total2;\par
\par
\tab\tab\tab\tab Total = Total / Days;\par
\tab\tab\tab\tab Total2 = Total2 / Days;\par
            \par
\tab\tab\tab\tab RS = (Total2) / (fabs(Total));\par
\tab\tab\tab\tab RSI = 100.0 - (100.0 / (1.0 + RS));\par
\tab\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 8, Days-1+i, &RSI); \par
\tab\tab\tab\}\par
\tab\tab\}\par
\par
\tab\tab // Add a mid axis line annotation \par
\tab\tab d = 50.0;\tab\tab\tab PEvsetcell(m_hPE, PEP_faHORZLINEANNOTATION, 0, &d);\par
\tab\tab i = 2;\tab\tab\tab\tab PEvsetcell(m_hPE, PEP_naHORZLINEANNOTATIONAXIS, 0, &i);\par
\tab\tab i = 5;\tab\tab\tab\tab PEvsetcell(m_hPE, PEP_naHORZLINEANNOTATIONTYPE, 0, &i);\par
\tab\tab dw = PERGB( 70,198,0,0);\tab PEvsetcell(m_hPE, PEP_dwaHORZLINEANNOTATIONCOLOR, 0, &dw);\par
\tab\tab PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
\par
\tab\tab // Set the working axis extents\par
\tab\tab PEnset(m_hPE, PEP_nWORKINGAXIS, 2);\par
\tab\tab PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
\tab\tab d = 0.0;\tab\tab\tab PEvset(m_hPE, PEP_fMANUALMINY, &d, 1); \par
\tab\tab d = 100.0;\tab\tab\tab PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1); \par
\par
\par
\tab\tab /////////////////////////////////////////////////////////////////////\tab\par
\tab\tab // Stochastic Oscillator //\par
\tab\tab ///////////////////////////\par
\par
        int SwFac, Dperiod, q;\par
        float LowMin, HighMax, SlowK, Dfactor, PercentD;\par
        LowMin = 9999.9F;\par
        HighMax = 0.0F;\par
\par
\tab\tab float* pSlowOC;\par
\tab\tab float* pKperiod;\par
\tab\tab float* pHigh;\par
\tab\tab float* pLow;\par
\par
\tab\tab pSlowOC = new float[nCnt];\par
\tab\tab pKperiod = new float[nCnt];\par
\tab\tab pHigh = new float[nCnt];\par
\tab\tab pLow = new float[nCnt];\par
\par
        for (pnt=0; pnt<nCnt; pnt++)\par
\tab\tab\{\par
            PEvgetcellEx(m_hPE, PEP_faYDATA, 0, pnt, &pHigh[pnt]);\par
            PEvgetcellEx(m_hPE, PEP_faYDATA, 1, pnt, &pLow[pnt]);\par
\tab\tab\}\par
        \par
        // How many days do you want to check\par
        Days = 30;\par
        SwFac = 1;\par
        Dperiod = 15;\par
\par
\tab\tab for (pnt=0; pnt<(nCnt-Days); pnt++)\par
\tab\tab\{\par
\tab\tab\tab for (i=pnt; i<Days+pnt; i++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab if (pHigh[i] != 0) \par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab if (pHigh[i] > HighMax)\par
\tab\tab\tab\tab\tab\tab HighMax = pHigh[i];\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\}\par
\tab\tab\tab for (i=pnt; i<Days+pnt; i++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab if (pLow[i] != 0) \par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab if (pLow[i] < LowMin)\par
\tab\tab\tab\tab\tab\tab LowMin = pLow[i];\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\}\par
\par
\tab\tab\tab if (pYD3[(int) (Days - 1 + pnt)] != 0)\par
\tab\tab\tab\tab pKperiod[pnt] = ((pYD3[(int) (Days - 1 + pnt)] - LowMin) / (HighMax - LowMin)) * 100.0F;\par
\tab\tab\par
\tab         LowMin = 9999.9F;\par
\tab\tab\tab HighMax = 0.0F;\par
\tab\tab\} \par
\par
\tab\tab for (pnt=0; pnt<nCnt-SwFac; pnt++)\par
\tab\tab\{\par
\tab         SlowK = 0;\par
\tab\tab\tab for (q = pnt; q<SwFac + pnt; q++)\par
\tab\tab\tab\tab SlowK = pKperiod[q] + SlowK;\par
\tab\tab\par
            pSlowOC[pnt] = SlowK / SwFac;\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 9, Days + pnt + SwFac, &pSlowOC[pnt]); \par
\tab\tab\}                   \par
\par
\tab\tab for (pnt=0; pnt<nCnt-Dperiod; pnt++)\par
\tab\tab\{\par
\tab         PercentD = 0;\par
\tab\tab\tab for (q = pnt; q<Dperiod + pnt; q++)\par
\tab\tab\tab\tab PercentD = pSlowOC[q] + PercentD;\par
\tab\tab\tab Dfactor = PercentD / Dperiod;\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 10, Days + pnt + Dperiod, &Dfactor); \par
\tab\tab\}                   \par
\par
\tab\tab // Set the working axis extents\par
\tab\tab PEnset(m_hPE, PEP_nWORKINGAXIS, 3);\par
\tab\tab PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
\tab\tab d = 0.0;\tab\tab\tab PEvset(m_hPE, PEP_fMANUALMINY, &d, 1); \par
\tab\tab d = 100.0;\tab\tab\tab PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1); \par
\par
\tab\tab delete pYD3;\par
\tab\tab delete pUpperArray;\par
\tab\tab delete pLowerArray;\par
\tab\tab delete pSlowOC;\par
\tab\tab delete pKperiod;\par
\tab\tab delete pHigh;\par
\tab\tab delete pLow;\par
\tab\}\par
\tab else\par
\tab\{\par
\tab\tab MessageBox(TEXT("Data File not found in program directory."));\par
        PEreset(m_hPE);\par
\tab\tab return;\par
\tab\}\par
\par
\tab // Set Points to number of records read, this requires PEP_bSUBSETBYPOINT be set to FALSE //\par
\tab PEnset(m_hPE, PEP_nPOINTS, nCnt);  // It's critical that points equals amount of XData passed\par
\par
\}\par
\par
\par
//***************************************************************************\par
//031  Graph showing SubsetObstacles and moveable annotation text\par
void CPEView::GraphWithObstacles()\par
\{\par
\tab //! Note how annotation text does not overlap lines in bottom axes. \par
\tab //! Left click and drag to zoom chart.  Note how text locations change as you zoom.\par
\tab //! Left click and drag annotation text to move annotation text. \par
\tab //!\par
\tab //! This example demonstrates new annotation text positioning logic which prevents all text\par
\tab //! from overlapping.  It also shows how to 1) manually position text with an annotation,  \par
\tab //! 2) allow user to move annotation text, and 3) declare subsets as obstacles so annotation text\par
\tab //! doesn't overlap subsets.  It also ahows how to change the default location where\par
\tab //! annotation text is automatically positioned.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    m_hPE = PEcreate(PECONTROL_GRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Prepare images in memory //\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
\par
    // Pass Data //\par
    PEnset(m_hPE, PEP_nSUBSETS, 4);\par
    PEnset(m_hPE, PEP_nPOINTS, 100);\par
\par
    float fY;\par
    double d1;\par
    BOOL bAddAnnot;\par
    int nCount;\par
\par
    bAddAnnot = FALSE;\par
    nCount = 0;\par
    for (int p=0; p<=99; p++)\par
    \{\par
        fY = 105.0F + (20 * sin(0.1 * p)) + GetRandom(1, 5);\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 0, p, &fY);\par
\par
        fY = 105.0F + (20 * sin(0.1 * p)) + GetRandom(1, 5) + 30;\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 1, p, &fY);\par
        d1 = fY;\par
\par
        fY = 105.0F + (20 * sin(0.4 * p)) + GetRandom(1, 5) + 30;\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 2, p, &fY);\par
\par
        fY = 105.0F + (20 * sin(0.1 * p)) + GetRandom(1, 5) + 20;\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 3, p, &fY);\par
\par
        if (bAddAnnot)\par
        \{\par
            double d;\par
            d = (p * 1) + 1;\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, nCount, &d);\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, nCount, &d1);\par
\par
            switch(GetRandom(0, 5))\par
            \{\par
                case 0:\par
                    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, nCount, TEXT("High"));\par
                    break;\par
                case 1:\par
                    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, nCount, TEXT("Med High"));\par
                    break;\par
                case 2:\par
                    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, nCount, TEXT("Medium"));\par
                    break;\par
                case 3:\par
                    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, nCount, TEXT("Med Low"));\par
                    break;\par
                default:\par
                    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, nCount, TEXT("Low"));\par
                    break;\par
            \}\par
\par
            int nType = PEGAT_POINTER;\par
            PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, nCount, &nType);\par
            int nA = 1;\par
            PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONAXIS, nCount, &nA);\par
            nCount ++;\par
        \}\par
        bAddAnnot = !bAddAnnot;\par
    \}\par
\par
    // The following code manully places annotation text at separate coordinates than annotation. //\par
    // GraphAnnotationText has |H special justifation code which signifies that coordinates follow. //\par
    // Note that coordinates are split and terminated with pipe symbol. //\par
    double d = 20;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, nCount, &d);\par
    d = 90;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, nCount, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, nCount, TEXT("|H33.0|120.0|Text offset from pointer"));\par
    int nType = PEGAT_POINTER;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, nCount, &nType);\par
\par
    // Set Plotting Methods per Subset //\par
    int nPMs[] = \{PEGPM_BAR, PEGPM_LINE, PEGPM_POINTSPLUSBFCGRAPHED, PEGPM_STEP\};\par
    PEvset(m_hPE, PEP_naPLOTTINGMETHODS, nPMs, 4);\par
    PEnset(m_hPE, PEP_nBESTFITDEGREE, 2);\par
\par
    // Designate 2nd, 3rd, and 4th subset as obstacles //\par
    BOOL bSubsetObstacles[4] = \{FALSE, TRUE, TRUE, TRUE\};\par
    PEvset(m_hPE, PEP_naSUBSETOBSTACLES, bSubsetObstacles, 4);\par
\par
    // This code replaces the first default text location attempted for automatic text placement //\par
    // Setting to 270 causes text to be centered above annotation location if no obstacle is found //\par
    int nNewDefaultTextPostion = 270;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTTEXTLOCATION, 0, &nNewDefaultTextPostion);\par
\par
    // Show annotations and allow graph hot spots and moveable annotation text //\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWGRAPHANNOTHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTMOVEABLE, PEGAM_POINTER);\par
\par
    // Split up subsets among different axes //\par
    int nMAS[] = \{1, 3\};\par
    PEvset(m_hPE, PEP_naMULTIAXESSUBSETS, nMAS, 2);\par
    float fMAP[] = \{.30F, .70F, \};\par
    PEvset(m_hPE, PEP_faMULTIAXESPROPORTIONS, fMAP, 2);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Drag a string"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("")); \par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_NONE);\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORIZONTAL);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
    // Subset labels //\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("Texas" ));\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Florida" ));\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 2, TEXT("Washington" ));\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 3, TEXT("California" ));\par
\par
    // Subset colors //\par
    DWORD dwArray[4] = \{ PERGB( 128,192, 192, 198), PERGB( 128, 0, 198, 198 ), PERGB( 128, 198,198,0 ), PERGB( 128, 0,198,0 ) \};\par
    PEvsetEx(m_hPE, PEP_dwaSUBSETCOLORS, 0, 4, dwArray, 0);\par
\par
    // Subset line types //\par
    int nLineTypes[] = \{ PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, \par
        PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, \par
        PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, PELT_MEDIUMSOLID\};\par
    PEvset(m_hPE, PEP_naSUBSETLINETYPES, nLineTypes, 8);\par
\par
    // Various other features //\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_LINE);\par
    PEnset(m_hPE, PEP_bSIMPLEPOINTLEGEND, TRUE);\par
    PEnset(m_hPE, PEP_bSIMPLELINELEGEND, TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE);\par
\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 85);\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLE, PEMAS_SEPARATE_AXES);\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLEMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATIONMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_bALLOWSTEP, TRUE);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_3D);\par
\par
    PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
    PEnset(m_hPE, PEP_nPOINTSTOGRAPH, 50);\par
\par
    // v7.2 new features //\par
    PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
    PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
    PEnset(m_hPE, PEP_nLINESYMBOLTHICKNESS, 3);\par
    PEnset(m_hPE, PEP_nAREABORDER, 1);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, 1);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    // v9 features\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
\}\par
\par
\par
//***************************************************************************\par
//032 Graph showing 16 axes \par
void CPEView::GraphWith16Axes()\par
\{\par
    //! Also added is AxisBackColor, AxisForeColor, and AxisBorderType.\par
    //! Select Graph menu from within the View menu to maximize this example.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    m_hPE = PEcreate(PECONTROL_GRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Disable banding //\par
    PEnset(m_hPE, PEP_bGRIDBANDS, FALSE);\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
\par
    // Pass Data //\par
    PEnset(m_hPE, PEP_nSUBSETS, 32);\par
    PEnset(m_hPE, PEP_nPOINTS, 100);\par
\par
    float fY;\par
    float fRnd;\par
    TCHAR tempbuff[64];\par
\par
    int s;\par
    for (s=0; s<=31; s++)\par
    \{\par
        fRnd = (float) GetRandom(2, 9);\par
\par
        // pass 100 points of subset data //\par
        for (int p=0; p<=99; p++)\par
        \{\par
\par
            fY = 10.0F + (.6 * fRnd  * sin(fRnd * p)) ;\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &fY);\par
        \}\par
\par
        // set subsetlabel //\par
        _stprintf(tempbuff, TEXT("Sin%.1f"), fRnd);\par
        PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, s, tempbuff);\par
    \}\par
\par
    // Set various axis parameters //\par
    for (int axis=0; axis<=15; axis++)\par
    \{\par
        PEnset(m_hPE, PEP_nWORKINGAXIS, axis);\par
        PEnset(m_hPE, PEP_nSHOWYAXIS, PESA_GRIDNUMBERS);\par
\par
        // set y axis label //\par
        _stprintf(tempbuff, TEXT("Axis %d"), axis+1);\par
        PEszset( m_hPE, PEP_szYAXISLABEL, tempbuff);\par
\par
        PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
        double d = 0.0F;\par
        PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
        d = 20.0F;\par
        PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
\par
        PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_LINE);\par
        PEnset(m_hPE, PEP_nCOMPARISONSUBSETS, 1);\par
        PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_STEP);\par
    \}\par
\par
    // Set various subset parameters //\par
    DWORD dwArray[2] = \{ PERGB( 79,0, 32, 198), PERGB( 199, 225, 0, 0 ) \};\par
\par
    int nColorIndex = 0;\par
    for (s=0; s<=32; s++)\par
    \{\par
        int nLineType = PELT_THINSOLID;\par
        PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, s, &nLineType);\par
\par
        DWORD dw = dwArray[nColorIndex];\par
        PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, s, &dw);\par
        nColorIndex ++; if (nColorIndex > 1) nColorIndex = 0;\par
    \}\par
\par
    // Set various point parameters //\par
    TCHAR szLabel[64];\par
    for (int p=0; p<100; p++)\par
    \{\par
        _stprintf(szLabel, TEXT("Data#%.1d"), (p+1));\par
        PEvsetcell( m_hPE, PEP_szaPOINTLABELS, p, szLabel);\par
    \}\par
    PEnset(m_hPE, PEP_nFORCEVERTICALPOINTS, PEFVP_HORZ );\par
\par
    // Various other features //\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_SMALL);\par
    float fFS = .90F;\par
    PEvset(m_hPE, PEP_fFONTSIZEGLOBALCNTL, &fFS, 1);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_NO_BORDER);\par
\par
    PEnset(m_hPE, PEP_bSIMPLEPOINTLEGEND, TRUE);\par
    PEnset(m_hPE, PEP_bSIMPLELINELEGEND, TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_INSIDE_OVERLAP );\par
\par
    // Split up subsets among different axes //\par
    int nMAS[] = \{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 ,2 \}; //16 elements\par
    PEvset(m_hPE, PEP_naMULTIAXESSUBSETS, nMAS, 16);\par
\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLE, PEMAS_SEPARATE_AXES);\par
    PEnset(m_hPE, PEP_nMULTIAXISSEPARATORSIZE, 65);\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLEMENU, PEMC_SHOW);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("16 Axes with axis forecolor backcolor mouse control"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("")); \par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
    // Various other features //\par
    PEnset(m_hPE, PEP_bALLOWSTEP, TRUE);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_NONE);\par
\par
    PEnset(m_hPE, PEP_nGRADIENTBARS, 12);\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_NO_TEXT );\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nPOINTSTOGRAPH, 50);\par
\par
    PEnset(m_hPE, PEP_dwGRAPHFORECOLOR, PERGB(50, 0, 0, 0));\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
\par
    // v7.2 new features //\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, 1);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    // v9 features\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_YVALUE);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
    ////////////////////////////////////////////////////////\par
    // Assocated event processing is located in OnCommand //\par
    ////////////////////////////////////////////////////////\par
/*\par
    if ((m_nLastSelection == 32) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
    \{\par
\par
        if (PEnget(m_hPE, PEP_bPROCESSINGMOUSEMOVE))\par
            return TRUE;\par
\par
        // If mouse is inside an axis, change it's back color to WHITE //\par
\par
        // Determine if mouse is within an axis //\par
\par
        POINT pt;\par
        RECT r;\par
        int nChangedAxisColor = -1;\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        for (int a = 0; a<16; a++)\par
        \{\par
            PEnset(m_hPE, PEP_nWORKINGAXIS, a);\par
\par
            // test to see if this is within an Axis area //\par
            PEvget(m_hPE, PEP_rectAXIS, &r);\par
            if ((pt.x > r.left) && (pt.x < r.right) && (pt.y > r.top) && (pt.y < r.bottom))\par
            \{    \par
                DWORD dwCurrentColor = PEnget(m_hPE, PEP_dwAXISBACKCOLOR);\par
                if (dwCurrentColor != PERGB(255, 255, 255, 255))\par
                \{\par
                    PEnset(m_hPE, PEP_dwAXISBACKCOLOR, PERGB(255, 255, 255, 255));\par
                    PEnset(m_hPE, PEP_dwAXISFORECOLOR, PERGB(255, 255, 0, 0));\par
\par
                    nChangedAxisColor= a;\par
                \}\par
                break;\par
            \}\par
        \}\par
\par
        if (nChangedAxisColor > -1)\par
        \{\par
            for (int a = 0; a<16; a++)\par
            \{\par
                if (a != nChangedAxisColor)\par
                \{\par
                    PEnset(m_hPE, PEP_nWORKINGAXIS, a);\par
                    PEnset(m_hPE, PEP_dwAXISBACKCOLOR, 1); // 1 is default, use PEP_dwGRAPHBACKCOLOR\par
                    PEnset(m_hPE, PEP_dwAXISFORECOLOR, 1); // 1 is default, use PEP_dwGRAPHFORECOLOR\par
                \}\par
            \}\par
            PEresetimage(m_hPE, 0, 0);\par
            ::InvalidateRect(m_hPE, NULL, FALSE);\par
            ::UpdateWindow(m_hPE);\par
        \}\par
\par
        return TRUE;\par
    \}\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
//033 Graph showing subset order control \par
void CPEView::GraphWithSubsetOrderControl()\par
\{\par
    //! Features PEP_naSUBSETSTOSHOW and PEP_naSUBSETSTOTABLE control visibility \par
    //! of subsets within the chart and table regions.\par
    //! SubsetsToShow not only controls visibility, but can also control the order.\par
    //! PEP_naRANDOMSUBSETSTOGRAPH can also control order and visibility of subsets plotted.\par
\par
    CreateSimpleGraph();\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BARSTACKED);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_SHADOW);\par
\par
\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_LEFT);\par
\par
    // Controlling order how subsets are plotted //\par
    int nRSTG[4] = \{3, 2, 1, 0\};\par
    PEvset(m_hPE, PEP_naRANDOMSUBSETSTOGRAPH, nRSTG, 4);\par
\par
    // Controlling order of items in legend //\par
    int nSTL[4] = \{0, 1, 2, 3\};\par
    PEvset(m_hPE, PEP_naSUBSETSTOLEGEND, nSTL, 4);\par
\par
    // Controlling order of items in table below chart //\par
    int nSTT[4] = \{0, 1, 2, 3\};\par
    PEvset(m_hPE, PEP_naSUBSETSTOTABLE, nSTT, 4);\par
\par
    // Initialize chart to get graph border rectangle //\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
\par
\}\par
\par
//***************************************************************************\par
//034 Graph showing moveable table\par
void CPEView::GraphWithMoveableTable()\par
\{\par
    //! Features PEP_naSUBSETSTOSHOW and PEP_naSUBSETSTOTABLE control visibility \par
    //! of subsets within the chart and table regions.\par
    //! SubsetsToShow not only controls visibility, but can also control the order.\par
    //! PEP_naRANDOMSUBSETSTOGRAPH can also control order and visibility of subsets plotted.\par
\par
    CreateSimpleGraph();\par
\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_3D);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_HORZBARSTACKED);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_TOP);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT(" "));\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_LINE);\par
\par
    // Control which subsets to show //\par
    // Value [1 - 9] show subset, subsets with a value of 9 plot before values of 1 //\par
    // Value [0] hide subset.\par
    int nSTS[4] = \{2, 2, 0, 2\};\par
    PEvset(m_hPE, PEP_naSUBSETSTOSHOW, nSTS, 4);\par
\par
    // Construct a simple table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
    PEnset(m_hPE, PEP_nTAROWS, 5);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 2);\par
\par
    // Pass the table text //\par
    TCHAR szTmp[512];\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, TEXT("Subset "));\par
    PEvgetcell(m_hPE, PEP_szaSUBSETLABELS, 0, szTmp);\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 1, 0, szTmp);\par
    PEvgetcell(m_hPE, PEP_szaSUBSETLABELS, 1, szTmp);\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 2, 0, szTmp);\par
    PEvgetcell(m_hPE, PEP_szaSUBSETLABELS, 2, szTmp);\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 3, 0, szTmp);\par
    PEvgetcell(m_hPE, PEP_szaSUBSETLABELS, 3, szTmp);\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 4, 0, szTmp);\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 1, TEXT("Visible? "));\par
\par
    // Set to cell types and attributes //\par
    int nType = PEGAT_LARGESQUARESOLID;\par
    PEvsetcellEx(m_hPE, PEP_naTATYPE, 1, 1, &nType);\par
    PEvsetcellEx(m_hPE, PEP_naTATYPE, 2, 1, &nType);\par
    PEvsetcellEx(m_hPE, PEP_naTATYPE, 4, 1, &nType);\par
    nType = PEGAT_LARGESQUARE;\par
    PEvsetcellEx(m_hPE, PEP_naTATYPE, 3, 1, &nType);\par
\par
    DWORD dwCellColor = PERGB(255, 255, 0, 0);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 1, 1, &dwCellColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 2, 1, &dwCellColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 3, 1, &dwCellColor);\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 4, 1, &dwCellColor);\par
\par
    int nHotSpot = 1;\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 1, 1, &nHotSpot);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 2, 1, &nHotSpot);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 3, 1, &nHotSpot);\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 4, 1, &nHotSpot);\par
\par
    // Other Table Related Properties ///\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_PIXEL_UNITS  );\par
    PEnset(m_hPE, PEP_nTAX, 50 ); // initial setting, we set again further down in code.\par
    PEnset(m_hPE, PEP_nTAY, 50 );\par
    PEnset(m_hPE, PEP_nTAMOVEABLE, PETAM_FULL);\par
\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 129,255,255,255) );\par
    PEnset(m_hPE, PEP_nTAHEADERROWS, 0);\par
    PEnset(m_hPE, PEP_bTAHEADERCOLUMN, FALSE);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_INSET);\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 85);\par
\par
    // Construct a simple text table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 1);\par
    PEnset(m_hPE, PEP_nTAROWS, 1);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 1);\par
    PEnset(m_hPE, PEP_bTATEXTMODE, 1);\par
\par
    // Pass the table text //\par
    lstrcpy(szTmp, TEXT("This is a test to see how this works. \\n")); \par
    lstrcat(szTmp, TEXT("Second paragraph, this is some text to see how this works. \\n"));\tab\par
    lstrcat(szTmp, TEXT("Third paragraph, this is more text to see how this works. "));\tab\par
    PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, szTmp);\par
\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_PIXEL_UNITS  );\par
    PEnset(m_hPE, PEP_nTAX, 50 ); // initial setting, we set again further down in code.\par
    PEnset(m_hPE, PEP_nTAY, 50 );\par
    PEnset(m_hPE, PEP_nTAWIDTH, 150);\par
    PEnset(m_hPE, PEP_nTAMOVEABLE, PETAM_FULL);\par
\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 190, 255,255,255) );\par
    PEnset(m_hPE, PEP_nTAHEADERROWS, 0);\par
    PEnset(m_hPE, PEP_bTAHEADERCOLUMN, FALSE);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_INSET);\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 95);\par
\par
    // Initialize chart to get graph border rectangle //\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
\par
    RECT gr;\par
    PEvget(m_hPE, PEP_rectGRAPH, &gr);\par
\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
    PEnset(m_hPE, PEP_nTAX, gr.right - 150 );\par
    PEnset(m_hPE, PEP_nTAY, gr.top + 25 );\par
\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 1);\par
    PEnset(m_hPE, PEP_nTAX, gr.left + 15 );\par
    PEnset(m_hPE, PEP_nTAY, gr.top + 15 );\par
\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
\par
    ////////////////////////////////////////////////////////\par
    // Assocated event processing is located in OnCommand //\par
    ////////////////////////////////////////////////////////\par
/*\par
\par
    else if ((m_nLastSelection == 34) && (HIWORD(wp) == PEWN_CLICKED))\par
    \{\par
        // Look for table hot spot and change which subsets are visible //\par
\par
        HOTSPOTDATA hsd;\par
\par
        // now look at HotSpotData structure //\par
        PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
        if (hsd.nHotSpotType == PEHS_TABLEANNOTATION + 0) // zero represents first table annotation\par
        \{\par
            // If TYPE is SQUARESOLID, change to SQUARE and vice versa. //\par
            int nType;\par
            PEvgetcellEx(m_hPE, PEP_naTATYPE, hsd.w1, hsd.w2, &nType);\par
\par
            if (nType == PEGAT_LARGESQUARE)\par
            \{\par
                nType = PEGAT_LARGESQUARESOLID;\par
                PEvsetcellEx(m_hPE, PEP_naTATYPE, hsd.w1, hsd.w2, &nType);\par
                int nShow = 2;\par
                PEvsetcell(m_hPE, PEP_naSUBSETSTOSHOW, hsd.w1 - 1, &nShow);\par
            \}\par
            else\par
            \{\par
                nType = PEGAT_LARGESQUARE;\par
                PEvsetcellEx(m_hPE, PEP_naTATYPE, hsd.w1, hsd.w2, &nType);\par
                int nShow = 0;\par
                PEvsetcell(m_hPE, PEP_naSUBSETSTOSHOW, hsd.w1 - 1, &nShow);\par
            \}\par
\par
            PEresetimage(m_hPE, 0, 0);\par
            ::InvalidateRect(m_hPE, 0, 0);\par
            ::UpdateWindow(m_hPE);\par
        \}\par
        return TRUE;\par
    \}\par
\par
*/\par
\par
\}\par
\par
\par
//***************************************************************************\par
//035 Graph showing demographic pyramid \par
void CPEView::GraphWithDemographicPyramid()\par
\{\par
    //! This feature represents a new mode of drawing data and axes, a special case\par
    //! not compatible with mixing plotting styles and full zooming.\par
    //! Best to set AllowPlotCustomization = False, and\par
    //! AllowZooming = PEAZ_NONE or PEAZ_HORIZONTAL.\par
    //! Also note graph annotations take special positioning as demonstrated below. \par
\par
    CreateSimpleGraph();\par
\par
    // Change Data //\par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\par
    PEnset(m_hPE, PEP_nPOINTS, 17);\par
\par
    // Set Title //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Demographic Pyramid"));\par
\par
    // Create some Y Data //\par
    float y1[] = \{0.1F, 0.15F, 0.5F, 0.6F, 0.7F, 1.5F, 1.2F, 1.7F, 1.8F, 2.2F, 3.2F, 4.3F, 5.1F, 6.5F, 7.2F, 8.3F, 9.3F\};\par
    float y2[] = \{0.3F, 0.35F, 0.36F, 0.5F, 0.6F, 0.8F, 1.1F, 1.9F, 2.9F, 3.6F, 4.2F, 5.3F, 6.1F, 7.15F, 8.2F, 9.3F, 9.3F\};\par
    PEvsetEx(m_hPE, PEP_faYDATA, 0, 17, y1, NULL);   // Subset 1\par
    PEvsetEx(m_hPE, PEP_faYDATA, 17, 17, y2, NULL);  // Subset 2\par
\par
    // Set Subset Labels //\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("MALE"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("FEMALE"));\par
\par
    // Set Legend to Bottom //\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_BOTTOM);\par
\par
    // Set Legend Style to Two Line, by default will position next to each half //\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_2_LINE);\par
\par
\par
    // Set Point Labels //\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 0, TEXT("80+"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 1, TEXT("75-79"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 2, TEXT("70-74"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 3, TEXT("65-69"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 4, TEXT("60-64"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 5, TEXT("55-59"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 6, TEXT("50-54"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 7, TEXT("45-49"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 8, TEXT("40-44"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 9, TEXT("35-39"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 10, TEXT("30-34"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 11, TEXT("25-29"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 12, TEXT("20-24"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 13, TEXT("15-19"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 14, TEXT("10-14"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 15, TEXT("05-09"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 16, TEXT("00-04"));\par
\par
    // Set plotting method //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_DEMOGRAPHICPYRAMID);\par
\par
    // Disable incompatible features //\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_NONE);\par
    PEnset(m_hPE, PEP_bALLOWPLOTCUSTOMIZATION, FALSE);\par
\par
    // Auto scaling is supported, and note how manually scaling axes, causes a mirrored effect //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    double d = 0.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
    d = 10.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
\par
    // Place axis on bottom, since horizontal mode, right y axis is bottom y axis //\par
    PEnset(m_hPE, PEP_bYAXISONRIGHT, TRUE); // \par
\par
    // Hide Y axis label //\par
    PEnset(m_hPE, PEP_nSHOWYAXIS, PESA_GRIDNUMBERS);\par
\par
    // Note below how graph annotations are positioned on each side of chart. //\par
    double val;\par
    val = 3.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &val);\par
    val = 5.0F - (y1[0, 2] / 2.0F); // NOTE, 5 is middle of axis, (10-0) / 2, and note subtracting half of value to position data\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &val);\par
    int symbol = PEGAT_POINTER_ARROW_SMALL;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 0, &symbol);\par
    DWORD col2 = PERGB(255, 198, 0, 0);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 0, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 0, TEXT("Arrow 1"));\par
\par
    val = 8.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 1, &val);\par
    val = 5.0F + (y2[0, 7] / 2.0F); // NOTE, 5 is middle of axis, (10-0) / 2, and note adding half of value to position data\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 1, &val);\par
    symbol = PEGAT_POINTER_ARROW_SMALL;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 1, &symbol);\par
    col2 = PERGB(255, 0, 198, 198);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 1, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 1, TEXT("Arrow 2"));\par
\par
    // Show annotations //\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
\par
    // Increase annotation font //\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 100);\par
\par
    // Designate subsets obstacles //\par
    BOOL bSubsetObstacles[2] = \{TRUE, TRUE\};\par
    PEvset(m_hPE, PEP_naSUBSETOBSTACLES, bSubsetObstacles, 2);\par
\par
    // Allow user to move ArrowPointer annotation //\par
    PEnset(m_hPE, PEP_nGRAPHANNOTMOVEABLE, 1);\par
    PEnset(m_hPE, PEP_bALLOWGRAPHANNOTHOTSPOTS, 1);\par
\par
    // Increase all font sizes \par
    float fTweak = 1.2F;\par
    PEvset(m_hPE, PEP_fFONTSIZEGLOBALCNTL, &fTweak, 1);\par
\par
    // No text shadows //\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_NO_TEXT);\par
\par
    // Set colors //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    // Make bars 3D //\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_3D);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 75);\par
\par
    // v9 features\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, FALSE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_NONE);\par
\par
\}\par
\par
\par
\par
\par
//***************************************************************************\par
//OnTimer\par
#ifdef X64\par
void CPEView::OnTimer(UINT_PTR nIDEvent) \par
#else\par
void CPEView::OnTimer(UINT nIDEvent) \par
#endif\par
\{\par
\tab CString ttext;\par
    float r1, r2, r3;\par
\tab float fNew[400];\par
\tab float newy;\par
\tab float newx;\par
\tab double newx2;\par
    float pNewXData[1000];\par
    float pNewYData[1000];\par
    float pNewZData[1000];\par
\tab DWORD col;\par
\tab double dx;\par
\tab int lt;\par
\tab CTime t;\par
\tab TM petm;\par
    int i, j;\par
\tab float fShift;\par
    int nAmountToUpdate;  \par
    double fYLoc;\par
    int nHTypes;\par
    DWORD dwArray;\par
    TCHAR buffer[40];\par
\tab\par
\tab switch(m_nLastSelection)\par
\tab\{\par
\par
\tab case 17:\par
\tab     PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, FALSE); // best for real time  \par
\par
\tab\tab t = CTime::GetCurrentTime();\par
\tab\tab ttext = t.Format("%I:%M:%S");\par
\par
        // Changing this variable increases throughput to chart, try 1, 10, 20, to 200\par
        nAmountToUpdate = 1;  \par
\par
\tab\tab // Update text to go with data //\par
        for (i=0; i<nAmountToUpdate; i++)\par
\tab\tab     PEvset(m_hPE, PEP_szaAPPENDPOINTLABELDATA, (void *) (LPCTSTR) ttext, 1);\par
\par
\tab\tab // make some random data //\par
        for (i = 0; i < nAmountToUpdate; i++)\par
        \{\par
            // note this is subset 0 data\par
    \tab\tab r1 = (float) GetRandom(1, 60);  r2 = (float) GetRandom(1, 100);\par
            fNew[i] = r1 + (r2 * .0001F);\par
    \tab\tab r1 = (float) GetRandom(1, 60);  r2 = (float) GetRandom(1, 100);\par
            fNew[i + 1] = r1 + (r2 * .0001F);\par
\par
            // note this is subset 1 data, offset by nAmountToUpdate index as first subset data preceeds second subset data\par
    \tab\tab r1 = (float) GetRandom(1, 90);  r2 = (float) GetRandom(1, 100);\par
            fNew[nAmountToUpdate] = r1 + (r2 * .0001F);\par
    \tab\tab r1 = (float) GetRandom(1, 90);  r2 = (float) GetRandom(1, 100);\par
            fNew[nAmountToUpdate + i] = r1 + (r2 * .0001F);\par
        \}\par
\par
\tab\tab // Transfer new YData //\par
\tab\tab // This will also update and view new image //\par
        // Note last argument is nAmountToUpdate, it will look for 2 subsets worth or 2 * nAmountToUpdate\par
\tab\tab PEvset(m_hPE, PEP_faAPPENDYDATA, &fNew[0], nAmountToUpdate);\par
\par
        if (PEnget(m_hPE, PEP_nRENDERENGINE == PERE_DIRECT3D))\par
            PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
\par
        //////////////////////////////////////////////////////////////////'\par
        // To alter this code (case 17) to cause appended data to come  //'\par
        // from a server, comment out all above code and replace with   //'\par
        // code below. See the main ReadMe file for instructions on     //'\par
        // creating the Virtual Directory Pe8WebDemo so web demo runs.  //'\par
        // For more info, see Chapter 1 Pedo ProEssentials Data Object  //'\par
        //////////////////////////////////////////////////////////////////'\par
        //PEappendfromURL(m_hPE, TEXT("http://localhost/Pe8WebDemo/IEStripChart/WebForm3.aspx"));\par
\par
\tab\tab break;\par
\par
\tab case 20:\par
\tab\tab // Graph Real Time Feed using PEpartialresetimage //\par
\tab\tab if (m_nRealTimeCounter >= 15000)\par
\tab\tab\{\par
\tab\tab\tab // When we reach the end of our data, we shift 20% to the\par
\tab\tab\tab // left and make room for another 3000 quick updates.\par
\tab\tab\tab PEvset(m_hPE, PEP_szaAPPENDPOINTLABELDATA, NULL, 3000);\par
\tab\tab\tab PEvset(m_hPE, PEP_faAPPENDYDATA, NULL, 3000);\par
\par
\tab\tab\tab // We need to perform a complete image update here.\par
\tab\tab\tab PEresetimage(m_hPE, 0, 0);\par
\tab\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
\tab\tab\tab ::UpdateWindow(m_hPE);\par
\tab\tab\tab m_nRealTimeCounter = 12000;\par
\tab\tab\}\par
\tab\tab\par
\tab\tab float MyYData;  \par
\tab\tab\par
\tab\tab // First Subset //\par
\tab\tab MyYData = (sin(0.003F * (double) m_nSinCounter) * 500.0F); \par
\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 0, m_nRealTimeCounter, &MyYData);\par
\par
\tab\tab // Second Subset //\par
\tab\tab MyYData = (cos(0.003F * (double) m_nSinCounter) * 500.0F); \par
\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 1, m_nRealTimeCounter, &MyYData);\par
\par
\tab\tab // Set an example string associated with data //\par
\tab\tab TCHAR szTmp[48];\par
\tab\tab TCHAR szTmp2[10];\par
\tab\tab lstrcpy(szTmp, TEXT("Test "));\par
\tab\tab _itot(m_nSinCounter, szTmp2, 10);\par
\tab\tab lstrcat(szTmp, szTmp2);\par
\tab\tab PEvsetcell(m_hPE, PEP_szaPOINTLABELS, m_nRealTimeCounter, szTmp);\par
\par
\tab\tab // This call performs a quick partial draw to an internal cached bmp. \par
\tab\tab PEpartialresetimage(m_hPE, m_nRealTimeCounter, 1);\par
\par
\tab\tab // Invalidate control, only invalidate vertical charting area and \par
\tab\tab // approximate horizontal location of new data added.\par
\tab     int nA;\par
\tab\tab int nX;\par
\tab\tab int nY;\par
\tab\tab double fX;\par
\tab\tab double fY;\par
\tab\tab RECT rec;\par
\par
\tab\tab nA = 0;\tab\tab\tab\tab //Initialize axis, non-zero only if using MultiAxesSubsets\par
\tab\tab fX = (double) m_nRealTimeCounter - 5.0F;  // Approximate horizontal location\par
\tab\tab fY = 0;\tab\tab\tab\tab // not important, we will user vertical extents from PEP_rectGRAPH\par
\tab\tab\par
\tab\tab // This call finds pixel location for fX and fY graph coordinates.\par
\tab\tab PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, TRUE);\par
\par
\tab\tab PEvget(m_hPE, PEP_rectGRAPH, &rec);  // get vertical extents of charting area.\par
\tab\tab rec.left = nX;\par
\tab\tab rec.right = nX + 50; // 50 pixels close to new data location\par
\par
\tab\tab // // For comparison purposes, you can uncomment the line below // //\par
\tab\tab // Calling PEresetimage with each timer event causes CPU usage to go to 100% \par
\tab\tab // PEpartialresetimage allows the same visual output while using 2% or less of the CPU\par
\tab\tab // ::PEresetimage(m_hPE, 0, 0); \par
\par
\tab\tab ::InvalidateRect(m_hPE, &rec, FALSE);\par
\par
\tab\tab m_nRealTimeCounter ++;\par
\tab\tab m_nSinCounter ++;\par
\tab\tab break;\par
\par
\tab case 115:\par
\tab\tab PEnset(m_hPE, PEP_nSUBSETS, 4);\par
\tab\tab PEnset(m_hPE, PEP_nPOINTS, 100000);\par
        PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, TRUE);   // Direct2D is often faster with anti alias for some reason. \par
\par
\tab\tab // Perform the actual transfer of data, all y data is repassed //\par
\tab\tab i = GetRandom(1, 4500); // randomize the start of waveform data to produce variation\par
  \tab\tab PEvsetEx(m_hPE, PEP_faYDATA, 0, 100000, &m_pGlobalYData[i], NULL);\par
  \tab\tab PEvsetEx(m_hPE, PEP_faYDATA, 100000, 100000, &m_pGlobalYData[i + 125000], NULL);\par
  \tab\tab PEvsetEx(m_hPE, PEP_faYDATA, 200000, 100000, &m_pGlobalYData[i + 250000], NULL);\par
  \tab\tab PEvsetEx(m_hPE, PEP_faYDATA, 300000, 100000, &m_pGlobalYData[i + 375000], NULL);\par
\par
         //Add a random line annotation //\par
        fShift = 13.0F + (float) GetRandom(1, 3);\par
        fYLoc = fShift;  PEvset (m_hPE, PEP_faHORZLINEANNOTATION, &fYLoc, 1);\par
        nHTypes = PELT_THICKDOT;  PEvset (m_hPE, PEP_naHORZLINEANNOTATIONTYPE, &nHTypes, 1);\par
        dwArray = PERGB( 255,255,0,0); PEvset( m_hPE, PEP_dwaHORZLINEANNOTATIONCOLOR, &dwArray, 1 );\par
    \par
        _stprintf(buffer, TEXT("|R%.2f"), fShift);\par
        PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 0, buffer);\par
        PEnset(m_hPE, PEP_bANNOTATIONSINFRONT, TRUE);\par
        PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
        PEszset(m_hPE, PEP_szRIGHTMARGIN, TEXT("XXXXXXXXXXXX" ));\tab\tab\par
        PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
\par
        // Construct a table annotation //\par
        PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
        PEnset(m_hPE, PEP_nTAROWS, 7);\par
        PEnset(m_hPE, PEP_nTACOLUMNS, 1);\par
\par
        float fp;\par
        int nTmp;\par
        int r, c;\par
        c = 0;\par
        nTmp = PERGB(255, 255, 0, 0);\par
        for (r=0; r<7; r++)\par
        \{\par
            fp = (sin(0.3F * (double) c + 1) * 500.0F) + GetRandom(2, 50);\par
            _stprintf(szTmp, TEXT("%.3f"), fp);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, 0, szTmp);\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, 0, &nTmp); \par
        \}\par
        PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
        PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_PIXEL_UNITS);\par
        GetClientRect(&rec);\par
        PEnset(m_hPE, PEP_nTAX, rec.right - 80);\par
        PEnset(m_hPE, PEP_nTAY, 10);\par
        PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 0, 0, 0, 0) );\par
        PEnset(m_hPE, PEP_nTATEXTSIZE, 95);\par
        PEnset(m_hPE, PEP_nTABORDER, PETAB_NO_BORDER);\par
\par
        // Construct a simple table annotation //\par
        PEnset(m_hPE, PEP_nWORKINGTABLE, 1);  \par
        PEnset(m_hPE, PEP_nTAROWS, 17);\par
        PEnset(m_hPE, PEP_nTACOLUMNS, 1);\par
        for (r=0; r<17; r++)\par
        \{\par
            fp = (sin(0.3F * (double) r + 1) * 500.0F) + GetRandom(2, 50);\par
            _stprintf(szTmp, TEXT("%.3f"), fp);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, 1, szTmp);\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, 0, &nTmp); \par
        \}\par
        PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
        PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_PIXEL_UNITS);\par
        PEnset(m_hPE, PEP_nTAX, rec.right - 80);\par
        PEnset(m_hPE, PEP_nTAY, rec.bottom - 265);\par
        PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 0,0,0,0));\par
        PEnset(m_hPE, PEP_nTATEXTSIZE, 95);\par
        PEnset(m_hPE, PEP_nTABORDER, PETAB_NO_BORDER);\par
\par
        // Construct a simple table annotation //\par
        PEnset(m_hPE, PEP_nWORKINGTABLE, 2);  \par
        PEnset(m_hPE, PEP_nTAROWS, 3);\par
        PEnset(m_hPE, PEP_nTACOLUMNS, 2);\par
        c = 0;\par
        for (r=0; r<3; r++)\par
        \{\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, c, TEXT(""));\par
            nTmp = PEGAT_SQUARESOLID;\par
            PEvsetcellEx(m_hPE, PEP_naTATYPE, r, c, &nTmp);\par
\par
            if (((int) fShift) == 15)\par
            \{\par
                int nRnd;\par
\tab\tab         nRnd = GetRandom(1, 3);\par
                if (nRnd < 2)\par
                \{\par
                    nTmp = PERGB(255, 0, 255, 0);\par
                    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
                \}\par
                else\par
                \{\par
                    nTmp = PERGB(255, 255, 255, 0);\par
                    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
                \}\par
            \}\par
            else\par
            \{\par
                nTmp = PERGB(255, 255, 255, 255);\par
                PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
            \}\par
        \}\par
\par
        c = 1;\par
        for (r=0; r<3; r++)\par
        \{\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, c, TEXT(""));\par
            nTmp = PEGAT_SQUARESOLID;\par
            PEvsetcellEx(m_hPE, PEP_naTATYPE, r, c, &nTmp);\par
\par
            if (((int) fShift) == 16)\par
            \{\par
                nTmp = PERGB(255, 255, 0, 0);\par
                PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
            \}\par
            else\par
            \{\par
                nTmp = PERGB(255, 255, 255, 255);\par
                PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
            \}\par
        \}\par
\par
        PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
        PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_PIXEL_UNITS);\par
        PEnset(m_hPE, PEP_nTAX, 15);\par
        PEnset(m_hPE, PEP_nTAY, rec.bottom - 75);\par
        PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 0,0,0,0));\par
        PEnset(m_hPE, PEP_nTATEXTSIZE, 95);\par
        PEnset(m_hPE, PEP_nTABORDER, PETAB_NO_BORDER);\par
\par
        if (((int) fShift) == 16)\par
        \{\par
            nTmp = PERGB(255, 255, 0, 0);\par
            PEnset(m_hPE, PEP_dwYAXISCOLOR, nTmp); \par
        \}\par
        else\par
        \{\par
            nTmp = PERGB(255, 255, 255, 255);\par
            PEnset(m_hPE, PEP_dwYAXISCOLOR, nTmp); \par
        \}\par
\par
        if (PEnget(m_hPE, PEP_nRENDERENGINE) == PERE_DIRECT3D)\par
            PEreconstruct3dpolygons(m_hPE);\par
        else\par
        \{\par
            PEreinitialize(m_hPE); // Because 115 create sets AutoImageReset = False, we need to call PEreinitialize to re-filter new data\par
    \tab     PEresetimage(m_hPE, 0, 0);\par
        \}\par
\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
\tab\tab break;\par
\par
\par
\tab case 116:\par
\tab\tab newy = 50.0F + (sin(m_nSinCounter * 0.075F) * 30.0F) + GetRandom(1, 15);\par
\tab\tab newx = m_nRealTimeCounter;\par
    \par
\tab\tab // Append new values  //\par
\tab\tab PEvset(m_hPE, PEP_faAPPENDYDATA, &newy, 1);\par
\tab\tab PEvset(m_hPE, PEP_faAPPENDXDATA, &newx, 1);\par
        \par
\tab\tab // Increment counter //\par
\tab\tab m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
    \par
\tab\tab // SinCounter is only to produce sin wave data //\par
\tab\tab m_nSinCounter = m_nSinCounter + 1;\par
\tab\tab if(m_nSinCounter > 30000)  \{m_nSinCounter = 1;\}\par
\par
\tab\tab // Update image and force paint //\par
\tab\tab PEreinitialize( m_hPE );\par
\tab\tab PEresetimage( m_hPE, 0, 0 );\par
\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
\tab\tab break;\par
\par
\tab case 117:\par
\tab     // New y value and x value //\par
\tab     newy = 50.0F + (sin((double) m_nSinCounter * 0.075F) * 30.0F) + GetRandom(1, 15);\par
\tab\tab newx = m_nRealTimeCounter;\par
    \par
\tab\tab // Append new values  //\par
\tab\tab PEvset(m_hPE, PEP_faAPPENDYDATA, &newy, 1);\par
\tab\tab PEvset(m_hPE, PEP_faAPPENDXDATA, &newx, 1);\par
        \par
\tab\tab // Increment counter //\par
\tab\tab m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
    \par
\tab\tab // Switch to AutoScaling x axis after receiving 100 data points //\par
\tab\tab if (m_nRealTimeCounter == 100)\par
\tab\tab\tab PEnset(m_hPE, PEP_nMANUALSCALECONTROLX, PEMSC_NONE);\par
    \par
\tab\tab // SinCounter is only to produce sin wave data //\par
\tab\tab m_nSinCounter = m_nSinCounter + 1;\par
\tab\tab if (m_nSinCounter > 30000) \par
\tab\tab\tab m_nSinCounter = 1;\par
\par
\tab\tab // Update image and force paint //\par
\tab\tab PEreinitialize( m_hPE );\par
\tab\tab PEresetimage( m_hPE, 0, 0 );\par
\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
\tab\tab break;\par
\par
\tab case 118:\par
\tab     // New y value and x value //\par
\tab     newy = 50.0F + (sin((double) m_nSinCounter * 0.075F) * 30.0F) + GetRandom(1, 15);\par
\tab\tab newx = m_nRealTimeCounter;\par
    \par
\tab     // Update new data at current index //\par
\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 0, m_nRealTimeCounter, &newy);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_faXDATA, 0, m_nRealTimeCounter, &newx);\par
    \par
\tab\tab dx = (double) newx;\par
\tab\tab PEvsetcell(m_hPE, PEP_faVERTLINEANNOTATION, 0, &dx);\par
\tab\tab lt = PELT_MEDIUMSOLID;\par
\tab\tab PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, 0, &lt);\par
\tab\tab col = PERGB( 255,0,0,198);\par
\tab\tab PEvsetcell(m_hPE, PEP_dwaVERTLINEANNOTATIONCOLOR, 0, &col);\par
        \par
\tab     // Increment counter //\par
\tab     m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
    \par
\tab     // Reset counter at end of data //\par
\tab     if (m_nRealTimeCounter == 100)\par
\tab\tab\tab m_nRealTimeCounter = 0;\par
    \par
\tab     // SinCounter is only to produce sin wave data //\par
\tab     m_nSinCounter = m_nSinCounter + 1;\par
\tab     if (m_nSinCounter > 30000) \par
\tab\tab\tab m_nSinCounter = 1;\par
\par
\tab     // Update image and force paint //\par
\tab\tab PEreinitialize( m_hPE );\par
\tab\tab PEresetimage( m_hPE, 0, 0 );\par
\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
\tab\tab break;\par
\par
\tab case 119:\par
        float YBuffer[250];\par
    \tab double XBuffer[250];\par
\par
\tab     // New y value //\par
\tab     newy = 50.0F + (sin((double) m_nSinCounter * 0.075F) * 30.0F) + GetRandom(1, 15);\par
\par
\tab\tab // Determine newx2 as current date and time in VB format //\par
\tab\tab t = CTime::GetCurrentTime();\par
\tab\tab petm.nDay = t.GetDay();\par
\tab\tab petm.nMonth = t.GetMonth();\par
\tab\tab petm.nYear = t.GetYear() - 1900;\par
\tab\tab petm.nHour = t.GetHour();\par
\tab\tab petm.nMinute = t.GetMinute();\par
\tab\tab petm.nSecond = t.GetSecond();\par
        petm.nMilliSecond = 0;\par
\par
\tab\tab PEcreateserialdate(&newx2, &petm, PEDTM_VB);\par
\par
\tab\tab // Shift data when counter reaches end of data //\par
\tab     if(m_nRealTimeCounter >= 1999)\par
\tab\tab\{\par
\tab\tab\tab memset(YBuffer, 0, 250 * sizeof(float));\par
\tab\tab\tab memset(XBuffer, 0, 250 * sizeof(double));\par
\tab\tab\tab // Shift Data by 250 data points, oldest 250 will be lost.\par
\tab\tab\tab m_nRealTimeCounter = m_nRealTimeCounter - 250;\par
\tab\tab\tab PEvset(m_hPE, PEP_faAPPENDYDATA, YBuffer, 250);\par
\tab\tab\tab PEvset(m_hPE, PEP_faAPPENDXDATAII, XBuffer, 250);\par
\tab\tab\}\par
\par
\tab     // Store new values at current index //\par
\tab\tab PEvsetcellEx(m_hPE, PEP_faXDATAII, 0, m_nRealTimeCounter, &newx2);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 0, m_nRealTimeCounter, &newy);\par
\par
\tab\tab // Increment index counter //\par
\tab\tab m_nRealTimeCounter += 1;\par
    \par
\tab\tab // SinCounter is only to produce sin wave data //\par
\tab\tab m_nSinCounter += 1;\par
\tab\tab if (m_nSinCounter > 30000) \par
\tab\tab\tab m_nSinCounter = 1;\par
\par
\tab     // If current time is beyond zoom max, the re-adjust zoom max //\par
\tab\tab if (newx2 > ZoomEnd)\par
\tab\tab\{\par
\tab\tab\tab ZoomEnd = ZoomEnd + ZoomSmallInterval;\par
\tab\tab\tab ZoomStart = ZoomEnd - ZoomInterval;\par
\tab\tab\tab PEvset(m_hPE, PEP_fZOOMMINX, &ZoomStart, 1);\par
\tab\tab\tab PEvset(m_hPE, PEP_fZOOMMAXX, &ZoomEnd, 1);\par
\par
\tab\tab\tab PEvgetcellEx(m_hPE, PEP_faXDATAII, 0, 1, &dx);\par
\tab\tab\tab PEvset(m_hPE, PEP_fMANUALMINX, &dx, 1);\par
\tab\tab\tab PEvset(m_hPE, PEP_fMANUALMAXX, &ZoomEnd, 1);\par
\tab\tab\}\par
        \par
\tab\tab // Update image and force paint //\par
\tab     PEreinitialize( m_hPE );\par
\tab\tab PEresetimage( m_hPE, 0, 0 );\par
\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
\tab\tab break;\par
\par
\tab case 138:\par
\par
\tab     // New y value //\par
\tab     newy = 50.0F + (sin((double) m_nSinCounter * 0.075F) * 30.0F) + GetRandom(1, 15);\par
\par
        t = CTime::GetCurrentTime();\par
        // We create our own date-time format as Direct3D does not inherently work well with double precision floats. \par
        newx = (float)(t.GetDay() * 86400 + t.GetHour() * 3600 + t.GetMinute() * 60 + t.GetSecond());\par
        newx -= StartTime;\par
\par
\tab     // Store new values at current index //\par
\tab\tab PEvsetcellEx(m_hPE, PEP_faXDATA, 0, m_nRealTimeCounter, &newx);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, 0, m_nRealTimeCounter, &newy);\par
\par
        // These are special setting used with PEP_bDYNAMICBUFFERS=True and tells ProEssentials to only inject vertice changes for this range //\par
        PEnset(m_hPE, PEP_nREALTIMESTARTINGINDEX, m_nRealTimeCounter);\par
        PEnset(m_hPE, PEP_nREALTIMEQUANTITY, 1);\par
\par
\tab\tab // Increment index counter //\par
\tab\tab m_nRealTimeCounter += 1;\par
    \par
\tab\tab // SinCounter is only to produce sin wave data //\par
\tab\tab m_nSinCounter += 1;\par
\tab\tab if (m_nSinCounter > 30000) \par
\tab\tab\tab m_nSinCounter = 1;\par
\par
\tab     // If current time is beyond zoom max, the re-adjust zoom max //\par
        double dZMaxX, dZMinX;\par
        PEvget(m_hPE, PEP_fZOOMMAXX, &dZMaxX);\par
        PEvget(m_hPE, PEP_fZOOMMINX, &dZMinX);\par
\par
\tab\tab if (dZMaxX - dZMinX <= 181)\par
\tab\tab\{\par
            if (newx >= dZMaxX)\par
            \{\par
                dZMaxX = newx + 90;          PEvset(m_hPE, PEP_fZOOMMAXX, &dZMaxX, 1);\par
                dZMinX = (newx + 90) - 180;  PEvset(m_hPE, PEP_fZOOMMINX, &dZMinX, 1);\par
            \}\par
\tab\tab\}\par
        \par
\tab\tab // Update image //\par
        PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
\tab\tab break;\par
\par
\par
    case 410:\par
        int l, s;\par
        for (s=0; s<150; s++)\par
        \{\par
            pNewXData[s] = m_nOverallCounter;\par
            pNewZData[s] = s + 1;\par
            \par
            if (m_pGlobalElevData)\par
            \{\par
                // incremental data from terrain file //\par
                l = (s * 1500) + m_nRealTimeCounter + 0;\par
                pNewYData[s] = m_pGlobalElevData[l] * 0.1F;\par
            \}\par
            else\par
            \{ // just in case file is not found  \par
                r1 = (float) GetRandom(1, 200); r2 = (float) GetRandom(1, 100);   pNewYData[s] = 1800.0F + r1 + (r2 * .0001F);  \par
            \}\par
        \}\par
    \par
        m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
        if (m_nRealTimeCounter > 1499) \par
            m_nRealTimeCounter = 0;\par
        m_nOverallCounter = m_nOverallCounter + 1;\par
    \par
        // transfer new Data //\par
        PEvset(m_hPE, PEP_faAPPENDYDATA, pNewYData, 1);\par
        PEvset(m_hPE, PEP_faAPPENDXDATA, pNewXData, 1);\par
        PEvset(m_hPE, PEP_faAPPENDZDATA, pNewZData, 1);\par
    \par
        // causes 3D object to reconstruct polygon data //\par
        PEreconstruct3dpolygons(m_hPE);\par
\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
        break;\par
\par
    case 411:\par
\par
        int p, nBump;\par
        nBump = 0;\par
\par
        m_nOverallCounter = m_nOverallCounter + 1;\par
        m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
        if (m_nRealTimeCounter > 5) \par
        \{\par
            nBump = GetRandom(1,100);\par
            m_nRealTimeCounter = 0;\par
        \}\par
\par
        for (p=0; p<200; p++)\par
        \{\par
            pNewZData[p] = m_nOverallCounter; // subset or sample iteration\par
            pNewXData[p] = p + 1; // all points \par
\par
            r1 = (float) GetRandom(1, 5); r2 = (float) GetRandom(1, 50); r3 = (r1 + (r2 * .0001F));\par
            pNewYData[p] = 125.0F + r3 + (25.0F * sin( ((float) m_nOverallCounter)*.04F * ((float) (p+1)*3) ));\par
        \}\par
        if (nBump != 0) \par
            pNewYData[nBump] = pNewYData[nBump] + 50.0F; \par
\par
        // v9 feature transfer a subset's worth of new data //\par
        PEvset(m_hPE, PEP_faAPPENDYSUBSET, pNewYData, 1);\par
        PEvset(m_hPE, PEP_faAPPENDXSUBSET, pNewXData, 1);\par
        PEvset(m_hPE, PEP_faAPPENDZSUBSET, pNewZData, 1);\par
\par
        // 3DX has to refresh the polygon data \par
        PEnset(m_hPE, PEP_bFORCE3DXNEWCOLORS, TRUE);\par
        PEreconstruct3dpolygons(m_hPE);\par
\par
        PEresetimage(m_hPE, 0, 0);\par
        ::InvalidateRect(m_hPE, NULL, FALSE);\par
        break;\par
\par
    case 412:\par
\par
\tab\tab t = CTime::GetCurrentTime();\par
\tab\tab ttext = t.Format("%I:%M:%S");\par
\par
\tab\tab // Graph Real Time Feed //\par
\tab\tab PEvset(m_hPE, PEP_szaAPPENDPOINTLABELDATA, (void *) (LPCTSTR) ttext, 1);\par
\par
        // new YData //\par
        float NewData[27];\par
        for (i=0; i<27; i++)\par
        \{\par
            // make some random data //\par
\tab\tab     r1 = (float) GetRandom(1, 90);\par
\tab\tab     r2 = (float) GetRandom(1, 100);\par
\tab\tab     NewData[i] = 10.0F + r1 + (r2 * .0001F);\par
        \}\par
        \par
        // transfer new YData //\par
        PEvset(m_hPE, PEP_faAPPENDYDATA, NewData, 1);\par
        \par
        // causes 3D object to reconstruct polygon data //\par
        // causes 3D object to reconstruct polygon data //\par
        if (PEnget(m_hPE, PEP_nRENDERENGINE) == PERE_DIRECT3D)\par
            PEreconstruct3dpolygons(m_hPE);\par
        else\par
        \{\par
            PEreconstruct3dpolygons(m_hPE);\par
    \tab     PEresetimage(m_hPE, 0, 0);\par
        \}\par
\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
        break;\par
\par
\par
\tab case 413:\par
\tab\tab PEnset(m_hPE, PEP_nSUBSETS, 4);\par
\tab\tab PEnset(m_hPE, PEP_nPOINTS, 25000);\par
\par
\tab\tab // Prepare data in temp arrays //\par
\tab\tab float* YData; \par
\tab\tab float* XData;\par
        float* ZData;\par
\tab\tab YData = new float[100000];\par
\tab\tab XData = new float[100000];\par
\tab\tab ZData = new float[100000];\par
\par
\tab\tab fShift = (float) GetRandom(1, 90);\par
\tab\tab for (j=0; j<=24999; j++)\par
\tab\tab\{\par
\tab\tab\tab XData[j] = ((float) (j + 1)) * .01F; \par
\tab\tab\tab YData[j] = (sin(0.003F * (double) j + fShift) * 5.0F) + 10 + (float) GetRandom(1, 100)/10.0F ;\par
\tab\tab\tab ZData[j] = 10.0F; \par
\tab\tab\}\par
\tab\tab fShift = (float) GetRandom(1, 90);\par
\tab\tab for (j=0; j<=24999; j++)\par
\tab\tab\{\par
\tab\tab\tab XData[j+25000] = ((float) (j + 1)) * .01F; \par
\tab\tab\tab YData[j+25000] = (sin(0.002F * (double) j + fShift) * 5.0F) + 20 + (float) GetRandom(1, 100)/10.0F ;\par
\tab\tab\tab ZData[j+25000] = 10.0F; \par
\tab\tab\}\par
\tab\tab fShift = (float) GetRandom(1, 90);\par
\tab\tab for (j=0; j<=24999; j++)\par
\tab\tab\{\par
\tab\tab\tab XData[j+50000] = ((float) (j + 1)) * .01F; \par
\tab\tab\tab YData[j+50000] = (sin(0.003F * (double) j + fShift) * 5.0F) + 30 + (float) GetRandom(1, 100)/10.0F ;\par
\tab\tab\tab ZData[j+50000] = 10.0F; \par
\tab\tab\}\par
\tab\tab fShift = (float) GetRandom(1, 90);\par
\tab\tab for (j=0; j<=24999; j++)\par
\tab\tab\{\par
\tab\tab\tab XData[j+75000] = ((float) (j + 1)) * .01F; \par
\tab\tab\tab YData[j+75000] = (sin(0.003F * (double) j + fShift) * 5.0F) + 40 + (float) GetRandom(1, 100)/10.0F ;\par
\tab\tab\tab ZData[j+75000] = 10.0F; \par
\tab\tab\}\par
\tab\tab // Perform the actual transfer of data //\par
\tab\tab PEvset(m_hPE, PEP_faXDATA, XData, 100000);\par
\tab\tab PEvset(m_hPE, PEP_faYDATA, YData, 100000);\par
\tab\tab PEvset(m_hPE, PEP_faZDATA, ZData, 100000);\par
\par
\tab\tab delete XData;\par
\tab\tab delete YData;\par
\tab\tab delete ZData;\par
\par
        // 3DX has to refresh the polygon data \par
        if (PEnget(m_hPE, PEP_nRENDERENGINE) == PERE_DIRECT3D)\par
        \{\par
            PEreconstruct3dpolygons(m_hPE);\par
        \}\par
\par
\tab     PEresetimage(m_hPE, 0, 0);\par
\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
\tab\tab break;\par
\par
    case 403:\par
\par
        m_nAnimationViewIndex++;\par
        if (m_nAnimationViewIndex + m_pAnnotationStartIndices[m_nCurrentAnnotation] >= m_pAnnotationStartIndices[m_nCurrentAnnotation + 1])\par
        \{\par
            KillTimer(m_nTimer);\par
            m_nTimer = 0;\par
            PEnset(m_hPE, PEP_bALLOWROTATION, TRUE);\par
            m_nCurrentAnnotation = -1;\par
            return;\par
        \}\par
\par
        double d;\par
        Point3D p3;  // Get location to graph annotation, index \par
        PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, m_pAnnotationStartIndices[m_nCurrentAnnotation] + m_nAnimationViewIndex, &d);  p3.X = (float)d;\par
        PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, m_pAnnotationStartIndices[m_nCurrentAnnotation] + m_nAnimationViewIndex, &d);  p3.Y = (float)d;\par
        PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, m_pAnnotationStartIndices[m_nCurrentAnnotation] + m_nAnimationViewIndex, &d);  p3.Z = (float)d;\par
        PEvset(m_hPE, PEP_structVIEWINGAT, &p3, 1);\par
        PEnset(m_hPE, PEP_nVIEWINGMODE, PEVM_DATA_LOCATION);\par
\par
        PEnset(m_hPE, PEP_nHIGHLIGHTGRAPHANNOTATIONINDEX, m_pAnnotationStartIndices[m_nCurrentAnnotation] + m_nAnimationViewIndex);\par
        PEnset(m_hPE, PEP_nDEGREEOFROTATION, PEnget(m_hPE, PEP_nDEGREEOFROTATION) + 1);\par
\par
        PEreinitialize(m_hPE);\par
        PEresetimage(m_hPE, 0, 0);\par
        ::InvalidateRect(m_hPE, NULL, FALSE);\par
        break;\par
\par
\tab\}\par
\par
\}\par
//***************************************************************************\par
//100  //* Simple Scientific Graph //*\par
void CPEView::CreateSimpleSGraph()\par
\{\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. // \par
\par
    // Simple example show the basics of a scientific graph object. //\par
    // Scientific Graph's contain both YData and XData and thus data\par
    // is not plotted equally spaced as the graph object does.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
    if( m_hPE )\par
    \{\par
        float fY;\par
        float fX;\par
\par
        // v9 features new default CursorPromptLocation = ToolTip\par
        PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);  \par
        PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
\par
        // Enable Bar Glass Effect //\par
        PEnset(m_hPE, PEP_bBARGLASSEFFECT, TRUE);\par
\par
        // Enable Plotting style gradient and bevel features //\par
        PEnset(m_hPE, PEP_nAREAGRADIENTSTYLE,  PEPGS_VERTICAL_ASCENT_INVERSE);\par
        PEnset(m_hPE, PEP_nAREABEVELSTYLE, PEBS_MEDIUM_SMOOTH);\par
        PEnset(m_hPE, PEP_nSPLINEGRADIENTSTYLE,  PEPGS_VERTICAL_ASCENT_INVERSE);\par
        PEnset(m_hPE, PEP_nSPLINEBEVELSTYLE, PESBS_MEDIUM_SMOOTH);\par
\par
        // v7.2 new features //\par
        PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE,PEPGS_VERTICAL);// PEPGS_VERTICAL_ASCENT_INVERSE);\par
        PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
        PEnset(m_hPE, PEP_nLINESYMBOLTHICKNESS, 3);\par
        PEnset(m_hPE, PEP_nAREABORDER, 1);\par
        PEnset(m_hPE, PEP_bALLOWSVGEXPORT, 1);\par
\par
        PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
        PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
\par
        // Set number of Subsets and Points //\par
        PEnset(m_hPE, PEP_nSUBSETS, 4);\tab\par
        PEnset(m_hPE, PEP_nPOINTS, 120);\tab\par
\par
        for( int s=0; s<=3; s++ )\par
        \{\par
            int nOffset = GetRandom(1, 250);\par
            for( int p=0; p<=119; p++ )\par
            \{\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab   \par
                fX = ((float) (p+1)) * 100.0F + ((float) GetRandom(2, 250)) / 50.0F;\par
                PEvsetcellEx (m_hPE, PEP_faXDATA, s, p, &fX);\par
                fY = ((float) (p+1) * 1.0F) + GetRandom(1, 250) + (sin ((nOffset + p)*.03F) * 700.0F)    - ((float) (s * 140.0F)) + ((float) GetRandom(2, 250)) / 250.0F;\par
                PEvsetcellEx (m_hPE, PEP_faYDATA, s, p, &fY);\par
            \}\par
        \}\par
\par
        // Set DataShadows to show shadows\par
        PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
\par
        PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
        PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSSPLINE);\par
        PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
        PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
        PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
        PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
        // Enable middle mouse dragging //\par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
        PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Test Results"));\par
        PEszset(m_hPE, PEP_szSUBTITLE, TEXT("")); // no subtitle\par
        PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Performance"));\par
        PEszset(m_hPE, PEP_szXAXISLABEL, TEXT("Duration"));\par
\par
        // subset labels\par
        PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("Horsepower"));\par
        PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Torque" ));\par
        PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 2, TEXT("Temperature" ));\par
        PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 3, TEXT("Pressure" ));\par
\par
        // subset colors\par
        DWORD dwArray[4] = \{ PERGB(128,198,0,0), PERGB(128, 0, 198, 198 ), PERGB(128, 198,198,0 ), PERGB(128, 0,198,0 ) \};\par
        PEvsetEx( m_hPE, PEP_dwaSUBSETCOLORS, 0, 4, dwArray, 0 );\par
\par
        // subset line types\par
        int nLineTypes[] = \{ PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, PELT_MEDIUMSOLID \};\par
        PEvset(m_hPE, PEP_naSUBSETLINETYPES, nLineTypes, 4);\par
\par
        // subset point types //\par
        int nPointTypes[] = \{ PEPT_DOTSOLID, PEPT_UPTRIANGLESOLID, \par
            PEPT_SQUARESOLID, PEPT_DOWNTRIANGLESOLID, PEPT_DOTSOLID, \par
            PEPT_SQUARESOLID, PEPT_DIAMONDSOLID, PEPT_UPTRIANGLESOLID \};\par
        PEvset(m_hPE, PEP_naSUBSETPOINTTYPES, nPointTypes, 8);\par
\par
        PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
        PEnset(m_hPE, PEP_bSIMPLEPOINTLEGEND, TRUE);\par
        PEnset(m_hPE, PEP_bSIMPLELINELEGEND, TRUE);\par
        PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE);\par
        PEnset(m_hPE, PEP_nMULTIAXISSTYLE, PEMAS_SEPARATE_AXES);\par
\par
        PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
        PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
        PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 1);\par
\par
        PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
        PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
        PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
        PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
        PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
        PEnset(m_hPE, PEP_nDATAPRECISION, 1);\par
\par
        PEnset(m_hPE, PEP_nIMAGEADJUSTTOP, 10);\par
        PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 20);\par
        PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 20);\par
\par
        // Set export defaults //\par
        PEnset(m_hPE, PEP_nDPIX, 600);\par
        PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
        PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
        PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
        PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
        PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
        PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
        PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
        PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
        // Set Demo's RenderEngine to Direct2D // \par
        CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
    \}\par
\}\par
\par
//***************************************************************************\par
//101  Scientific Graph showing line annotations\par
void CPEView::SGWithLineAnnotations()\par
\{    \par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Create MultiAxes //\par
    int nArray[] = \{2,2\};\par
    PEvset (m_hPE, PEP_naMULTIAXESSUBSETS, nArray, 2);\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
\par
    PEnset (m_hPE, PEP_nWORKINGAXIS, 0); // Set first y axis parameters\par
    PEszset (m_hPE, PEP_szYAXISLABEL, TEXT(""));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nCOMPARISONSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSSPLINE);\par
\par
    // Plot last subset on right //\par
    PEnset (m_hPE, PEP_nWORKINGAXIS, 1); // Set second y axis parameters\par
    PEszset (m_hPE, PEP_szYAXISLABEL, TEXT(""));\par
    PEszset (m_hPE, PEP_szRYAXISLABEL, TEXT(""));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_AREA);\par
    PEnset (m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1); \par
\par
    DWORD s4color = PERGB(255, 128, 128, 128);\par
    PEnset(m_hPE, PEP_dwRYAXISCOLOR, s4color);\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bANNOTATIONSINFRONT, FALSE);\par
\par
    // v9.5\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWANNOTATIONTEXTMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONTEXT, TRUE);\par
\par
    // Increase line annotation text size //\par
    PEnset(m_hPE, PEP_nLINEANNOTATIONTEXTSIZE, 110);\par
\par
    /////////////////////////////////\par
    // Horizontal Line Annotations //\par
    /////////////////////////////////\par
\par
    // Set some line annotation locations //\par
    double fYLoc[] = \{ 820, 780, 740, 700, 760, 720, 535, 475 \};\par
    PEvset (m_hPE, PEP_faHORZLINEANNOTATION, fYLoc, 8);\par
\par
    // Set some line annotation types //\par
    int nHTypes[] = \{\tab PELT_MEDIUMDASH, PELT_DASH, PELT_DOT,\par
        PELT_MEDIUMSOLID, PELT_THICKSOLID, PELT_THICKSOLID, \par
        PELT_THINSOLID, PELT_THICKSOLID+1000 \};\par
    PEvset (m_hPE, PEP_naHORZLINEANNOTATIONTYPE, nHTypes, 8);\par
\par
    // Sets first index (0) to In_Front position, others in background due to AnnotationsInFront = False //\par
    int nAIF = PEAIF_IN_FRONT;\par
    PEvsetcell(m_hPE, PEP_naHORZLINEANNOTATIONINFRONT, 0, &nAIF);\par
\par
    // Set some line annotation colors //\par
    DWORD dwArray[] = \{ PERGB( 255,198,0,0), PERGB( 255,0,198,0), PERGB( 255,0,0,198), \par
        PERGB( 255,198,0,198), PERGB( 255,0,198,198),PERGB( 255,198, 0, 0),\par
        PERGB( 255,198, 0, 198),PERGB( 255,0, 198, 198) \};\par
    PEvset( m_hPE, PEP_dwaHORZLINEANNOTATIONCOLOR, dwArray, 8 );\par
\par
    // Set line annotation axis locations //\par
    int nAnnotationAxis[] = \{ 0,0,0,0,0,0,1,1 \};\par
    PEvset (m_hPE, PEP_naHORZLINEANNOTATIONAXIS, nAnnotationAxis, 8);\par
\par
    // Set some line annotation texts //\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 0, TEXT(""));\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 1, TEXT("")); \par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 2, TEXT(""));\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 3, TEXT(""));\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 4, TEXT(""));\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 5, TEXT("|RTest\\nString"));\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 6, TEXT("Bottom multi-axis with respect to left y axis"));\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 7, TEXT("|rBottom multi-axis with respect to right y axis"));\par
\par
    // Set right margin to make room for text on right //\par
    PEszset(m_hPE, PEP_szRIGHTMARGIN, TEXT("String " ));\tab\tab\tab    \par
\par
    ///////////////////////////////\par
    // Vertical Line Annotations //\par
    ///////////////////////////////\par
\par
    int nVTypes[] = \{\tab PELT_MEDIUMDASH, PELT_DASH, PELT_DOT,\par
    PELT_MEDIUMSOLID, PELT_THICKSOLID, PELT_THICKSOLID, \par
    PELT_THINSOLID, PELT_THICKSOLID \};\par
    double fXLoc[] = \{ 8200, 7800, 7400, 7000, 7600, 7200, 5350, 4750 \};\par
\par
    PEvset (m_hPE, PEP_naVERTLINEANNOTATIONTYPE, nVTypes, 8);\par
    PEvset (m_hPE, PEP_faVERTLINEANNOTATION, fXLoc, 8);\par
    PEvset( m_hPE, PEP_dwaVERTLINEANNOTATIONCOLOR, dwArray, 8 );\par
    PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONINFRONT, 0, &nAIF);\par
\par
    // Set line annotation text //\par
    PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 0, TEXT(""));\par
    PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 1, TEXT("")); \par
    PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 2, TEXT(""));\par
    PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 3, TEXT(""));\par
    PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 4, TEXT(""));\par
    PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 5, TEXT("|HTest\\nString"));\par
    PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 6, TEXT("|t Top Inside "));\par
    PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 7, TEXT("|b Bottom Inside "));\par
\par
    // Set top margin to make room for text on top //\par
    PEszset(m_hPE, PEP_szTOPMARGIN, TEXT("XX " ));\tab\tab\tab    \par
\par
    // New region annotations, define a top, and bottom graph annotation type and then rect fill //\par
    double val;\par
    val = 1e20;  \par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &val);\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &val);\par
    int symbol = PEGAT_TOP;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 0, &symbol);\par
    DWORD col2 = PERGB(255, 198, 0, 0);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 0, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 0, TEXT(""));\par
\par
    val = 850.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 1, &val);\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 1, &val);\par
    symbol = PEGAT_BOTTOM;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 1, &symbol);\par
    col2 = PERGB(255, 198, 0, 0);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 1, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 1, TEXT(""));\par
\par
    val = 8500.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 2, &val);\par
    val = 850.0F;\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 2, &val);\par
    symbol = PEGAT_RECT_FILL;\par
    PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 2, &symbol);\par
    col2 = PERGB(155, 234, 123, 53);\par
    PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 2, &col2);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 2, TEXT(""));\par
\par
    PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
\par
    // Set Various Other Properties ///\par
    DWORD s1color = PERGB(195, 0, 128, 128);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &s1color);\par
\par
    DWORD s3color = PERGB(195, 128, 128, 0);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 2, &s3color);\par
\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 3, &s4color);\par
    PEnset(m_hPE, PEP_dwRYAXISCOLOR, s4color);\par
\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_NONE);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_LEFT_OF_AXIS);\par
\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
\}\par
\par
//***************************************************************************\par
//102  Scientific Graph showing use of PEvsetEx\par
void CPEView::CreatePEvsetEx()\par
\{    \par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Repassing the data via PEvsetEx, one subset at a time //\par
    float MyXData[120];\par
    float MyYData[120];\par
\par
    // Repass the first subset //\par
\tab int p;\par
    for (p=0; p<=119; p++)\par
    \{\par
        MyXData[p] = (p + 1) * 30;\par
        MyYData[p] = 50 + GetRandom(1,100);\par
    \}\par
    PEvsetEx(m_hPE, PEP_faXDATA, 0, 120, &MyXData[0], 0);\par
    PEvsetEx(m_hPE, PEP_faYDATA, 0, 120, &MyYData[0], 0);\par
\par
    // Repass the second subset //\par
    for (p=0;p<=119;p++)\par
    \{\par
        MyXData[p] = 300 + ((p + 50) * 30);\par
        MyYData[p] = 150 + GetRandom(1, 100);\par
    \}\par
    PEvsetEx(m_hPE, PEP_faXDATA, 120, 120, &MyXData[0], 0);\par
    PEvsetEx(m_hPE, PEP_faYDATA, 120, 120, &MyYData[0], 0);\par
\par
    // Repass the third subset //\par
    for (p=0;p<=119;p++)\par
    \{\par
        MyXData[p] = 600 + ((p + 100) * 30);\par
        MyYData[p] = 250 + GetRandom(1, 100);\par
    \}\par
    PEvsetEx(m_hPE, PEP_faXDATA, 240, 120, &MyXData[0], 0);\par
    PEvsetEx(m_hPE, PEP_faYDATA, 240, 120, &MyYData[0], 0);\par
\par
    // Repass the fourth subset //\par
    for (p=0;p<=119;p++)\par
    \{\par
        MyXData[p] = 900 + ((p + 150) * 30);\par
        MyYData[p] = 350 + GetRandom(1, 100);\par
    \}\par
    PEvsetEx(m_hPE, PEP_faXDATA, 360, 120, &MyXData[0], 0);\par
    PEvsetEx(m_hPE, PEP_faYDATA, 360, 120, &MyYData[0], 0);\par
\par
    // options you may consider \par
    // PEnset(m_hPE, PEP_nSOLIDLINEOVERAREA, 1);\par
    // PEnset(m_hPE, PEP_bNOHIDDENLINESINAREA, FALSE);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_AREA);\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_SHADOW);\par
\par
\}\par
\par
//***************************************************************************\par
//103  Scientific Graph showing overlapped multi axes 1\par
void CPEView::CreateOverlapedMultiAxes1()\par
\{    \par
    //! Try zooming and scrolling vertically. //\par
\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. // \par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    int val;\par
    // Create 4 separate axes and then overlap all //\par
    val = 1;\par
    PEvsetcell(m_hPE, PEP_naMULTIAXESSUBSETS, 0, &val);\par
    PEvsetcell(m_hPE, PEP_naMULTIAXESSUBSETS, 1, &val);\par
    PEvsetcell(m_hPE, PEP_naMULTIAXESSUBSETS, 2, &val);\par
    PEvsetcell(m_hPE, PEP_naMULTIAXESSUBSETS, 3, &val);\par
    val = 4;\par
    PEvsetcell(m_hPE, PEP_naOVERLAPMULTIAXES, 0, &val);\par
\par
    // Match axis color and label to subset label //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 255,178,0,0));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_AREA);\par
\par
    // Set AxisNumberSpacing to 2.0 will create space for two lines. \par
    double ans = 2.0;\par
    PEvset(m_hPE, PEP_fAXISNUMBERSPACING, &ans, 1);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("This is a test label using \\ntwo lines."));\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 255,0,178,0));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_LINE);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("This is a test label using \\ntwo lines and more."));\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 2);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 255,0,0,178));\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Axis 3"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 3);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 255,178,178,0));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINT);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("This is a test label using \\ntwo lines and more and more."));\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_NO_TEXT);\par
\par
    // Set Various Other Properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_NO_BORDER);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
    PEnset(m_hPE, PEP_nSOLIDLINEOVERAREA, 1);\par
\par
    // subset colors //\par
    DWORD dwArray[4] = \{ PERGB( 28,198,0,0), PERGB( 64,0, 198, 0), PERGB( 128,0,0,198), PERGB( 128,198,198,0) \};\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwArray, 4);\par
\par
    val = PELT_MEDIUMSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &val);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 1, &val);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 2, &val);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 3, &val);\par
\par
    PEnset(m_hPE, PEP_bSCROLLINGVERTZOOM, TRUE);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Zoom and Pan horizontal and vertical"));\par
\par
    float f = 1.3F;\par
    PEvset(m_hPE, PEP_fFONTSIZEGLOBALCNTL, &f, 1);\par
\par
    PEnset(m_hPE, PEP_nCURSORMODE, PECM_DATACROSS);\par
    PEnset(m_hPE, PEP_bMOUSECURSORCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
\par
    // v9 features, this will allow you to move cursor by clicking near a data point //\par
    // AllowDataaHotSpots=True is optional and will cause more overhead for large amounts of data //\par
    PEnset(m_hPE, PEP_bMOUSECURSORCONTROLCLOSESTPOINT, TRUE);\par
\par
\}   \par
\par
//***************************************************************************\par
//104  Scientific Graph showing overlapped multi axes 2\par
void CPEView::CreateOverlapedMultiAxes2()\par
\{    \par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. // \par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Create 4 separate axes and then overlap in two groups //\par
    int nMAS[] = \{1,1,1,1\};\par
    PEvset (m_hPE, PEP_naMULTIAXESSUBSETS, nMAS, 4);\par
    int nOMA[] = \{2,2\};\par
    PEvset (m_hPE, PEP_naOVERLAPMULTIAXES, nOMA, 2);\par
\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
    PEnset(m_hPE, PEP_nZOOMLIMITS, 2);\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("With Multi-Axes-Sizing and Zoom-Limit-Axis features"));\par
\par
    // Match axis color and label to subset label //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 188,0,0,140));\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Horsepower"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 188,125,125,125));\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Torque"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_SPLINEAREA);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 2);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 188,0,0,140));\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Temperature"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 3);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 188,125,125,125));\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Pressure"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_SPLINEAREA);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_NO_TEXT);\par
\par
    // Set Various Other Properties ///\par
    int sublintyp = PELT_MEDIUMSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &sublintyp);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 1, &sublintyp);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 2, &sublintyp);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 3, &sublintyp);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_LINE);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_TOP_OF_AXIS);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nSHOWLEGENDMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATIONMENU, PEMC_SHOW);\par
\par
    // subset colors //\par
    DWORD dwArray[4] = \{ PERGB( 88,0,0,140), PERGB( 88,155, 155, 155), PERGB( 88,0,0,140), PERGB( 88,155,155,155) \};\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwArray, 4);\par
\par
\}\par
\par
//***************************************************************************\par
//105  Scientific Graph showing data cursor\par
void CPEView::CreateDataCursor()\par
\{    \par
    //! Cross-Hair inside chart is a cursor giving a datapoint the focus //\par
    //! Use arrow keys or mouse to move cursor to a new location //\par
    //! You must click the control to give it the focus before key strokes will work. //\par
    //! Right and Left arrow keys move cursor up and down points //\par
    //! Up and Down arrow keys move cursor up and down subsets //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Set up cursor //\par
    PEnset(m_hPE, PEP_nCURSORMODE, PECM_DATACROSS);\par
\par
    // Help see data points //\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
\par
    // This will allow you to move cursor by clicking data point //\par
    PEnset(m_hPE, PEP_bMOUSECURSORCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_nHOTSPOTSIZE, 12);  \par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_SPLINE);\par
\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_NONE);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZPLUSVERT_ZOOM);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);  // note that pan gestures require MouseDragging to be enabled \par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);  \par
\par
    // Enable MouseWheel Zoom Smoothness\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 5);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
\par
    // changing data testing mousecursorcontrolclosestpoint feature \par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1);  // last subset uses right y axis\par
    PEnset(m_hPE, PEP_nTXAXISCOMPARISONSUBSETS, 1);  // last subset uses top x axis \par
    float fx = -8000.0F;\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 3,0,&fx);\par
    fx = -7000.0F;\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 3,1,&fx);\par
    fx = -6000.0F;\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 3,2,&fx);\par
    fx = -2000.0F;\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 3,3,&fx);\par
\par
    PEnset(m_hPE, PEP_bZOOMWINDOW, TRUE);\par
\par
    // v9 features \par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
\par
    PEnset(m_hPE, PEP_bTRACKINGCUSTOMDATATEXT, TRUE);\par
    PEnset(m_hPE, PEP_bTRACKINGCUSTOMOTHERTEXT, TRUE);\par
\par
    PEnset(m_hPE, PEP_bALLOWTITLEHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWSUBSETHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWAXISLABELHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWGRIDNUMBERHOTSPOTSY, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWGRIDNUMBERHOTSPOTSX, TRUE);\par
\par
    PEnset(m_hPE, PEP_bMOUSECURSORCONTROLCLOSESTPOINT, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
\par
    PEnset(m_hPE, PEP_bCACHEBMP2, TRUE);\par
    PEnset(m_hPE, PEP_bDRAWCURSORTOCACHE, TRUE);\par
    PEnset(m_hPE, PEP_bIMPROVEDCURSOR, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORVLINETYPE, PELT_DASH);\par
    PEnset(m_hPE, PEP_nCURSORHLINETYPE, PELT_DASH);\par
    PEnset(m_hPE, PEP_dwCURSORCOLOR, PERGB(255, 255, 0, 0));\par
\par
    DWORD dw = PERGB(255, 255, 0, 0); PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &dw);\par
    dw = PERGB(255, 0, 255, 0); PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 1, &dw);\par
    dw = PERGB(255, 0, 0, 255); PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 2, &dw);\par
    dw = PERGB(255, 120, 120, 120); PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 3, &dw);\par
\par
\par
    // Other possible values for cursor mode are below, //\par
    // PECM_NOCURSOR = 0\par
    // PECM_POINT = 1\par
    // PECM_DATACROSS = 2\par
    // PECM_DATASQUARE = 3\par
    // PECM_FLOATINGY = 4\par
    // PECM_FLOATINGXY = 5\par
\par
    // Uncomment to start cursor at different location //\tab\par
    // NOTE: You must reinitialize before setting cursor location //\par
    // PEreinitialize(m_hPE);\par
    // PEresetimage(m_hPE, 0, 0);\par
    // PEnset(m_hPE, PEP_nCURSORSUBSET, 0);\par
    // PEnset(m_hPE, PEP_nCURSORPOINT, 2);\par
\par
    ////////////////////////////////////////////////////////////////////////\par
    // Look in OnCommand handler to see how to respond to cursor movement //\par
    ////////////////////////////////////////////////////////////////////////\par
/*\par
\par
    else if (HIWORD(wp) == PEWN_MOUSEMOVE)\par
    \{\par
        POINT pt;\par
        HOTSPOTDATA hsd;\par
        TCHAR buffer[128];\par
        TCHAR buffer2[128];\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        // call PEgethotspot //\par
        PEgethotspot(m_hPE, pt.x, pt.y);\par
\par
        // now look at HotSpotData structure //\par
        PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
        if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
        \{\par
            // get ydata value at hot spot //\par
            float yvalue;\par
            PEvgetcellEx(m_hPE, PEP_faYDATA, hsd.w1, hsd.w2, &yvalue);\par
            _stprintf(buffer, TEXT("DataPoint value %.2f, s=%d,p=%d"), yvalue, hsd.w1, hsd.w2);\par
        \}\par
        else if (hsd.nHotSpotType == PEHS_SUBSET) \par
        \{\par
            PEvgetcell(m_hPE, PEP_szaSUBSETLABELS, hsd.w1, buffer2);\par
            _stprintf(buffer, TEXT("Subset Legend is %s"), buffer2);\par
        \}\par
        else if (hsd.nHotSpotType == PEHS_POINT) \par
        \{\par
            PEvgetcell(m_hPE, PEP_szaPOINTLABELS, hsd.w1, buffer2);\par
            _stprintf(buffer, TEXT("Point Label is %s"), buffer2);\par
        \}\par
        else\par
        \{\par
            // v9 features \par
            int nResult;\par
            nResult = PEsearchsubsetpointindex(m_hPE, pt.x, pt.y);\par
            if (nResult)\par
            \{\par
                int nCS = PEnget(m_hPE, PEP_nCLOSESTSUBSETINDEX);\par
                int nCP = PEnget(m_hPE, PEP_nCLOSESTPOINTINDEX);\par
                \{\par
                    lstrcpy(buffer, TEXT(" "));\par
                    _stprintf(buffer, TEXT("Closest Subset Point s=%d,p=%d"), nCS, nCP);\par
                \}\par
            \}\par
            else\par
                lstrcpy(buffer, TEXT("No hotspot, Outside of charting area"));\par
        \}\par
\par
        CWnd* pParent = GetParent()->GetParent();\par
        if (pParent) \{pParent->SetWindowText(buffer);\}\par
\par
        return TRUE;\par
    \}\par
    else if (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT)\par
    \{\par
        // v9 features \par
        double dX;\par
        PEvget(m_hPE, PEP_fCURSORVALUEX, &dX);\par
        TCHAR  buffer[96]; \par
\par
        double dY;\par
        PEvget(m_hPE, PEP_fCURSORVALUEY, &dY);\par
\par
        _stprintf(buffer, TEXT("X Axis: %.3f  \\nY Axis: %.3f"), dX, dY);\par
\par
        if (dY < 0.0F)\par
        \{\par
            PEszset(m_hPE, PEP_szTRACKINGTOOLTIPTITLE, TEXT("N E G A T I V E"));\par
            PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPBKCOLOR, PERGB(0,0,0,0));\par
            PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPTEXTCOLOR, PERGB(0,245,0,0));\par
        \}\par
        else\par
        \{\par
            PEszset(m_hPE, PEP_szTRACKINGTOOLTIPTITLE, TEXT("P O S I T I V E"));\par
            PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPBKCOLOR, PERGB(0,50,50,50));\par
            PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPTEXTCOLOR, PERGB(0,0,225,0));\par
        \}\par
\par
        PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\par
    \}\par
    else if (HIWORD(wp) == PEWN_CUSTOMTRACKINGOTHERTEXT)\par
    \{\par
        // v9 features \par
        POINT pt;\par
        HOTSPOTDATA hsd;\par
        TCHAR buffer[128];\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        // call PEgethotspot //\par
        PEgethotspot(m_hPE, pt.x, pt.y);\par
\par
        // now look at HotSpotData structure //\par
        PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
        PEszset(m_hPE, PEP_szTRACKINGTOOLTIPTITLE, TEXT("Other Hot Spots"));\par
        PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPBKCOLOR, PERGB(0,80,80,80));\par
        PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPTEXTCOLOR, PERGB(0,245,245,240));\par
\par
        if (hsd.nHotSpotType == PEHS_SUBSET) \par
        \{\par
            _stprintf(buffer, TEXT("Subset Label"), 0);\par
            PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
        \}\par
        else if (hsd.nHotSpotType == PEHS_MAINTITLE ) \par
        \{\par
            _stprintf(buffer, TEXT("Main Title"), 0);\par
            PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
        \}\par
        else if (hsd.nHotSpotType == PEHS_YAXISLABEL ) \par
        \{\par
            _stprintf(buffer, TEXT("Y Axis Label"), 0);\par
            PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
        \}\par
        else if (hsd.nHotSpotType == PEHS_XAXISLABEL ) \par
        \{\par
            _stprintf(buffer, TEXT("X Axis Label"), 0);\par
            PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
        \}\par
        else if (hsd.nHotSpotType == PEHS_YAXISGRIDNUMBER ) \par
        \{\par
            double dValue;\par
            PEvgetcellW(m_hPE, PEP_faGRIDHOTSPOTVALUE, hsd.w2, &dValue);\par
\par
            _stprintf(buffer, TEXT("Y Axis Grid Label\\n Value: %.3f"), dValue);\par
            PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
        \}\par
        else if (hsd.nHotSpotType == PEHS_XAXISGRIDNUMBER ) \par
        \{\par
            double dValue;\par
            PEvgetcellW(m_hPE, PEP_faGRIDHOTSPOTVALUE, hsd.w2, &dValue);\par
\par
            _stprintf(buffer, TEXT("X Axis Grid Label\\n Value: %.3f"), dValue);\par
            PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
        \}\par
        else\par
        \{\par
            buffer[0] = (TCHAR) 0;\par
            PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
        \}\par
    \}\par
\par
*/\par
\par
\par
\}\par
\par
//***************************************************************************\par
//106  Scientific Graph showing date time handling\par
void CPEView::CreateSGraphDateTimeHandling()\par
\{    \par
    double d;\par
    double dt = 41200; // some random date value\par
    RECT rect;\par
    float f;\par
\par
    GetClientRect( &rect );\par
\par
    // Construct a scientific graph object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
    if (m_hPE) \par
    \{\par
        // Enable MouseWheel Zooming\par
        PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZPLUSVERT_ZOOM);\par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);  // note that pan gestures require MouseDragging to be enabled \par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);  \par
\par
        // Enable MouseWheel Zoom Smoothness\par
        PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 5);\par
        PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
\par
        // Allow zooming and panning //\par
        PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
        PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
        PEnset(m_hPE, PEP_bSCROLLINGVERTZOOM, TRUE);\par
\par
        // Enable Plotting style gradient and bevel features //\par
        PEnset(m_hPE, PEP_nAREAGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
        PEnset(m_hPE, PEP_nAREABEVELSTYLE, PEBS_MEDIUM_SMOOTH);\par
        PEnset(m_hPE, PEP_nSPLINEGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
        PEnset(m_hPE, PEP_nSPLINEBEVELSTYLE, PESBS_MEDIUM_SMOOTH);\par
\par
        // Enable ZoomWindow //\par
        PEnset(m_hPE, PEP_bZOOMWINDOW, TRUE);\par
\par
        PEnset(m_hPE, PEP_nSUBSETS, 1);\par
        PEnset(m_hPE, PEP_nPOINTS, 600);\par
\par
        // Enable double precision which is usually //\par
        // required for date time handling //\par
        // This means we pass x data to XDataII //\par
        PEnset(m_hPE, PEP_bUSINGXDATAII, TRUE);\par
\par
        // Pass XDataII and YData //\par
        for (int p=0; p<=599; p++)\par
        \{\par
            d = (dt + ((double) p * 0.25F));\par
            PEvsetcellEx(m_hPE, PEP_faXDATAII, 0, p, &d);\par
\par
            f = (150.0F + (sin((double) p * 0.034F) * 60.0F) + GetRandom(1, 30) + ((double) p / 2.0F)) - (35.0F + GetRandom(1, 20.0));\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, 0, p, &f);\par
        \}\par
\par
        // Enable DateTimeMode //\par
        PEnset(m_hPE, PEP_nDATETIMEMODE, PEDTM_VB);\par
\par
        // Cursor prompting in top left corner //\par
        PEnset(m_hPE, PEP_nCURSORMODE, PECM_DATASQUARE);\par
        PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
        PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
        PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
        PEnset(m_hPE, PEP_bMOUSECURSORCONTROL, TRUE);\par
        PEnset(m_hPE, PEP_nHOTSPOTSIZE, 3);  \par
\par
        //v9 features\par
        PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
        PEnset(m_hPE, PEP_nTRACKINGTOOLTIPMAXWIDTH, 150);\par
\par
        // Set Various Other Properties ///\par
        PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
        PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
        PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
        PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
        PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
        PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
        PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
        PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
        PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
        //! You can modify date label formats with //\par
        //PEP_nTIMELABELTYPE\par
        //PEP_nDAYLABELTYPE\tab\par
        //PEP_nMONTHLABELTYPE\par
        //PEP_nYEARLABELTYPE \par
\par
        // subset colors //\par
        DWORD dw = PERGB( 96,0,198,0);\par
        PEvset(m_hPE, PEP_dwaSUBSETCOLORS, &dw, 1);\par
\par
        PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
        PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
        PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
        PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
        PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
\par
        PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
\par
        PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Zoom and study x axis"));\par
        PEszset(m_hPE, PEP_szSUBTITLE, TEXT(" scaling from years to seconds"));\par
        PEszset(m_hPE, PEP_szXAXISLABEL, TEXT("Zoom and study x axis"));\par
\par
        // Set export defaults //\par
        PEnset(m_hPE, PEP_nDPIX, 600);\par
        PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
        PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
        PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
        PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
        PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
        PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
        PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
        PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
        CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
    \}\par
\}\par
\par
//***************************************************************************\par
//107  Scientific Graph showing rect selector\par
void CPEView::CreateSGraphRectSelector()\par
\{    \par
    //! Zooming in now draws a rectangle instead. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Enable Rectangle Selector //\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
    PEnset(m_hPE, PEP_nZOOMLIMITS, PEZL_AXIS_SQUARE);\par
\par
    PEnset(m_hPE, PEP_nZOOMINTERFACEONLY, PEZIO_RECT);\par
    PEnset(m_hPE, PEP_nUNDOZOOMMENU, PEMC_HIDE);\par
    PEnset(m_hPE, PEP_bALLOWMAXIMIZATION, FALSE);\par
\par
    // Set properties related to annotations //\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 90);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_INSET);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Use zoom to highlight a few points"));\par
    float f =1.3F; PEvset(m_hPE, PEP_fFONTSIZEGLOBALCNTL, &f, 1);\par
\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
\par
    // Adding annotation text will attempt to prevent overlapping subsets \par
    BOOL bSubsetObstacles[4] = \{TRUE, TRUE, TRUE, TRUE\};\par
    PEvset(m_hPE, PEP_naSUBSETOBSTACLES, bSubsetObstacles, 4);\par
\par
\par
    ///////////////////////////////////////////////\par
    // Look in OnCommand handler for PEWN_ZOOMIN //\par
    ///////////////////////////////////////////////\par
/*  \par
    else if ((m_nLastSelection == 107) && (HIWORD(wp) == PEWN_ZOOMIN))\par
    \{\par
        // Read ZoomMaxY, ZoomMinX, ZoomMinY, and ZoomMaxX properties //\par
        // and set a rect graph annotation at this location //\par
        double d;\par
        PEvget(m_hPE, PEP_fZOOMMAXY, &d);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &d);\par
        PEvget(m_hPE, PEP_fZOOMMINX, &d);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &d);\par
        int annotype = PEGAT_TOPLEFT;\par
        PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 0, &annotype);\par
\par
        PEvget(m_hPE, PEP_fZOOMMINY, &d);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 1, &d);\par
        PEvget(m_hPE, PEP_fZOOMMAXX, &d);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 1, &d);\par
        annotype = PEGAT_BOTTOMRIGHT;\par
        PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 1, &annotype);\par
\par
        PEvget(m_hPE, PEP_fZOOMMAXY, &d);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 2, &d);\par
        PEvget(m_hPE, PEP_fZOOMMINX, &d);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 2, &d);\par
        annotype = PEGAT_ELLIPSE_FILL;\par
        PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 2, &annotype);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 2, TEXT("Region of Interest"));\par
\par
        annotype =  PEPGS_RADIAL_CENTERED;\par
        PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONGRADIENTSTYLE, 2, &annotype);\par
        annotype = PERGB(5, 255, 255, 255);\par
        PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONGRADIENTCOLOR, 2, &annotype);\par
        annotype = PERGB(195, 55, 55, 55);\par
        PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 2, &annotype);\par
        annotype = PEBS_THIN_SMOOTH;\par
        PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONBEVELSTYLE, 2, &annotype);\par
\par
        PEresetimage( m_hPE, 0, 0 );\tab\par
        ::InvalidateRect(m_hPE, NULL, FALSE);\par
\par
        return TRUE;\par
    \} \par
*/\par
\}\par
\par
\par
//***************************************************************************\par
//108  Scientific Graph showing inverted y axis\par
void CPEView::CreateSGraphInvertedYAxis()\par
\{    \par
    //! Note scale increasing in postive values downward. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
    if (m_hPE) \par
    \{    \par
        PEnset(m_hPE, PEP_nSUBSETS, 1);\par
        PEnset(m_hPE, PEP_nPOINTS, 24);\par
\par
        // Make sure zeros are plotted //\par
        double dnulldat = -999.0F;\par
        PEvset(m_hPE, PEP_fNULLDATAVALUEX, &dnulldat, 1);\par
        PEvset(m_hPE, PEP_fNULLDATAVALUE, &dnulldat, 1);\par
\par
        // Invert polarity of Y axis //\par
        PEnset(m_hPE, PEP_bINVERTEDYAXIS, TRUE);\par
\par
        // Pass data and since InvertedYAxis = True, make sure YData is //\par
        // multiplied by -1 //\par
        float xval = 0;\par
        float yval = 0;\par
        for (int p=0;p<=23;p++)\par
        \{\par
            xval = (float) p * 10.0F;\par
            yval = -1.0F * (0 + (sin((double) p * 0.074F) * 60.0F) + ((double) p / 2.0F));\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, 0, p, &xval); \par
            PEvsetcellEx(m_hPE, PEP_faYDATA, 0, p, &yval); \par
        \}\par
\par
        // Change Titles and Labels //\par
        PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Drilling Depth"));\par
        PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
        PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Depth (ft)"));\par
        PEszset(m_hPE, PEP_szXAXISLABEL, TEXT("Minutes"));\par
\par
        // Set Various Other Properties ///\par
        PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
        PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_INSET);\par
\par
        DWORD col = PERGB( 255,0, 198, 198);\par
        PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &col);\par
        int lintyp = PELT_MEDIUMSOLID;\par
        PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &lintyp);\par
\par
        PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
        PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
        PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
        PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
        PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
        PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
        PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
        PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
        PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
        PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
        PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
\par
        // v7.2 new features //\par
        PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
        PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
        PEnset(m_hPE, PEP_nLINESYMBOLTHICKNESS, 3);\par
        PEnset(m_hPE, PEP_bALLOWSVGEXPORT, 1);\par
\par
        // Set export defaults //\par
        PEnset(m_hPE, PEP_nDPIX, 600);\par
        PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
        PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
        PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
        PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
        PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
        PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
        PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
        // v9 features \par
        PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
        PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
        PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
\par
        PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
        CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
    \}\par
\}\par
\par
//***************************************************************************\par
//109  Scientific Graph showing axis formatting\par
void CPEView::CreateSGraphAxisFormatting()\par
\{    \par
    //! Note YAxis and XAxis grid number formatting. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Change data to make it larger //\par
    PEnset(m_hPE, PEP_nSUBSETS, 4);\par
    PEnset(m_hPE, PEP_nPOINTS, 12);\par
\par
    float valx = 0.0F;\par
    float valy = 0.0F;\par
    for (int s=0; s<=3; s++)   \par
    \{\par
        for (int p=0; p<=11; p++) \par
        \{\par
            valx = ((float) p + 1.0F) * 10.0F;\par
            valy = ((float) p + 1.0F) * 500.0F + GetRandom(1, 2500);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &valx);\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &valy);\par
        \}\par
    \}\par
\par
    // Supply formatting string //\par
    PEszset(m_hPE, PEP_szAXISFORMATY, TEXT("$|,.00|"));\par
    PEszset(m_hPE, PEP_szAXISFORMATX, TEXT("|.0|sec"));\par
\par
    // Labels //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Dollars per Second"));\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Dollars"));\par
    PEszset(m_hPE, PEP_szXAXISLABEL, TEXT("Time"));\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_LINE);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSSPLINE);\par
    PEnset(m_hPE, PEP_nBESTFITDEGREE, PEBFD_4TH);\par
\par
    // v7.2 new features //\par
    PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
    PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
    PEnset(m_hPE, PEP_nLINESYMBOLTHICKNESS, 3);\par
    PEnset(m_hPE, PEP_nAREABORDER, 1);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, 1);\par
\par
\par
\}\par
\par
//***************************************************************************\par
//110  Scientific Graph showing log-log axes\par
void CPEView::CreateSGraphLogAxes()\par
\{    \par
    //! Zoom this chart to see how ProEssentials handles log scales. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Set Log scales //\par
    PEnset(m_hPE, PEP_nYAXISSCALECONTROL, PEAC_LOG);\par
    PEnset(m_hPE, PEP_nXAXISSCALECONTROL, PEAC_LOG);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
\par
    // Change data so it varies over wider range //\par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\par
    PEnset(m_hPE, PEP_nPOINTS, 500);\par
    float fY;\par
    float fX;\par
    for( int s=0; s<2; s++ )\par
    \{\par
        for( int p=0; p<500; p++ )\par
        \{\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab   \par
            fX = ((float) (p+1)) * 1700.0F;\par
            PEvsetcellEx (m_hPE, PEP_faXDATA, s, p, &fX);\par
            fY = ((float) (p+1) * 100.0F) + GetRandom(1, 850 * (p+1) ) * (s+1);\par
            PEvsetcellEx (m_hPE, PEP_faYDATA, s, p, &fY);\par
        \}\par
    \}\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINT);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, FALSE);\par
\par
    // subset point types //\par
    int nPointTypes[] = \{ PEPT_DOTSOLID, PEPT_DOTSOLID \};\par
    PEvset(m_hPE, PEP_naSUBSETPOINTTYPES, nPointTypes, 2);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Zoom with mouse wheel, axes look good"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("Click+Drag shows your Tooling code"));\par
    PEszset(m_hPE, PEP_szXAXISLABEL, TEXT("Log X"));\par
\par
    // v9 features\par
    PEnset(m_hPE, PEP_nCURSORMODE, PECM_DATACROSS);\par
    PEnset(m_hPE, PEP_bMOUSECURSORCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
\par
    PEnset(m_hPE, PEP_bCACHEBMP2, TRUE);\par
    PEnset(m_hPE, PEP_bDRAWCURSORTOCACHE, TRUE);\par
    PEnset(m_hPE, PEP_bIMPROVEDCURSOR, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORVLINETYPE, PELT_DASH);\par
    PEnset(m_hPE, PEP_nCURSORHLINETYPE, PELT_DASH);\par
    PEnset(m_hPE, PEP_dwCURSORCOLOR, PERGB(255, 255, 0, 0));\par
\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_NONE);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZPLUSVERT_ZOOM);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 8);\par
\par
    /*/////////////////////////////////////////////////////////////////////\par
    // PEWN_CLICKED, L Button Down //\par
    /////////////////////////////////\par
\par
    bDragging = TRUE;\par
\par
    int nA; int nX; int nY; double fX; double fY; POINT pt;\par
\par
    // get last mouse location within control //\par
    PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
    nA = 0;  nX = pt.x; nY = pt.y;\par
    PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
    // Check location and restrain to the chart's extents.\par
    // Note that you can only expect to read valid ManualMinX type\par
    // properties after chart is visible on the window.\par
    double fTempMin, fTempMax;\par
    PEvget(m_hPE, PEP_fMANUALMINX, &fTempMin);\par
    PEvget(m_hPE, PEP_fMANUALMAXX, &fTempMax);\par
    if (fX <= fTempMin)\par
    fX = fTempMin;\par
    else if (fX >= fTempMax)\par
    fX = fTempMax;\par
    PEvget(m_hPE, PEP_fMANUALMINY, &fTempMin);\par
    PEvget(m_hPE, PEP_fMANUALMAXY, &fTempMax);\par
    if (fY <= fTempMin)\par
    fY = fTempMin;\par
    else if (fY >= fTempMax)\par
    fY = fTempMax;\par
\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_NONE);\par
\par
    dDragStartX = fX;\par
    dDragStartY = fY;\par
\par
    //////////////////////////////////////////////////////////////////////\par
    // L Button Up //\par
    /////////////////\par
\par
    bDragging = FALSE;\par
    PEnset(m_hPE, PEP_bSHOWINGQUICKANNOTATIONS, FALSE);\par
    PEnset(m_hPE, PEP_bHIDINGQUICKANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
    ::UpdateWindow(m_hPE);\par
    return TRUE;\par
    \par
    ///////////////////////////////////////////////////////////////////////\par
    // Mouse Move //\par
    ////////////////\par
\par
    int nA; int nX; int nY; double fX; double fY; POINT pt; int nType; DWORD dw;\par
    TCHAR szNum[64];\par
    TCHAR szText[64];\par
\par
    // get last mouse location within control //\par
    PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
    nA = 0;  nX = pt.x; nY = pt.y;\par
    PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
    // Check location and restrain to the chart's extents.\par
    // Note that you can only expect to read valid ManualMinX type\par
    // properties after chart is visible on the window.\par
    double fTempMin, fTempMax;\par
    PEvget(m_hPE, PEP_fMANUALMINX, &fTempMin);\par
    PEvget(m_hPE, PEP_fMANUALMAXX, &fTempMax);\par
    if (fX <= fTempMin)\par
        fX = fTempMin;\par
    else if (fX >= fTempMax)\par
        fX = fTempMax;\par
    PEvget(m_hPE, PEP_fMANUALMINY, &fTempMin);\par
    PEvget(m_hPE, PEP_fMANUALMAXY, &fTempMax);\par
    if (fY <= fTempMin)\par
        fY = fTempMin;\par
    else if (fY >= fTempMax)\par
        fY = fTempMax;\par
\par
    double dLeft, dTop, dRight, dBottom;\par
    if (dDragStartX < fX)\par
    \{\par
        dLeft = dDragStartX;\par
        dRight = fX;\par
    \}\par
    else\par
    \{\par
        dLeft = fX;\par
        dRight = dDragStartX;\par
    \}\par
\par
    if (dDragStartY > fY)\par
    \{\par
        dTop = dDragStartY;\par
        dBottom = fY;\par
    \}\par
    else\par
    \{\par
        dTop = fY;\par
        dBottom = dDragStartY;\par
    \}\par
\par
    // Index 0\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &dLeft);\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &dTop);\par
    nType = -(PEGAT_TOPLEFT + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 0, &nType);\par
\par
    // Index 1\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 1, &dRight);\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 1, &dBottom);\par
    nType = -(PEGAT_BOTTOMRIGHT + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 1, &nType);\par
\par
    // Index 2\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 2, &dRight);\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 2, &dBottom);\par
    nType = -(PEGAT_ROUNDRECT_FILL + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 2, &nType);\par
    dw = PERGB(70, 198, 198, 198); PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 2, &dw);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 2, TEXT(""));\par
    nType = PEGS_RADIAL_BOTTOM_RIGHT + 1;  PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONGRADIENTSTYLE, 2, &nType);\par
    dw = PERGB(170, 255, 255, 255); PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONGRADIENTCOLOR, 2, &dw);\par
\par
    // Index 3\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 3, &dRight);\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 3, &dBottom);\par
    nType = -(PEGAT_ROUNDRECT_MEDIUM + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 3, &nType);\par
    dw = PERGB(255, 255, 255, 255); PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 3, &dw);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 3, TEXT(""));\par
\par
    double CenteredXInLog = (log10(fX) + log10(dDragStartX)) / 2.0F;\par
    double CenteredYInLog = (log10(fY) + log10(dDragStartY)) / 2.0F;\par
\par
    // Index 4\par
    double dX = (fX - dDragStartX);\par
    _sntprintf(szNum, 64, TEXT("%.2f"), dX);\par
    dX = pow(10.0F, CenteredXInLog); PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 4, &dX);\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 4, &dTop);\par
    dw = PERGB(255, 0, 255, 0); PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 4, &dw);\par
    nType = -(PEGAT_NOSYMBOL + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 4, &nType);\par
    szText[0] = 0;  lstrcat(szText, TEXT("|c<~ "));\par
    lstrcat(szText, szNum);\par
    lstrcat(szText, TEXT(" ~>"));\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 4, szText);\par
\par
    // Index 5\par
    PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 5, &dRight);\par
    double dY = (fY - dDragStartY);\par
    _sntprintf(szNum, 64, TEXT("%.2f"), dY);\par
    dY = pow(10.0F, CenteredYInLog); PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 5, &dY);\par
    dw = PERGB(255, 0, 255, 0); PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 5, &dw);\par
    nType = -(PEGAT_NOSYMBOL + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 5, &nType);\par
    szText[0] = 0; lstrcat(szText, TEXT("|D<~ "));\par
    lstrcat(szText, szNum);\par
    lstrcat(szText, TEXT(" ~>"));\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 5, szText);\par
\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 120);\par
    PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
\par
    PEnset(m_hPE, PEP_bSHOWINGQUICKANNOTATIONS, TRUE);\par
\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
    ::UpdateWindow(m_hPE);\par
    return TRUE;\par
    \par
    */\par
\par
\}\par
\par
//***************************************************************************\par
//111  Scientific Graph showing financial scaling\par
void CPEView::CreateSGraphFinancialScaling()\par
\{    \par
    RECT rect;\par
    GetClientRect( &rect );\par
    // Construct object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Set Financial Scaling //\par
    PEnset(m_hPE, PEP_nSPECIALSCALINGY, PESS_FINANCIAL);\par
\par
    // Enable Zooming, Zoom graph to see how y axis changes. //\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
\par
    // Enable middle mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPOINTS, 24);\par
\par
    // Pass Data //\par
    float f;\par
    for (int p=0; p<=23; p++)\par
    \{\par
        f = (float) p * 10.0F;\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, 0, p, &f);\par
        f = (float) (20.0F + (0.0F + (sin((double) p * 0.074F) * 4.0F) + ((double) p / 20.0F)));\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 0, p, &f);\par
    \}\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_LINE);\par
\par
    DWORD col = PERGB( 255, 55, 55, 55);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &col);\par
\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Y Axis with Fractions"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("Zoom the Chart"));\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Zoom Me"));\par
    PEszset(m_hPE, PEP_szXAXISLABEL, TEXT("Days"));\par
\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
    PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_SMALL);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
\par
    // v7.2 new features //\par
    PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
    PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
    PEnset(m_hPE, PEP_nLINESYMBOLTHICKNESS, 3);\par
    PEnset(m_hPE, PEP_nAREABORDER, 1);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, 1);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    // v9 features \par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
\}\par
\par
//***************************************************************************\par
//112  Scientific Graph showing manual min and max y\par
void CPEView::CreateSGraphManualMinMaxY()\par
\{    \par
    //! Very simple example showing how to control min and max of an axis. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Manually Control Y Axis //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    double d = 0.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
    d = 1000.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_bYAXISLONGTICKS, TRUE);\par
\par
\}\par
\par
//***************************************************************************\par
//113  Scientific Graph showing manual line density\par
void CPEView::CreateSGraphManualLineDensity()\par
\{    \par
    //! Very simple example showing how to control grid line and grid tick density. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Manually Control Y Axis Grid Line Density //\par
    double d = 250.0f;\par
    PEvset(m_hPE, PEP_fMANUALYAXISLINE, &d, 1);\par
    d = 25.0F;\par
    PEvset(m_hPE, PEP_fMANUALYAXISTICK, &d, 1);\par
    PEnset(m_hPE, PEP_bMANUALYAXISTICKNLINE, TRUE);\par
\par
    // Manually Control Y Axis //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    d = 0;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
    d = 1000;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_bYAXISLONGTICKS, TRUE);\par
\}\par
\par
\par
//***************************************************************************\par
//114  Scientific Graph using double precision data\par
void CPEView::CreateSGraphDoublePrecisionData()\par
\{    \par
    //! Working with double precision data. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPOINTS, 24);\par
   \par
    // Enable Double precision x and y data //\par
    // Double precision will give 15 significant digits //\par
    // where as single precision offers 7 digits. //\par
    // 1205.5346 can not be accurately stored as single precision //\par
    PEnset(m_hPE, PEP_bUSINGXDATAII, TRUE);\par
    PEnset(m_hPE, PEP_bUSINGYDATAII, TRUE);\par
\par
    // Pass data to XDataII and YDataII for double precision //\par
    double d;\par
    for (int p=0; p<=23; p++)\par
    \{\par
        d = (double) p * 10.0F + 0.0123456789F;\par
        PEvsetcellEx(m_hPE, PEP_faXDATAII, 0, p, &d);\par
        d = -1.0F * ((sin((double) p * 0.074F) * 60.0F) + ((double) p / 2.0F)) + 0.0123456789F;\par
        d += GetRandom(1, 85 * (p+1) );\par
        PEvsetcellEx(m_hPE, PEP_faYDATAII, 0, p, &d);\par
    \}\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_LINE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_bYAXISLONGTICKS, TRUE);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSBFC);\par
    PEnset(m_hPE, PEP_nBESTFITDEGREE, PEBFD_4TH);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Double Precision Data"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
\par
    DWORD col = PERGB( 255,145, 0, 145);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &col);\par
\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    // v9 features \par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
\}\par
\par
//***************************************************************************\par
//115  Scientific Graph showing real-time 1\par
void CPEView::CreateSGraphRealTime1()\par
\{    \par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, 4);\par
    PEnset(m_hPE, PEP_nPOINTS, 100000);\par
\par
    int nval;\par
    // Create 4 separate axes and then overlap all //\par
    nval = 1;\par
    PEvsetcell(m_hPE, PEP_naMULTIAXESSUBSETS, 0, &nval);\par
    PEvsetcell(m_hPE, PEP_naMULTIAXESSUBSETS, 1, &nval);\par
    PEvsetcell(m_hPE, PEP_naMULTIAXESSUBSETS, 2, &nval);\par
    PEvsetcell(m_hPE, PEP_naMULTIAXESSUBSETS, 3, &nval);\par
    nval = 2; PEvsetcell(m_hPE, PEP_naOVERLAPMULTIAXES, 0, &nval);\par
    nval = 1; PEvsetcell(m_hPE, PEP_naOVERLAPMULTIAXES, 1, &nval);\par
    PEvsetcell(m_hPE, PEP_naOVERLAPMULTIAXES, 2, &nval);\par
\par
    // Match axis color and label to subset label //\par
    double d;\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Signal 1"));\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    d = 0.0F;  PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
    d = 30.0F; PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Signal 2"));\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    d = 10.0F;  PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
    d = 35.0F; PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 2);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Signal 3"));\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    d = 30.0F;  PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
    d = 40.0F; PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINT);  // v9 \par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 3);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Signal 4"));\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    d = 42.0F;  PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
    d = 48.0F; PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINT);  // v9 \par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
\par
    // subset colors //\par
    DWORD dwArray[4] = \{ PERGB(255,255,255,255), PERGB(255,0, 255, 255 ), PERGB(255,255,255, 0), PERGB(255,0,255,0 ) \};\par
    PEvsetEx(m_hPE, PEP_dwaSUBSETCOLORS, 0, 4, dwArray, 0);\par
\par
   // subset line types //\par
    int nLineTypes[] = \{ PELT_THINSOLID, PELT_THINSOLID, PELT_THINSOLID, PELT_THINSOLID\};\par
    PEvset(m_hPE, PEP_naSUBSETLINETYPES, nLineTypes, 4);\par
\par
    // Manually configure x and y axes //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLX, PEMSC_MINMAX);\par
    d = 0.0F;    PEvset(m_hPE, PEP_fMANUALMINX, &d, 1);\par
    d = 100.0F;  PEvset(m_hPE, PEP_fMANUALMAXX, &d, 1);\par
\par
    // Set XData, it does not change\par
    PEvsetW(m_hPE, PEP_faXDATA, m_pGlobalXData, 400000);\par
\par
    // Clear out default y data, start with an empty chart, not really noticable with this fast of real-time //\par
    float val = 0;\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 0, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 1, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 2, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 3, &val);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Scientific Real-Time"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
    PEnset(m_hPE, PEP_bNORANDOMPOINTSTOEXPORT, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
\par
    // v9 features, support for Point plotting method\par
    PEnset(m_hPE, PEP_bALLOWPOPUP, TRUE);\par
    PEnset(m_hPE, PEP_bZOOMWINDOW, TRUE);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZ_ZOOM);\par
    PEnset(m_hPE, PEP_bALLOWPOINT, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWPLOTCUSTOMIZATION, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITCURVE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINE, FALSE);\par
\par
    PEnset(m_hPE, PEP_bALLOWPAGE2, TRUE); \par
    PEnset(m_hPE, PEP_bALLOWAXISPAGE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSUBSETSPAGE, FALSE);\par
\par
    PEnset(m_hPE, PEP_bALLOWTEXTEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
\par
    // Set Various Other Properties //\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);  \par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, FALSE);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_NONE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWLEGEND, FALSE);\par
    PEnset(m_hPE, PEP_bGRIDINFRONT, TRUE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 20);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    // Setting to help with new Direct3D rendering and example expanded to 400K points //\par
    PEnset(m_hPE, PEP_bNULLDATAGAPS, FALSE);\par
    PEnset(m_hPE, PEP_nHOURGLASSTHRESHOLD, 10000000);\par
    PEnset(m_hPE, PEP_nFILTER2D, 1);\par
    PEnset(m_hPE, PEP_bAUTOIMAGERESET, FALSE);\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEszset(m_hPE, PEP_szRIGHTMARGIN, TEXT("XXXXXXXXXXXX" ));\tab\tab\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D);\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
    // Composite2D3D // Faster settings are 1-force only one D2D layer in back, 2-force only one D2D layer in front \par
    // Default setting 0 creates 2 D2D layers, one in back ground and one in foreground, allowing normal separation \par
    // of graphics as properties dictate.\par
    PEnset(m_hPE, PEP_nCOMPOSITE2D3D, PEC2D_FOREGROUND);\par
\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
    ::UpdateWindow(m_hPE);\par
    pWnd->Invalidate(FALSE);\par
    pWnd->UpdateWindow();\par
\par
    // Start Timer //\par
    m_nTimer = SetTimer( TIMER1, 20, NULL );  \par
\par
    ////////////////////////////////////////////////////////////\par
    // the following code can be found in the OnTimer Handler //\par
    ////////////////////////////////////////////////////////////\par
/*\par
    PEnset(m_hPE, PEP_nSUBSETS, 4);\par
    PEnset(m_hPE, PEP_nPOINTS, 100000);\par
    PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, TRUE);   // Direct2D is often faster with anti alias for some reason. \par
\par
    // Perform the actual transfer of data, all y data is repassed //\par
    i = GetRandom(1, 4500); // randomize the start of waveform data to produce variation\par
    PEvsetEx(m_hPE, PEP_faYDATA, 0, 100000, &m_pGlobalYData[i], NULL);\par
    PEvsetEx(m_hPE, PEP_faYDATA, 100000, 100000, &m_pGlobalYData[i + 125000], NULL);\par
    PEvsetEx(m_hPE, PEP_faYDATA, 200000, 100000, &m_pGlobalYData[i + 250000], NULL);\par
    PEvsetEx(m_hPE, PEP_faYDATA, 300000, 100000, &m_pGlobalYData[i + 375000], NULL);\par
\par
     //Add a random line annotation //\par
    fShift = 13.0F + (float) GetRandom(1, 3);\par
    fYLoc = fShift;  PEvset (m_hPE, PEP_faHORZLINEANNOTATION, &fYLoc, 1);\par
    nHTypes = PELT_THICKDOT;  PEvset (m_hPE, PEP_naHORZLINEANNOTATIONTYPE, &nHTypes, 1);\par
    dwArray = PERGB( 255,255,0,0); PEvset( m_hPE, PEP_dwaHORZLINEANNOTATIONCOLOR, &dwArray, 1 );\par
\par
    _stprintf(buffer, TEXT("|R%.2f"), fShift);\par
    PEvsetcell(m_hPE, PEP_szaHORZLINEANNOTATIONTEXT, 0, buffer);\par
    PEnset(m_hPE, PEP_bANNOTATIONSINFRONT, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEszset(m_hPE, PEP_szRIGHTMARGIN, TEXT("XXXXXXXXXXXX" ));\tab\tab\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
\par
    // Construct a table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
    PEnset(m_hPE, PEP_nTAROWS, 7);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 1);\par
\par
    float fp;\par
    int nTmp;\par
    int r, c;\par
    c = 0;\par
    nTmp = PERGB(255, 255, 0, 0);\par
    for (r=0; r<7; r++)\par
    \{\par
        fp = (sin(0.3F * (double) c + 1) * 500.0F) + GetRandom(2, 50);\par
        _stprintf(szTmp, TEXT("%.3f"), fp);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, 0, szTmp);\par
        PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, 0, &nTmp); \par
    \}\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_PIXEL_UNITS);\par
    GetClientRect(&rec);\par
    PEnset(m_hPE, PEP_nTAX, rec.right - 80);\par
    PEnset(m_hPE, PEP_nTAY, 10);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 0, 0, 0, 0) );\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 95);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_NO_BORDER);\par
\par
    // Construct a simple table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 1);  \par
    PEnset(m_hPE, PEP_nTAROWS, 17);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 1);\par
    for (r=0; r<17; r++)\par
    \{\par
        fp = (sin(0.3F * (double) r + 1) * 500.0F) + GetRandom(2, 50);\par
        _stprintf(szTmp, TEXT("%.3f"), fp);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, 1, szTmp);\par
        PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, 0, &nTmp); \par
    \}\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_PIXEL_UNITS);\par
    PEnset(m_hPE, PEP_nTAX, rec.right - 80);\par
    PEnset(m_hPE, PEP_nTAY, rec.bottom - 265);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 0,0,0,0));\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 95);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_NO_BORDER);\par
\par
    // Construct a simple table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 2);  \par
    PEnset(m_hPE, PEP_nTAROWS, 3);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 2);\par
    c = 0;\par
    for (r=0; r<3; r++)\par
    \{\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, c, TEXT(""));\par
        nTmp = PEGAT_SQUARESOLID;\par
        PEvsetcellEx(m_hPE, PEP_naTATYPE, r, c, &nTmp);\par
\par
        if (((int) fShift) == 15)\par
        \{\par
            int nRnd;\par
            nRnd = GetRandom(1, 3);\par
            if (nRnd < 2)\par
            \{\par
                nTmp = PERGB(255, 0, 255, 0);\par
                PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
            \}\par
            else\par
            \{\par
                nTmp = PERGB(255, 255, 255, 0);\par
                PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
            \}\par
        \}\par
        else\par
        \{\par
            nTmp = PERGB(255, 255, 255, 255);\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
        \}\par
    \}\par
\par
    c = 1;\par
    for (r=0; r<3; r++)\par
    \{\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, r, c, TEXT(""));\par
        nTmp = PEGAT_SQUARESOLID;\par
        PEvsetcellEx(m_hPE, PEP_naTATYPE, r, c, &nTmp);\par
\par
        if (((int) fShift) == 16)\par
        \{\par
            nTmp = PERGB(255, 255, 0, 0);\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
        \}\par
        else\par
        \{\par
            nTmp = PERGB(255, 255, 255, 255);\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, r, c, &nTmp); \par
        \}\par
    \}\par
\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_PIXEL_UNITS);\par
    PEnset(m_hPE, PEP_nTAX, 15);\par
    PEnset(m_hPE, PEP_nTAY, rec.bottom - 75);\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 0,0,0,0));\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 95);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_NO_BORDER);\par
\par
    if (((int) fShift) == 16)\par
    \{\par
        nTmp = PERGB(255, 255, 0, 0);\par
        PEnset(m_hPE, PEP_dwYAXISCOLOR, nTmp); \par
    \}\par
    else\par
    \{\par
        nTmp = PERGB(255, 255, 255, 255);\par
        PEnset(m_hPE, PEP_dwYAXISCOLOR, nTmp); \par
    \}\par
\par
    if (PEnget(m_hPE, PEP_nRENDERENGINE) == PERE_DIRECT3D)\par
        PEreconstruct3dpolygons(m_hPE);\par
    else\par
        PEresetimage(m_hPE, 0, 0);\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
    break;\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
//116  Scientific Graph showing real-time 2\par
void CPEView::CreateSGraphRealTime2()\par
\{    \par
    //! Chart fills 100 points autoscaling x axis is it\par
    //! is filled.  Once 100 point have been passed, the\par
    //! chart then acts as a strip chart.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPOINTS, 100);\par
\par
    // Set Manual Y scale //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    double arg = 1.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &arg, 1);\par
    arg = 100.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &arg, 1);\par
\par
    // Clear out default data //\par
    float val = 0;\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 0, &val);\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 1, &val);\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 2, &val);\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 3, &val);\par
\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 0, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 1, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 2, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 3, &val);\par
\par
    // Set Various Other Properties ///\par
    if (PEnget(m_hPE, PEP_bISDXAVAILABLE))\par
        PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);  \par
    else\par
        PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_INSET);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Scientific Real-Time Example"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
\par
    PEnset(m_hPE, PEP_bNORANDOMPOINTSTOEXPORT, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOPUP, FALSE);\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    DWORD col = PERGB( 255, 0, 150, 200);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &col);\par
\par
    col = PELT_MEDIUMTHICKSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &col);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSBFC);\par
\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
\par
    // Not ideal for real-time, but nice for presentation/demonstration \par
    PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
    PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    float farg = 1.4F; PEvset(m_hPE, PEP_fFONTSIZEGLOBALCNTL, &farg, 1);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 0);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
    // Initialize Counters and Timer '\par
    m_nRealTimeCounter = 1;\par
    m_nSinCounter = 1;\par
    m_nTimer = SetTimer( TIMER1, 25, NULL );\par
\par
    ////////////////////////////////////////\par
    // Code from the Timer Event is below //\par
    ////////////////////////////////////////\par
/*\par
    newy = 50.0F + (sin(m_nSinCounter * 0.075F) * 30.0F) + GetRandom(1, 15);\par
    newx = m_nRealTimeCounter;\par
\par
    // Append new values  //\par
    PEvset(m_hPE, PEP_faAPPENDYDATA, &newy, 1);\par
    PEvset(m_hPE, PEP_faAPPENDXDATA, &newx, 1);\par
\par
    // Increment counter //\par
    m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter = m_nSinCounter + 1;\par
    if(m_nSinCounter > 30000)  \{m_nSinCounter = 1;\}\par
\par
    // Update image and force paint //\par
    PEreinitialize( m_hPE );\par
    PEresetimage( m_hPE, 0, 0 );\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
*/\par
\par
\}\par
\par
\par
//***************************************************************************\par
//117  Scientific Graph showing real-time 3\par
void CPEView::CreateSGraphRealTime3()\par
\{    \par
    //! Chart fills 100 points but x axis is initially\par
    //! manually scaled.  Once 100 point have been passed,\par
    //! the chart switches to autoscaling the x axis.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPOINTS, 100);\par
\par
    // Set Manual Y scale //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    double arg = 1.0F; PEvset(m_hPE, PEP_fMANUALMINY, &arg, 1);\par
    arg = 100.0F;      PEvset(m_hPE, PEP_fMANUALMAXY, &arg, 1);\par
\par
    // Set Manual X scale //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLX, PEMSC_MINMAX);\par
    arg = 1.0F; PEvset(m_hPE, PEP_fMANUALMINX, &arg, 1);\par
    arg = 100.0F;  PEvset(m_hPE, PEP_fMANUALMAXX, &arg, 1);\par
\par
    // Clear out default data //\par
    float val = 0;\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 0, &val);\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 1, &val);\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 2, &val);\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 3, &val);\par
\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 0, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 1, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 2, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 3, &val);\par
\par
    // Set Various Other Properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);  \par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_SHADOW);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Scientific Real-Time Example"));\par
\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
    PEnset(m_hPE, PEP_bNORANDOMPOINTSTOEXPORT, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOPUP, FALSE);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    DWORD col = PERGB( 255, 200, 150, 0);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &col);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    float farg = 1.4F; PEvset(m_hPE, PEP_fFONTSIZEGLOBALCNTL, &farg, 1);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 0);\par
\par
    col = PELT_MEDIUMTHICKSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &col);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSBFL);\par
\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
\par
    // Not ideal for real-time, but nice for presentation/demonstration \par
    PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
    PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
    // Initialize Counters and Timer \par
    m_nRealTimeCounter = 1;\par
    m_nSinCounter = 1;\par
    m_nTimer = SetTimer( TIMER1, 25, NULL );\par
\par
    ////////////////////////////////////////////////////////////\par
    // the following code can be found in the OnTimer Handler //\par
    ////////////////////////////////////////////////////////////\par
/*\par
    // New y value and x value //\par
    newy = 50.0F + (sin((double) m_nSinCounter * 0.075F) * 30.0F) + GetRandom(1, 15);\par
    newx = m_nRealTimeCounter;\par
\par
    // Append new values  //\par
    PEvset(m_hPE, PEP_faAPPENDYDATA, &newy, 1);\par
    PEvset(m_hPE, PEP_faAPPENDXDATA, &newx, 1);\par
\par
    // Increment counter //\par
    m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
\par
    // Switch to AutoScaling x axis after receiving 100 data points //\par
    if (m_nRealTimeCounter == 100)\par
        PEnset(m_hPE, PEP_nMANUALSCALECONTROLX, PEMSC_NONE);\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter = m_nSinCounter + 1;\par
    if (m_nSinCounter > 30000) \par
        m_nSinCounter = 1;\par
\par
    // Update image and force paint //\par
    PEreinitialize( m_hPE );\par
    PEresetimage( m_hPE, 0, 0 );\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
//118  Scientific Graph showing real-time 4\par
void CPEView::CreateSGraphRealTime4()\par
\{    \par
    //! Chart fills 100 points and once 100 points have\par
    //! been passed, old data is over-written as more\par
    //! data is passed to chart.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPOINTS, 100);\par
\par
    // Set Manual Y scale //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    double arg = 1.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &arg, 1);\par
    arg = 100.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &arg, 1);\par
\par
    // Set Manual X scale //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLX, PEMSC_MINMAX);\par
    arg = 1.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINX, &arg, 1);\par
    arg = 100.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXX, &arg, 1);\par
\par
    // Show Annotations //\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
\par
    // Clear out default data //\par
    float val = 0;\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 0, &val);\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 1, &val);\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 2, &val);\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 3, &val);\par
\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 0, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 1, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 2, &val);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 3, &val);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);  \par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_LINE);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Scientific Real-Time Example"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
    PEnset(m_hPE, PEP_bNORANDOMPOINTSTOEXPORT, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOPUP, FALSE);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    DWORD col = PERGB( 60, 0, 200, 200);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &col);\par
\par
    PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    float farg = 1.4F; PEvset(m_hPE, PEP_fFONTSIZEGLOBALCNTL, &farg, 1);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 0);\par
\par
    col = PELT_MEDIUMTHICKSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &col);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_AREA);\par
\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
\par
    // Not ideal for real-time, but nice for presentation/demonstration \par
    PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
    PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
    //Initialize Counters and Timer \par
    m_nRealTimeCounter = 1;\par
    m_nSinCounter = 1;\par
    m_nTimer = SetTimer( TIMER1, 25, NULL );\par
\par
    ////////////////////////////////////////////////////////////\par
    // the following code can be found in the OnTimer Handler //\par
    ////////////////////////////////////////////////////////////\par
/*\par
    // New y value and x value //\par
    newy = 50.0F + (sin((double) m_nSinCounter * 0.075F) * 30.0F) + GetRandom(1, 15);\par
    newx = m_nRealTimeCounter;\par
\par
    // Update new data at current index //\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, m_nRealTimeCounter, &newy);\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, m_nRealTimeCounter, &newx);\par
\par
    dx = (double) newx;\par
    PEvsetcell(m_hPE, PEP_faVERTLINEANNOTATION, 0, &dx);\par
    lt = PELT_MEDIUMSOLID;\par
    PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, 0, &lt);\par
    col = PERGB( 255,0,0,198);\par
    PEvsetcell(m_hPE, PEP_dwaVERTLINEANNOTATIONCOLOR, 0, &col);\par
\par
    // Increment counter //\par
    m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
\par
    // Reset counter at end of data //\par
    if (m_nRealTimeCounter == 100)\par
        m_nRealTimeCounter = 0;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter = m_nSinCounter + 1;\par
    if (m_nSinCounter > 30000) \par
        m_nSinCounter = 1;\par
\par
    // Update image and force paint //\par
    PEreinitialize( m_hPE );\par
    PEresetimage( m_hPE, 0, 0 );\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
*/   \par
\par
\}\par
\par
//***************************************************************************\par
//119  Scientific Graph showing real-time 5\par
void CPEView::CreateSGraphRealTime5()\par
\{    \par
    //! Chart holds 2000 points.  Data is fed into\par
    //! data arrays at current data index.  Once 2000\par
    //! points have been passed, 250 are truncated as\par
    //! data is shifted to make room for 250 more data\par
    //! points.\par
\par
    //! Depending upon ZoomMode property, this example with\par
    //! either show most current 3 minutes or all data in\par
    //! object.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPOINTS, 2000);\par
\par
    PEnset(m_hPE, PEP_nDATETIMEMODE, PEDTM_VB);\tab // Date/Time Mode\par
    PEnset(m_hPE, PEP_bUSINGXDATAII, TRUE);     // Using Double Precision XDataII\par
\par
    // Some functional attributes            // 1440 is minutes in a day\par
    ZoomInterval = (3.0F / 1440.0F);         // 3 minute scale zoom interval\par
    ZoomSmallInterval = (0.5F / 1440.0F);    // 30 second scale adjustment\par
\par
    // Determine current date and time in VB's format //\par
    CTime t = CTime::GetCurrentTime();\par
    TM petm;\par
    petm.nDay = t.GetDay();\par
    petm.nMonth = t.GetMonth();\par
    petm.nYear = t.GetYear() - 1900;\par
    petm.nHour = t.GetHour();\par
    petm.nMinute = t.GetMinute();\par
    petm.nSecond = t.GetSecond();\par
    petm.nMilliSecond = 0;\par
    PEcreateserialdate(&StartTime, &petm, PEDTM_VB);\par
\par
    // Extents to show all data points \par
    double manmaxx;\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLX, PEMSC_MINMAX);\par
    PEvset(m_hPE, PEP_fMANUALMINX, &StartTime, 1);\par
    manmaxx = StartTime + ZoomInterval;\par
    PEvset(m_hPE, PEP_fMANUALMAXX, &manmaxx, 1);\par
\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    double d = 1.0F; PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
    d = 100.0F;      PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
\par
    // Set Zoomed partial Range of X Scale //\par
    ZoomStart = StartTime;\par
    ZoomEnd = ZoomStart + ZoomInterval;\par
\par
    PEvset(m_hPE, PEP_fZOOMMINX, &ZoomStart, 1);\par
    PEvset(m_hPE, PEP_fZOOMMAXX, &ZoomEnd, 1);\par
    d = 1.0F;     PEvset(m_hPE, PEP_fZOOMMINY, &d, 1);\par
    d = 100.0F;   PEvset(m_hPE, PEP_fZOOMMAXY, &d, 1);\par
\par
    PEnset(m_hPE, PEP_bZOOMMODE, TRUE);\par
    // If ZoomMode is True, you will see 3 minutes of data //\par
    // If ZoomMode is False, you will see all data in object //\par
\par
    // Clear out default data '\par
    // No need to clear out XData since using XDataII '\par
    float f = 0.0F;\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 0, &f);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 1, &f);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 2, &f);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 3, &f);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Scientific Real-Time Example"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
    PEnset(m_hPE, PEP_bNORANDOMPOINTSTOEXPORT, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOPUP, FALSE);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    DWORD col = PERGB( 255, 200, 200, 0);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &col);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    float farg = 1.4F; PEvset(m_hPE, PEP_fFONTSIZEGLOBALCNTL, &farg, 1);\par
\par
    col = PELT_MEDIUMTHICKSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &col);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_LINE);\par
\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
\par
    // Not ideal for real-time, but nice for presentation/demonstration \par
    PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
    PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
    // Initialize Counters and Timer //\par
    m_nRealTimeCounter = 1;\par
    m_nSinCounter = 1;\par
    m_nTimer = SetTimer( TIMER1, 500, NULL );\par
\par
    ////////////////////////////////////////////////////////////\par
    // the following code can be found in the OnTimer Handler //\par
    ////////////////////////////////////////////////////////////\par
/*\par
    // New y value //\par
    newy = 50.0F + (sin((double) m_nSinCounter * 0.075F) * 30.0F) + GetRandom(1, 15);\par
\par
    // Determine newx2 as current date and time in VB format //\par
    t = CTime::GetCurrentTime();\par
    petm.nDay = t.GetDay();\par
    petm.nMonth = t.GetMonth();\par
    petm.nYear = t.GetYear() - 1900;\par
    petm.nHour = t.GetHour();\par
    petm.nMinute = t.GetMinute();\par
    petm.nSecond = t.GetSecond();\par
    petm.nMilliSecond = 0;\par
    PEcreateserialdate(&newx2, &petm, PEDTM_VB);\par
\par
    // Shift data when counter reaches end of data //\par
    if(m_nRealTimeCounter >= 1999)\par
    \{\par
        memset(YData, 0, 250 * sizeof(float));\par
        memset(XData, 0, 250 * sizeof(double));\par
        // Shift Data by 250 data points, oldest 250 will be lost.\par
        m_nRealTimeCounter = m_nRealTimeCounter - 250;\par
        PEvset(m_hPE, PEP_faAPPENDYDATA, YData, 250);\par
        PEvset(m_hPE, PEP_faAPPENDXDATAII, XData, 250);\par
    \}\par
\par
    // Store new values at current index //\par
    PEvsetcellEx(m_hPE, PEP_faXDATAII, 0, m_nRealTimeCounter, &newx2);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, m_nRealTimeCounter, &newy);\par
\par
    // Increment index counter //\par
    m_nRealTimeCounter += 1;\par
\par
    // SinCounter is only to produce sin wave data //\par
    m_nSinCounter += 1;\par
    if (m_nSinCounter > 30000) \par
        m_nSinCounter = 1;\par
\par
    // If current time is beyond zoom max, the re-adjust zoom max //\par
    if (newx2 > ZoomEnd)\par
    \{\par
        ZoomEnd = ZoomEnd + ZoomSmallInterval;\par
        ZoomStart = ZoomEnd - ZoomInterval;\par
        PEvset(m_hPE, PEP_fZOOMMINX, &ZoomStart, 1);\par
        PEvset(m_hPE, PEP_fZOOMMAXX, &ZoomEnd, 1);\par
\par
        PEvgetcellEx(m_hPE, PEP_faXDATAII, 0, 1, &dx);\par
        PEvset(m_hPE, PEP_fMANUALMINX, &dx, 1);\par
        PEvset(m_hPE, PEP_fMANUALMAXX, &ZoomEnd, 1);\par
    \}\par
\par
    // Update image and force paint //\par
    PEreinitialize( m_hPE );\par
    PEresetimage( m_hPE, 0, 0 );\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
//138  Scientific Graph showing real-time 6\par
void CPEView::CreateSGraphRealTime6()\par
\{    \par
    //! Chart holds 8M points.  Data is fed into data arrays at current data index.  \par
    //! This type of real-time allows best method for incrementally updating large quantity of data.\par
    //! This example uses Direct3D, historically with non Direct3D this type of implementation \par
    //! would become slower and slower over time as data increased.  With Direct3D this chart will not \par
    //! slow down over time and though this example's timer is at 1 second, it could be faster.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPOINTS, 8000000);\par
\par
    // Slower to initial initialize, but allows for incremental changes with RealTimeStartingIndex and RealTimeQuanity settings. \par
    // All Subsets will be updated at location of RealTimeStartingIndex.\par
    PEnset(m_hPE, PEP_bDYNAMICBUFFERS, TRUE);\par
\par
    CTime t = CTime::GetCurrentTime();\par
    // We create our own date-time format as Direct3D does not inherently work well with double precision floats. \par
    StartTime = (float)(t.GetDay() * 86400 + t.GetHour() * 3600 + t.GetMinute() * 60 + t.GetSecond());\par
\par
    // For this type of real-time, NullDataGaps must be false and NullData is not used.  Setting these NullData properties means all data will be considered valid. \par
    double dNull = -999.9F; \par
    PEvset(m_hPE, PEP_fNULLDATAVALUE, &dNull, 1);\par
    PEvset(m_hPE, PEP_fNULLDATAVALUEX, &dNull, 1);\par
    PEnset(m_hPE, PEP_bNULLDATAGAPS, FALSE);\par
\par
    // For this type of real-time, ManualMinX and ManualMax must best set and never adjusted, unless a lengthier full reset\par
    // where  Pesgo1.PeData.RealTimeQuantity = 0 and Pesgo1.PeData.RealTimeStartingIndex = 0 and Pesgo1.PeFunction.Force3dxVerticeRebuild = true\par
    // is used.  As shown below, the Zoom settings can be used to change the data viewed while the manual extents remain the same. \par
    double manminx, manmaxx;\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLX, PEMSC_MINMAX);\par
    manminx = 0.0F;       PEvset(m_hPE, PEP_fMANUALMINX, &manminx, 1);\par
    manmaxx = 8000000.0F; PEvset(m_hPE, PEP_fMANUALMAXX, &manmaxx, 1);\par
\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    double d = 1.0F; PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
    d = 100.0F;      PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
\par
    manminx = 0;    PEvset(m_hPE, PEP_fZOOMMINX, &manminx, 1);\par
    manmaxx = 180;  PEvset(m_hPE, PEP_fZOOMMAXX, &manmaxx, 1);\par
    d = 1.0F;       PEvset(m_hPE, PEP_fZOOMMINY, &d, 1);\par
    d = 100.0F;     PEvset(m_hPE, PEP_fZOOMMAXY, &d, 1);\par
    PEnset(m_hPE, PEP_bZOOMMODE, FALSE); // later we will set true\par
\par
    PEnset(m_hPE, PEP_nHOURGLASSTHRESHOLD, 100000000);\par
    PEnset(m_hPE, PEP_bZOOMWINDOW, TRUE);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZ_ZOOM);\par
\par
    PEnset(m_hPE, PEP_bCUSTOMGRIDNUMBERSX, TRUE);\par
    PEnset(m_hPE, PEP_bCUSTOMGRIDNUMBERSZOOMAXISX, TRUE);\par
    PEszset(m_hPE, PEP_szXAXISLABEL, TEXT("Days:Hours:Minutes:Seconds"));\par
\par
    // Clear out default data and set to data in far right outer coordinates //\par
    float fDummy = (float) 8e20;\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 7999999, &fDummy);  // pre allocates so below spoon feed per index doesn't thrash memory manager\par
    for (int i = 0; i < 8000000; i++)\par
    \{\par
        fDummy = (float) 8e20F + i;\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, 0, i, &fDummy);  \par
    \}\par
    float f = 0.0F;\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 0, &f);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 0, &f);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 1, &f);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 2, &f);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 3, &f);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 7999999, &f);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Scientific Real-Time Example"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
    PEnset(m_hPE, PEP_bNORANDOMPOINTSTOEXPORT, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOPUP, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPAGE2, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWAXISPAGE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSUBSETSPAGE, FALSE);\par
\par
    PEnset(m_hPE, PEP_bALLOWTEXTEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    DWORD col = PERGB( 255, 200, 200, 0);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &col);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, FALSE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_LINE);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_NONE);\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D);\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
\par
    PEnset(m_hPE, PEP_bZOOMMODE, TRUE); \par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
    // Initialize Counters and Timer //\par
    m_nRealTimeCounter = 1;\par
    m_nSinCounter = 1;\par
    m_nTimer = SetTimer( TIMER1, 1000, NULL );\par
\par
/*\par
    //////////////////\par
    // from OnTimer //\par
    //////////////////\par
    case 138:\par
        // New y value //\par
        newy = 50.0F + (sin((double) m_nSinCounter * 0.075F) * 30.0F) + GetRandom(1, 15);\par
\par
        t = CTime::GetCurrentTime();\par
        // We create our own date-time format as Direct3D does not inherently work well with double precision floats. \par
        newx = (float)(t.GetDay() * 86400 + t.GetHour() * 3600 + t.GetMinute() * 60 + t.GetSecond());\par
        newx -= StartTime;\par
\par
        // Store new values at current index //\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, 0, m_nRealTimeCounter, &newx);\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 0, m_nRealTimeCounter, &newy);\par
\par
        // These are special setting used with PEP_bDYNAMICBUFFERS=True and tells ProEssentials to only inject vertice changes for this range //\par
        PEnset(m_hPE, PEP_nREALTIMESTARTINGINDEX, m_nRealTimeCounter);\par
        PEnset(m_hPE, PEP_nREALTIMEQUANTITY, 1);\par
\par
        // Increment index counter //\par
        m_nRealTimeCounter += 1;\par
\par
        // SinCounter is only to produce sin wave data //\par
        m_nSinCounter += 1;\par
        if (m_nSinCounter > 30000) \par
            m_nSinCounter = 1;\par
\par
        // If current time is beyond zoom max, the re-adjust zoom max //\par
        double dZMaxX, dZMinX;\par
        PEvget(m_hPE, PEP_fZOOMMAXX, &dZMaxX);\par
        PEvget(m_hPE, PEP_fZOOMMINX, &dZMinX);\par
\par
        if (dZMaxX - dZMinX <= 181)\par
        \{\par
            if (newx >= dZMaxX)\par
            \{\par
                dZMaxX = newx + 90;          PEvset(m_hPE, PEP_fZOOMMAXX, &dZMaxX, 1);\par
                dZMinX = (newx + 90) - 180;  PEvset(m_hPE, PEP_fZOOMMINX, &dZMinX, 1);\par
            \}\par
        \}\par
\par
        // Update image //\par
        PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
        ::InvalidateRect(m_hPE, NULL, FALSE);\par
        break;\par
\par
    ////////////////////\par
    // from OnCommand //\par
    ////////////////////\par
    else if ((m_nLastSelection == 138) && (HIWORD(wp) == PEWN_CUSTOMGRIDNUMBERS))\par
    \{\par
        // Custom grid number formatting //\par
\par
        // typedef struct tagCUSTOMGRIDNUMBERS\par
        // \{\par
        //     int    nAxisType;    // 0=Y, 1=RightY, 2=X, 3=TopX, 4=ExtraX, 5=ExtraTopX, 6=TopDate, 7=ZoomBottomX, 8=ZoomTopDate\par
        //     int    nAxisIndex;   // only used for y and ry axes, index number relates to PEP_nWORKINGAXIS\par
        //     double dNumber;      // number to format\par
        //     char   szData[48];   // PEvget, gets default format string; PEvset sets completed formatted string\par
        // \} CUSTOMGRIDNUMBERS; \par
\par
        CUSTOMGRIDNUMBERS cgn;\par
        PEvget(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn);\par
\par
        if (cgn.nAxisType == 2 || cgn.nAxisType == 7)\par
        \{\par
            int nDays, nHours, nMinutes, nSecs;\par
            nDays = 0; nHours = 0; nMinutes = 0; nSecs = 0;\par
            double dDaysRemainer, dHrsRemainer, dMinRemainer;\par
            dDaysRemainer = 0; dHrsRemainer = 0; dMinRemainer = 0;\par
            double d = cgn.dNumber; \par
            nDays = (int)(d / 86400);\par
            dDaysRemainer = ((int) d)% 86499;\par
            nHours = (int)(dDaysRemainer / 3600);\par
            dHrsRemainer = ((int) dDaysRemainer) % 3600; \par
            nMinutes = (int)(dHrsRemainer / 60);\par
            dMinRemainer = ((int) dHrsRemainer) % 3600; \par
            nSecs = (int)dMinRemainer;\par
            TCHAR  buffer[48]; \par
            _stprintf(buffer, TEXT("%d:%d:%d:%d"), nDays, nHours, nMinutes, nSecs);\par
            lstrcpy(&cgn.szData[0], buffer);\par
        \}\par
\par
        PEvset(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn, 1);\par
    \}\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
//139  Scientific Graph showing Heatmap\par
void CPEView::CreateSGraphHeatmap()\par
\{\par
    RECT rect;\par
    GetClientRect(&rect);\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1000);\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, 183);\par
    PEnset(m_hPE, PEP_nPOINTS, 512);\par
\par
    // Most other examples use PEvset, this example uses PEvsetcellEx for comparison. \par
    // Remember, ProEssentials works with data via simple contiguous blocks of memory,\par
    // and DuplicateXData, and DuplicateYData below simplify it more, as its now a single dimensional block of memory. \par
    PEnset(m_hPE, PEP_nDUPLICATEXDATA, PEDD_POINTINCREMENT);\par
    PEnset(m_hPE, PEP_nDUPLICATEYDATA, PEDD_SUBSETINCREMENT);\par
\par
    float val1 = 0.0F;  // setting last piece of data we expect to use \par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 511, &val1); // pre allocates memory so guaranteed we never have to reallocate as we spoon feed below\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 182, &val1); // note that we use SubsetIncrement above so think of it as a one dimensional array \par
    PEvsetcellEx(m_hPE, PEP_faZDATA, 182, 511, &val1);\par
\par
    // read heat map data //\par
    CWaitCursor wait;\par
    int nSubsetCount = 0;\par
    int nPointCount = 0;\par
\par
    std::ifstream file("heatmap.txt");\par
\par
    if (file.is_open() == false)\par
    \{\par
        AfxMessageBox(TEXT("A Demo Data File [heatmap.txt] Not Found!"));\par
        PEreset(m_hPE);  //PostQuitMessage(0);\par
        return;\par
    \}\par
\par
    int i = 0;\par
    std::string line;\par
    while (std::getline(file, line))\par
    \{\par
        i++;\par
        std::stringstream   linestream(line);\par
        std::string valX, valY, valZ;\par
        std::getline(linestream, valX, '\\t');  linestream >> valY >> valZ;\par
        float fvx = std::stof(valX) + 20.0F;\par
        float fvy = std::stof(valY) * (i + 1000) / 100.0F; // make the data more log like to match YAxisScaleControl = Log\par
        float fvz = std::stof(valZ);\par
        if (nSubsetCount == 0) \{ PEvsetcellEx(m_hPE, PEP_faXDATA, 0, nPointCount, &fvx); \}\par
        if (nPointCount == 0)  \{ PEvsetcellEx(m_hPE, PEP_faYDATA, 0, nSubsetCount, &fvy); \}\par
        PEvsetcellEx(m_hPE, PEP_faZDATA, nSubsetCount, nPointCount, &fvz);\par
        nPointCount++;\par
        if (nPointCount > 511)\par
        \{\par
            nPointCount = 0;\par
            nSubsetCount++;\par
        \}\par
    \}\par
    wait.Restore(); //Restore the Wait cursor.\par
\par
    // Log y scale\par
    PEnset(m_hPE, PEP_nYAXISSCALECONTROL, PEAC_LOG);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_bGRIDBOLD, TRUE);\par
\par
    // v9 feature adding a plotting method to show contour with shadow effect \par
    PEnset(m_hPE, PEP_bALLOWCONTOURCOLORS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWCONTOURCOLORSSHADOWS, TRUE);\par
\par
    // Set Contour Color regions //           \par
    PEnset(m_hPE, PEP_nCONTOURCOLORBLENDS, 10);\par
    PEnset(m_hPE, PEP_nCONTOURCOLORSET, PECCS_BLUE_CYAN_GREEN_YELLOW_BROWN_WHITE);\par
    PEnset(m_hPE, PEP_nCONTOURCOLORALPHA, 255);\par
\par
    PEnset(m_hPE, PEP_nCONTOURLEGENDPRECISION, 1); // or this is an easier method of controlling precision in legend\par
    PEnset(m_hPE, PEP_bCONTOURSTYLELEGEND, TRUE);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_CONTOURCOLORS);\par
    PEnset(m_hPE, PEP_nDATASHADOWMENU, PEMC_HIDE);\par
\par
    float fZ = 1.4F; PEvset(m_hPE, PEP_fMOUSEWHEELZOOMFACTOR, &fZ, 1);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 2);\par
    PEnset(m_hPE, PEP_bGRIDBANDS, FALSE);\par
\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZPLUSVERT_ZOOM);\par
\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_LEFT);\par
    PEnset(m_hPE, PEP_bGRIDINFRONT, TRUE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
\par
    // Enable middle mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    // Disable other non contour plotting method //\par
    PEnset(m_hPE, PEP_bALLOWLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINEAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITCURVE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSTICK, FALSE);\par
\par
    // Set Titles //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Wave Data - Heatmap - Spectrogram Example"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
\par
    // So contour goes to edge of grid //\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
\par
    // Disable appropriate tabs //\par
    PEnset(m_hPE, PEP_bALLOWAXISPAGE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSTYLEPAGE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSUBSETSPAGE, FALSE);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    PEnset(m_hPE, PEP_bSCROLLINGVERTZOOM, TRUE);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL);\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG);\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD);\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    // v9 feature 2D contours rendered with Direct3D \par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D);\par
    PEnset(m_hPE, PEP_nCOMPOSITE2D3D, PEC2D_FOREGROUND);\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXANNOTVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXNEWCOLORS, TRUE);\par
\par
    // v9 features\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYZVALUES);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TEXT); // v9 new floating text prompt \par
    PEnset(m_hPE, PEP_nHOURGLASSTHRESHOLD, 999999999);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*)AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX);\par
\par
\par
\}\par
\par
\par
//***************************************************************************\par
//120  Scientific Graph showing 2D contour colors\par
void CPEView::CreateSGraph2DContour1()\par
\{    \par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. // \par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1000);\par
\par
    // Enable middle mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    long Row, Col, o, s, e, nQ;\par
    long nStartRow, nEndRow, nStartCol, nEndCol, nTargetRows, nTargetCols;\par
    e = 0.0F;\par
\par
    // Code to get partial data from a binary file //\par
    nStartRow = 100;\par
    nEndRow = 150;\par
    nTargetRows = nEndRow - nStartRow + 1;\par
\par
    nStartCol = 200;\par
    nEndCol = 250;\par
    nTargetCols = nEndCol - nStartCol + 1;\par
\par
    nQ = nTargetRows * nTargetCols;\par
\par
    long* pElevData = NULL;\par
    float* pMyXData = NULL;    \par
    float* pMyYData = NULL;\par
    float* pMyZData = NULL;\par
\par
\tab ::SetCurrentDirectory(szDirectory);\par
\par
    TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
\par
    if (pFile)\par
    \{\par
        pElevData = new long[2250000];\par
        size_t cnt = fread(&pElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
\par
    pMyXData = new float[nQ];\par
    pMyYData = new float[nQ];\par
    pMyZData = new float[nQ];\par
\par
    long rowcounter, colcounter;\par
    BOOL foundtargetindex = FALSE;\par
    rowcounter = 0;\par
    colcounter = 0;\par
\par
    for (Row=0; Row<1500; Row++)\par
    \{\par
        for (Col=0; Col<1500; Col++)\par
        \{\par
            foundtargetindex = FALSE;\par
\par
            if (Row >= nStartRow && Row <= nEndRow) \par
            \{\par
                if (Col >= nStartCol && Col <= nEndCol)\par
                \{\par
                    foundtargetindex = TRUE;\par
                    o = (rowcounter * nTargetRows) + colcounter;\par
\par
                    float f = pElevData[(Row * 1500) + Col];\par
                    //if ( f < 14100.0f) \{ f = 10000.0F; \} // example of data having a plateau\par
\par
                    if ( f < 14100.0f) \{f = 0.00F;\} // testing / creating null data portions\par
\par
                    pMyXData[o] = (float) Col + 1;\par
                    pMyZData[o] = f * .01F; // pElevData[(Row * 1500) + Col] * 0.1F;\par
                    pMyYData[o] = (float) Row + 1;\par
                \}\par
            \}\par
            if (foundtargetindex) \par
                colcounter++;\par
        \}\par
        if (foundtargetindex)\par
            rowcounter++;\par
    \}\par
\par
    double dN = 0.0F;\par
    PEvset(m_hPE, PEP_fNULLDATAVALUEZ, &dN, 1);\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, nTargetRows);\par
    PEnset(m_hPE, PEP_nPOINTS, nTargetCols);\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, pMyXData, nQ);\par
    PEvset(m_hPE, PEP_faYDATA, pMyYData, nQ);\par
    PEvset(m_hPE, PEP_faZDATA, pMyZData, nQ);\par
\par
    if (pElevData)\par
        delete pElevData;\par
    if (pMyXData)\par
        delete pMyXData;\par
    if (pMyYData)\par
        delete pMyYData;\par
    if (pMyZData)\par
        delete pMyZData;\par
        \par
    PEnset(m_hPE, PEP_nCONTOURLEGENDPRECISION, 3); \par
\par
    // Optionally to manually create a contour scale independent of data //\par
    // As data changes between various charts, the scale remains the same. //\par
    //PEnset(m_hPE, PEP_nMANUALSCALECONTROLZ, PEMSC_MINMAX);\par
    //d = 144.0F;\par
    //PEvset(m_hPE, PEP_fMANUALMINZ, &d, 1);\par
    //d = 169.0F;\par
    //PEvset(m_hPE, PEP_fMANUALMAXZ, &d, 1);\par
\par
    DWORD dwCC[30]; \par
    // optional method of setting SubsetColors for contours. \par
    //for (s=0; s<10; s++)\par
    //    dwCC[ s] = PERGB( 25 + (s*18), 0, 175 - (s * 14), 0);\par
    //for (s=0; s<10; s++)\par
    //    dwCC[10 + s] = PERGB( 160  , 148 - (s * 12), 148 - (s * 12), 0);\par
    //dwCC[0] = PERGB(0,0,185,0);\par
    //dwCC[19] = PERGB(160,235,0,0);\par
    //PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwCC, 20); \par
\par
    // v9 features, // optional method of setting sizes of contour color regions \par
    float fBW[] = \{ 0.1F, 0.05F, 0.1F, 0.63F, 0.06F, 0.06F\};\par
    PEvset(m_hPE, PEP_faCONTOURCOLORPROPORTIONS, fBW, 6);\par
\par
    PEnset(m_hPE, PEP_nCONTOURCOLORBLENDS, 10);  // this must be set before COLORSET, COLORSET ALWAYS LAST \par
    PEnset(m_hPE, PEP_nCONTOURCOLORALPHA, 155 );\par
    PEnset(m_hPE, PEP_nCONTOURCOLORSET,  9);\par
\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
\par
    for (s=0; s<30; s++)\par
        dwCC[s] = PERGB( 255,50 + (s * 6), 50 + (s * 6), 50 + (s * 6));\par
    PEvset(m_hPE, PEP_dwaSUBSETSHADES, dwCC, 30);\par
\par
    PEnset(m_hPE, PEP_bCONTOURSTYLELEGEND, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHDATALABELS, TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_LEFT);\par
\par
    // Optional, instead of showing default numeric labels, replace with custom strings\par
    //PEvsetcell( m_hPE, PEP_szaCONTOURLABELS, 0, TEXT("0"));\par
    //PEvsetcell( m_hPE, PEP_szaCONTOURLABELS, 19, TEXT("20" ));\par
    //PEvsetcell( m_hPE, PEP_szaCONTOURLABELS, 39, TEXT("40" ));\par
    //PEvsetcell( m_hPE, PEP_szaCONTOURLABELS, 59, TEXT("60" ));\par
    //PEnset(m_hPE, PEP_nCONTOURCOLORSET, PECCS_BLUE_GREEN_YELLOW_RED);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_LINE);\par
    PEnset(m_hPE, PEP_nBORDERTYPES, PETAB_INSET);\par
\par
    // Set the plotting method //\par
    PEnset(m_hPE, PEP_bALLOWCONTOURCOLORS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWCONTOURLINES, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWCONTOURCOLORSSHADOWS, TRUE);\par
\par
    PEnset(m_hPE, PEP_bCONTOURLINESCOLORED, TRUE);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_CONTOURCOLORS);\par
    PEnset(m_hPE, PEP_nDATASHADOWMENU, PEMC_HIDE);\par
\par
    PEnset(m_hPE, PEP_bGRIDINFRONT, TRUE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
    // Disable other non contour plotting method //\par
    PEnset(m_hPE, PEP_bALLOWLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINEAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITCURVE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSTICK, FALSE);\par
\par
    // Set Titles //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Elevation Example"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
\par
    // Enable Zooming //\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZPLUSVERT_ZOOM);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_bGRIDBANDS, FALSE);\par
    float fZ = 1.15F; PEvset(m_hPE, PEP_fMOUSEWHEELZOOMFACTOR, &fZ, 1);\par
\par
    // Set small font size //\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_SMALL);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    // Disable appropriate tabs //\par
    PEnset(m_hPE, PEP_bALLOWAXISPAGE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSTYLEPAGE, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWSUBSETSPAGE, FALSE);\par
\par
    PEnset(m_hPE, PEP_bSCROLLINGVERTZOOM, TRUE);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_ZVALUE);\par
\par
    // v9 features \par
    PEszset(m_hPE, PEP_szTRACKINGTOOLTIPTITLE, TEXT("USA Dallas area"));\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, 2);\par
    PEnset(m_hPE, PEP_bTRACKINGCUSTOMDATATEXT, TRUE);\par
\par
    // v9 features \par
    PEnset(m_hPE, PEP_bGRAPHBMPALWAYS, TRUE);\par
    PEnset(m_hPE, PEP_dwGRAPHBACKCOLOR, 1);\par
    PEszset(m_hPE, PEP_szGRAPHBMPFILENAME, TEXT("usmid.jpg"));\par
    PEnset(m_hPE, PEP_nGRAPHBMPSTYLE, PEBS_BITBLT_ZOOMING);\par
\par
    // v9 features \par
    // optionally control the relationship between the zoomable background bitmap and the data units. \par
    //double dX;\par
    //dX = 200.0F;\par
    //PEvsetW(m_hPE, PEP_fGRAPHBMPMINX, &dX, 1);\par
    //dX = 260.0F;\par
    //PEvsetW(m_hPE, PEP_fGRAPHBMPMAXX, &dX, 1);\par
    //dX = 100.0F;\par
    //PEvsetW(m_hPE, PEP_fGRAPHBMPMINY, &dX, 1);\par
    //dX = 160.0F;\par
    //PEvsetW(m_hPE, PEP_fGRAPHBMPMAXY, &dX, 1);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D);\par
    PEnset(m_hPE, PEP_nCOMPOSITE2D3D, PEC2D_FOREGROUND);\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXNEWCOLORS, TRUE);\par
\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
    /*\par
\par
    ///////////////\par
    // MouseMove //\par
    ///////////////\par
    \par
    POINT pt;\par
    HOTSPOTDATA hsd;\par
    TCHAR buffer[128];\par
\par
    // get last mouse location within control //\par
    PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
    // test to see if this is within grid area //\par
    RECT r;\par
    PEvget(m_hPE, PEP_rectGRAPH, &r);\par
    if ((pt.x > r.left) && (pt.x < r.right) && (pt.y > r.top) && (pt.y < r.bottom))\par
    \{\par
        if (!PEnget(m_hPE, PEP_bALLOWDATAHOTSPOTS))\par
        \{\par
            // if no data hot spots, then CursorValueZ will be the interpolated value under mouse\par
            double dZ;\par
            PEvget(m_hPE, PEP_fCURSORVALUEZ, &dZ);  // v9 features \par
           _stprintf(buffer, TEXT("Interpolated Z: %.2f"), dZ);\par
        \}\par
        else\par
        \{\par
            // call PEgethotspot //\par
            PEgethotspot(m_hPE, pt.x, pt.y);\par
            // now look at HotSpotData structure //\par
            PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
            if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
            \{\par
              // get zdata value at hot spot //\par
              float yvalue;\par
              PEvgetcellEx(m_hPE, PEP_faZDATA, hsd.w1, hsd.w2, &yvalue);\par
             _stprintf(buffer, TEXT("ZData: %.2f, s=%d,p=%d"), yvalue, hsd.w1, hsd.w2);\par
            \}\par
        \}\par
        CWnd* pParent = GetParent()->GetParent();\par
        if (pParent) \{pParent->SetWindowText(buffer);\}\par
    \}\par
    \par
    */\par
\par
\par
\}\par
\par
//***************************************************************************\par
//121  Scientific Graph showing 2D contour lines\par
void CPEView::CreateSGraph2DContour2()\par
\{    \par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. // \par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1000);\par
\par
    // Enable middle mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    long Row, Col, o, s, e, nQ;\par
    long nStartRow, nEndRow, nStartCol, nEndCol, nTargetRows, nTargetCols;\par
    e = 0.0F;\par
\par
    // Code to get partial data from a binary file //\par
    nStartRow = 300;\par
    nEndRow = 350;\par
    nTargetRows = nEndRow - nStartRow + 1;\par
\par
    nStartCol = 50;\par
    nEndCol = 100;\par
    nTargetCols = nEndCol - nStartCol + 1;\par
\par
    nQ = nTargetRows * nTargetCols;\par
\par
    long* pElevData = NULL;\par
    float* pMyXData = NULL;    \par
    float* pMyYData = NULL;\par
    float* pMyZData = NULL;\par
\par
\tab ::SetCurrentDirectory(szDirectory);\par
\par
    TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
\par
    if (pFile)\par
    \{\par
        pElevData = new long[2250000];\par
        size_t cnt = fread(&pElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
    pMyXData = new float[nQ];\par
    pMyYData = new float[nQ];\par
    pMyZData = new float[nQ];\par
\par
    long rowcounter, colcounter;\par
    BOOL foundtargetindex = FALSE;\par
    rowcounter = 0;\par
    colcounter = 0;\par
\par
    for (Row=0; Row<1500; Row++)\par
    \{\par
        for (Col=0; Col<1500; Col++)\par
        \{\par
            foundtargetindex = FALSE;\par
\par
            if (Row >= nStartRow && Row <= nEndRow) \par
            \{\par
                if (Col >= nStartCol && Col <= nEndCol)\par
                \{\par
                    foundtargetindex = TRUE;\par
                    o = (rowcounter * nTargetRows) + colcounter;\par
                    pMyXData[o] = (float) Col + 1;\par
                    pMyZData[o] = pElevData[(Row * 1500) + Col] * 0.1F;\par
                    pMyYData[o] = (float) Row + 1;\par
                \}\par
            \}\par
            if (foundtargetindex) \par
                colcounter++;\par
        \}\par
        if (foundtargetindex)\par
            rowcounter++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, nTargetRows);\par
    PEnset(m_hPE, PEP_nPOINTS, nTargetCols);\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, pMyXData, nQ);\par
    PEvset(m_hPE, PEP_faYDATA, pMyYData, nQ);\par
    PEvset(m_hPE, PEP_faZDATA, pMyZData, nQ);\par
\par
    if (pElevData)\par
        delete pElevData;\par
    if (pMyXData)\par
        delete pMyXData;\par
    if (pMyYData)\par
        delete pMyYData;\par
    if (pMyZData)\par
        delete pMyZData;\par
        \par
    PEnset(m_hPE, PEP_nCONTOURLEGENDPRECISION, 1); // or this is an easier method of controlling precision in legend\par
\par
    // Set Contour Color regions //\par
    PEnset(m_hPE, PEP_nCONTOURCOLORBLENDS, 10);  // this must be set before COLORSET, COLORSET ALWAYS LAST \par
    PEnset(m_hPE, PEP_nCONTOURCOLORSET,  9);\par
\par
    DWORD dwCC[100];\par
    for (s=0; s<36; s++)\par
        dwCC[s] = PERGB( 255,20 + (s * 7), 20 + (s * 7), 20 + (s * 7));\par
    PEvset(m_hPE, PEP_dwaSUBSETSHADES, dwCC, 36);\par
\par
    PEnset(m_hPE, PEP_bCONTOURSTYLELEGEND, TRUE);\par
\par
    // Set some random annotations //\par
    int nGradient = PEPGS_RADIAL_TOP_LEFT;\par
    int nShadow = 1;\par
    int nColor = PERGB( 186, 198, 0, 0);\par
    int nType = PEGAT_SMALLDOTSOLID;\par
    double d;\par
    for (s=0; s<30; s++)\par
    \{\par
       d = nStartCol + GetRandom(1, 50);\par
       PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, s, &d);\par
       d = nStartRow + GetRandom(1, 50);\par
       PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, s, &d);\par
       PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, s, &nType);\par
       PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, s, &nColor);\par
       PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONGRADIENTSTYLE, s, &nGradient);\par
       PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONSHADOW, s, &nShadow);\par
    \}\par
    nColor = PERGB( 186, 0, 198, 0);\par
    for (s=30; s<60; s++)\par
    \{\par
        d = nStartCol + GetRandom(1, 50);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, s, &d);\par
        d = nStartRow + GetRandom(1, 50);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, s, &d);\par
       PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, s, &nType);\par
       PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, s, &nColor);\par
       PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONGRADIENTSTYLE, s, &nGradient);\par
       PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONSHADOW, s, &nShadow);\par
    \}\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONSHADOWS, TRUE);\par
\par
    // v9.5\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_INSET);\par
\par
    // Set the plotting method //\par
    PEnset(m_hPE, PEP_bALLOWCONTOURCOLORS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWCONTOURLINES, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHDATALABELS, TRUE);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_CONTOURLINES);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_LEFT);\par
    PEnset(m_hPE, PEP_bGRIDINFRONT, TRUE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
    PEnset(m_hPE, PEP_bGRIDBOLD, TRUE);\par
    PEnset(m_hPE, PEP_nDATASHADOWMENU, PEMC_HIDE);\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
    // Disable other non contour plotting method //\par
    PEnset(m_hPE, PEP_bALLOWLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINEAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITCURVE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSTICK, FALSE);\par
\par
    // Set Titles //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Elevation Example"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
\par
    // So contour goes to edge of grid //\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
\par
    // Enable Zooming //\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZPLUSVERT_ZOOM);\par
\par
    // Set small font size //\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_SMALL);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    // Disable appropriate tabs //\par
    PEnset(m_hPE, PEP_bALLOWAXISPAGE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSTYLEPAGE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSUBSETSPAGE, FALSE);\par
\par
    PEnset(m_hPE, PEP_bSCROLLINGVERTZOOM, TRUE);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    // v9 has optional to plot with RenderEngine = PERE_DIRECT3D as in example 120 \par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
\}\par
\par
//***************************************************************************\par
//122  Scientific Graph showing Large 2D contour \par
void CPEView::CreateSGraph2DContour3()\par
\{    \par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1000);\par
\par
    // Enable middle mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    long Row, Col, o, s, e, nQ;\par
    long nStartRow, nEndRow, nStartCol, nEndCol, nTargetRows, nTargetCols;\par
    e = 0.0F;\par
\par
    // Code to get partial data from a binary file //\par
\par
    nStartRow = 1;\par
    nEndRow = 1000;\par
    nTargetRows = nEndRow - nStartRow + 1;\par
\par
    nStartCol = 1;\par
    nEndCol = 1000;\par
    nTargetCols = nEndCol - nStartCol + 1;\par
\par
    nQ = nTargetRows * nTargetCols;\par
\par
    long* pElevData = NULL;\par
    float* pMyXData = NULL;    \par
    float* pMyYData = NULL;\par
    float* pMyZData = NULL;\par
\par
    ::SetCurrentDirectory(szDirectory);\par
\par
    TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
\par
    if (pFile)\par
    \{\par
        pElevData = new long[2250000];\par
        size_t cnt = fread(&pElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
\par
    pMyXData = new float[nTargetCols];  // v9.5\par
    pMyYData = new float[nTargetRows];\par
    pMyZData = new float[nQ];\par
\par
    long rowcounter, colcounter;\par
    BOOL foundtargetindex = FALSE;\par
    rowcounter = 0;\par
    colcounter = 0;\par
\par
    for (Row=0; Row<1500; Row++)\par
    \{\par
        for (Col=0; Col<1500; Col++)\par
        \{\par
            foundtargetindex = FALSE;\par
\par
            if (Row >= nStartRow && Row <= nEndRow) \par
            \{\par
                if (Col >= nStartCol && Col <= nEndCol)\par
                \{\par
                    foundtargetindex = true;\par
                    if (Row == nStartRow)  // v9.5\par
                        pMyXData[Col - nStartCol] = Col + 1;\par
                    if (Col == nStartCol)  // v9.5 \par
                        pMyYData[Row - nStartRow] = Row + 1;\par
                    // See our help, topic SubsetByPoint to understand the below formula  // v9.5\par
                    o = (rowcounter * nTargetRows) + colcounter;\par
                    pMyZData[o] = (float)(pElevData[(Row * 1500) + Col] * 0.1);\par
                \}\par
            \}\par
            if (foundtargetindex) \par
                colcounter++;\par
        \}\par
        if (foundtargetindex)\par
            rowcounter++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, nTargetRows);\par
    PEnset(m_hPE, PEP_nPOINTS, nTargetCols);\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, pMyXData, nTargetCols);  // v9.5 \par
    PEvset(m_hPE, PEP_faYDATA, pMyYData, nTargetRows);\par
    PEvset(m_hPE, PEP_faZDATA, pMyZData, nQ);\par
\par
    PEnset(m_hPE, PEP_nDUPLICATEXDATA, PEDD_POINTINCREMENT);\par
    PEnset(m_hPE, PEP_nDUPLICATEYDATA, PEDD_SUBSETINCREMENT);\par
\par
    if (pElevData)\par
        delete pElevData;\par
    if (pMyXData)\par
        delete pMyXData;\par
    if (pMyYData)\par
        delete pMyYData;\par
    if (pMyZData)\par
        delete pMyZData;\par
       \par
    PEnset(m_hPE, PEP_nCONTOURLEGENDPRECISION, 1); // or this is an easier method of controlling precision in legend\par
\par
    // Set Contour Color regions //\par
    DWORD dwCC[37];\par
    for (s=0; s<11; s++)\par
        dwCC[s] = PERGB( 255,0, 31 + (s * 21), 95 + (s * 15));\par
    for (s=0; s<11; s++)\par
        dwCC[11 + s] = PERGB( 255,0, 95 + (s * 15), 0);\par
    for (s=0; s<14; s++)\par
        dwCC[22 + s] = PERGB( 255,128 + (s * 9), 128 + (s * 9), 128 + (s * 9));\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwCC, 36);\par
\par
    for (s=0; s<36; s++)\par
        dwCC[s] = PERGB( 255,20 + (s * 7), 20 + (s * 7), 20 + (s * 7));\par
    PEvset(m_hPE, PEP_dwaSUBSETSHADES, dwCC, 36);\par
\par
    PEnset(m_hPE, PEP_bCONTOURSTYLELEGEND, TRUE);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_SHADOW);\par
    PEnset(m_hPE, PEP_nBORDERTYPES, PETAB_NO_BORDER);\par
    PEnset(m_hPE, PEP_bGRIDBOLD, TRUE);\par
\par
    // v9 feature adding a plotting method to show contour with shadow effect \par
    PEnset(m_hPE, PEP_bALLOWCONTOURCOLORSSHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWCONTOURCOLORS, TRUE);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_CONTOURCOLORSSHADOWS);\par
    PEnset(m_hPE, PEP_nDATASHADOWMENU, PEMC_HIDE);\par
\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_LEFT);\par
    PEnset(m_hPE, PEP_bGRIDINFRONT, TRUE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
\par
    // Enable Zooming //\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZPLUSVERT_ZOOM);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_bGRIDBANDS, FALSE);\par
    float fZ = 1.4F; PEvset(m_hPE, PEP_fMOUSEWHEELZOOMFACTOR, &fZ, 1);\par
\par
    // Disable other non contour plotting method //\par
    PEnset(m_hPE, PEP_bALLOWLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINEAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITCURVE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSTICK, FALSE);\par
\par
    // Set Titles //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Elevation Example"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
\par
    // So contour goes to edge of grid //\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
\par
    // Set small font size //\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    // Disable appropriate tabs //\par
    PEnset(m_hPE, PEP_bALLOWAXISPAGE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSTYLEPAGE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSUBSETSPAGE, FALSE);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    PEnset(m_hPE, PEP_bSCROLLINGVERTZOOM, TRUE);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
\par
    // Set some random annotations //       \par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWANNOTATIONTEXTMENU, PEMC_SHOW);\par
\par
    double d;  \tab int t;\par
    int aCnt = 0;\par
    TCHAR szAnnotText[128];\par
    for (int annot = 0; annot < 10; annot++)\par
    \{\par
        int nRndRow = (int)(GetRandom(1, nTargetRows)) - 1;\par
        int nRndCol = (int)(GetRandom(1, nTargetCols)) - 1;\par
        d = nStartCol + nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = nStartRow + nRndRow + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_SMALLDOTSOLID; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 200, 200, 200);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
        aCnt++;\par
    \}\par
\par
    for (int annot = 0; annot < 10; annot++)\par
    \{\par
        double d1, d2;\par
        int nRndRow = (int)(GetRandom(1, nTargetRows)) - 1;\par
        int nRndCol = (int)(GetRandom(1, nTargetCols)) - 1;\par
        d1 = nStartCol + nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d1);\par
        d2 = nStartRow + nRndRow + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d2);\par
        t = PEGAT_SMALLDOWNTRIANGLESOLID; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
        aCnt++;\par
\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d1);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d2);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("Annotation %d "), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        aCnt++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    float fASize = 0.7F; PEvset(m_hPE, PEP_fGRAPHANNOTATIONSIZECNTL, &fASize, 1);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 110);\par
    PEnset(m_hPE, PEP_nMAXIMUMSYMBOLSIZE, PEMPS_LARGE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTMINSYMBOLSIZE, PEMPS_LARGE);\par
    PEnset(m_hPE, PEP_nMAXIMUMSYMBOLSIZE, PEMPS_LARGE);\par
    PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, TRUE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    // v9 feature 2D contours rendered with Direct3D \par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D);\par
    PEnset(m_hPE, PEP_nCOMPOSITE2D3D, PEC2D_FOREGROUND);\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXNEWCOLORS, TRUE);\par
\par
    // v9 features\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYZVALUES);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TEXT); // v9 new floating text prompt \par
    PEnset(m_hPE, PEP_nHOURGLASSTHRESHOLD, 999999999);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\}\par
\par
//***************************************************************************\par
//123  Scientific Graph showing large quantity of data\par
void CPEView::CreateSGraphLargeData()\par
\{    \par
    //! Plotting 12,000,000 data values, 6M plus bottom zoom window draws 6M //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Enable Bottom Zoom Window //\par
    PEnset(m_hPE, PEP_bZOOMWINDOW, TRUE);\par
\par
    // Enable MouseWheelZooming and Mouse Zooming \par
    PEnset(m_hPE, PEP_nMOUSEWHEELFUNCTION, PEMWF_HORZ_ZOOM);\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORIZONTAL);\par
\par
    // Enable middle mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
\par
    // Set all text //\par
    TCHAR szTmp[128];\par
    lstrcpy(szTmp, TEXT("|")); PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 0, szTmp);\par
    lstrcpy(szTmp, TEXT("Start/Stop Song")); PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 1, szTmp);\par
\par
    // Set all menu items to bottom location //\par
    int nCML[] = \{PECML_BOTTOM, PECML_BOTTOM\};\par
    PEvset(m_hPE, PEP_naCUSTOMMENULOCATION, nCML, 2);\par
\par
    // v9.5  This example now demonstrates sharing memory of the app with the chart, no data is transferred or copied. \par
    //float* MyYData;\par
    //float* MyXData;\par
\par
    int Frames = 1;\par
    header h;\par
\par
    if (!m_tmpSongYData)  // only load data once \par
    \{\par
        // Pardon the low quality 16000 sample wav; trying to keep the download small and wav playing code simple.\par
        char input[] = "triumphantfeelingss.wav";\par
        FILE * infile = NULL;\par
\par
        try\par
        \{\par
            infile = fopen(input, "rb");\par
        \}\par
        catch (CFileException* pEx)\par
        \{\par
            pEx->ReportError();\par
            pEx->Delete();\par
            return;\par
        \}\par
        if (infile == NULL) \{ return; \}\par
\par
        short inbuff16[33000];\par
        char ChunkName[4];\par
\par
        if (infile)\par
        \{\par
            // read header data\par
            fread(&h, 1, sizeof(header), infile);\par
            if (h.BitPerSample == 0 || h.NumberOfChannels == 0 || h.BitPerSample != 16) \{ return; \}\par
            if (h.ChunkLength > 16) \{ fread(&inbuff16, sizeof(char), h.ChunkLength - 16, infile); \}\par
            fread(&ChunkName, sizeof(char), 4, infile);\par
            int i = 0; while (ChunkName[i])\{ ChunkName[i] = tolower(ChunkName[i]); i++; \}\par
            try\par
            \{\par
                while (strncmp(ChunkName, "data", 4) != 0)\par
                \{\par
                    int nMore;\par
                    fread(&nMore, sizeof(int), 1, infile);\par
                    fread(&inbuff16, sizeof(char), nMore, infile);\par
                    fread(&ChunkName, sizeof(char), 4, infile);\par
                    i = 0; while (ChunkName[i])\{ ChunkName[i] = tolower(ChunkName[i]); i++; \}\par
                \}\par
            \}\par
            catch (CFileException* pEx)\par
            \{\par
                pEx->ReportError();\par
                pEx->Delete();\par
                return;\par
            \}\par
            int nDataLength;\par
            fread(&nDataLength, sizeof(int), 1, infile);\par
            Frames = 8 * (nDataLength / h.BitPerSample) / h.NumberOfChannels;\par
            double TimeLength = ((double)Frames) / ((double)h.SampleRate);\par
            short nSample;\par
            if (h.BitPerSample == 16 && h.NumberOfChannels == 2)\par
            \{\par
                m_nSongSize = Frames;\par
                m_tmpSongYData = new float[Frames*h.NumberOfChannels];\par
                m_tmpSongXData = new float[Frames];  // We will use PEP_nDUPLICATEXDATA, we now only need one subset of x data\par
\par
                for (int i = 0; i < Frames; i++)\par
                \{\par
                    for (int j = 0; j < h.NumberOfChannels; j++)\par
                    \{\par
                        int o = (j * Frames) + i;\par
                        if (j == 0) \{ m_tmpSongXData[o] = (float)i; \}\par
                        fread(&nSample, sizeof(short), 1, infile);\par
                        m_tmpSongYData[o] = ((float)nSample) / 327.680F;\par
                    \}\par
                \}\par
            \}\par
            else\par
            \{\par
                fclose(infile);\par
                return;\par
            \}\par
        \}\par
        if (infile) \{ fclose(infile); \}\par
    \} // done loading wav data\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, 2 ); // always 2 channels\par
    PEnset(m_hPE, PEP_nPOINTS, m_nSongSize);  // Frames\par
\par
    PEvset(m_hPE, PEP_faXDATAPTR, m_tmpSongXData, m_nSongSize);\par
    PEvset(m_hPE, PEP_faYDATAPTR, m_tmpSongYData, m_nSongSize * 2);\par
    PEnset(m_hPE, PEP_nDUPLICATEXDATA, PEDD_POINTINCREMENT);\par
    \par
    // v9.5 option to share data, above sets pointer to data and we only load the data once \par
    //PEvset(m_hPE, PEP_faXDATA, MyXData, h.NumberOfChannels * Frames);\par
    //PEvset(m_hPE, PEP_faYDATA, MyYData, h.NumberOfChannels * Frames);\par
    //delete MyXData;\par
    //delete MyYData;\par
\par
    int nArray[2] = \{ 1, 1 \};\par
    PEvset(m_hPE, PEP_naMULTIAXESSUBSETS, nArray, 2);\par
\par
    PEnset(m_hPE, PEP_bNULLDATAGAPS, FALSE);\par
    double dNDV = -999.9F; // so we plot zero values \par
    PEvset(m_hPE, PEP_fNULLDATAVALUE, &dNDV, 1);\par
\par
    // Set plotting method to line and allow zooming //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_LINE);\par
    PEnset(m_hPE, PEP_bALLOWPLOTCUSTOMIZATION, FALSE);\par
\par
    DWORD col = PERGB( 255, 0, 255, 255);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &col);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 1, &col);\par
\par
    // Set the padding between data and edge of chart //\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 1);\par
\par
    // Disable auto scaling of data //\par
    PEnset(m_hPE, PEP_bAUTOSCALEDATA, FALSE);\par
\par
    int LT[] = \{PELT_THINSOLID, PELT_THINSOLID, PELT_THINSOLID, PELT_THINSOLID, PELT_THINSOLID, PELT_THINSOLID \};\par
    PEvset(m_hPE, PEP_naSUBSETLINETYPES, LT, 6);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, FALSE);\par
\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    PEnset(m_hPE, PEP_nHOURGLASSTHRESHOLD, 20e6);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, 1);\par
\par
    int nVType = PELT_MEDIUMSOLID;\par
    double fXLoc = ((double) 0) + 100;\par
    DWORD color = PERGB( 255, 255, 0, 0);\par
    PEvset(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, &nVType, 1);\par
    PEvset(m_hPE, PEP_faVERTLINEANNOTATION, &fXLoc, 1);\par
    PEvset(m_hPE, PEP_dwaVERTLINEANNOTATIONCOLOR, &color, 1 );\par
    color = 1; PEvset(m_hPE, PEP_naVERTLINEANNOTATIONZOOM, &color, 1 );\par
    PEnset(m_hPE, PEP_nLINEANNOTATIONTEXTSIZE, 100);\par
\par
    int nHS = 1;\par
    PEvset(m_hPE, PEP_naVERTLINEANNOTHOTSPOT, &nHS, 1);\par
    PEnset(m_hPE, PEP_nALLOWVERTLINEANNOTHOTSPOTS, 1);\par
\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bZOOMWINDOWSHOWANNOTATIONS, TRUE);\par
\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("Left"));\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Right"));\par
    PEnset(m_hPE, PEP_bSHOWLEGEND, FALSE);\par
\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Left"));\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Right"));\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_nSHOWXAXIS, PESA_GRIDNUMBERS);\par
    PEnset(m_hPE, PEP_bZOOMWINDOWSHOWXAXIS, FALSE);\par
\par
    PEnset(m_hPE, PEP_nINCLUDEDATALABELSMENU, 0);\par
    PEnset(m_hPE, PEP_nSHOWLEGENDMENU, 0);\par
    PEnset(m_hPE, PEP_nMARKDATAPOINTSMENU, 0);\par
    PEnset(m_hPE, PEP_nDATASHADOWMENU, 0);\par
    PEnset(m_hPE, PEP_nDATAPRECISIONMENU, 0);\par
\par
    PEnset(m_hPE, PEP_bALLOWPAGE2, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWAXISPAGE, FALSE);\par
\par
    PEnset(m_hPE, PEP_bALLOWTEXTEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    PEnset(m_hPE, PEP_nHELPMENU, PEMC_HIDE);\par
    PEnset(m_hPE, PEP_nDATASHADOWMENU, PEMC_HIDE);\par
\par
    // Enable formatting events for x axis  //\par
    PEnset(m_hPE, PEP_bCUSTOMGRIDNUMBERSX, TRUE);\par
\par
    // Construct a simple table annotation //\par
    PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
    PEnset(m_hPE, PEP_nTAROWS, 1);\par
    PEnset(m_hPE, PEP_nTACOLUMNS, 1);\par
\par
    // Set to cell types and attributes //\par
    int nType = PEGAT_LARGESQUARESOLID;\par
    PEvsetcellEx(m_hPE, PEP_naTATYPE, 0, 1, &nType);\par
\par
    DWORD dwCellColor;\par
    if (bPlayingSong)\par
    \{\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, TEXT(" Stop"));\par
        dwCellColor = PERGB(255, 255, 0, 0);\par
    \}\par
    else\par
    \{\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, TEXT(" Play"));\par
        dwCellColor = PERGB(255, 0, 255, 0);\par
    \}\par
    PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 0, &dwCellColor);\par
\par
    int nHotSpot = 1;\par
    PEvsetcellEx(m_hPE, PEP_naTAHOTSPOT, 0, 0, &nHotSpot);\par
\par
    // Other Table Related Properties ///\par
    PEnset(m_hPE, PEP_bSHOWTABLEANNOTATION, TRUE);\par
\par
    PEnset(m_hPE, PEP_nTALOCATION, PETAL_INSIDE_PIXEL_UNITS  );\par
    PEnset(m_hPE, PEP_nTAX, 10 ); \par
    PEnset(m_hPE, PEP_nTAY, 5 );\par
\par
    PEnset(m_hPE, PEP_dwTABACKCOLOR, PERGB( 0,0,0,0) );\par
    PEnset(m_hPE, PEP_nTAHEADERROWS, 0);\par
    PEnset(m_hPE, PEP_bTAHEADERCOLUMN, FALSE);\par
    PEnset(m_hPE, PEP_nTABORDER, PETAB_NO_BORDER);\par
    PEnset(m_hPE, PEP_nTATEXTSIZE, 105);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLEFONT, TEXT("Arial"));\par
    PEszset(m_hPE, PEP_szSUBTITLEFONT, TEXT("Arial"));\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("|12M data points continuously redrawn|"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("|along with new annotation position|zoom with mouse wheel"));\par
\par
    PEnset(m_hPE, PEP_bAUTOIMAGERESET, FALSE);\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D);\par
\par
    // Improves performance by forcing Direct2D content into one layer, \par
    // The full setting for both forground and background layers is optional though for this and many\par
    // implementations, this level of detail may not be necessary. \par
    PEnset(m_hPE, PEP_nCOMPOSITE2D3D, PEC2D_FOREGROUND);\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXNEWCOLORS, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
\par
    // new v9 feature\par
    PEnset(m_hPE, PEP_bTRACKINGCUSTOMDATATEXT, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TEXT); // v9 new floating text prompt \par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_YVALUE);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
    /*\par
    ////////////////////////////////////////////////////////////////////////////\par
    // the following code can be found in the Timer other other event Handler //\par
    ////////////////////////////////////////////////////////////////////////////\par
\par
    else if ((m_nLastSelection == 123) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))\par
    \{\par
        TCHAR buffer[128];\par
        double dX;\par
        PEvget(m_hPE, PEP_fCURSORVALUEX, &dX);\par
        double dMinutes, dSeconds, dRem;\par
        int nMin, nSec;\par
        dSeconds = (dX / 16000);\par
        dMinutes = dSeconds / 60.0F;\par
        nMin = (int) dMinutes;\par
        dRem = dSeconds - (60.0F * nMin);\par
        nSec = (int) dRem;\par
        TCHAR  sbuffer[48]; \par
        _stprintf(sbuffer, TEXT("%d:%.3f"), nMin, dRem);\par
\par
        double dY;\par
        PEvget(m_hPE, PEP_fCURSORVALUEY, &dY);\par
        _stprintf(buffer, TEXT("Amplitude: %.3f \\n Time: %s"), dY, sbuffer);\par
        PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
    \}\par
\par
    // We create a custom windows message to handle file position changes //\par
    //   1. updates vertical line location \par
    //   2. potentially changes x axis viewing range \par
    //   3. if scale is less than 1 second in range, switches to a simpler custom x axis \par
    LRESULT CPEView::OnDemoSongPosition( WPARAM wp, LPARAM lp )\par
    \{\par
        int n;\par
        double d;\par
        TCHAR c[20];\par
        if (wp == 1)\par
        \{\par
            PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORIZONTAL);\par
\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, TEXT(" Play"));\par
            DWORD dwCellColor = PERGB(255, 0, 255, 0);\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 0, &dwCellColor);\par
            ::InvalidateRect(m_hPE, 0, FALSE);\par
        \}\par
\par
        if (bPlayingSong && m_nLastSelection == 123 && m_hPE)\par
        \{\par
            PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_NONE);\par
            // Note, mouse wheel zooming is still available, only click and drag zoom is set to none\par
\par
            DWORD dwCellColor = PERGB(255, 255, 0, 0);\par
            PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, 0, 0, &dwCellColor);\par
            PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 0, TEXT(" Stop"));\par
\par
            int nVType = PELT_MEDIUMSOLID;\par
            double dXLoc = ((double) lp) + 1;\par
            DWORD color = PERGB( 255, 255, 0, 0);\par
            PEvset(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, &nVType, 1);\par
            PEvset(m_hPE, PEP_faVERTLINEANNOTATION, &dXLoc, 1);\par
            PEvset(m_hPE, PEP_dwaVERTLINEANNOTATIONCOLOR, &color, 1 );\par
            int z = 1; PEvset(m_hPE, PEP_naVERTLINEANNOTATIONZOOM, &z, 1 );\par
\par
            PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
\par
            if (PEnget(m_hPE, PEP_bZOOMMODE))\par
            \{\par
                // Test Left Mouse Button not pressed, user may be dragging ZoomBox and it would be ugly to change scale while dragging chart //\par
                if ((GetKeyState(VK_LBUTTON) & 0x80) == 0)\par
                \{\par
                    double dMinX, dMaxX, dRangeX;\par
                    PEvget(m_hPE, PEP_fZOOMMINX, &dMinX);\par
                    PEvget(m_hPE, PEP_fZOOMMAXX, &dMaxX);\par
\par
                    BOOL bChangeXView = FALSE;\par
                    if (dXLoc > dMaxX)\par
                        bChangeXView = TRUE;\par
\par
                    dRangeX = dMaxX - dMinX;\par
\par
                    if (dRangeX < 16000)\par
                    \{\par
                        if (bChangeXView)\par
                        \{\par
                            // set new viewing x axis range //\par
                            PEvset(m_hPE, PEP_fZOOMMAXX, &dXLoc, 1);\par
                            dMinX = dXLoc - dRangeX;\par
                            PEvset(m_hPE, PEP_fZOOMMINX, &dMinX, 1);\par
                        \}\par
                        // hide the moving vertical line annotation index 0, line type -1 hides line\par
                        n = -1; PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, 0, &n);\par
                        // add line annotations (index 1 and 2) to create a simple custom x axis, one left one right\par
                        d = dXLoc - dRangeX; PEvsetcell(m_hPE, PEP_faVERTLINEANNOTATION, 1, &d);\par
                        n = PELAT_GRIDTICK; PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, 1, &n);\par
                        _stprintf(c, TEXT("|h%.3f"), d/16000.0F); PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 1, c);\par
                        d = dXLoc; PEvsetcell(m_hPE, PEP_faVERTLINEANNOTATION, 2, &d);\par
                        n = PELAT_GRIDTICK; PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, 2, &n);\par
                        _stprintf(c, TEXT("|h%.3f"), d/16000.0F); PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, 2, c);\par
                        PEnset(m_hPE, PEP_nSHOWXAXIS, PESA_EMPTY);\par
                        // set the bottom margin //\par
                        PEszset(m_hPE, PEP_szBOTTOMMARGIN, TEXT("XX"));\par
                    \}\par
                    else\par
                    \{\par
                        if (bChangeXView)\par
                        \{\par
                            // set new viewing x axis range //\par
                            PEvset(m_hPE, PEP_fZOOMMINX, &dXLoc, 1);\par
                            dMaxX = dXLoc + dRangeX;\par
                            PEvset(m_hPE, PEP_fZOOMMAXX, &dMaxX, 1);\par
                        \}\par
                        // Ok to show full x axis //\par
                        PEnset(m_hPE, PEP_nSHOWXAXIS, PESA_ALL);\par
                        // Resize, truncate to just the one moving vertical line annoation\par
                        d = 1.0F; PEvsetcell(m_hPE, PEP_faVERTLINEANNOTATION, -1, &d);\par
                        n = 1.0F; PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, -1, &n);\par
                        lstrcpy(c, TEXT("1")); PEvsetcell(m_hPE, PEP_szaVERTLINEANNOTATIONTEXT, -1, c);\par
                        // set the first line annotation type to show a medium solid line \par
                        n = PELT_MEDIUMTHINSOLID; PEvsetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, 0, &n);\par
                        // remove the bottom margin //\par
                        PEszset(m_hPE, PEP_szBOTTOMMARGIN, TEXT(""));\par
                    \}\par
                    PEreinitializecustoms(m_hPE); // to cause chart's scrollbars to sync to the new min max values\par
                \}\par
            \}\par
            ::InvalidateRect(m_hPE, 0, FALSE);\par
        \}\par
        return 0;\par
    \}\par
\par
    // OnCommand section //\par
    else if ((m_nLastSelection == 123) && (HIWORD(wp) == PEWN_CLICKED) )\par
    \{\par
        // Table Annotation HotSpot //  Starts or Stops the song playing \par
\par
        HOTSPOTDATA hsd;\par
        PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
        if (hsd.nHotSpotType == PEHS_TABLEANNOTATION + 0) // zero represents first table annotation\par
        \{\par
            if (bPlayingSong == 0)\par
            \{\par
                PEnset(m_hPE, PEP_nALLOWZOOMING, 0);\par
                AfxBeginThread(MyThreadProc, this->m_hWnd);\par
            \}\par
            else\par
            \{\par
                bPlayingSong = 0;\par
                ::PostMessage(this->m_hWnd, WM_DEMO_SONG_POSITION, 1, 0);\par
            \}\par
            return CView::OnCommand(wp, lp);\par
        \}\par
    \}\par
    else if ((m_nLastSelection == 123) && (HIWORD(wp) == PEWN_CUSTOMGRIDNUMBERS))\par
    \{\par
        // Custom grid number formatting //  Formats to Minutes:Seconds song position \par
\par
        // typedef struct tagCUSTOMGRIDNUMBERS\par
        // \{\par
        // \tab    int      nAxisType;    // 0=Y, 1=RightY, 2=X, 3=TopX, 4=ExtraX, 5=ExtraTopX, 6=TopDate, 7=ZoomBottomX, 8=ZoomTopDate\par
        // \tab    int      nAxisType;    // 0=Y, 1=RIGHT Y, 2=X, 3=TOP X\par
        //\tab    int\tab\tab nAxisIndex;   // only used for y and ry axes, index number relates to PEP_nWORKINGAXIS\par
        // \tab    double   dNumber;\tab   // number to format\par
        //\tab    char\tab     szData[48];   // PEvget, gets default format string; PEvset sets completed formatted string\par
        // \} CUSTOMGRIDNUMBERS; \par
\par
        CUSTOMGRIDNUMBERS cgn;\par
        PEvget(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn);\par
\par
        if (cgn.nAxisType == 2)  // x axis \par
        \{\par
            double dMinutes, dSeconds, dRem;\par
            int nMin;\par
            dSeconds = (cgn.dNumber / 16000);\par
            dMinutes = dSeconds / 60.0F;\par
            nMin = (int) dMinutes;\par
            dRem = dSeconds - (60.0F * nMin);\par
            TCHAR  buffer[48]; \par
            _stprintf(buffer, TEXT("%d:%.3f"), nMin, dRem);\par
            lstrcpy(&cgn.szData[0], buffer);\par
        \}\par
        PEvset(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn, 1);\par
    \}\par
    else if ((m_nLastSelection == 123) && (HIWORD(wp) == PEWN_CUSTOMMENU))\par
    \{\par
        // Custom Menu click //  Starts Stops song\par
\par
        int nM = PEnget(m_hPE, PEP_nLASTMENUINDEX);\par
        if (nM == 1) // play\par
        \{\par
            if (bPlayingSong == 0)\par
            \{\par
                PEnset(m_hPE, PEP_nALLOWZOOMING, 0);\par
                AfxBeginThread(MyThreadProc, this->m_hWnd);\par
            \}\par
            else\par
            \{\par
                bPlayingSong = 0;\par
                ::PostMessage(this->m_hWnd, WM_DEMO_SONG_POSITION, 1, 0);\par
            \}\par
        \}\par
    \}\par
\par
    */\par
\par
\}\par
\par
\par
//***************************************************************************\par
//124  Scientific Graph showing programmatic horizontal zooming\par
void CPEView::CreateSGraphProgrammaticZoom()\par
\{    \par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    //! Zoom logic here.  It's important that if using MultiAxesSubsets //\par
    //! that AllowZooming is set to PEAZ_HORIZONTAL. //\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORIZONTAL);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
    // Select desired zoom extents and enable zoomed mode //\par
    double dMin, dMax;\par
    dMin = 40000.0F;\par
    dMax = 60000.0F;\par
    PEvset(m_hPE, PEP_fZOOMMINX, &dMin, 1);\par
    PEvset(m_hPE, PEP_fZOOMMAXX, &dMax, 1);\par
    PEnset(m_hPE, PEP_bZOOMMODE, TRUE);\tab\par
\par
    // Repass the data, this time with PEvset call //\par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\par
    PEnset(m_hPE, PEP_nPOINTS, 100000);\par
\par
    float* MyYData;\par
    float* MyXData;\par
    MyYData = new float[200000];\par
    MyXData = new float[200000];\par
\par
    int j;\par
    for (j=0; j<=99999; j++)\par
    \{\par
        MyXData[j] = j + 1;\par
        MyYData[j] = (sin(0.0003F * (double) j) * 500.0F);\par
\par
        MyXData[100000+j] = j + 1;\par
        MyYData[100000+j] = (sin(0.00023F * (double) j) * 500.0F);\par
    \}\par
    \par
    // Change some of the data so we can see some variations //\par
    srand( (unsigned)time( NULL ) );\par
    for (j=0; j<=99000; j+=1000)\par
    \{\par
        for (int k=0; k<=300; k++)\par
        \{\par
            MyYData[j + k] = MyYData[j + k] - 50 + GetRandom(1, 100);\par
            MyYData[100000+j + k] = MyYData[j + k] - 50 + GetRandom(1, 100);\par
            MyYData[j + k] += (sin(0.00033F * (double) j) * 300.0F);\par
        \}\par
    \}\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, MyXData, 200000);\par
    PEvset(m_hPE, PEP_faYDATA, MyYData, 200000);\par
    delete MyXData;\par
    delete MyYData;\par
\par
    //int mas = 1;\par
    //PEvsetcell(m_hPE, PEP_naMULTIAXESSUBSETS, 0, &mas);\par
    //PEvsetcell(m_hPE, PEP_naMULTIAXESSUBSETS, 1, &mas);\par
\par
    int nMAS[] = \{1, 1\};\par
    PEvset (m_hPE, PEP_naMULTIAXESSUBSETS, nMAS, 2);\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
\par
    //float fMAP[] = \{30.0F, 70.F\};\par
    //PEvset (m_hPE, PEP_faMULTIAXESPROPORTIONS, fMAP, 2);\par
\par
    //int nOMA[] = \{2\};\par
    //PEvset (m_hPE, PEP_naOVERLAPMULTIAXES, nOMA, 1);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_LINE);\par
\par
    DWORD dwArray[2] = \{ PERGB(255, 0, 170, 170), PERGB(255, 170, 170, 0) \};\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwArray, 2);\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_LINE);\par
\par
    int sublintyp = PELT_MEDIUMSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &sublintyp);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 1, &sublintyp);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_NO_TEXT);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_INSIDE_AXIS );\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT(""));\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT(""));\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
\par
    PEnset(m_hPE, PEP_bZOOMWINDOW, TRUE);\par
\}\par
\par
\par
//***************************************************************************\par
//125  Scientific Graph showing scatter plus data-point dragging\par
void CPEView::CreateSGraphScatterPlusDrag()\par
\{    \par
    //! Click and Drag symbols with mouse. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Change the data to that of a scatter plot //\par
    PEnset(m_hPE, PEP_nSUBSETS, 4);\par
    PEnset(m_hPE, PEP_nPOINTS, 12);\par
    for (int s=0; s<=3; s++)\par
    \{\par
        for (int p=0; p<=11; p++)\par
        \{\par
            float f;\par
            f = 25 + GetRandom(1, 25);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
            f = 90 + GetRandom(1, 25);\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
        \}\par
    \}\par
\par
    // Set the PlottingMethod to point //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
\par
    // Enable data hot spots //\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
\par
    // Make Data hots spot locations larger //\par
    PEnset(m_hPE, PEP_nHOTSPOTSIZE, PEHSS_LARGE);\par
\par
    // Disable some types of plotting methods //\par
    PEnset(m_hPE, PEP_bALLOWSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINEAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITCURVE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWAREA, FALSE);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
\par
/*    \par
    ////////////////////////////////////////////////\par
    // Code below is how dragging logic is formed //\par
    // m_nLastSelection is chart type             //\par
    ////////////////////////////////////////////////\par
\par
    // At top of file, variables with file scope\par
    BOOL bDragging = FALSE;\par
    long nDragIndexS = 0;\par
    long nDragIndexP = 0;\par
\par
    // From the OnCommand handler //\par
    else if ((m_nLastSelection == 125) && (HIWORD(wp) == PEWN_CLICKED))\par
    \{\par
        HOTSPOTDATA hsd;\par
\par
        // now look at HotSpotData structure //\par
        PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
        if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
        \{\par
            // get ydata value at hot spot //\par
            bDragging = TRUE;          // Start dragging process, set flag to true\par
            nDragIndexS = hsd.w1;      // Store subset index\par
            nDragIndexP = hsd.w2;      // Store point index\par
        \}\par
    \}\par
\par
    // From the OnCommand handler //\par
    else if ((m_nLastSelection == 125) && bDragging && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
    \{\par
        int nA;\par
        int nX;\par
        int nY;\par
        double fX;\par
        double fY;\par
        POINT pt;\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        nA = 0;      // Initialize axis, non-zero only if using MultiAxesSubsets\par
        nX = pt.x;   // Initialize nX and nY with mouse location\par
        nY = pt.y;\par
        PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
        // Check move-to location and restrain to the chart's extents.\par
        //! Note that you can only expect to read valid ManualMinX type\par
        //! properties after an initial PEactions = 0 or PEactions = 1\par
        //! has been executed.  Or, DLL call to PEreinitialize. \par
        double fTempMin, fTempMax;\par
        PEvget(m_hPE, PEP_fMANUALMINX, &fTempMin);\par
        PEvget(m_hPE, PEP_fMANUALMAXX, &fTempMax);\par
        if (fX <= fTempMin)\par
            fX = fTempMin;\par
        else if (fX >= fTempMax)\par
            fX = fTempMax;\par
\par
        PEvget(m_hPE, PEP_fMANUALMINY, &fTempMin);\par
        PEvget(m_hPE, PEP_fMANUALMAXY, &fTempMax);\par
        if (fY <= fTempMin)\par
            fY = fTempMin;\par
        else if (fY >= fTempMax)\par
            fY = fTempMax;\par
\par
        // Change XData and YData to new location //\par
        float fx = (float) fX;\par
        float fy = (float) fY;\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, nDragIndexS, nDragIndexP, &fx);\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, nDragIndexS, nDragIndexP, &fy);\par
\par
        // Performs a PEreinitializecustoms, PEresetimage, and InvalidateRect //\par
        PEreinitializecustoms(m_hPE);\par
        PEresetimage(m_hPE, 0, 0);\par
        ::InvalidateRect(m_hPE, NULL, FALSE);\par
\par
        // Windows functions causes an immediate WM_PAINT to be triggered //\par
        ::UpdateWindow(m_hPE);\par
    \}\par
\par
    // From the OnCommand handler // \par
    else if ((m_nLastSelection == 125) && bDragging && (HIWORD(wp) == PEWN_LBUTTONUP))\par
    \{\par
        bDragging = FALSE;\par
    \}\par
\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
//126  Scientific Graph showing Bubble Chart\par
void CPEView::SGraphBubbleChart()\par
\{    \par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Change the data to that of a scatter plot //\par
    PEnset(m_hPE, PEP_nSUBSETS, 4);\par
    PEnset(m_hPE, PEP_nPOINTS, 12);\par
    for (int s=0; s<=3; s++)\par
    \{\par
        for (int p=0; p<=11; p++)\par
        \{\par
            float f;\par
            f = 25 + GetRandom(1, 25);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
            f = 90 + GetRandom(1, 25);\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
\par
            // Bubble Charts Use ZData also //\par
            f = 10 + GetRandom(1, 25);\par
            PEvsetcellEx(m_hPE, PEP_faZDATA, s, p, &f);\par
        \}\par
    \}\par
\par
    // Set the PlottingMethod to Bubble //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BUBBLE);\par
\par
    // Enable data hot spots //\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
\par
    // Make Data hots spot locations larger //\par
    PEnset(m_hPE, PEP_nHOTSPOTSIZE, PEHSS_LARGE);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_INSET);\par
\par
    // Disable some types of plotting methods //\par
    PEnset(m_hPE, PEP_bALLOWBUBBLE, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSSPLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWBESTFITCURVE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSPLINEAREA, FALSE);\par
\par
\}\par
\par
//***************************************************************************\par
//127  Scientific Graph showing Custom Menus\par
void CPEView::SGraphCustomMenus()\par
\{    \par
    //! This example shows how to implement custom popup menus. //\par
    //! Right click the control and look toward the bottom of popup. //\par
    //! The last 3 menu items are custom menus implemented with the following code. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Get rid of Help menu item //\par
    PEnset(m_hPE, PEP_nHELPMENU, PEMC_HIDE);\par
\par
    // Create custom menu to show printing logic for placing multiple images //\par
    // on one page //\par
\par
    // Create four menu items on bottom of built-in menu //\par
    // Item 0 creates a separator line \par
    // Item 1 is a checked/unchecked menu option\par
    // Item 2 is a popup with 3 options \par
    // Item 3 is a simple menu item\par
\par
    // Set all text //\par
    TCHAR szTmp[128];\par
    lstrcpy(szTmp, TEXT("|")); PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 0, szTmp);\par
    lstrcpy(szTmp, TEXT("Print in Monochrome Viewing Style")); PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 1, szTmp);\par
    lstrcpy(szTmp, TEXT("Print Orientation|Land Scape|Portrait|Just an item to disable")); PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 2, szTmp);\par
    lstrcpy(szTmp, TEXT("Click Here to Print")); PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 3, szTmp);\par
\par
    // Make Item 1 default to checked //\par
    // 1 below represents menu index, 0 will always be second index for non-popup menu items //\par
    int nCMS = PECMS_CHECKED;\par
    PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 1, 0, &nCMS);\par
\par
    // Make Item 2 sub 2 default to checked //\par
    // Note this is a popup menu item, and second index is 0 for main popup, and 1+n for sub-popup items.\par
    nCMS = PECMS_CHECKED;\par
    PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 2, 2, &nCMS);\par
\par
    // Make Item 2 sub 3 grayed //\par
    // (2) is the menu index, (3) is to control 3rd sub popup menu item.\par
    nCMS = PECM_GRAYED;\par
    PEvsetcellEx(m_hPE, PEP_naCUSTOMMENU, 2, 3, &nCMS);\par
\par
    // Set all menu items to bottom location //\par
    int nCML[] = \{PECML_BOTTOM,PECML_BOTTOM, PECML_BOTTOM, PECML_BOTTOM\};\par
    PEvset(m_hPE, PEP_naCUSTOMMENULOCATION, nCML, 4);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_NO_BORDER);\par
\par
    int sublintyp = PELT_MEDIUMTHINSOLID;\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &sublintyp);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 1, &sublintyp);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 2, &sublintyp);\par
    PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 3, &sublintyp);\par
\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_THIN);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_SMALL);\par
\par
/*\tab\par
    /////////////////////////////////////////////////////////////////////////\par
    // Code from OnCommand which handles the PEWN_CUSTOMMENU notification  //\par
    /////////////////////////////////////////////////////////////////////////\par
\par
    else if ((m_nLastSelection == 127) && (HIWORD(wp) == PEWN_CUSTOMMENU))\par
    \{\par
        // Custom Menu was clicked //\par
        int nM = PEnget(m_hPE, PEP_nLASTMENUINDEX);\par
        int nSM = PEnget(m_hPE, PEP_nLASTSUBMENUINDEX);\par
\par
        if (nM == 1)\par
        \{\par
            // Reverse option //\par
            int n;\par
            PEvgetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, 0, &n);\par
            if (n == PECMS_UNCHECKED)\par
                n = PECMS_CHECKED;\par
            else\par
                n = PECMS_UNCHECKED;\par
            PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, 0, &n);\par
            return TRUE;\par
        \}\par
\par
        if (nM == 2)\par
        \{\par
            // Option Explicit so first set all to unchecked //\par
            int n = PECMS_UNCHECKED;\par
            PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, 1, &n);\par
            PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, 2, &n);\par
            PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, 3, &n);\par
\par
            // Next set the selected item //\par
            n = PECMS_CHECKED;\par
            PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, nSM, &n);\par
            return TRUE;\par
        \}\par
\par
        if (nM == 3)\par
        \{\par
            // Perform the actual print //\par
\par
            // Get Mono/Color menu setting //\par
            int nMono;\par
            PEvgetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 1, 0, &nMono);\par
\par
            // Get Orientation setting //\par
            int n, nOrient;\par
            PEvgetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 2, 1, &n);\par
            if (!n)\par
                nOrient = 2;  // Portrait\par
            else\par
                nOrient = 1;  // Landscape\par
\par
            // Save current viewing style type properties //\par
            int nQS = PEnget(m_hPE, PEP_nQUICKSTYLE);\par
            int nBG = PEnget(m_hPE, PEP_bBITMAPGRADIENTMODE);\par
            int nRE = PEnget(m_hPE, PEP_nRENDERENGINE);\par
            PEnset(m_hPE, PEP_nRENDERENGINE, PERE_HYBRID);\par
\par
            // Set Viewing Style with respect to retrieved menu state //\par
            if (nMono)\par
            \{\par
                PEnset(m_hPE, PEP_nVIEWINGSTYLE, PEVS_MONO);\par
                PEnset(m_hPE, PEP_dwMONOGRAPHBACKCOLOR, 1);\par
\par
                // Make sure white is used as background \par
                PEnset(m_hPE, PEP_nDESKGRADIENTSTYLE, PEGS_VERTICAL);\par
                PEnset(m_hPE, PEP_dwDESKGRADIENTSTART, PERGB( 255,255,255,255));\par
                PEnset(m_hPE, PEP_dwDESKGRADIENTEND, PERGB( 255,255,255,255));\par
\par
                // Make sure white is used as background \par
                PEnset(m_hPE, PEP_nGRAPHGRADIENTSTYLE, PEGS_VERTICAL);\par
                PEnset(m_hPE, PEP_dwGRAPHGRADIENTSTART, PERGB( 255,255,255,255));\par
                PEnset(m_hPE, PEP_dwGRAPHGRADIENTEND, PERGB( 255,255,255,255));\par
\par
                // Remove any possible desk bmp //\par
                PEnset(m_hPE, PEP_nDESKBMPSTYLE, PEBS_NO_BMP);\par
            \}\par
            else\par
            \{\par
                PEnset(m_hPE, PEP_nVIEWINGSTYLE, PEVS_COLOR);\par
                PEnset(m_hPE, PEP_dwGRAPHBACKCOLOR, 1);\par
\par
                // Force a white graph background //\par
                PEnset(m_hPE, PEP_nGRAPHGRADIENTSTYLE, PEGS_VERTICAL);\par
                PEnset(m_hPE, PEP_dwGRAPHGRADIENTSTART, PERGB( 255,255,255,255));\par
                PEnset(m_hPE, PEP_dwGRAPHGRADIENTEND, PERGB( 255,255,255,255));\par
            \}\par
\par
            // Set some other properties good for mono printing //\par
            PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_NONE);\par
            PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
\par
            // Set background bitmap/example logo //\par
            PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
            PEnset(m_hPE, PEP_nGRAPHBMPSTYLE, PEBS_BITBLT_BOTTOM_RIGHT);\par
            PEszset(m_hPE, PEP_szGRAPHBMPFILENAME, "getthep.png");\par
            \par
            //! Note, GraphBackColor or MonoGraphBackColor is set above //\par
            PEreinitializecustoms(m_hPE);\par
\par
            PEprintgraph(m_hPE, 0, 0, 0, nOrient);\par
\par
            // Reset properties back to original //\par
            PEnset(m_hPE, PEP_nRENDERENGINE, nRE);\par
            PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, nBG);\par
            PEnset(m_hPE, PEP_nQUICKSTYLE, nQS);\par
            PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
            PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_THIN);\par
            PEnset(m_hPE, PEP_nVIEWINGSTYLE, PEVS_COLOR);\par
\par
            PEreinitializecustoms(m_hPE);\par
            PEresetimage(m_hPE, 0, 0);\par
        \}\par
    \}\par
*/\par
\par
\par
\}\par
\par
//***************************************************************************\par
//128  Scientific Graph showing partial axes\par
void CPEView::SGraphPartialAxes()\par
\{    \par
    //! Note Right Y Axes do not take up entire axis height. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Seperate subsets into separate axes //\par
    int nMAS[] = \{2, 2\};\par
    PEvset(m_hPE, PEP_naMULTIAXESSUBSETS, nMAS, 2);\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
\par
    // First Multi Axes //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1); // First multi axes, set second subset on right //\par
\par
    // Set Partial Right Y Axis Settings //\par
    PEnset(m_hPE, PEP_nAXISSIZERY, 60);             // Set to 60% of axis height\par
    PEnset(m_hPE, PEP_nAXISLOCATIONRY, 40);         // Top justify so set to 100 - 60 \par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_LINE);\par
    PEnset(m_hPE, PEP_dwRYAXISCOLOR, PERGB( 255,0, 198, 198));\par
    PEszset(m_hPE, PEP_szRYAXISLABEL, TEXT("60% Axis Height"));\par
\par
    // Second Multi Axes //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1); // Second multi axes, set second subset on right //\par
\par
    // Set Partial Right Y Axis Settings //\par
    PEnset(m_hPE, PEP_nAXISSIZERY, 40);             // Set to 40% of axis height\par
    PEnset(m_hPE, PEP_nAXISLOCATIONRY, 0);          // Bottom Justify always set to 0\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_LINE);\par
    PEnset(m_hPE, PEP_dwRYAXISCOLOR, PERGB( 255,0, 198, 0));\par
    PEszset(m_hPE, PEP_szRYAXISLABEL, TEXT("40% Axis Height"));\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_LINE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_INSIDE_AXIS);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
\par
\}\par
\par
\par
//***************************************************************************\par
//129  Scientific Graph with vertical y axis grid numbers\par
void CPEView::SGraphVerticalGridNumbers()\par
\{    \par
    //! Vertical Y Axis Grid Numbers and Special Y Axis Grid Label Locations //\par
    //! Try Zooming and Scrolling vertically. //\par
    \par
    //! This feature is ideally suited for using many left and/or right y axes. //\par
    //! It's also handy when screen real-estate is limited as it always is. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // Seperate subsets into separate axes //\par
    int nMAS[] = \{2, 2\};\par
    PEvset(m_hPE, PEP_naMULTIAXESSUBSETS, nMAS, 2);\par
    // Overlap both multi axes //\par
    int nOMA = 2;;\par
    PEvset(m_hPE, PEP_naOVERLAPMULTIAXES, &nOMA, 1);\par
\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
\par
    // Set Vertical Grid Numbers //\par
    PEnset(m_hPE, PEP_bYAXISVERTGRIDNUMBERS, TRUE);\par
    PEnset(m_hPE, PEP_bVGNAXISLABELLOCATION, TRUE);\par
\par
    // First Multi Axes //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1);      // First multi axes, set second subset on right //\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_AREA);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSLINE);\par
\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 255,198,0,0));\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Subset 1|4"));      // |4 is equivalent of PEGAT_DOTSOLID\par
\par
    PEnset(m_hPE, PEP_dwRYAXISCOLOR, PERGB( 255, 0, 198, 198));\par
    PEszset(m_hPE, PEP_szRYAXISLABEL, TEXT("Subset 2|10"));    // |10 is equivalent of PEGAT_UPTRIANGLESOLID \par
\par
    PEnset(m_hPE, PEP_nSHOWYAXIS, PESA_GRIDNUMBERS);\par
    PEnset(m_hPE, PEP_nSHOWRYAXIS, PESA_GRIDNUMBERS);\par
\par
    // Second Multi Axes //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1);      // Second multi axes, set second subset on right //\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_AREA);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSLINE);\par
\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 255,198, 198, 0));\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Subset 3|6"));      // |6 is equivalent of PEGAT_SQUARESOLID\par
\par
    PEnset(m_hPE, PEP_dwRYAXISCOLOR, PERGB( 255,0, 198, 0));\par
    PEszset(m_hPE, PEP_szRYAXISLABEL, TEXT("Subset 4|12"));    // |12 is equivalent of PEGAT_DOWNTRIANGLESOLID\par
\par
    PEnset(m_hPE, PEP_nSHOWYAXIS, PESA_GRIDNUMBERS);\par
    PEnset(m_hPE, PEP_nSHOWRYAXIS, PESA_GRIDNUMBERS);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
\par
    PEnset(m_hPE, PEP_bSHOWLEGEND, FALSE);  // No need for legend, we've placed legend along axes\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_LINE);\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_NONE);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
    PEnset(m_hPE, PEP_nBESTFITDEGREE, PEBFD_4TH);\par
\par
    PEnset(m_hPE, PEP_bSCROLLINGVERTZOOM, TRUE);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
    PEnset(m_hPE, PEP_dwTICKCOLOR, 1);\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("ZOOM and SCROLL the chart!"));\par
\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 50);\par
\par
\}\par
\par
//***************************************************************************\par
//130  Scientific Graph with extra X axes\par
void CPEView::SGraphExtraXAxes()\par
\{    \par
    //! Extra top and bottom x axes //\par
    //! Try Zooming and Scrolling. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    int nMAS[] = \{2,2\};\par
    PEvset(m_hPE, PEP_naMULTIAXESSUBSETS, nMAS, 2);\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
\par
    int nOMA = 2;\par
    PEvset(m_hPE, PEP_naOVERLAPMULTIAXES, &nOMA, 1);\par
\par
    // Last subset, first axes on right //\par
    PEnset(m_hPE, PEP_nTXAXISCOMPARISONSUBSETS, 1);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 255,198,0,0));\par
    PEnset(m_hPE, PEP_dwXAXISCOLOR, PERGB( 255,198,0,0));\par
    PEnset(m_hPE, PEP_dwRYAXISCOLOR, PERGB( 255,0,198,198));\par
    PEnset(m_hPE, PEP_dwTXAXISCOLOR, PERGB( 255,0,198,198));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_AREA);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSBFC);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 255,198,198,0));\par
    PEnset(m_hPE, PEP_dwRYAXISCOLOR, PERGB( 255,0,198,0));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_AREA);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSBFC);\par
\par
    //  This example uses the following structure to create extra x axes. \par
    //\par
    //\tab typedef struct tagEXTRAAXIS\par
    //\tab\{\par
    //\tab\tab int      nSize;\par
    //\tab\tab float    fMin;\par
    //\tab\tab float    fMax;\par
    //\tab\tab char     szLabel[64];\par
    //\tab\tab float    fManualLine;\par
    //\tab\tab float    fManualTick;\par
    //\tab\tab char     szFormat[16];\par
    //\tab\tab int      nShowAxis;\par
    //\tab\tab int      nShowTickMark;\par
    //\tab\tab int      bInvertedAxis;\par
    //\tab\tab int      bLogScale;\par
    //\tab\tab DWORD    dwColor;\par
    //\tab\} EXTRAAXIS; \par
\par
    EXTRAAXIS ea;\par
    ea.nSize = sizeof(EXTRAAXIS);\par
    ea.fMin = 10.0;\par
    ea.fMax = 310.0;\par
    lstrcpy(ea.szLabel, TEXT("Extra Axis 1"));\par
    ea.fManualLine = 0;\par
    ea.fManualTick = 0;\par
    lstrcpy(ea.szFormat, TEXT(""));\par
    ea.nShowAxis = PESA_ALL;\par
    ea.nShowTickMark = PESTM_TICKS_INSIDE;\par
    ea.bInvertedAxis = FALSE;\par
    ea.bLogScale = FALSE;\par
    ea.dwColor = PERGB( 255,198, 198, 0);\par
\par
    // Create extra bottom axis //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEvset(m_hPE, PEP_structEXTRAAXISX, &ea, 1);\par
\par
    // Create extra top axis //\par
    ea.fMin = -100.0;\par
    ea.fMax = 100.0;\par
    lstrcpy(ea.szLabel, TEXT("Top Extra Axis 1"));\par
    ea.dwColor = PERGB( 255,0, 198, 0);\par
    PEvset(m_hPE, PEP_structEXTRAAXISTX, &ea, 1);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_INSET);\par
    PEnset(m_hPE, PEP_nBESTFITDEGREE, PEBFD_4TH);\par
\par
    int nLT[] = \{PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, PELT_MEDIUMSOLID,PELT_MEDIUMSOLID\};\par
    PEvset(m_hPE, PEP_naSUBSETLINETYPES, nLT, 4);\par
\par
    PEnset(m_hPE, PEP_bSCROLLINGVERTZOOM, TRUE);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
    PEnset(m_hPE, PEP_dwTICKCOLOR, 1);\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("ZOOM and SCROLL the chart!"));\par
    PEnset(m_hPE, PEP_bALLOWSUBSETSPAGE, FALSE);\par
\par
\}\par
\par
//***************************************************************************\par
//131  Scientific Graph with fixed grid aspect\par
void CPEView::SGraphGridAspect()\par
\{    \par
    //! Showing how to force a grid aspect ratio //\par
    //! In this case, always square, resize to demo. //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    float f;\par
    f = 1.0F;   // ratio is height / width and 1.0 creates a square \par
    PEvset(m_hPE, PEP_fGRIDASPECT, &f, 1);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_SHADOW);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Grid is always Square"));\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
\par
\}\par
\par
//***************************************************************************\par
//132  Scientific Graph with event based custom grid numbers\par
void CPEView::SGraphCustomGridNumberFormatting()\par
\{    \par
    //! Example showing custom event based grid number formattimg //\par
    //! An event gets triggered for each major grid line getting drawn. //\par
    //! It gives the developer an opportunity to modify the string as needed. //\par
    \par
    //! ProEssentials' image construction logic related to control-realestate utilization  //\par
    //! is quite complex.  Don't be suprised if this event gets triggered more than  //\par
    //! once for each image per gridline because grid number space lies within our internal logic  //\par
    //! and is modified by this event,  Zoom and scroll chart. //\par
    \par
    //! HIGHLY RECOMMENDED: Do not debug this type of code with breakpoints,     // \par
    //! Use debug strings and monitor their output during image construction.    //\par
    //! This is generally good advice for all ProEssentials based code because   //\par
    //! a breakpoint may trigger a WM_PAINT and cause ProEssentials to rebuild   //\par
    //! its image.  This is only related to placing breakpoints within a stretch //\par
    //! of ProEssentials type code which could cause an image to be constructed  //\par
    //! prematurely before other inter-related properties are allowed to set.    //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    int nMAS[] = \{2,2\};\par
    PEvset(m_hPE, PEP_naMULTIAXESSUBSETS, nMAS, 2);\par
\par
    int nOMA = 2;\par
    PEvset(m_hPE, PEP_naOVERLAPMULTIAXES, &nOMA, 1);\par
\par
    PEnset(m_hPE, PEP_nMULTIAXESSIZING, TRUE);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 255,0,198,0));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSSPLINE);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSBFC);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Not Formatted"));\par
    PEnset(m_hPE, PEP_nCOMPARISONSUBSETS, 1);\par
\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_dwYAXISCOLOR, PERGB( 255,0,198,198));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSSPLINE);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSBFC);\par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Formatting This Axis"));\par
    PEnset(m_hPE, PEP_nCOMPARISONSUBSETS, 1);\par
\par
    // Enable formatting events for second y axis because WorkingAxis is current 1 //\par
    PEnset(m_hPE, PEP_bCUSTOMGRIDNUMBERSY, TRUE);\par
\par
    // Reset WorkingAxis to zero //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_INSET);\par
    PEnset(m_hPE, PEP_nBORDERTYPES, PETAB_DROP_SHADOW);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWMAXIMIZATION, FALSE);\par
    PEnset(m_hPE, PEP_bSCROLLINGVERTZOOM, TRUE);\par
    PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
\par
    DWORD dwColors[] = \{PERGB( 255,0,198,0), PERGB( 255,0,120,0), PERGB( 255,0, 198,198), PERGB( 255,0, 120,120)\};\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwColors, 4);\par
\par
/*\par
    ///////////////////////////////////////////////////////////////////////////////////////////\par
    // Code from OnCommand handler responding to PEWN_CUSTOMGRIDNUMBERS notification message //\par
    ///////////////////////////////////////////////////////////////////////////////////////////\par
\par
    else if ((m_nLastSelection == 132) && (HIWORD(wp) == PEWN_CUSTOMGRIDNUMBERS))\par
    \{\par
        // Custom grid number formatting //\par
\par
        // typedef struct tagCUSTOMGRIDNUMBERS\par
        // \{\par
        //    int     nAxisType;    // 0=Y, 1=RIGHT Y, 2=X, 3=TOP X\par
        //    int     nAxisIndex;   // only used for y and ry axes, index number relates to PEP_nWORKINGAXIS\par
        //    double  dNumber;      // number to format\par
        //    char    szData[48];   // PEvget, gets default format string; PEvset sets completed formatted string\par
        // \} CUSTOMGRIDNUMBERS; \par
\par
        CUSTOMGRIDNUMBERS cgn;\par
        PEvget(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn);\par
\par
        if (cgn.nAxisType == 0)\par
        \{\par
            // Left Y Axis //\par
            if (cgn.dNumber == -400.0)\par
                lstrcpy(&cgn.szData[0], "Low Value");\par
            else if (cgn.dNumber == -200.0)\par
                lstrcpy(&cgn.szData[0], "Medium Low Value");\par
            else if (cgn.dNumber == 0.0)\par
                lstrcpy(&cgn.szData[0], "Medium Value");\par
            else if (cgn.dNumber == 200.0)\par
                lstrcpy(&cgn.szData[0], "Medium High Value");\par
            else if (cgn.dNumber == 400.0)\par
                lstrcpy(&cgn.szData[0], "High Value");\par
        \}\par
\par
        PEvset(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn, 1);\par
    \}\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
//133  Scientific Graph with multiple point types and colors\par
void CPEView::SGraphUsingPointTypesPointColors()\par
\{    \par
    //! Example showing per subset use of PointTypes and PointColors properties //\par
\par
    // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
    CreateSimpleSGraph();\par
\par
    // For this example, change points, data previously set in above CreateSimpleSGraph\par
    PEnset(m_hPE, PEP_nPOINTS, 12);\par
\par
    int nSFPC[] = \{0, 1\}; // First and Second subsets use SubsetPointColors feature //\par
    PEvset(m_hPE, PEP_naSUBSETFORPOINTCOLORS, nSFPC, 2);\par
\par
    int nSFPT[] = \{2, 3\}; // Third and Fourth subsets will use SubsetPointTypes feature //\par
    PEvset(m_hPE, PEP_naSUBSETFORPOINTTYPES, nSFPT, 2);\par
\par
    // Set SubsetPointColors for first two subsets //\par
    // Also set SubsetPointTypes for last two subsets //\par
    DWORD color;\par
    float fY;\par
    for (int s=0;s<=3;s++)  \par
    \{    \par
        for (int p=0;p<=11;p++)\par
        \{\par
            switch(s)  // Subset Index //\par
            \{    \par
            case 0:\par
                // Set Point Color //\par
                color = PERGB( 255,15 + ((p + 1) * 20), 0, 0);  \par
                PEvsetcellEx(m_hPE, PEP_dwaPOINTCOLORS, s, p, &color);\par
\par
                // Set YData //\par
                fY = ((p + 1) * 50) + GetRandom(2, 250);\par
                PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &fY);\par
                break;\par
            case 1:\par
                // Set Point Color //\par
                color = PERGB( 255,0, 15 + ((p + 1) * 20), 0);\par
                PEvsetcellEx(m_hPE, PEP_dwaPOINTCOLORS, s, p, &color);\par
\par
                // Set YData //\par
                fY = ((p + 1) * 50) + GetRandom(2, 250) + 350;\par
                PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &fY);\par
                break;\par
            case 2:\par
                // Set Point Type //\par
                PEvsetcellEx(m_hPE, PEP_naPOINTTYPES, s, p, &p);\par
\par
                // Set YData //\par
                fY = ((p + 1) * 50) + GetRandom(2, 250) + 700;\par
                PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &fY);\par
                break;\par
            case 3:\par
                // Set Point Type //\par
                PEvsetcellEx(m_hPE, PEP_naPOINTTYPES, s, p, &p);\par
\par
                // Set YData //\par
                fY = ((p + 1) * 50) + GetRandom(2, 250) + 1050;\par
                PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &fY);\par
                break;\par
            \}\par
        \}\par
    \}\par
\par
    // Set Various Other Properties ///\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_LINE);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
    PEnset(m_hPE, PEP_nPOINTSIZE, PEPS_LARGE);\par
    PEnset(m_hPE, PEP_bSHOWLEGEND, FALSE);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
\}\par
\par
//***************************************************************************\par
//134  Scientific Graph with left and right axes sharing same grid line frequency\par
void CPEView::SGraphWithCleanAxes()\par
\{    \par
    //! This example shows a clean approach with multiple left and right y axes \par
    //! where axes have proportional number of y axis grid lines with respect to\par
    //! height of axis. Resulting in equally spaced y axis grid lines across all\par
    //! axes.\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1000);\par
\par
    // v9 features new default CursorPromptLocation = ToolTip\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);  \par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
\par
    // Enable middle mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    // Enable Bar Glass Effect //\par
    PEnset(m_hPE, PEP_bBARGLASSEFFECT, TRUE);\par
\par
    // Enable Plotting style gradient and bevel features //\par
    PEnset(m_hPE, PEP_nAREAGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
    PEnset(m_hPE, PEP_nAREABEVELSTYLE, PEBS_MEDIUM_SMOOTH);\par
    PEnset(m_hPE, PEP_nSPLINEGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
    PEnset(m_hPE, PEP_nSPLINEBEVELSTYLE, PESBS_MEDIUM_SMOOTH);\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, 4);\par
    PEnset(m_hPE, PEP_nPOINTS, 12);\par
\par
    // Change Data to match example scales which are manually configured //\par
    for (int s=0; s<=3; s++)\par
    \{\par
        for (int p=0; p<=11; p++)\par
        \{\par
            float f;\par
            f =  (p + 1) * 10.0F;\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
\par
            switch (s)\par
            \{\par
                case 0:\par
                    f = 0.01F + GetRandom(1, 4);\par
                    break;\par
                case 1:\par
                    f = 400.0F + GetRandom(1, 450);\par
                    break;\par
                case 2:\par
                    f = 0.01F + GetRandom(1, 25);\par
                    break;\par
                case 3:\par
                    f = 0.01F + GetRandom(1, 65);\par
                    break;\par
            \}\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
        \}\par
    \}\par
\par
    // Now sub-divide subsets into 4 individual axes //\par
    // Each axis with one subset in each //\par
    int nArray[4] = \{1,1,1,1\};\par
    PEvset (m_hPE, PEP_naMULTIAXESSUBSETS, nArray, 4);\par
\par
    // Create Overlapped Axes //\par
    int nOMA[3] = \{1,1,2\};\par
    PEvset (m_hPE, PEP_naOVERLAPMULTIAXES, nOMA, 3);\par
\par
    // Set Proportions of Axes  //\par
    float fMAP[3] = \{.2F, .5F, .3F\};\par
    PEvset (m_hPE, PEP_faMULTIAXESPROPORTIONS, fMAP, 3);\par
\par
    // Set up First axis parameters //  \par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    double dMin = 0.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &dMin, 1);\par
    double dMax = 5.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &dMax, 1);\par
    PEnset(m_hPE, PEP_bMANUALYAXISTICKNLINE, TRUE);\par
    double dLine = 2.5F;\par
    PEvset(m_hPE, PEP_fMANUALYAXISLINE, &dLine, 1);\par
    double dTick = 0.5F;\par
    PEvset(m_hPE, PEP_fMANUALYAXISTICK, &dTick, 1);\par
    PEnset(m_hPE, PEP_nSHOWTICKMARKY, PESTM_TICKS_HIDE); \par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("NPSHR (feet)"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_BAR);\par
\par
    // Set up Second axis parameters //  \par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 1);\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLRY, PEMSC_MINMAX);\par
    dMin = 400.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINRY, &dMin, 1);\par
    dMax = 900.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXRY, &dMax, 1);\par
    PEnset(m_hPE, PEP_bMANUALRYAXISTICKNLINE, TRUE);\par
    dLine = 100.0F;\par
    PEvset(m_hPE, PEP_fMANUALRYAXISLINE, &dLine, 1);\par
    dTick = 20.0F;\par
    PEvset(m_hPE, PEP_fMANUALRYAXISTICK, &dTick, 1);\par
    PEnset(m_hPE, PEP_nSHOWTICKMARKRY, PESTM_TICKS_HIDE); \par
    PEszset(m_hPE, PEP_szRYAXISLABEL, TEXT("Total Head (feet)"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_POINTSPLUSSPLINE);\par
\par
    // Set up Third axis parameters //  \par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 2);\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    dMin = 0.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &dMin, 1);\par
    dMax = 30.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &dMax, 1);\par
    PEnset(m_hPE, PEP_bMANUALYAXISTICKNLINE, TRUE);\par
    dLine = 10.0F;\par
    PEvset(m_hPE, PEP_fMANUALYAXISLINE, &dLine, 1);\par
    dTick = 2.0F;\par
    PEvset(m_hPE, PEP_fMANUALYAXISTICK, &dTick, 1);\par
    PEnset(m_hPE, PEP_nSHOWTICKMARKY, PESTM_TICKS_HIDE); \par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Efficiency (%)"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSSPLINE);\par
\par
    // Set up Fourth axis parameters //  \par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 3);\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    dMin = 0.0F;\par
    PEvset(m_hPE, PEP_fMANUALMINY, &dMin, 1);\par
    dMax = 75.0F;\par
    PEvset(m_hPE, PEP_fMANUALMAXY, &dMax, 1);\par
    PEnset(m_hPE, PEP_bMANUALYAXISTICKNLINE, TRUE);\par
    dLine = 25.0F;\par
    PEvset(m_hPE, PEP_fMANUALYAXISLINE, &dLine, 1);\par
    dTick = 5.0F;\par
    PEvset(m_hPE, PEP_fMANUALYAXISTICK, &dTick, 1);\par
    PEnset(m_hPE, PEP_nSHOWTICKMARKY, PESTM_TICKS_HIDE); \par
    PEszset(m_hPE, PEP_szYAXISLABEL, TEXT("Power(HP)"));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSSPLINE);\par
\par
    // Done Setting Y Axis Parameters, reset WorkingAxis //\par
    PEnset(m_hPE, PEP_nWORKINGAXIS, 0);\par
\par
    // Set various other properties //\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_BOTH);\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLE, PEMAS_GROUP_ALL_AXES);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE_INSIDE_OVERLAP);\par
\par
    PEszset(m_hPE, PEP_szXAXISLABEL, TEXT("Flow (gpm)"));\par
\par
    PEnset(m_hPE, PEP_nBORDERTYPES, PETAB_SINGLE_LINE);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE); \par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLEFONT, TEXT("Courier New"));\par
\par
    float fSize = 1.1F;\par
    PEvset(m_hPE, PEP_fFONTSIZEMSCNTL, &fSize, 1);\par
    PEvset(m_hPE, PEP_fFONTSIZEMBCNTL, &fSize, 1);\par
\par
\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("PUMP PREDICTED PERFORMANCE|Units: US Customary|Date: 06/07/2002"));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 1, TEXT("Impeller Diameter (in): Max = 11.875, Rated = 11.72, Min =11.062||"));\par
\par
    PEvsetcell(m_hPE, PEP_szaMULTIBOTTOMTITLES, 1, TEXT("Customer:  Since fixed length courier font, you can create rows by number of spaces, ||"));\par
    PEvsetcell(m_hPE, PEP_szaMULTIBOTTOMTITLES, 0, TEXT("Pump Model:  or, table annotation feature could be used to add text here. ||"));\par
\par
    PEnset(m_hPE, PEP_bYAXISONRIGHT, TRUE);\par
\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("NPSHR"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Head"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 2, TEXT("Efficiency"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 3, TEXT("Power"));\par
\par
    PEnset(m_hPE, PEP_nMULTIAXISSTYLEMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_NONE);\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
    PEnset(m_hPE, PEP_bSIMPLELINELEGEND, TRUE);\par
    PEnset(m_hPE, PEP_bSIMPLEPOINTLEGEND, TRUE);\par
\par
    DWORD dwArray[4] = \{ PERGB( 255,198,0,0), PERGB( 255, 0, 198, 198 ), PERGB( 255, 198,198,0 ), PERGB( 255, 0,198,0 ) \};\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwArray, 4);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\}\par
\par
//***************************************************************************\par
//135  Scientific Graph showing millisecond date time handling\par
void CPEView::CreateSGraphDateTimeHandling2()\par
\{\par
    //! This example shows millisecond support on date-time scales.\par
    //! Zoom chart to see how axis structure changes.\par
\par
    double d;\par
    double dt = 35300; // some random date value\par
    RECT rect;\par
    float f;\par
\par
    GetClientRect( &rect );\par
\par
    // Construct a scientific graph object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
    if (m_hPE) \par
    \{\par
        PEnset(m_hPE, PEP_nSUBSETS, 1);\par
        PEnset(m_hPE, PEP_nPOINTS, 600);\par
\par
        // Enable double precision which is usually //\par
        // required for date time handling //\par
        // This means we pass x data to XDataII //\par
        PEnset(m_hPE, PEP_bUSINGXDATAII, TRUE);\par
\par
        // Pass XDataII and YData //\par
        for (int p=0; p<=599; p++)\par
        \{\par
            d = (dt + .5F  + ((double) p * 0.0000025F));\par
            PEvsetcellEx(m_hPE, PEP_faXDATAII, 0, p, &d);\par
\par
            f = (150.0F + (sin((double) p * 0.034F) * 60.0F) + GetRandom(1, 30) + ((double) p / 2.0F)) - (35.0F + GetRandom(1, 20.0));\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, 0, p, &f);\par
        \}\par
\par
        // Enable DateTimeMode, ShowingSeconds and MilliSeconds in Prompts and Exports //\par
        PEnset(m_hPE, PEP_nDATETIMEMODE, PEDTM_VB);\par
        PEnset(m_hPE, PEP_bDATETIMESHOWSECONDS, TRUE);\par
        PEnset(m_hPE, PEP_bDATETIMEMILLISECONDS, TRUE);\par
\par
        // Allow zooming and panning //\par
        PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORIZONTAL);\par
        PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
\par
        // Cursor prompting in top left corner //\par
        PEnset(m_hPE, PEP_nCURSORMODE, PECM_DATASQUARE);\par
        PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
        PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
\par
        // v9 features \par
        PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
        PEnset(m_hPE, PEP_nTRACKINGTOOLTIPMAXWIDTH, 100);\par
\par
        float fS = 1.5F; PEvset(m_hPE, PEP_fFONTSIZECPCNTL, &fS, 1);\par
        PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
        PEnset(m_hPE, PEP_bMOUSECURSORCONTROL, TRUE);\par
        PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 1);\par
\par
        // Enable ZoomWindow //\par
        PEnset(m_hPE, PEP_bZOOMWINDOW, TRUE);\par
\par
        // Enable middle mouse dragging //\par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
        // Enable Plotting style gradient and bevel features //\par
        PEnset(m_hPE, PEP_nAREAGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
        PEnset(m_hPE, PEP_nAREABEVELSTYLE, PEBS_MEDIUM_SMOOTH);\par
        PEnset(m_hPE, PEP_nSPLINEGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
        PEnset(m_hPE, PEP_nSPLINEBEVELSTYLE, PESBS_MEDIUM_SMOOTH);\par
\par
        // Set Various Other Properties ///\par
        PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
        PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
        PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
        PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
        PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
        PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
        PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
        PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
        PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
        // subset colors //\par
        DWORD dw = PERGB( 100, 0, 200, 200);\par
        PEvset(m_hPE, PEP_dwaSUBSETCOLORS, &dw, 1);\par
\par
        PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
        PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
        PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
        fS = 1.4F; PEvset(m_hPE, PEP_fFONTSIZEGLOBALCNTL, &fS, 1);\par
        PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
\par
        PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_LINE);\par
        int lt = PELT_MEDIUMTHICKSOLID;\par
        PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, 0, &lt);\par
\par
        PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
        PEszset(m_hPE, PEP_szSUBTITLE, TEXT(" "));\par
        PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
\par
        // Set export defaults //\par
        PEnset(m_hPE, PEP_nDPIX, 600);\par
        PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
        PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
        PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
        PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
        PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
        PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
        PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
        PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
        CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\par
    \}\par
\}\par
\par
\par
//***************************************************************************\par
//136  Scientific Graph showing high low area\par
void CPEView::CreateSGraphHighLowArea()\par
\{    \par
    //! New high-low area plotting method.  This plotting type is created by\par
    //! setting PlottingMethod to PEGPM_SPECIFICPLOTMODE, and then\par
    //! SpecificPlotMode set to PESPM_HIGHLOWAREA. This is similar to how\par
    //! open-high-low-close and box-plot charts are created.  \par
    //! You can also use this plotting type per subset as shown in example 022.\par
\par
    float x;\par
    RECT rect;\par
    float f1, f2, f3;\par
\par
    GetClientRect( &rect );\par
\par
    // Construct a scientific graph object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
    if (m_hPE) \par
    \{\par
        // Enable ZoomWindow //\par
        PEnset(m_hPE, PEP_bZOOMWINDOW, TRUE);\par
\par
        // Enable middle mouse dragging //\par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
        PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
        // Enable Bar Glass Effect //\par
        PEnset(m_hPE, PEP_bBARGLASSEFFECT, TRUE);\par
\par
        // Enable Plotting style gradient and bevel features //\par
        PEnset(m_hPE, PEP_nAREAGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
        PEnset(m_hPE, PEP_nAREABEVELSTYLE, PEBS_MEDIUM_SMOOTH);\par
        PEnset(m_hPE, PEP_nSPLINEGRADIENTSTYLE,  PEPGS_RADIAL_BOTTOM_RIGHT);\par
        PEnset(m_hPE, PEP_nSPLINEBEVELSTYLE, PESBS_MEDIUM_SMOOTH);\par
\par
        PEnset(m_hPE, PEP_nSUBSETS, 3);\par
        PEnset(m_hPE, PEP_nPOINTS, 600);\par
\par
        // Pass XData and YData //\par
        for (int p=0; p<=599; p++)\par
        \{\par
            x = (p + 1.0F);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, 0, p, &x);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, 1, p, &x);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, 2, p, &x);\par
\par
            f1 = 150.0F + (sin((double) p * 0.03F) * 100.0F) + GetRandom(1, 2);\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, 0, p, &f1);\par
            f2 = 25.0F + (sin((double) p * 0.07F) * 50.0F) + GetRandom(1, 2); \par
            PEvsetcellEx(m_hPE, PEP_faYDATA, 1, p, &f2);\par
            f3 = ((f1 + f2) / 2.0F) + GetRandom(1, 20) + 25.0F; \par
            PEvsetcellEx(m_hPE, PEP_faYDATA, 2, p, &f3);\par
        \}\par
\par
        // Set Plotting Style and Comparison Subsets //\par
        PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_SPECIFICPLOTMODE);\par
        PEnset(m_hPE, PEP_nSPECIFICPLOTMODE, PESPM_HIGHLOWAREA);\par
        PEnset(m_hPE, PEP_nCOMPARISONSUBSETS, 1);\par
\par
        // Subset colors //\par
        DWORD dw = PERGB(225, 255, 255, 0);\par
        PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &dw);\par
        dw = PERGB(125, 0, 0, 190);\par
        PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 1, &dw);\par
        dw = PERGB(150, 255, 0, 0);\par
        PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 2, &dw);\par
\par
        // Set Line Styles //\par
        int nLineTypes[] = \{ PELT_MEDIUMSOLID, PELT_MEDIUMSOLID, PELT_MEDIUMSOLID\};\par
        PEvset(m_hPE, PEP_naSUBSETLINETYPES, nLineTypes, 3);\par
\par
        // Allow zooming and panning //\par
        PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORIZONTAL);\par
        PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
        PEnset(m_hPE, PEP_bSCROLLINGSCALECONTROL, TRUE);\par
\par
        // Set Various Other Properties ///\par
        PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
        PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_SHADOW);\par
        PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
        PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
        PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
        PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
        PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
        PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
        PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
        PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
        float fS = 1.2F; PEvset(m_hPE, PEP_fFONTSIZEGLOBALCNTL, &fS, 1);\par
\par
        PEnset(m_hPE, PEP_nAUTOMINMAXPADDINGX, 0);\par
        double d = 0.0F;\par
        PEnset(m_hPE, PEP_nMANUALSCALECONTROLX, PEMSC_MIN);\par
        PEvset(m_hPE, PEP_fMANUALMINX, &d, 1);\par
        PEnset(m_hPE, PEP_bALLOWBAR, FALSE);\par
\par
        PEszset(m_hPE, PEP_szMAINTITLE, TEXT("High Low Area"));\par
        PEszset(m_hPE, PEP_szSUBTITLE, TEXT("Inverted data uses secondary color, intersecting point is interpolated."));\par
\par
        // Set export defaults //\par
        PEnset(m_hPE, PEP_nDPIX, 600);\par
        PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
        PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
        PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
        PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
        PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
        PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
        PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
        // v9 features new default CursorPromptLocation = ToolTip\par
        PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);  \par
        PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
        PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
        PEnset(m_hPE, PEP_nTRACKINGTOOLTIPMAXWIDTH, 80);\par
\par
        PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
        CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
    \}\par
\}\par
\par
//***************************************************************************\par
//137  Scientific Graph showing error bars\par
void CPEView::CreateSGraphErrorBars()\par
\{    \par
    float x;\par
    RECT rect;\par
    float f1;\par
    int i, c;\par
    float e, f;\par
    DWORD ac1, ac2;\par
    double val;\par
    int symbol;\par
\par
    e = 2.5F;  // Error Bar Amount\par
    ac1 = PERGB(255, 255, 0, 0); // error bar color\par
    ac2 = PERGB(255, 0, 255, 255); \par
\par
    GetClientRect( &rect );\par
\par
    // Construct a scientific graph object //\par
    m_hPE = PEcreate(PECONTROL_SGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
    if (m_hPE) \par
    \{\par
        PEnset(m_hPE, PEP_nSUBSETS, 1);\par
        PEnset(m_hPE, PEP_nPOINTS, 9);\par
\par
        // Pass XData and YData //\par
        for (int p=0; p<9; p++)\par
        \{\par
            x = (p + 1.0F) * 10.0F;\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, 0, p, &x);\par
\par
            f1 = 25.0F + GetRandom(1, 10);\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, 0, p, &f1);\par
        \}\par
\par
        // This code shows how to learn axis range without having to perform a cpu intensive image build // \par
        // Do partial initialization, read axis extents to know how to adjust scales, and continue //\par
        PEreinitialize(m_hPE);\par
        double dMin, dMax;\par
        PEvget(m_hPE, PEP_fMANUALMINY, &dMin);\par
        PEvget(m_hPE, PEP_fMANUALMAXY, &dMax);\par
        double dRange = dMax - dMin;\par
\par
        // Manually Control Y Axis as we learned extents above //\par
        PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
        double d = dMin - e - (dRange * .10F);\par
        PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
        d = dMax + e + (dRange * .10F);\par
        PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
\par
        // Set Plotting Style and Comparison Subsets //\par
        PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
        PEnset(m_hPE, PEP_nPOINTSIZE, PEPS_MEDIUM);\par
        PEnset(m_hPE, PEP_nMINIMUMPOINTSIZE, PEMPS_LARGE);\par
\par
        PEnset(m_hPE, PEP_nGRAPHANNOTMINSYMBOLSIZE, PEMPS_LARGE);\par
\par
        // Adding dash symbols at each end of error bar //\par
        // along with line connecting dashes.           //\par
\par
        PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
\par
        c = 0;\par
        for (i=0; i<9; i++)\par
        \{\par
            symbol = PEGAT_THINSOLIDLINE;\par
            PEvgetcellEx(m_hPE, PEP_faXDATA, 0, i, &f);\par
            val = (float) f;\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, c, &val);\par
            PEvgetcellEx(m_hPE, PEP_faYDATA, 0, i, &f);\par
            val = (float) (f + e);\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, c, &val);\par
            PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, c, &symbol);\par
            PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, c, &ac1);\par
            PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, c, TEXT(""));\par
            c = c + 1;\par
\par
            symbol = PEGAT_LINECONTINUE;\par
            PEvgetcellEx(m_hPE, PEP_faXDATA, 0, i, &f);\par
            val = (float) f;\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, c, &val);\par
            PEvgetcellEx(m_hPE, PEP_faYDATA, 0, i, &f);\par
            val = (float) (f - e);\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, c, &val);\par
            PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, c, &symbol);\par
            PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, c, &ac1);\par
            PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, c, TEXT(""));\par
            c = c + 1;\par
\par
            symbol = PEGAT_DASH;\par
            PEvgetcellEx(m_hPE, PEP_faXDATA, 0, i, &f);\par
            val = (float) f;\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, c, &val);\par
            PEvgetcellEx(m_hPE, PEP_faYDATA, 0, i, &f);\par
            val = (float) (f + e);\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, c, &val);\par
            PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, c, &symbol);\par
            PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, c, &ac2);\par
            PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, c, TEXT(""));\par
            c = c + 1;\par
\par
            symbol = PEGAT_DASH;\par
            PEvgetcellEx(m_hPE, PEP_faXDATA, 0, i, &f);\par
            val = (float) f;\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, c, &val);\par
            PEvgetcellEx(m_hPE, PEP_faYDATA, 0, i, &f);\par
            val = (float) (f - e);\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, c, &val);\par
            PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, c, &symbol);\par
            PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, c, &ac2);\par
            PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, c, TEXT(""));\par
            c = c + 1;\par
        \}\par
\par
        PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
        PEnset(m_hPE, PEP_bANNOTATIONSINFRONT, FALSE);\par
\par
        // Subset colors //\par
        DWORD dw = PERGB(225, 255, 255, 0);\par
        PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, 0, &dw);\par
\par
        // Set Line Styles //\par
        int nLineTypes[] = \{PELT_MEDIUMSOLID\};\par
        PEvset(m_hPE, PEP_naSUBSETLINETYPES, nLineTypes, 1);\par
\par
        // Allow zooming and panning //\par
        PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORIZONTAL);\par
        PEnset(m_hPE, PEP_bSCROLLINGHORZZOOM, TRUE);\par
        PEnset(m_hPE, PEP_bSCROLLINGSCALECONTROL, TRUE);\par
\par
        // Set Various Other Properties ///\par
        PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
        PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_INSET);\par
        PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
        PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
        PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
        PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
        PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
        PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
        PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
        PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
        PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
        PEnset(m_hPE, PEP_nAUTOMINMAXPADDINGX, 5);\par
        PEnset(m_hPE, PEP_nAUTOMINMAXPADDINGY, 40);\par
        PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_NONE);\par
\par
        PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Error Bars via Graph Annotations"));\par
        PEszset(m_hPE, PEP_szSUBTITLE, TEXT(""));\par
\par
        // Set export defaults //\par
        PEnset(m_hPE, PEP_nDPIX, 600);\par
        PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
        PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
        PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
        PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
        PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
        PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
        PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
        PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
        CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
    \}\par
\}\par
\par
\par
\par
//***************************************************************************\par
//200  //* Simple Polar Chart //*\par
void CPEView::CreateSimplePolar()\par
\{\par
    //! Right button click to show popup menu. //\par
    //! Double Click to show customization dialog. //\par
    //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. // \par
\par
    // Simple example show the basics of a polar object. //\par
    // Polar Graph's contain both YData and XData. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_PGRAPH, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\tab             \par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\par
    PEnset(m_hPE, PEP_nPOINTS, 360);\par
\par
    int p;\par
    float f1, f2;\par
    for (p=0; p<360; p++)\par
    \{\par
        f1 = (float) p;\par
        f2 = (float) 150 * sin((double) p * 0.054F);\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, 0, p, &f1);\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 0, p, &f2);\par
    \}\par
        \par
    for (p=0; p<360; p++)\par
    \{\par
        f1 = (float) p;\par
        f2 = (float) 150 * sin(((double) p * 0.044F)) * 2;\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, 1, p, &f1);\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 1, p, &f2);\par
    \}\par
\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINTSPLUSLINE);\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, 1);\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Polar Chart"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("")); // no subtitle\par
    float ftmp = .9F;\par
    PEvset(m_hPE, PEP_fFONTSIZELEGENDCNTL, &ftmp, 1 );\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
\par
    // v7.2 new features //\par
    PEnset(m_hPE, PEP_nPOINTGRADIENTSTYLE, PEPGS_VERTICAL_ASCENT_INVERSE);\par
    PEnset(m_hPE, PEP_dwPOINTBORDERCOLOR, PERGB(100, 0, 0, 0));\par
    PEnset(m_hPE, PEP_nLINESYMBOLTHICKNESS, 3);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, 1);\par
\par
    // Set line types\par
    int nTypes[] = \{ PELT_MEDIUMSOLID, PELT_MEDIUMSOLID \};\par
    PEvset(m_hPE, PEP_naSUBSETLINETYPES, nTypes, 2);\par
\par
    // Set point types\par
    int nPTypes[] = \{ PEPT_DOTSOLID, PEPT_DOTSOLID \};\par
    PEvset(m_hPE, PEP_naSUBSETPOINTTYPES, nPTypes, 2);\par
\par
    // subset colors\par
    DWORD dwArray[2] = \{ PERGB(128, 198,0,0), PERGB(128, 0, 198, 0) \};\par
    PEvset( m_hPE, PEP_dwaSUBSETCOLORS, dwArray, 2);\par
\tab\tab     \par
    // subset labels\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("Signal #1" ));\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Signal #2" ));\par
\par
    double dnull = -99999.0F;\par
    PEvset(m_hPE, PEP_fNULLDATAVALUEX, &dnull, 1);\par
    PEvset(m_hPE, PEP_fNULLDATAVALUE, &dnull, 1);\par
\par
    // Set Various other features //\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_bSIMPLEPOINTLEGEND, TRUE);\par
    PEnset(m_hPE, PEP_bSIMPLELINELEGEND, TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
    PEnset(m_hPE, PEP_nPOINTSIZE, PEPS_SMALL);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
    float f = 1.2F;\par
    PEvset(m_hPE, PEP_fFONTSIZEGNCNTL, &f, 1);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
\par
    PEnset(m_hPE, PEP_nMINIMUMPOINTSIZE, 2);  //6 pixels\par
    PEnset(m_hPE, PEP_nMAXIMUMPOINTSIZE, 2); \par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    \par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    // v9 features new default CursorPromptLocation = ToolTip\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);  \par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, 1); //PECPL_TRACKING_TOOLTIP);\par
\par
\par
    // Set Demo's RenderEngine to Direct2D // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
    \par
\}\par
\par
//***************************************************************************\par
//201  Polar Chart showing custom polar grid\par
void CPEView::PChartPGrid()\par
\{\par
    //! Note degree axis is hours on clock //\par
\par
    // This example builds upon the basic CreateSimplePolar '200' example chart //\par
    CreateSimplePolar();\par
\par
    // Change the data for some variety //\par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\par
    PEnset(m_hPE, PEP_nPOINTS, 360);\par
    int p;\par
    float f1, f2;\par
    for (p=0; p<360; p++)\par
    \{\par
        f1 = (float) p;\par
        f2 = (float) sin((double) p * 0.019F) * sin((double) p * 0.019F);\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, 0, p, &f1);\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 0, p, &f2);\par
    \}\par
        \par
    for (p=0; p<360; p++)\par
    \{\par
        f1 = (float) p;\par
        f2 = (float) cos((double) p * 0.074F); \par
        PEvsetcellEx(m_hPE, PEP_faXDATA, 1, p, &f1);\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 1, p, &f2);\par
    \}\par
\par
    // Change zero degree to 12 o clock location //\par
    PEnset(m_hPE, PEP_nZERODEGREEOFFSET, 90);\par
\par
    // Set Manual Degree Line Frequencies //\tab\tab\par
    PEnset(m_hPE, PEP_bMANUALXAXISTICKNLINE, TRUE);\tab\tab\tab\tab    \par
\par
    double dTL = 7.5;\par
    PEvset(m_hPE, PEP_fMANUALXAXISTICK, &dTL, 1 );\par
\par
    double dAL = 30;\par
    PEvset(m_hPE, PEP_fMANUALXAXISLINE, &dAL, 1 );\par
\par
    PEnset(m_hPE, PEP_bINVERTEDXAXIS, TRUE);\par
\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 0, TEXT("12" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 1, TEXT("11" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 2, TEXT("10" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 3, TEXT("9" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 4, TEXT("8" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 5, TEXT("7" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 6, TEXT("6" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 7, TEXT("5" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 8, TEXT("4" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 9, TEXT("3" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 10, TEXT("2" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 11, TEXT("1" ));\par
\par
    // Set Various other features //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_NO_BORDER);\par
    PEnset(m_hPE, PEP_bMARKDATAPOINTS, TRUE);\par
\par
\}\par
\par
\par
//***************************************************************************\par
//202  Polar Chart showing bi-polar grid\par
void CPEView::PChartBiPolarGrid()\par
\{\par
    //! Note there are two radius axes, one horizontal and one vertical //\par
\par
    // This example builds upon the basic CreateSimplePolar '200' example chart //\par
    CreateSimplePolar();\par
\par
    // Set last subset as a subset to be plotted //\par
    // on a secondary axis //\par
    PEnset(m_hPE, PEP_nRYAXISCOMPARISONSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHODII, PEGPM_LINE);\par
\par
    // Set second subset's data to a new range //\par
    float f;\par
    for (int p=0; p<=359; p++)\par
    \{\par
        f = (float) p;\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, 1, p, &f);\par
        f = sin((double) p * 0.014F) * 16.0F;\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 1, p, &f);\par
    \}\par
\par
    // Set Various other features //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_LINE);\par
    PEnset(m_hPE, PEP_nBORDERTYPES, PETAB_NO_BORDER);\par
    PEnset(m_hPE, PEP_nPOINTSIZE, PEPS_SMALL);\par
\par
    // Add Some Padding on Right and Bottom //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
\par
    PEnset(m_hPE, PEP_dwGRAPHFORECOLOR, PERGB( 255,255,255,255));\par
\par
\}\par
\par
//***************************************************************************\par
//203  Polar Chart showing smith chart\par
void CPEView::PChartSmithChart()\par
\{\par
    // This example builds upon the basic CreateSimplePolar '200' example chart //\par
    CreateSimplePolar();\par
\par
    // Enable Smith Mode //\par
    PEnset(m_hPE, PEP_nSMITHCHART, PESC_SMITH);\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Smith Chart"));\par
\par
    // Change the data to something more appropriate //\par
    PEnset(m_hPE, PEP_nSUBSETS, 2);\par
    PEnset(m_hPE, PEP_nPOINTS, 40);\par
\par
    // Set first subset's data //\par
    int p;\par
    float f;\par
    int s = 0;\par
    for (p=0; p<=39; p++)\par
    \{\par
        f = (float) p * 0.1F;\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
        f = (float) sin((double) p * 0.54F) * 0.2F;\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
    \}\par
\par
    // Set second subset's data //\par
    s = 1;\par
    for (p=0; p<=39; p++)\par
    \{\par
        f = (float) p * 0.5F;\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
        f = (float) sin((double) p * 0.44F) * 0.5F;\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
    \}\par
\par
    // Set Various other features //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    // Add Some Padding on Right and Bottom //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
\par
\}\par
\par
\par
//***************************************************************************\par
//204  Polar Chart showing rose chart\par
void CPEView::PChartRose()\par
\{    \par
    //! Rose chart is a polar histogram/frequency distribution //\par
    \par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_PGRAPH, WS_VISIBLE, &rect, m_hWnd, 100);\par
\par
    // Set to rose mode //\tab\par
    PEnset(m_hPE, PEP_nSMITHCHART, PESC_ROSE);  // Select Rose Plot Mode\par
\par
    // Set titles //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Wind Rose Example"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT(" "));\par
\par
    // Set data //\par
    PEnset(m_hPE, PEP_nSUBSETS, 13);\par
    PEnset(m_hPE, PEP_nPOINTS, 16);\par
\par
    float tempxdata[] =\par
    \{ \par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F,\par
    90.0F, \tab 67.5F,\tab 45.0F,\tab 22.5F,\tab 0.0F,\tab 337.5F,\tab 315.0F,\tab 292.5F,\tab 270.0F,\tab 247.5F,\tab 225.0F,\tab 202.5F,\tab 180.0F,\tab 157.5F,\tab 135.0F,\tab 112.5F\tab\};\par
    PEvset(m_hPE, PEP_faXDATA, tempxdata, 208);\par
\par
    float tempydata[] = \par
    \{\tab .77F, .75F, .78F, .88F, 1.07F, .98F, .69F, .51F, .38F, .50F, .56F, .65F, .72F, .70F, .62F, .63F,\par
    1.04F, 1.72F, 2.68F, 4.76F, 4.58F, 2.59F, 1.29F, .99F, 1.19F, 1.77F, 2.34F, 2.89F, 2.05F, 1.31F, 1.16F, 1.08F,\par
    .43F, 1.05F, 3.41F, 7.40F, 5.97F, 1.48F, .30F, .39F, .73F, 1.68F, 3.53F, 2.73F, 1.24F, .55F, .25F, .27F,\par
    .20F, 1.07F, 3.71F, 4.49F, 2.08F, .23F, .10F, .11F, .29F, 1.16F, 2.32F, 1.26F, .54F, .18F, .09F, .22F,\par
    .05F, .48F, .66F, 1.31F, .26F, .01F, .02F, .04F, .14F, .33F, .75F, .46F, .18F, .05F, .07F, .03F,\par
    .04F, .10F, .07F, .02F, .02F, .02F, .01F, .01F, .01F, .05F, .12F, .09F, .04F, .02F, .03F, .04F,\par
    .01F, 0.0F, .01F, .01F,\tab 0.0F, .01F,\tab .01F, .01F,\tab .01F, .01F,\tab .01F, .03F,\tab 0.0F, 0.0F,\tab .02F, .01F,\par
    .01F, 0.0F, .01F, 0.0F,\tab .01F, 0.0F,\tab .01F, 0.0F,\tab 0.0F, .01F,\tab 0.0F, .01F,\tab .02F, .01F,\tab .01F, 0.0F,\par
    .01F, 0.0F, 0.0F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, .01F,\tab 0.0F, 0.0F,\tab 0.0F, 0.1F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\par
    0.0F, 0.0F, .01F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, .01F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\par
    0.0F, 0.0F, .01F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, .01F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\par
    0.0F, 0.0F, .01F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\par
    0.0F, 0.0F, .01F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F,\tab 0.0F,0.0F,\tab 0.0F, 0.0F,\tab 0.0F, 0.0F\tab\};\par
    PEvset(m_hPE, PEP_faYDATA, tempydata, 208);\par
\par
    TCHAR tempptlabels[] = TEXT("E\\tENE\\tNE\\tNNE\\tN\\tNNW\\tNW\\tWNW\\tW\\tWSW\\tSW\\tSSW\\tS\\tSSE\\tSE\\tESE\\t");\par
    TCHAR tempsslabels[] = TEXT("3.75\\t6.25\\t8.75\\t11.25\\t13.75\\t16.25\\t18.75\\t21.25\\t23.75\\t26.25\\t28.75\\t31.25\\t33.75\\t");\par
    PEvset(m_hPE, PEP_szaPOINTLABELS, tempptlabels, 16);\par
    PEvset(m_hPE, PEP_szaSUBSETLABELS, tempsslabels, 13);\par
\par
    // Manually control degree line frequency //\par
    PEnset(m_hPE, PEP_bMANUALXAXISTICKNLINE, TRUE);\par
    double d = 22.5F;\par
    PEvset(m_hPE, PEP_fMANUALXAXISLINE, &d, 1);\par
    PEvset(m_hPE, PEP_fMANUALXAXISTICK, &d, 1);\par
\par
    // Make it so monochrome image is just black and white //\par
    DWORD bwc[2];\par
    bwc[0] = 0L;\par
    bwc[1] = PERGB( 255,255,255,255);\par
    PEvset(m_hPE, PEP_dwaSUBSETSHADES, bwc, 2);\par
\par
    // Remove standard legend, rose has a special legend //\par
    int stl = -1;\par
    PEvset(m_hPE, PEP_naSUBSETSTOLEGEND, &stl, 1);\par
\par
    // Set inner circle label //\par
    PEszset(m_hPE, PEP_szMANUALMAXDATASTRING, TEXT("1.25|1.1%"));\par
\par
    // Get rid of radius labels //\par
    PEnset(m_hPE, PEP_bGRIDINFRONT, FALSE);\par
\par
    // Enable zooming //\par
    PEnset(m_hPE, PEP_nALLOWZOOMING, PEAZ_HORZANDVERT);\par
    PEnset(m_hPE, PEP_nZOOMSTYLE, PEZS_RO2_NOT);\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_NO_BORDER);\par
    PEnset(m_hPE, PEP_bSIMPLEPOINTLEGEND, TRUE);\par
    PEnset(m_hPE, PEP_bSIMPLELINELEGEND, TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDSTYLE, PELS_1_LINE);\par
\par
    // Add Some Padding on Right and Bottom //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLINESHADOWS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_nGRADIENTBARS, 8);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
    float f = 1.2F;\par
    PEvset(m_hPE, PEP_fFONTSIZEGNCNTL, &f, 1);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\}\par
\par
//***************************************************************************\par
//205  Polar Chart showing fancy ticks\par
void CPEView::PChartFancyTicks()\par
\{\par
    //! Polar Chart with complex gridline and gridtick structure. //\par
    //! Maximize, or better yet, Print this chart to see full detail. //\par
    //! A quick way to print is give control focus and press 'p' //\par
\par
    // This example builds upon the basic CreateSimplePolar '200' example chart //\par
    CreateSimplePolar();\par
\par
    //! This features will cause image to automatically switch to monochrome //\par
    //! when print export dialog is invoked. //\par
    PEnset(m_hPE, PEP_nPRINTSTYLECONTROL, PEPSC_DEFAULT_MONO);\par
\par
    // Change Subsets to 1 //\par
    PEnset(m_hPE, PEP_nSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPOINTS, 40);\par
\par
    // Pass some new data //\par
    int p;\par
    float f1, f2;\par
    for (p=0; p<40; p++)\par
    \{\par
        f1 = (float) p * 5;\par
        f2 = (float) 90 * sin((double) p * 0.24F);\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, 0, p, &f1);\par
        PEvsetcellEx(m_hPE, PEP_faYDATA, 0, p, &f2);\par
    \}\par
\par
    // Manually Configure Degree Axis Density //\par
    PEnset(m_hPE, PEP_bMANUALXAXISTICKNLINE, TRUE);\par
    double dML = 10.0F;  // major grid lines every 10 units\par
    PEvset(m_hPE, PEP_fMANUALXAXISLINE, &dML, 1);\par
    double dMT = 2.0F;   // minor tick marks every 2 units\par
    PEvset(m_hPE, PEP_fMANUALXAXISTICK, &dMT, 1);\par
\par
    // Manually Configure Radius Axis Range //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    double dMin = 0.0F;  \par
    PEvset(m_hPE, PEP_fMANUALMINY, &dMin, 1);\par
    double dMax = 105.0F;   \par
    PEvset(m_hPE, PEP_fMANUALMAXY, &dMax, 1);\par
\par
    // Ticks draw similar to grid lines //\par
    PEnset(m_hPE, PEP_bXAXISLONGTICKS, TRUE);\par
    PEnset(m_hPE, PEP_bYAXISLONGTICKS, TRUE);\par
\par
    // tick marks only draw outside this diameter //\par
    double dPTT = 60.0F;\par
    PEvset(m_hPE, PEP_fPOLARTICKTHRESHOLD, &dPTT, 1);\par
\par
    // major grid lines only draw outside this diameter //\par
    double dPLT = 20.0F;\par
    PEvset(m_hPE, PEP_fPOLARLINETHRESHOLD, &dPLT, 1);\par
\par
    // 30 degree major grid lines only draw outside this diameter //\par
    double dP3T = 1.0F;\par
    PEvset(m_hPE, PEP_fPOLAR30DEGTHRESHOLD, &dP3T, 1);\par
\par
    // Set  various other properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_dwGRAPHFORECOLOR, PERGB( 255,255,255,255));\par
    PEnset(m_hPE, PEP_dwTICKCOLOR, PERGB( 255,70,70,70));\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, PEGPM_POINT);\par
    PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_ONEPIXEL);\par
    PEnset(m_hPE, PEP_nVIEWINGSTYLE, PEVS_MONO);\par
\par
\}\par
\par
//***************************************************************************\par
//206  Polar Chart showing annotations\par
void CPEView::PChartWithAnnotations()\par
\{\par
    //! Horizontal Line Annotations Plot as Circles //\par
\par
    // This example builds upon the basic CreateSimplePolar '200' example chart //\par
    CreateSimplePolar();\par
\par
    double dHLT[] = \{50.0F, 100.0F, 150.0F, 200.0F, 250.0F\};\par
    PEvset(m_hPE, PEP_faHORZLINEANNOTATION, dHLT, 5);\par
\par
    DWORD dwHLC[] = \{PERGB( 255,198,0,0), PERGB( 255,0,198,198), PERGB( 255,0,198,0), PERGB( 255,198, 198, 0), PERGB( 255,255,255,255)\};\par
    PEvset(m_hPE, PEP_dwaHORZLINEANNOTATIONCOLOR, dwHLC, 5);\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
\par
    // change subset colors //\par
    DWORD dwArray[2] = \{ PERGB( 255,155,0,0), PERGB( 255,0, 155, 0) \};\par
    PEvset( m_hPE, PEP_dwaSUBSETCOLORS, dwArray, 2);\par
\par
    // Only show Degree Grid Lines //\par
    PEnset(m_hPE, PEP_nGRIDLINECONTROL, PEGLC_YAXIS);\par
\}\par
\par
\par
//***************************************************************************\par
//300  //* Simple Pie Chart //*\par
void CPEView::CreateSimplePie()\par
\{\par
    //! Size this control and use the vertical scrollbar to \par
    //! quickly see multiple variations.  Note we've added a zero data point for the first subset.  This demonstrates \par
    //! how ProEssentials automatically annotates zero slices and controls which slices are included in the "*Other" \par
    //! slice grouping.  Sizing to a small square stresses our text positioning logic that demonstrates three \par
    //! algorithms attempting to prevent text from overlapping.\par
\par
    //! Double click slice label to explode. //\par
\par
    //! Use vertical scrollbar to revolve through subsets. //\par
    //! It will demonstrate how ProEssentials utilizes chart real-estate //\par
\par
    // Example showing a simple Pie Chart construction //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_PIE, WS_VISIBLE, &rect, m_hWnd, 1001);\par
    PEnset(m_hPE, PEP_nSUBSETS, 5);\par
    PEnset(m_hPE, PEP_nPOINTS, 12);\par
    int s,p;          \par
    for (s=0; s<5; s++)\par
    \{\par
        for (p=0; p<12; p++)\par
        \{\par
            float f1 = (float) GetRandom(1, 5) + ((float) GetRandom(1, 100) / 100.0F);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f1);\par
        \}\par
    \}\par
    float f1= 0.0F;\par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 0, 3, &f1);\par
\par
    // Set Subset labels //\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("Apples" ));\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Oranges" ));\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 2, TEXT("Pears"  ));\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 3, TEXT("Plums" ));\par
    PEvsetcell( m_hPE, PEP_szaSUBSETLABELS, 4, TEXT("Peaches" ));\par
\par
    // Set Slice Labels //\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 0, TEXT("Texas"      ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 1, TEXT("Oklahoma"   ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 2, TEXT("Kansas"));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 3, TEXT("New Mexico" ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 4, TEXT("Colorado"   ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 5, TEXT("Wyoming"    ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 6, TEXT("Utah"       ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 7, TEXT("Arizona"   ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 8, TEXT("Nebraska"    ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 9, TEXT("South Dakota"       ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 10, TEXT("North Dakota"   ));\par
    PEvsetcell( m_hPE, PEP_szaPOINTLABELS, 11, TEXT("Iowa"    ));\par
\par
    // Set Slice Colors //\par
    DWORD c[13];\par
    c[0] = PERGB( 255, 198, 0, 0);\par
    c[1] = PERGB( 255, 0, 198, 0);\par
    c[2] = PERGB( 255, 198, 198, 0);\par
    c[3] = PERGB( 255, 0, 0, 198);\par
    c[4] = PERGB( 255, 198, 0, 198);\par
    c[5] = PERGB( 255, 0, 198, 198);\par
    c[6] = PERGB( 255, 192, 192, 192);\par
    c[7] = PERGB( 255, 148, 0, 0);\par
    c[8] = PERGB( 255, 0, 148, 0);\par
    c[9] = PERGB( 255, 148, 148, 0);\par
    c[10] = PERGB( 255,0, 168, 168);\par
    c[11] = PERGB( 255, 132, 132, 132);\par
    c[12] = PERGB( 255, 0, 0, 0);\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, c, 13);\par
\par
    // Set Main Title\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("Produce by State"));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("")); // no subtitle\par
\par
    // Set various other properties //\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 1);\tab\tab\tab\tab    \par
    PEnset(m_hPE, PEP_nGROUPINGPERCENT, 4);\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_3D);\tab\tab\tab\tab\tab  \par
    PEnset(m_hPE, PEP_bDISABLE3DSHADOW, FALSE);\par
    PEnset(m_hPE, PEP_nAUTOEXPLODE, PEAE_ALLSUBSETS);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bMAINTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bSUBTITLEBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, 1);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT2D);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_2DX );\par
\}\par
\par
//***************************************************************************\par
//301  //* Pie Chart showing exploded slices //*\par
void CPEView::PCExploded()\par
\{\par
    //! Double click slice label to explode. //\par
\par
    //! Use vertical scrollbar to revolve through subset. //\par
\par
    // This example builds upon the basic CreateSimplePie '300' example chart //\par
    CreateSimplePie();\par
\par
    PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
    PEnset(m_hPE, PEP_nPIEGRADIENTSTYLE, PEPGS_BEVELED_HIGHLIGHT);\par
\par
    float f1 = 1;\par
    // Explode 4nd and 6th slices //\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 3, &f1);\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 5, &f1);\par
\par
    // Set various other properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_SHADOW);\par
\par
    // Add Some Padding on Right and Bottom //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
\par
\}\par
\par
//***************************************************************************\par
//302  //* Pie Chart showing optional legend //*\par
void CPEView::PCNewLegend()\par
\{\par
    //! Double click slice label to explode. //\par
\par
    // This example builds upon the basic CreateSimplePie '300' example chart //\par
    CreateSimplePie();\par
\par
    // Change Data //\par
    PEnset(m_hPE, PEP_nSUBSETS, 1);\par
    PEnset(m_hPE, PEP_nPOINTS, 5);\par
    for (int p=0; p<5; p++)\par
    \{\par
        float f1 = (float) GetRandom(1, 5) + ((float) GetRandom(1, 100) / 100.0F);\par
        PEvsetcellEx(m_hPE, PEP_faXDATA, 0, p, &f1);\par
    \}\par
\par
    PEnset(m_hPE, PEP_bSHOWPIELEGEND, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWPIELABELS, PESPL_PERCENT);\par
\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_LEFT);\par
    PEnset(m_hPE, PEP_bDISABLE3DSHADOW, TRUE);\par
\par
    // Set various other properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_dwDESKCOLOR, 1);\par
    PEszset(m_hPE, PEP_szDESKBMPFILENAME, TEXT("cloud.jpg"));\par
    PEnset(m_hPE, PEP_nDESKBMPSTYLE, PEBS_TILED_BITBLT);\par
    PEnset(m_hPE, PEP_dwGRAPHFORECOLOR, PERGB( 255,0,0,0));\par
    PEnset(m_hPE, PEP_dwTEXTCOLOR, PERGB(255,0,0,0));\par
\par
    // Set Slice Colors //\par
    DWORD c[5];\par
    c[0] = PERGB( 60,198, 0, 0);\par
    c[1] = PERGB( 60,0, 198, 0);\par
    c[2] = PERGB( 60,198, 198, 0);\par
    c[3] = PERGB( 60,0, 0, 198);\par
    c[4] = PERGB( 60,198, 0, 198);\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, c, 5);\par
    PEnset(m_hPE, PEP_bDATASHADOWS, PEDS_NONE);\par
\par
    // Add Some Padding on Right and Bottom //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
\par
\}\par
\par
//***************************************************************************\par
//303  //* Pie Chart showing hatching //*\par
void CPEView::PCWithHatching()\par
\{\par
    //! Double click slice label to explode. //\par
\par
    //! Use vertical scrollbar to revolve through subset. //\par
\par
    // This example builds upon the basic CreateSimplePie '300' example chart //\par
    CreateSimplePie();\par
\par
    // Change Data //\par
    PEnset(m_hPE, PEP_nSUBSETS, 5);\par
    PEnset(m_hPE, PEP_nPOINTS, 6);\par
    for (int s=0; s<5; s++)\par
    \{\par
        for (int p=0; p<6; p++)\par
        \{\par
            float f1 = (float) GetRandom(1, 5) + ((float) GetRandom(1, 100) / 100.0F);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f1);\par
        \}\par
    \}\par
\par
    int nHatchType[6];\par
    nHatchType[0] = PEHS_BDIAGONAL;\par
    nHatchType[1] = PEHS_CROSS;\par
    nHatchType[2] = PEHS_VERTICAL;\par
    nHatchType[3] = PEHS_FDIAGONAL;\par
    nHatchType[4] = PEHS_HORIZONTAL;\par
    nHatchType[5] = PEHS_DIAGCROSS;\par
\par
    PEvset(m_hPE, PEP_naSUBSETHATCH, nHatchType, 6);\par
    PEnset(m_hPE, PEP_dwHATCHBACKCOLOR, PERGB( 255,230,230,230));\par
    PEnset(m_hPE, PEP_nSLICEHATCHING, PESH_BOTH);\par
\par
    float f1 = 1;\par
    // Explode 2nd and 4th slices //\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 0, 1, &f1);\par
\par
    PEnset(m_hPE, PEP_bDISABLE3DSHADOW, TRUE);\par
    PEnset(m_hPE, PEP_bDATASHADOWS, PEDS_3D);\par
\par
    // Set various other properties //\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_SHADOW);\par
    PEnset(m_hPE, PEP_nPIEGRADIENTSTYLEMENU, PEMC_HIDE);\par
\par
    // Add Some Padding on Right and Bottom //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
\}\par
\par
\par
//***************************************************************************\par
//400  //* 3D Simple Wire Frame //*\par
void CPEView::Create3DSimpleWireFrame()\par
\{\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
    //! Right click to show popup menu. //\par
\par
    // Example showing the basics of creating a 3d chart //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    long Row, Col, o,nQ;\par
    long nStartRow, nEndRow, nStartCol, nEndCol, nTargetRows, nTargetCols;\par
\par
    int nRndRow = GetRandom(1, 300);\par
    int nRndCol = GetRandom(1, 300);\par
\par
    nStartRow = 110;\par
    nEndRow = 158; \par
    nTargetRows = nEndRow - nStartRow + 1;\par
\par
    nStartCol = 210;\par
    nEndCol = 258; \par
    nTargetCols = nEndCol - nStartCol + 1;\par
\par
    nQ = nTargetRows * nTargetCols;\par
\par
    long* pElevData = NULL;\par
    float* pMyXData = NULL;    \par
    float* pMyYData = NULL;\par
    float* pMyZData = NULL;\par
\par
\tab ::SetCurrentDirectory(szDirectory);\par
\par
    TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
\par
    if (pFile)\par
    \{\par
        pElevData = new long[2250000];\par
        size_t cnt = fread(&pElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
\par
    pMyXData = new float[nQ];\par
    pMyYData = new float[nQ];\par
    pMyZData = new float[nQ];\par
\par
    long rowcounter, colcounter;\par
    BOOL foundtargetindex = FALSE;\par
    rowcounter = 0;\par
    colcounter = 0;\par
\par
    for (Row=0; Row<1500; Row++)\par
    \{\par
        for (Col=0; Col<1500; Col++)\par
        \{\par
            foundtargetindex = FALSE;\par
\par
            if (Row >= nStartRow && Row <= nEndRow) \par
            \{\par
                if (Col >= nStartCol && Col <= nEndCol)\par
                \{\par
                    foundtargetindex = TRUE;\par
                    o = (rowcounter * nTargetRows) + colcounter;\par
                    pMyXData[o] = (float) Col + 1;\par
                    pMyZData[o] = (float) Row + 1;\par
                    pMyYData[o] = pElevData[(Row * 1500) + Col] * 0.1F;\par
                \}\par
            \}\par
            if (foundtargetindex) \par
                colcounter++;\par
        \}\par
        if (foundtargetindex)\par
\tab         rowcounter++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, nTargetRows);\par
    PEnset(m_hPE, PEP_nPOINTS, nTargetCols);\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, pMyXData, nQ);\par
    PEvset(m_hPE, PEP_faYDATA, pMyYData, nQ);\par
    PEvset(m_hPE, PEP_faZDATA, pMyZData, nQ);\par
\par
    if (pElevData)\par
        delete pElevData;\par
    if (pMyXData)\par
        delete pMyXData;\par
    if (pMyYData)\par
        delete pMyYData;\par
    if (pMyZData)\par
        delete pMyZData;\par
\par
    // Enable smoother rotation and zooming //\par
    PEnset(m_hPE, PEP_nSCROLLSMOOTHNESS, 3);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 3);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
\par
    // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
    // in determining different default values for such properties //\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 16);\tab\tab\tab\tab    \par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 196);\par
\par
    // Set a light location //\par
    Point3D p3d;\par
    p3d.X = -2.2F; p3d.Y = -7.30F; p3d.Z = 8.3F;\par
    PEvset(m_hPE, PEP_struct3DXLIGHT0, &p3d, 1);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    float fMyZoom = -1.2F;    PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
    PEnset(m_hPE, PEP_n3DXFITCONTROLSHAPE, FALSE);\par
    float fAspectX = 2.0F;    PEvset(m_hPE, PEP_fGRIDASPECTX, &fAspectX, 1);\par
    float fAspectZ = 2.0F;    PEvset(m_hPE, PEP_fGRIDASPECTZ, &fAspectZ, 1);\par
    float fShiftY = .7F;      PEvset(m_hPE, PEP_f3DXVIEWPORTY, &fShiftY, 1);\par
\par
    PEnset(m_hPE, PEP_nROTATIONSPEED, 50);\par
    PEnset(m_hPE, PEP_nROTATIONINCREMENT, PERI_INCBY1);\par
\par
    DWORD dw = PERGB( 255, 225, 225, 225);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, WIRE_FRAME_COLOR, &dw); \par
\par
    dw = PERGB( 255, 65, 65, 200);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, SOLID_SURFACE_COLOR, &dw);  \par
\par
    // v9 feature\par
    PEnset(m_hPE, PEP_nCONTOURCOLORSET,  9);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_LEFT);\par
    PEnset(m_hPE, PEP_bCONTOURSTYLELEGEND, TRUE);\par
    PEnset(m_hPE, PEP_nCONTOURLEGENDPRECISION, 1);\par
    PEnset(m_hPE, PEP_bSHOWWIREFRAME, TRUE);\par
\par
    // Set the plotting method //\par
    // There are different plotting method values for each case of PolyMode  //\par
    PEnset( m_hPE, PEP_nPLOTTINGMETHOD, 0 );\par
    PEnset(m_hPE, PEP_bALLOWSURFACECONTOUR, TRUE);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D); \par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_MEDIUM_INSET);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTTOP, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 50);\par
\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE); \par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    // export default settings  //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\tab PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
\tab PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
\tab PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    PEnset(m_hPE, PEP_bANTIALIASTEXT, TRUE);\par
    PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, TRUE);\par
\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_ZVALUE);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 2);\par
    PEnset(m_hPE, PEP_dw3DHIGHLIGHTCOLOR, PERGB(255,255,0,0));\par
\par
    PEnset(m_hPE, PEP_nSHOWCONTOUR,PESC_BOTTOMCOLORS);\par
    PEnset(m_hPE, PEP_nDATASHADOWMENU, PEMC_SHOW );\par
\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL,  TRUE);\par
\tab PEnset(m_hPE, PEP_nSHOWANNOTATIONTEXTMENU, PEMC_SHOW);\par
\tab PEnset(m_hPE, PEP_nANNOTATIONTEXTFIXEDSIZEMENU, PEMC_SHOW);\par
\par
    float f;  double d;  \tab int t;\par
\tab int aCnt = 0;\par
    TCHAR szAnnotText[128];\par
    for (int annot = 0; annot < 10; annot++)\par
    \{\par
\tab      nRndRow = (int)(GetRandom(1, nTargetRows)) - 1;\par
         nRndCol = (int)(GetRandom(1, nTargetCols)) - 1;\par
\par
\tab\tab  d = nStartCol + nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
\tab\tab  d = nStartRow + nRndRow + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
         PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
\tab\tab  t = PEGAT_LARGEDOTSOLID; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
\tab\tab  t = PERGB(255,0,255,0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
         PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
         m_pAnnotationStartIndices[annot] = aCnt;\par
\tab\tab  aCnt++;\par
\par
         d = nStartCol + nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
         d = nStartRow + nRndRow + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
         PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
         t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
         t = PERGB(255, 0, 255, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
         _stprintf(szAnnotText, TEXT("|lAnnotation %d "), annot);\par
         PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
         m_pAnnotationStartIndices[annot] = aCnt;\par
         aCnt++;\par
\tab\}\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bLEFTJUSTIFICATIONOUTSIDE, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONSYMBOLOBSTACLES, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 110);\par
    PEnset(m_hPE, PEP_bALLOWGRAPHANNOTHOTSPOTS, FALSE);\par
    \par
    // create a custom menu to toggle PEP_nVIEWINGMODE \par
    PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 0, TEXT("Zoom Rotate on Center "));\par
    t = PECMS_CHECKED; PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 0, 0, &t);\par
    t = PECML_ABOVE_SEPARATOR; PEvsetcell(m_hPE, PEP_naCUSTOMMENULOCATION, 0, &t);\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 1, TEXT("Key 0-9 rotates/zooms at annotation| |Popup Menu size/hide annotation text."));\par
\par
    Point3D p3;  // Set a default ViewingAt location to first graph annotation, index 0\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &d);  p3.X = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &d);  p3.Y = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, 0, &d);  p3.Z = (float)d;\par
    PEvset(m_hPE, PEP_structVIEWINGAT, &p3, 1);\par
\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXANNOTVERTICEREBUILD, TRUE);  // v9.5\par
\par
\par
    // Set Demo's RenderEngine // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    if (PEnget(m_hPE, PEP_bISDXAVAILABLE))\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
    else\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_GDILEGACY );\par
\par
\}\par
\par
//***************************************************************************\par
//401  Surface Flattened Fly By\par
void CPEView::CreateLargeSurfaceFlattenedFlyBy()\par
\{\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
    //! Right click to show popup menu. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Enable smoother rotation and zooming //\par
    PEnset(m_hPE, PEP_nSCROLLSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
    PEnset(m_hPE, PEP_nROTATIONSPEED, 50);\par
    PEnset(m_hPE, PEP_nROTATIONINCREMENT, PERI_INCBY1);\par
    PEnset(m_hPE, PEP_nROTATIONDETAIL, PERD_FULLDETAIL);\par
\par
    // Hide Axes //\par
    PEnset(m_hPE, PEP_nSHOWXAXIS, PESA_EMPTY);\par
    PEnset(m_hPE, PEP_nSHOWYAXIS, PESA_EMPTY);\par
    PEnset(m_hPE, PEP_nSHOWZAXIS, PESA_EMPTY);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 23);\tab\tab\tab\tab    \par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 44);\par
\par
    // Set a light rotation location //\par
    Point3D p3d;\par
    p3d.X = .20F;    p3d.Y = -1.75F;     p3d.Z = 2.35F;\par
    PEvset(m_hPE, PEP_struct3DXLIGHT0, &p3d, 1);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    float fMyZoom = -.37F; PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
\par
    // Set a chart translation //\par
    float fTweakX = -7.8F; PEvset(m_hPE, PEP_f3DXVIEWPORTX, &fTweakX, 1);\par
    float fTweakY = .8F;   PEvset(m_hPE, PEP_f3DXVIEWPORTY, &fTweakY, 1);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
    // in determining different default values for such properties //\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
\par
    // Reduce the terrain height with respect to surface area \par
    float fX = 10.0F;  PEvset(m_hPE, PEP_fGRIDASPECTX, &fX, 1);\par
    float fZ = 10.0F;  PEvset(m_hPE, PEP_fGRIDASPECTZ, &fZ, 1);\par
    PEnset(m_hPE, PEP_n3DXFITCONTROLSHAPE, FALSE);\par
\par
    PEnset(m_hPE, PEP_nROTATIONSPEED, 50);\par
    PEnset(m_hPE, PEP_nROTATIONINCREMENT, PERI_INCBY1);\par
\par
    // Pass Data //\par
    long Row, Col, o, e, s, nQ;\par
    long nStartRow, nEndRow, nStartCol, nEndCol, nTargetRows, nTargetCols;\par
    e = 0.0F;\par
\par
    nStartRow = 0;\par
    nEndRow = 1000;\par
    nStartCol = 0;\par
    nEndCol = 1000;\par
    nTargetRows = nEndRow - nStartRow + 1;\par
    nTargetCols = nEndCol - nStartCol + 1;\par
    nQ = nTargetRows * nTargetCols;\par
\par
    long* pElevData = NULL;\par
    float* pMyXData = NULL;    \par
    float* pMyYData = NULL;\par
    float* pMyZData = NULL;\par
\par
    ::SetCurrentDirectory(szDirectory);\par
\par
    TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
\par
    if (pFile)\par
    \{\par
        pElevData = new long[2250000];\par
        size_t cnt = fread(&pElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
\par
    pMyXData = new float[nTargetCols]; // v9.5\par
    pMyYData = new float[nQ];\par
    pMyZData = new float[nTargetRows]; // v9.5\par
\par
    long rowcounter, colcounter;\par
    BOOL foundtargetindex = FALSE;\par
    rowcounter = 0;\par
    colcounter = 0;\par
\par
    for (Row=0; Row<1500; Row++)\par
    \{\par
        for (Col=0; Col<1500; Col++)\par
        \{\par
            foundtargetindex = FALSE;\par
\par
            if (Row >= nStartRow && Row <= nEndRow) \par
            \{\par
                if (Col >= nStartCol && Col <= nEndCol)\par
                \{\par
                    foundtargetindex = true;\par
                    if (Row == nStartRow)  // v9.5\par
                        pMyXData[Col - nStartCol] = Col + 1;\par
                    if (Col == nStartCol)  // v9.5 \par
                        pMyZData[Row - nStartRow] = Row + 1;\par
                    // See our help, topic SubsetByPoint to understand the below formula  // v9.5\par
                    o = (rowcounter * nTargetRows) + colcounter;\par
                    pMyYData[o] = (pElevData[(Row * 1500) + Col] * 0.1);\par
                \}\par
            \}\par
            if (foundtargetindex) \par
                colcounter++;\par
        \}\par
        if (foundtargetindex)\par
\tab         rowcounter++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, nTargetRows);\par
    PEnset(m_hPE, PEP_nPOINTS, nTargetCols);\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, pMyXData, nTargetCols);\par
    PEvset(m_hPE, PEP_faYDATA, pMyYData, nQ);\par
    PEvset(m_hPE, PEP_faZDATA, pMyZData, nTargetRows);\par
    PEnset(m_hPE, PEP_nDUPLICATEXDATA, PEDD_POINTINCREMENT);  // v9.5\par
    PEnset(m_hPE, PEP_nDUPLICATEZDATA, PEDD_SUBSETINCREMENT);  // v9.5\par
\par
    if (pElevData)\par
        delete pElevData;\par
    if (pMyXData)\par
        delete pMyXData;\par
    if (pMyYData)\par
        delete pMyYData;\par
    if (pMyZData)\par
        delete pMyZData;\par
\par
    // Set Contour Color regions //\par
    DWORD dwCC[100];\par
    for (s=0; s<32; s++)\par
        dwCC[s] = PERGB( 255,0, 31 + (s * 7), 95 + (s * 5));\par
    for (s=0; s<32; s++)\par
        dwCC[32 + s] = PERGB( 255,0, 95 + (s * 5), 0);\par
    for (s=0; s<35; s++)\par
        dwCC[64 + s] = PERGB( 255,128 + (s * 3), 128 + (s * 3), 128 + (s * 3));\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwCC, 99);\par
\par
    for (s=0; s<100; s++)\par
        dwCC[s] = PERGB( 255,50 + (s * 2), 50 + (s * 2), 50 + (s * 2));\par
    PEvset(m_hPE, PEP_dwaSUBSETSHADES, dwCC, 100);\par
\par
    DWORD dw = PERGB(255,80,80,80); PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, WIRE_FRAME_COLOR, &dw);  \par
    dw = PERGB(255,148,148,148); PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, SOLID_SURFACE_COLOR, &dw);  \par
\par
    PEnset(m_hPE, PEP_bCONTOURSTYLELEGEND, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWLEGEND, TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATIONMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nCONTOURLEGENDPRECISION, 1); \par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_LEFT);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
 \par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_LINE);\par
    PEnset(m_hPE, PEP_nBORDERTYPES, PETAB_NO_BORDER);\par
\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE); \par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_nSHOWBOUNDINGBOX, PESBB_NEVER);\par
    PEnset(m_hPE, PEP_nSHADINGSTYLE, PESS_WHITESHADING);\par
    PEnset(m_hPE, PEP_nROTATIONDETAIL, PERD_FULLDETAIL);\par
\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 0);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 0);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 0);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    //! There are different plotting method values for each case of PolyMode  //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 4); // Contour Surface\par
    PEnset(m_hPE, PEP_bALLOWWIREFRAME, FALSE);\par
    PEnset(m_hPE, PEP_nCONTOURMENU, PEMC_HIDE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
    PEnset(m_hPE, PEP_bALLOWTEXTEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, FALSE); \par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, 2);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 2);\par
    PEnset(m_hPE, PEP_dw3DHIGHLIGHTCOLOR, PERGB(255,255,0,0));\par
\par
    PEnset(m_hPE, PEP_nDATASHADOWMENU, PEMC_SHOW );\par
\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWANNOTATIONTEXTMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nANNOTATIONTEXTFIXEDSIZEMENU, PEMC_SHOW);\par
\par
    float f;  double d;  \tab int t;\par
    int aCnt = 0;\par
    TCHAR szAnnotText[128];\par
    for (int annot = 0; annot < 20; annot++)\par
    \{\par
        int nRndRow = (int)(GetRandom(1, nTargetRows)) - 1;\par
        int nRndCol = (int)(GetRandom(1, nTargetCols)) - 1;\par
\par
        d = nStartCol + nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = nStartRow + nRndRow + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_LARGEDOTSOLID; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 200, 0, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
        m_pAnnotationStartIndices[annot] = aCnt;\par
        aCnt++;\par
\par
        d = nStartCol + nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = nStartRow + nRndRow + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("|lAnnotation %d "), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        m_pAnnotationStartIndices[annot] = aCnt;\par
        aCnt++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bLEFTJUSTIFICATIONOUTSIDE, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONSYMBOLOBSTACLES, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 110);\par
    PEnset(m_hPE, PEP_bALLOWGRAPHANNOTHOTSPOTS, FALSE);\par
\par
    // create a custom menu to toggle PEP_nVIEWINGMODE \par
    PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 0, TEXT("Zoom Rotate on Center "));\par
    t = PECMS_CHECKED; PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 0, 0, &t);\par
    t = PECML_ABOVE_SEPARATOR; PEvsetcell(m_hPE, PEP_naCUSTOMMENULOCATION, 0, &t);\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 1, TEXT("Key 0-9 rotates/zooms at annotation| |Popup Menu size/hide annotation text."));\par
\par
    Point3D p3;  // Set a default ViewingAt location to first graph annotation, index 0\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &d);  p3.X = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &d);  p3.Y = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, 0, &d);  p3.Z = (float)d;\par
    PEvset(m_hPE, PEP_structVIEWINGAT, &p3, 1);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D);\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXANNOTVERTICEREBUILD, TRUE);\par
 \par
    // Set Demo's RenderEngine // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
    PEnset(m_hPE, PEP_bAUTOROTATION, TRUE);\par
\par
\}\par
\par
\par
//***************************************************************************\par
//402  3D Surface with contoured surface\par
void CPEView::Create3DContouredSurface()\par
\{\par
    //! Enables DataHotSpots, clicking surface updates Titlebar of window.  See OnCommand.\par
\par
    //! Double Click to start and stop Auto Rotation. //\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
    //! Right click to show popup menu. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Enable smoother rotation and zooming //\par
    PEnset(m_hPE, PEP_nSCROLLSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    // Do not auto fit to shape of window //\par
    PEnset(m_hPE, PEP_n3DXFITCONTROLSHAPE, FALSE);\par
\par
    // When data is not square use GridAspectX or Z \par
    float fMyDataShape = 1.5F;   PEvset(m_hPE, PEP_fGRIDASPECTX, &fMyDataShape, 1);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    float fMyZoom = -.75F;\par
    PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 26);\tab\tab\tab\tab    \par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 232);\par
\par
    // Set a light rotation location //\par
    Point3D p3d;\par
    p3d.X = 2.50F; p3d.Y = -1.5F; p3d.Z = .25F;\par
    PEvset(m_hPE, PEP_struct3DXLIGHT0, &p3d, 1);\par
\par
    // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
    // in determining different default values for such properties //\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
    PEnset(m_hPE, PEP_nROTATIONSPEED, 50);\par
    PEnset(m_hPE, PEP_nROTATIONINCREMENT, PERI_INCBY1);\par
    PEnset(m_hPE, PEP_nROTATIONDETAIL, PERD_FULLDETAIL);\par
\par
    // Set PlottingMethod //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 4);  // Surface with contours\par
\par
    // LOG //\par
    PEnset(m_hPE, PEP_nXAXISSCALECONTROL, PEAC_LOG);\par
    PEszset(m_hPE, PEP_szXAXISLABEL, TEXT("Log X"));\par
\par
    // Pass Data //\par
    long Row, Col, o, nQ;\par
    long nStartRow, nEndRow, nStartCol, nEndCol, nTargetRows, nTargetCols;\par
\par
    nStartRow = 100;\par
    nEndRow = 250;  \par
    nTargetRows = nEndRow - nStartRow + 1;\par
\par
    nStartCol = 200;\par
    nEndCol = 250;  \par
    nTargetCols = nEndCol - nStartCol + 1;\par
\par
    PEnset(m_hPE, PEP_nFILTER3D, 151);  // only for non dx\par
\par
    nQ = nTargetRows * nTargetCols;\par
\par
    long* pElevData = NULL;\par
    float* pMyXData = NULL;    \par
    float* pMyYData = NULL;\par
    float* pMyZData = NULL;\par
\par
    ::SetCurrentDirectory(szDirectory);\par
\par
\tab TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
\par
    if (pFile)\par
    \{\par
        pElevData = new long[2250000];\par
        size_t cnt = fread(&pElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
\par
    pMyXData = new float[nQ];\par
    pMyYData = new float[nQ];\par
    pMyZData = new float[nQ];\par
\par
    long rowcounter, colcounter;\par
    BOOL foundtargetindex = FALSE;\par
    rowcounter = 0;\par
    colcounter = 0;\par
\par
\tab float f;\par
    for (Row=0; Row<1500; Row++)\par
    \{\par
        for (Col=0; Col<1500; Col++)\par
        \{\par
            foundtargetindex = FALSE;\par
\par
            if (Row >= nStartRow && Row <= nEndRow) \par
            \{\par
                if (Col >= nStartCol && Col <= nEndCol)\par
                \{\par
                    foundtargetindex = TRUE;\par
                    o = (rowcounter * nTargetRows) + colcounter;\par
                    pMyXData[o] = (float)(Col + 1) * (Col - nStartCol + 1);\par
                    pMyZData[o] = (float) Row + 1;\par
\par
\tab\tab\tab\tab\tab f = pElevData[(Row * 1500) + Col];\par
\par
\tab\tab\tab\tab\tab if ( f < 14100.0F)  // create a plateau\par
\tab\tab\tab\tab\tab\tab f = 10000.0F;\par
\par
\tab\tab\tab\tab\tab if ( f > 16000.0f) // create a plateau \par
\tab\tab\tab\tab\tab\tab f = 17000.0F;\par
\par
                    pMyYData[o] = f * .01F;\par
                \}\par
            \}\par
            if (foundtargetindex) \par
                colcounter++;\par
        \}\par
        if (foundtargetindex)\par
            rowcounter++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, nTargetRows);\par
    PEnset(m_hPE, PEP_nPOINTS, nTargetCols);\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, pMyXData, nQ);\par
    PEvset(m_hPE, PEP_faYDATA, pMyYData, nQ);\par
    PEvset(m_hPE, PEP_faZDATA, pMyZData, nQ);\par
\par
    if (pElevData)\par
        delete pElevData;\par
    if (pMyXData)\par
        delete pMyXData;\par
    if (pMyYData)\par
        delete pMyYData;\par
    if (pMyZData)\par
        delete pMyZData;\par
\par
    PEnset(m_hPE, PEP_nCONTOURLEGENDPRECISION, 1); \par
\par
    // Set null data y value to zero, actually this is the default \par
    double d2 = 0.0F; PEvset(m_hPE, PEP_fNULLDATAVALUE, &d2, 1);\par
\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_LEFT);\par
    PEnset(m_hPE, PEP_bSHOWLEGEND,TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATIONMENU, PEMC_SHOW);\par
\par
    // v9 features\par
    float fBW[] = \{ 0.1F, 0.05F, 0.1F, 0.633F, 0.06F, 0.06F\};\par
    PEvset(m_hPE, PEP_faCONTOURCOLORPROPORTIONS, fBW, 6);\par
    PEnset(m_hPE, PEP_nCONTOURCOLORBLENDS, 0);  // this must be set before COLORSET, COLORSET ALWAYS LAST \par
    PEnset(m_hPE, PEP_nCONTOURCOLORSET,  9);\par
    PEnset(m_hPE, PEP_nSHOWCONTOUR, PESC_BOTTOMLINES);\par
    PEnset(m_hPE, PEP_bSHOWWIREFRAME, TRUE);\par
    PEnset(m_hPE, PEP_dwBARBORDERCOLOR, PERGB(85,0,0,0));\par
\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
    PEnset(m_hPE, PEP_bSURFACENULLDATAGAPS, TRUE);\par
    PEnset(m_hPE, PEP_bCONTOURSTYLELEGEND, TRUE);\par
\par
    // Set various other properties //\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D); \par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_LIGHT_NO_BORDER);\par
\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    float gfs = 1.3F; PEvset(m_hPE, PEP_fFONTSIZEGLOBALCNTL, &gfs, 1);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE); \par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_nROTATIONDETAIL, PERD_FULLDETAIL);\par
        \par
    DWORD dw = PERGB( 255,198,0,0);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, WIRE_FRAME_COLOR, &dw);  \par
    dw = PERGB( 255,0,128,0);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, SOLID_SURFACE_COLOR, &dw);  \par
\par
    // Add Some Padding around image //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    PEnset(m_hPE, PEP_bANTIALIASTEXT, TRUE);\par
    PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, TRUE);\par
\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 2);\par
\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_YVALUE);\par
    PEnset(m_hPE, PEP_bTRACKINGCUSTOMDATATEXT, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TEXT);\par
\par
    PEnset(m_hPE, PEP_dw3DHIGHLIGHTCOLOR, PERGB(255,255,0,0));\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE); \par
\par
    PEnset(m_hPE, PEP_nDATASHADOWMENU, PEMC_SHOW );\par
\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWANNOTATIONTEXTMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nANNOTATIONTEXTFIXEDSIZEMENU, PEMC_SHOW);\par
\par
    double d;  \tab int t;\par
    int aCnt = 0;\par
    TCHAR szAnnotText[128];\par
    for (int annot = 0; annot < 10; annot++)\par
    \{\par
        int nRndRow = (int)(GetRandom(1, nTargetRows)) - 1;\par
        int nRndCol = (int)(GetRandom(1, nTargetCols)) - 1;\par
        float f; PEvgetcellEx(m_hPE, PEP_faXDATA, nRndRow, nRndCol, &f);\par
        d = (double) f;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = nStartRow + nRndRow + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_LARGEDOTSOLID; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 0, 255, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
        m_pAnnotationStartIndices[annot] = aCnt;\par
        aCnt++;\par
\par
        PEvgetcellEx(m_hPE, PEP_faXDATA, nRndRow, nRndCol, &f);\par
        d = (double) f;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = nStartRow + nRndRow + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 0, 255, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("|lAnnotation %d "), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        m_pAnnotationStartIndices[annot] = aCnt;\par
        aCnt++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bLEFTJUSTIFICATIONOUTSIDE, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONSYMBOLOBSTACLES, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 80);\par
    PEnset(m_hPE, PEP_bALLOWGRAPHANNOTHOTSPOTS, FALSE);\par
\par
    // create a custom menu to toggle PEP_nVIEWINGMODE \par
    PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 0, TEXT("Zoom Rotate on Center "));\par
    t = PECMS_CHECKED; PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 0, 0, &t);\par
    t = PECML_ABOVE_SEPARATOR; PEvsetcell(m_hPE, PEP_naCUSTOMMENULOCATION, 0, &t);\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 1, TEXT("Key 0-9 rotates/zooms at annotation| |Popup Menu size/hide annotation text."));\par
\par
    Point3D p3;  // Set a default ViewingAt location to first graph annotation, index 0\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &d);  p3.X = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &d);  p3.Y = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, 0, &d);  p3.Z = (float)d;\par
    PEvset(m_hPE, PEP_structVIEWINGAT, &p3, 1);\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXANNOTVERTICEREBUILD, TRUE);  // v9.5\par
\par
\par
    // Set Demo's RenderEngine // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    if (PEnget(m_hPE, PEP_bISDXAVAILABLE))\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
    else\par
        pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_GDILEGACY );\par
\par
\}\par
\par
//***************************************************************************\par
//403  3D Surface with custom polygon colors\par
void CPEView::Create3DCustomPolygonColors()\par
\{\par
    //! MouseMove event calls PEgethotspot and updates Titlebar of window.  See OnCommand.\par
\par
    //! Double Click to start and stop Auto Rotation. //\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
    //! Right click to show popup menu. //\par
\par
    // This example builds upon the basic Create3DSimpleWireframe '400' example chart //\par
    Create3DSimple();\par
\par
    // Determine data range, as data is random  // v9.5\par
    PEreinitialize(m_hPE);\par
    float starty;\par
    double centerx, centerz;\par
    double dMinX, dMaxX, dMinZ, dMaxZ;\par
    PEvget(m_hPE, PEP_fMANUALMINX, &dMinX); \par
    PEvget(m_hPE, PEP_fMANUALMAXX, &dMaxX); \par
    centerx = (dMinX + dMaxX) / 2.0F;\par
    PEvget(m_hPE, PEP_fMANUALMINZ, &dMinZ);\par
    PEvget(m_hPE, PEP_fMANUALMAXZ, &dMaxZ);\par
    centerz = (dMinZ + dMaxZ) / 2.0F;\par
    PEvgetcellEx(m_hPE, PEP_faYDATA, 99, 99, &starty);\par
\par
    // Set PlottingMethod //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 2); // surface with shading\par
    PEnset(m_hPE, PEP_bSHOWWIREFRAME, TRUE); \par
\par
    // Set Polygon Colors //\par
    DWORD c;\par
    int nx, ny;\par
\par
    // Color all the data \par
    c = PERGB(102, 178, 178, 0);\par
    for (int s=0; s<=199; s++) \par
    \{\par
        for (int p=0; p<=199; p++) \par
            PEvsetcellEx(m_hPE, PEP_dwaPOINTCOLORS, s, p, &c);\par
    \}\par
\par
    // Make larger and larger circle regions to form a target\par
    c = PERGB(0, 0, 0, 0);\par
    for (int s=1; s<=10; s++) \par
    \{\par
        for (int p=0; p<=359; p++) \par
        \{\par
            nx = (100 + cos((double) p) * s); ny = (100 + sin((double) p) * s);\par
            PEvsetcellEx(m_hPE, PEP_dwaPOINTCOLORS, nx, ny, &c);\par
\tab\tab\tab float fn = 80.0F;    // Make a null data area   // v9.5\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_faYDATA, nx,  ny, &fn); \par
        \}\par
    \}\par
    c = PERGB(255, 198, 198, 198);\par
    for (int s=11; s<=20; s++) \par
    \{\par
        for (int p=0; p<=359; p++) \par
        \{\par
            nx = (100 + cos((double) p) * s); ny = (100 + sin((double) p) * s);\par
            PEvsetcellEx(m_hPE, PEP_dwaPOINTCOLORS, nx, ny, &c);\par
        \}\par
    \}\par
    c = PERGB(255, 178, 0, 0);\par
    for (int s=21; s<=30; s++) \par
    \{\par
        for (int p=0; p<=359; p++) \par
        \{\par
            nx = (100 + cos((double) p) * s); ny = (100 + sin((double) p) * s);\par
            PEvsetcellEx(m_hPE, PEP_dwaPOINTCOLORS, nx, ny, &c);\par
        \}\par
    \}\par
    c = PERGB(255, 148, 148, 148);\par
    for (int s=31; s<=50; s++) \par
    \{\par
        for (int p=0; p<=359; p++) \par
        \{\par
            nx = (100 + cos((double) p) * s); ny = (100 + sin((double) p) * s);\par
            PEvsetcellEx(m_hPE, PEP_dwaPOINTCOLORS, nx, ny, &c);\par
        \}\par
    \}\par
\par
    // v9 features\par
    PEnset(m_hPE, PEP_nCONTOURCOLORBLENDS, 40);  // this must be set before COLORSET, COLORSET ALWAYS LAST \par
    PEnset(m_hPE, PEP_nCONTOURCOLORSET,  9);\par
    PEnset(m_hPE, PEP_nSHOWCONTOUR, PESC_BOTTOMLINES);\par
    PEnset(m_hPE, PEP_nCONTOURLEGENDPRECISION, 3); \par
\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 35);\tab\tab\tab\tab    \par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 135);\par
\par
    PEnset(m_hPE, PEP_nSCROLLSMOOTHNESS, 3);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 3);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
\par
    PEnset(m_hPE, PEP_bSURFACENULLDATAGAPS, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
\par
    double d2 = 80.0F; // set above as designated null \par
    PEvset(m_hPE, PEP_fNULLDATAVALUE, &d2, 1);\par
\par
    // manually configure the y axis \par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    d2 = 0.0F;  PEvset(m_hPE, PEP_fMANUALMINY, &d2, 1);\par
    d2 = 1700.0F;  PEvset(m_hPE, PEP_fMANUALMAXY, &d2, 1);\par
\par
    PEnset(m_hPE, PEP_bALLOWWIREFRAME, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSURFACECONTOUR, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWSTYLEPAGE, FALSE);\par
    PEnset(m_hPE, PEP_bSHOWLEGEND,TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATIONMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_LEFT);\par
    PEnset(m_hPE, PEP_dwBARBORDERCOLOR, PERGB(250,70,70,70));\par
\par
    // v9 features\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 2);\par
    PEnset(m_hPE, PEP_dw3DHIGHLIGHTCOLOR, PERGB(255,255,0,0));\par
    PEnset(m_hPE, PEP_nDATASHADOWMENU, PEMC_SHOW );\par
\par
    // v9.5\par
    PEnset(m_hPE, PEP_n3DXFITCONTROLSHAPE, FALSE);\par
    float fZ = .2F; PEvset(m_hPE, PEP_f3DXZOOM, &fZ, 1);\par
\par
    // read direction wellbore data //\par
    int nWellCount = 0;\par
    int aCnt = 0;\par
    bool bFindFirst = true;\par
\par
    std::string szY("Y");\par
    std::ifstream file("DirData1.txt");\par
\par
    if (file.is_open() == false)\par
    \{\par
        AfxMessageBox(TEXT("A Demo Data File [DirData1.txt] Not Found!"));\par
    \}\par
\par
    std::string line;\par
    double d;\par
    int t;\par
    TCHAR szAnnotText[128];\par
    m_pAnnotationStartIndices[0] = 0;\par
\par
    while (std::getline(file, line))\par
    \{\par
        std::stringstream   linestream(line);\par
        std::string valY, valX, valZ;\par
        std::getline(linestream, valY, '\\t');  linestream >> valZ >> valX;\par
\par
        if (valY.length() < 1)\par
            continue;\par
\par
        if (valY == szY) // first line well data \par
        \{\par
            bFindFirst = true;\par
            // Second well, add a text label to last point of previous well as Pointer annotation type //\par
            if (nWellCount > 0)\par
            \{\par
                PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt-1, &d);  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
                PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt-1, &d);  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
                PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt-1, &d);  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
                _stprintf(szAnnotText, TEXT("|lWell %d "), nWellCount-1 );\par
                PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
                t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
                t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
                m_pAnnotationStartIndices[nWellCount] = aCnt;\par
                aCnt++;\par
            \}\par
            nWellCount++;\par
            continue;\par
        \}\par
\par
        float fY = std::stof(valY);\par
        float fX = std::stof(valX);\par
        float fZ = std::stof(valZ);\par
\par
        double dX = (-fX / 100) + centerx;\par
        double dZ = (-fZ / 100) + centerz;\par
        double dY = starty - (fY / 9.0F);\par
\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &dX);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &dZ);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &dY);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
        t = PERGB(255, 0, 255, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  // create some color bars related to y value \par
        if (dY > 250.0F && dY < 270.0F)\par
            PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        else if (dY > 500.0F && dY < 520.0F)\par
            PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        else if (dY > 750.0F && dY < 770.0F)\par
            PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        else if (dY > 1000.0F && dY < 1020.0F)\par
            PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        else if (dY > 1250.0F && dY < 1270.0F)\par
            PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
\par
        if (bFindFirst)\par
        \{\par
            t = PEGAT_MEDIUMSOLIDLINE; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
            bFindFirst = false;\par
        \}\par
        else\par
        \{\par
            t = PEGAT_LINECONTINUE; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        \}\par
        aCnt++;\par
    \}\par
\par
    // Example of drawing a polygon,\par
    // or we could use the Rect annotation type as we are simply drawing a square  //\par
\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt - 1, &d);  d -= 2;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt - 1, &d);  d += 4;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt - 1, &d);  d -= 24; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_STARTPOLY; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    aCnt++;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt - 2, &d);  d -= 2;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt - 2, &d);  d += 4;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt - 2, &d);  d += 24; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_ADDPOLYPOINT; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    aCnt++;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt - 3, &d);  d -= 2;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt - 3, &d);  d -= 4;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt - 3, &d);  d += 24; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_ADDPOLYPOINT; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    aCnt++;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt - 4, &d);  d -= 2;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt - 4, &d);  d -= 4;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt - 4, &d);  d -= 24; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_ENDPOLYGON; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    t = PERGB(255, 0, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
    aCnt++;\par
\par
    // Example of drawing Ellipses\par
\par
    d = 0; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    d = 0; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    d = 1; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_AXIS_DIRECTION; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    aCnt++;\par
\par
    d = 10; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);  //  note x = major\par
    d = 10; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);  //  note y = minor \par
    d = 1; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_MAJORMINOR_RADII; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    aCnt++;\par
\par
    d = centerx; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    d = centerz; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    d = starty - 175; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_ELLIPSE_MEDIUM; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    t = PERGB(255, 255, 0, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
    aCnt++;\par
\par
    d = 20; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    d = 20; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    d = 1; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_MAJORMINOR_RADII; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    aCnt++;\par
    d = centerx; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    d = centerz; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    d = starty - 500; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_ELLIPSE_MEDIUM; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    t = PERGB(255, 255, 0, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
    aCnt++;\par
\par
    // just repeating above for radius 15, 10, 5 \par
    d = 15; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    d = 15; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    d = 1; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_MAJORMINOR_RADII; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    aCnt++;\par
    d = centerx; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    d = centerz; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    d = starty - 500; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_ELLIPSE_THIN; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    t = PERGB(255, 255, 0, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
    aCnt++;\par
\par
    d = 10; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    d = 10; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    d = 1; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_MAJORMINOR_RADII; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    aCnt++;\par
    d = centerx; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    d = centerz; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    d = starty - 500; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_ELLIPSE_THIN; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    t = PERGB(255, 255, 0, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
    aCnt++;\par
\par
    d = 5; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    d = 5; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    d = 1; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_MAJORMINOR_RADII; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    aCnt++;\par
    d = centerx; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    d = centerz; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    d = starty - 500; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    t = PEGAT_ELLIPSE_THIN; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    t = PERGB(255, 255, 0, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
    aCnt++;\par
\par
\par
    // if one wants to control tube min thickness and range of thicknesses\par
    float fThick = .5F; PEvset(m_hPE, PEP_fDXTUBETHICKNESSMIN, &fThick, 1);\par
    float fInc = 1.0F; PEvset(m_hPE, PEP_fDXTUBETHICKNESSINC, &fInc, 1);\par
    PEnset(m_hPE, PEP_nDXLINESORTUBES, PELOT_ALL_TUBES);\par
\par
    PEnset(m_hPE, PEP_bANNOTATIONSINFRONT, FALSE);  // draw annotations first \par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bLEFTJUSTIFICATIONOUTSIDE, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONSYMBOLOBSTACLES, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 110);\par
    PEnset(m_hPE, PEP_bALLOWGRAPHANNOTHOTSPOTS, TRUE);\par
\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWANNOTATIONTEXTMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nANNOTATIONTEXTFIXEDSIZEMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nROTATIONMENU, PEMC_HIDE);\par
\par
    // create a custom menu to toggle PEP_nVIEWINGMODE \par
    PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 0, TEXT("Zoom Rotate on Center "));\par
    t = PECMS_CHECKED; PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 0, 0, &t);\par
    t = PECML_ABOVE_SEPARATOR; PEvsetcell(m_hPE, PEP_naCUSTOMMENULOCATION, 0, &t);\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 1, TEXT("Key 0 - 9 fly down well / toggles ViewingMode | | Popup Menu size / hide annotation text."));\par
\par
    Point3D p3;  // Set a default ViewingAt location to first graph annotation, index 0\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &d);  p3.X = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &d);  p3.Y = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, 0, &d);  p3.Z = (float)d;\par
    PEvset(m_hPE, PEP_structVIEWINGAT, &p3, 1);\par
\par
    PEnset(m_hPE, PEP_nDXSCATTEROCTREESIZE, 5000);\par
\par
\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_YVALUE);\par
    PEnset(m_hPE, PEP_bTRACKINGCUSTOMDATATEXT, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TOOLTIP);\par
    PEnset(m_hPE, PEP_bTRACKINGCUSTOMOTHERTEXT, TRUE);\par
\par
    PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPBKCOLOR, PERGB(0, 80, 80, 80));\par
    PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPTEXTCOLOR, PERGB(0, 245, 245, 245));\par
    PEnset(m_hPE, PEP_nTRACKINGTOOLTIPMAXWIDTH, 200);\par
\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXANNOTVERTICEREBUILD, TRUE);\par
\par
    // Set Demo's RenderEngine  // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
    ::UpdateWindow(m_hPE);\par
\par
    /*///////////////////\par
    // PEWN_MOUSEMOVE //\par
    ////////////////////\par
    else if (m_nLastSelection == 403) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
    \{\par
        POINT pt;\par
        HOTSPOTDATA hsd;\par
        TCHAR buffer[128];\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        //// call PEgethotspot //\par
        PEgethotspot(m_hPE, pt.x, pt.y);\par
\par
        // now look at HotSpotData structure //\par
        PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
       \par
        if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
        \{\par
            // get ydata value at hot spot //\par
            float yvalue; PEvgetcellEx(m_hPE, PEP_faYDATA, hsd.w1, hsd.w2, &yvalue);\par
            // or to get the interpolated value under the mouse \par
            // double yvalue; PEvgetW(m_hPE, PEP_fCURSORVALUEY, &yvalue);\par
            _stprintf(buffer, TEXT("DataPoint value %.2f, s=%d,p=%d"), yvalue, hsd.w1, hsd.w2);\par
        \{\par
        else\par
            lstrcpy(buffer, TEXT("No Hot Spot"));\par
\par
        CWnd* pParent = GetParent()->GetParent();\par
        if (pParent) \{pParent->SetWindowText(buffer);\}\par
\par
        pParent = AfxGetMainWnd();\par
        if (pParent) \{pParent->SetWindowText(TEXT("PEgethotspot"));\}\par
\par
        return TRUE;\par
    \}\par
    */\par
\par
\}\par
\par
//***************************************************************************\par
//404  3D Scatter Chart\par
void CPEView::Create3DScatterChart()\par
\{\par
    //! Double Click to start and stop Auto Rotation. //\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
    //! Right click to show popup menu. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Enable smoother rotation and zooming //\par
    PEnset(m_hPE, PEP_nSCROLLSMOOTHNESS, 2);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
\par
    // Non-Surface chart, set PolyMode //\par
    PEnset(m_hPE, PEP_nPOLYMODE, PEPM_SCATTER);\par
\par
    // Do not auto fit to shape of window //\par
    PEnset(m_hPE, PEP_n3DXFITCONTROLSHAPE, FALSE);\par
    float fMyShape = .5F;   PEvset(m_hPE, PEP_fGRIDASPECTY, &fMyShape, 1);\par
    PEnset(m_hPE, PEP_nPOINTSIZE, PEPS_SMALL);\par
\par
    // Set camera position //\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 35);\par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 68);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    // v9 feature\par
\tab PEnset(m_hPE, PEP_n3DXFOV, 8); // isometric pictural perspective \par
    float fMyZoom = -5.0F;   PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
    float fTweakY = 0.0; PEvset(m_hPE, PEP_f3DXVIEWPORTY, &fTweakY, 1);\par
\par
    PEnset(m_hPE, PEP_nROTATIONSPEED, 50);\par
    PEnset(m_hPE, PEP_nROTATIONINCREMENT, PERI_INCBY1);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
    // in determining different default values for such properties //\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
\par
    // Set the amount of data //\par
    PEnset(m_hPE, PEP_nSUBSETS, 10);\par
    PEnset(m_hPE, PEP_nPOINTS, 500);\par
\par
    float f, f2;\par
    f = 0.0F; // tip to pre allocate memory if not use PEvset and spoon feeding with PEvsetcell \par
    PEvsetcellEx(m_hPE, PEP_faXDATA, 9, 499, &f2);  // settng last point first,\par
    PEvsetcellEx(m_hPE, PEP_faYDATA, 9, 499, &f2);  // but it's not critical \par
    PEvsetcellEx(m_hPE, PEP_faZDATA, 9, 499, &f2);\par
\par
    // Pass data, First two subsets //\par
    int s, p;\par
    // Pass data, First two subsets //          \par
    for (s = 0; s <= 1; s++)\par
    \{\par
        for (p = 0; p <= 499; p++)\par
        \{\par
            f = 5000.0F + (float)(5.0F * cos(p * 0.24)); f = f * (p + 1);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
            if (s == 0)\par
                f = 5000.0F + (float)((35.0F * cos(p * 0.22)) + (10.0F * sin((s * 0.1) * 0.94)));\par
            else\par
                f = 5000.0F + (float)((35.0F * cos(p * 0.08)) + (10.0F * cos((s * 0.25) * 0.6)));\par
            f += 100;\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
            f = 5000.0F + (float)(5.0F * (sin(p * 0.08)));\par
            PEvsetcellEx(m_hPE, PEP_faZDATA, s, p, &f);\par
        \}\par
    \}\par
\par
    for (s = 2; s <= 3; s++)\par
    \{\par
        for (p = 0; p <= 499; p++)\par
        \{\par
            f = 5000.0F + (float)(5.0F * cos(p * 0.14)); f = f * (p + 1);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
            if (s == 2)\par
                f = 5000.0F + (float)((35.0 * cos(p * 0.2)) + (10.0F * sin((s * 0.1) * 0.74)));\par
            else\par
                f = 5000.0F + (float)((35.0F * cos(p * 0.1)) + (10.0F * cos((s * 0.25) * 0.74)));\par
            f += 220;\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
\par
            f = 5000.0F + (float)(5.0F * (sin(p * 0.16))); f = f + 20;\par
            PEvsetcellEx(m_hPE, PEP_faZDATA, s, p, &f);\par
        \}\par
    \}\par
\par
    // Pass more data, Third two subsets //       \par
    for (s = 4; s <= 5; s++)\par
    \{\par
        for (p = 0; p <= 499; p++)\par
        \{\par
            f = 5000.0F + (float)(5.0F * cos(p * 0.07)); f = f * (p + 1);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
            if (s == 4)\par
                f = 5000.0F + (float)((35.0F * cos(p * 0.08)) + (10.0 * sin((s * 0.07) * 0.64)));\par
            else\par
                f = 5000.0F + (float)((35.0F * cos(p * 0.2)) + (10.0F * cos((s * 0.15) * 1.94)));\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
            f = 5000.0F + (float)(5.0F * (sin(p * 0.09))); f = f + 20;\par
            PEvsetcellEx(m_hPE, PEP_faZDATA, s, p, &f);\par
        \}\par
    \}\par
\par
    // Pass more data, Fourth two subsets //          \par
    for (s = 6; s <= 7; s++)\par
    \{\par
        for (p = 0; p <= 4999; p++)\par
        \{\par
            f = 5000.0F + (float)(5.0F * cos(p * 0.12)); f = f * (p + 1);\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
            if (s == 6)\par
                f = 5000.0F + (float)((35.0F * cos(p * 0.3)) + (10.0F * sin((s * 0.08) * 1.74)));\par
            else\par
                f = 5000.0F + (float)((35.0F * cos(p * 0.2)) + (10.0F * cos((s * 0.75) * 0.77)));\par
            f += 220;\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
            f = 5000.0F + (float)(5.0F * (sin(p * 0.36))); f = f - 20;\par
            PEvsetcellEx(m_hPE, PEP_faZDATA, s, p, &f);\par
        \}\par
    \}\par
\par
    // Pass more data, Fifth two subsets //          \par
    for (s = 8; s <= 9; s++)\par
    \{\par
        for (p = 0; p <= 499; p++)\par
        \{\par
            f = 5000.0F + (float)(5.0F * cos(p * 0.14)); f = f + 20.0F;\par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
            if (s == 8)\par
                f = 5000.0F + (float)((25.0F * cos(p * 0.1)) + (10.0F * sin((s * 0.02) * 3.74)));\par
            else\par
                f = 5000.0F + (float)((55.0F * cos(p * 0.2)) + (10.0F * cos((s * 0.05) * 5.74)));\par
            f += 40;\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
            f = 5000.0F + (float)(5.0F * (sin(p * 0.16))); f = f - 20;\par
            PEvsetcellEx(m_hPE, PEP_faZDATA, s, p, &f);\par
        \}\par
    \}\par
\par
    PEnset(m_hPE, PEP_nXAXISSCALECONTROL, PEAC_LOG);\par
    PEnset(m_hPE, PEP_nYAXISSCALECONTROL, PEAC_LOG);\par
    PEnset(m_hPE, PEP_nZAXISSCALECONTROL, PEAC_LOG);\par
\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT("LOG + Isometric Perspective"));\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D);\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_SHADOW);\par
    PEnset(m_hPE, PEP_dwGRAPHFORECOLOR, PERGB(255, 255, 255, 255));\par
    PEnset(m_hPE, PEP_dwXZBACKCOLOR, PERGB(255, 85, 85, 85));\par
    PEnset(m_hPE, PEP_dwYBACKCOLOR, PERGB(255, 85, 85, 85));\par
\par
    // Set Various Other Properties //\par
    DWORD dwColor[] = \{PERGB( 255,198, 198, 0), PERGB( 255,0, 198, 198), PERGB( 255,0, 198, 0), PERGB( 255,198, 0, 0), PERGB( 255,0, 0, 198), \par
        PERGB( 255,192,192,192), PERGB( 255,198, 0, 198), PERGB( 255,200, 198, 150), PERGB( 255,200, 200, 140), PERGB( 255,150, 0, 198)\};\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwColor, 10);\par
\par
    int nPTypes[] = \{PEPT_DOTSOLID, PEPT_DOTSOLID, PEPT_DOTSOLID, PEPT_DOTSOLID, PEPT_DOTSOLID, PEPT_DOTSOLID, PEPT_DOTSOLID, PEPT_DOTSOLID, PEPT_DOTSOLID, PEPT_DOTSOLID\};\par
    PEvset(m_hPE, PEP_naSUBSETPOINTTYPES, nPTypes, 10);\par
\par
    int nSLTypes[] = \{ PELT_MEDIUMTHINSOLID, PELT_MEDIUMTHINSOLID, PELT_MEDIUMTHINSOLID, PELT_MEDIUMTHINSOLID, PELT_MEDIUMTHINSOLID, PELT_MEDIUMTHINSOLID, PELT_MEDIUMTHINSOLID, PELT_MEDIUMTHINSOLID, PELT_MEDIUMTHINSOLID, PELT_MEDIUMTHINSOLID \};\par
    PEvset(m_hPE, PEP_naSUBSETLINETYPES, nSLTypes, 10);\par
\par
    PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONTEXT, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWANNOTATIONSMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nANNOTATIONTEXTFIXEDSIZEMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
\par
    double d;  \tab int t;\par
    int aCnt = 0;\par
    TCHAR szAnnotText[128];\par
    for (int annot = 0; annot < 10; annot++)\par
    \{\par
        int nRndRow = (int)(GetRandom(1, 10)) - 1;\par
        int nRndCol = (int)(GetRandom(1, 500)) - 1;\par
\par
        PEvgetcellEx(m_hPE, PEP_faXDATA, nRndRow, nRndCol, &f); d = (double)f; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faZDATA, nRndRow, nRndCol, &f); d = (double)f; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f); d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_LARGEDOTSOLID; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 0, 255, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
        m_pAnnotationStartIndices[annot] = aCnt;\par
        aCnt++;\par
\par
        PEvgetcellEx(m_hPE, PEP_faXDATA, nRndRow, nRndCol, &f); d = (double)f; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faZDATA, nRndRow, nRndCol, &f); d = (double)f; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f); d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 0, 255, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("|lAnnotation %d "), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        m_pAnnotationStartIndices[annot] = aCnt;\par
        aCnt++;\par
    \}\par
\par
    for (int s = 0; s < 10; s++)\par
    \{\par
        BOOL b = TRUE;\par
        PEvsetcell(m_hPE, PEP_naSUBSETOBSTACLES, s, &b);\par
        float fS = 1.3F;\par
        if ((s == 0 || s == 3)) \{ fS = 2.3F; \}  // optional way to control size per subset \par
        PEvsetcell(m_hPE, PEP_faSUBSETPOINTSIZES, s, &fS);\par
    \}\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bLEFTJUSTIFICATIONOUTSIDE, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONSYMBOLOBSTACLES, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 110);\par
    PEnset(m_hPE, PEP_bALLOWGRAPHANNOTHOTSPOTS, TRUE);\par
\par
    // create a custom menu to toggle PEP_nVIEWINGMODE \par
    PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 0, TEXT("Zoom Rotate on Center "));\par
    t = PECMS_CHECKED; PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 0, 0, &t);\par
    t = PECML_ABOVE_SEPARATOR; PEvsetcell(m_hPE, PEP_naCUSTOMMENULOCATION, 0, &t);\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 1, TEXT("Key 0-9 rotates/zooms at annotation| |Popup Menu size/hide annotation text."));\par
\par
    Point3D p3;  // Set a default ViewingAt location to first graph annotation, index 0\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &d);  p3.X = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &d);  p3.Y = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, 0, &d);  p3.Z = (float)d;\par
    PEvset(m_hPE, PEP_structVIEWINGAT, &p3, 1);\par
\par
    // Set subset labels and titles //\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("Data 1"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Data 2"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 2, TEXT("Data 3"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 3, TEXT("Data 4"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 4, TEXT("Data 5"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 5, TEXT("Data 6"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 6, TEXT("Data 7"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 7, TEXT("Data 8"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 8, TEXT("Data 9"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 9, TEXT("Data 10"));\par
\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
\par
    // Set Plotting methods //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 0);   // ' Points\par
\par
    // Set legend location //\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_LEFT);\par
    PEnset(m_hPE, PEP_bSHOWLEGEND, FALSE);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATIONMENU, PEMC_SHOW);\par
\par
    // Prepare images in memory //\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    PEnset(m_hPE, PEP_bANTIALIASTEXT, TRUE);\par
    PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, FALSE);  // for non 3dx charts\par
\par
    PEnset(m_hPE, PEP_nDATASHADOWMENU, PEMC_SHOW );\par
\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYZVALUES);\par
\par
    float fLS = .65F;    PEvset(m_hPE, PEP_fLIGHTSTRENGTH, &fLS, 1);\par
    t = PERGB(255, 255, 0, 0); PEnset(m_hPE, PEP_dw3DHIGHLIGHTCOLOR, t);\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXANNOTVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
\par
    // Set Demo's RenderEngine // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
    ::UpdateWindow(m_hPE);\par
\par
\}\par
\par
//***************************************************************************\par
//405  3D Bar Chart\par
void CPEView::Create3DBarChart()\par
\{\par
    //! Double Click to start and stop Auto Rotation. //\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
    //! Right click to show popup menu. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Enable smoother rotation and zooming //\par
    PEnset(m_hPE, PEP_nSCROLLSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
\par
    Point3D p3d;\par
    p3d.X = 4.6F;     p3d.Y = 0.8F;     p3d.Z = 9.5F;\par
    PEvset(m_hPE, PEP_struct3DXLIGHT0, &p3d, 1);\par
\par
    // Non-Surface chart, set PolyMode //\par
    PEnset(m_hPE, PEP_nPOLYMODE, PEPM_3DBAR);\par
\par
    // Pass Data //\par
    double sMin, sMax;\par
    long Row, Col, o, nQ;\par
    long nStartRow, nEndRow, nStartCol, nEndCol, nTargetRows, nTargetCols;\par
\par
    nStartRow = 216;\par
    nEndRow = 230;\par
    nTargetRows = nEndRow - nStartRow + 1;\par
    nStartCol = 156;\par
    nEndCol = 170;\par
    nTargetCols = nEndCol - nStartCol + 1;\par
\par
    nQ = nTargetRows * nTargetCols;\par
\par
    long* pElevData = NULL;\par
    float* pMyXData = NULL;    \par
    float* pMyYData = NULL;\par
    float* pMyZData = NULL;\par
\par
\tab ::SetCurrentDirectory(szDirectory);\par
\par
    TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
\par
    if (pFile)\par
    \{\par
        pElevData = new long[2250000];\par
        size_t cnt = fread(&pElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
    pMyXData = new float[nQ];\par
    pMyYData = new float[nQ];\par
    pMyZData = new float[nQ];\par
\par
    long rowcounter, colcounter;\par
    BOOL foundtargetindex = FALSE;\par
    rowcounter = 0;\par
    colcounter = 0;\par
\par
    sMax = -9999999.9F;\par
    sMin = 9999999.9F;\par
    for (Row=0; Row<1500; Row++)\par
    \{\par
        for (Col=0; Col<1500; Col++)\par
        \{\par
            foundtargetindex = FALSE;\par
\par
            if (Row >= nStartRow && Row <= nEndRow) \par
            \{\par
                if (Col >= nStartCol && Col <= nEndCol)\par
                \{\par
                    foundtargetindex = TRUE;\par
                    o = (rowcounter * nTargetRows) + colcounter;\par
                    pMyXData[o] = (float) Col + 1;\par
                    pMyZData[o] = (float) Row + 1;\par
                    pMyYData[o] = pElevData[(Row * 1500) + Col] * 0.1F;\par
                \}\par
            \}\par
            if (foundtargetindex) \par
                colcounter++;\par
        \}\par
        if (foundtargetindex)\par
            rowcounter++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, nTargetRows);\par
    PEnset(m_hPE, PEP_nPOINTS, nTargetCols);\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, pMyXData, nQ);\par
    PEvset(m_hPE, PEP_faYDATA, pMyYData, nQ);\par
    PEvset(m_hPE, PEP_faZDATA, pMyZData, nQ);\par
\par
    if (pElevData)\par
        delete pElevData;\par
    if (pMyXData)\par
        delete pMyXData;\par
    if (pMyYData)\par
        delete pMyYData;\par
    if (pMyZData)\par
        delete pMyZData;\par
\par
    // Set Various Other Properties //\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    DWORD dwColor[] = \{PERGB( 216,0, 148, 0), PERGB( 216,148, 0, 0), PERGB( 216,0, 0, 148),\par
        PERGB( 216,148, 148, 0), PERGB( 216,0, 148, 148),\par
        PERGB( 216,0, 182, 0), PERGB( 216,182, 0, 0), PERGB( 216,0, 0, 182),\par
        PERGB( 216,182, 182, 0), PERGB( 216,0, 182, 182),\par
        PERGB( 216,0, 198, 0), PERGB( 216,198, 0, 0), PERGB( 216,0, 0, 198),\par
        PERGB( 216,198, 198, 0), PERGB( 216,0, 198, 148)  \};\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwColor, 15);\par
\par
    // Set subset labels for z axis**\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 0, TEXT("Row 1"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 1, TEXT("Row 2"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 2, TEXT("Row 3"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 3, TEXT("Row 4"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 4, TEXT("Row 5"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 5, TEXT("Row 6"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 6, TEXT("Row 7"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 7, TEXT("Row 8"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 8, TEXT("Row 9"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 9, TEXT("Row 10"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 10, TEXT("Row 11"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 11, TEXT("Row 12"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 12, TEXT("Row 13"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 13, TEXT("Row 14"));\par
    PEvsetcell(m_hPE, PEP_szaSUBSETLABELS, 14, TEXT("Row 15"));\par
\par
    // Set point labels for x axis //\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 0, TEXT("Col 1"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 1, TEXT("Col 2"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 2, TEXT("Col 3"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 3, TEXT("Col 4"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 4, TEXT("Col 5"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 5, TEXT("Col 6"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 6, TEXT("Col 7"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 7, TEXT("Col 8"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 8, TEXT("Col 9"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 9, TEXT("Col 10"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 10, TEXT("Col 11"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 11, TEXT("Col 12"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 12, TEXT("Col 13"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 13, TEXT("Col 14"));\par
    PEvsetcell(m_hPE, PEP_szaPOINTLABELS, 14, TEXT("Col 15"));\par
\par
    // Set Titles //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_SHADOW);\par
\par
    // Set camera position //\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 19);\par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 338);\par
\par
    // Set Plotting methods //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 2);   // ' Shading\par
\par
    // Set font size //\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
\par
    // Prepare images in memory //\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSTYLEPAGE, FALSE);\par
\par
    PEnset(m_hPE, PEP_nROTATIONSPEED, 50);\par
    PEnset(m_hPE, PEP_nROTATIONINCREMENT, PERI_INCBY1);\par
\par
    // Add Some Padding on Right and Bottom //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\tab PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
\tab PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, TRUE);\par
\par
    PEnset(m_hPE, PEP_bANTIALIASTEXT, TRUE);\par
    PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, TRUE);\par
\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_YVALUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTLOCATION, PECPL_TRACKING_TEXT);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 0);\par
    PEnset(m_hPE, PEP_dw3DHIGHLIGHTCOLOR, PERGB(255,255,255,255));\par
    float fSize = 1.4F; PEvset(m_hPE, PEP_fFONTSIZETRACKINGCNTL, &fSize, 1);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D); \par
\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWANNOTATIONTEXTMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nANNOTATIONTEXTFIXEDSIZEMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONTEXTFIXEDSIZE3D, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWLEGENDMENU, PEMC_HIDE);\par
    PEnset(m_hPE, PEP_nSHOWWIREFRAMEMENU, PEMC_HIDE);\par
\par
\par
    double d;  \tab int t;     float f;\par
    int aCnt = 0;\par
    TCHAR szAnnotText[128];\par
\par
    d = 1.5;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    d = 14.5;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvgetcellEx(m_hPE, PEP_faYDATA, 0, 0, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    t = PEGAT_THICKSOLIDLINE; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
    PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
    aCnt++;\par
\par
    for (int annot = 1; annot < nTargetCols; annot++)\par
    \{\par
        d = 1.5 + annot;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = 14.5;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, 0, annot, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_LINECONTINUE; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
        aCnt++;\par
    \}\par
\par
    for (int annot = 0; annot < 10; annot++)\par
    \{\par
        int nRndRow = (int)(GetRandom(1, nTargetRows)) - 1;\par
        int nRndCol = (int)(GetRandom(1, nTargetCols)) - 1;\par
\par
        d = nRndCol + 1.5;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = nRndRow + 1.5;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_DIAMONDSOLID; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
        aCnt++;\par
\par
        d = nRndCol + 1.5;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = nRndRow + 1.5;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("|lAnnotation %d "), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        m_pAnnotationStartIndices[annot] = aCnt;\par
        aCnt++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bLEFTJUSTIFICATIONOUTSIDE, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONSYMBOLOBSTACLES, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 110);\par
    PEnset(m_hPE, PEP_bALLOWGRAPHANNOTHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_nHOTSPOTSIZE, PEHSS_LARGE);\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXANNOTVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
\par
    // Set Demo's RenderEngine to Direct3D // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\}\par
\par
//***************************************************************************\par
//406  3D Polygon Data\par
void CPEView::Create3DPolygonData()\par
\{\par
    //! Double Click to start and stop Auto Rotation. //\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
    //! Right click to show popup menu. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Enable smoother rotation and zooming //\par
    PEnset(m_hPE, PEP_nSCROLLSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 4);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
\par
    PEnset(m_hPE, PEP_nPOLYMODE, PEPM_POLYGONDATA);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    // Hide Axes //\par
    PEnset(m_hPE, PEP_nSHOWXAXIS, PESA_EMPTY);\par
    PEnset(m_hPE, PEP_nSHOWYAXIS, PESA_EMPTY);\par
    PEnset(m_hPE, PEP_nSHOWZAXIS, PESA_EMPTY);\par
\par
    // Set camera location //\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 5);\par
\par
    // Set Plotting Method and etc //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 2); // 'surface with shading\par
    PEnset(m_hPE, PEP_nROTATIONDETAIL, PERD_FULLDETAIL);  // Not 3dx\par
    PEnset(m_hPE, PEP_nROTATIONSPEED, 50);\par
    PEnset(m_hPE, PEP_nROTATIONINCREMENT, PERI_INCBY1);\par
    PEnset(m_hPE, PEP_bALLOWWIREFRAME, FALSE);\par
\par
    // Do not auto fit to shape of window, keep things square //\par
    PEnset(m_hPE, PEP_n3DXFITCONTROLSHAPE, FALSE);\par
\par
    // Set a light rotation location //\par
    Point3D p3d;\par
    p3d.X = 1.87F;      p3d.Y = -1.92F;     p3d.Z = 1.52F;\par
    PEvset(m_hPE, PEP_struct3DXLIGHT0, &p3d, 1);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    float fMyZoom = 1.0F;\par
    PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
\par
    // Set a chart translation //\par
    float fTweakX = .0F;\par
    float fTweakY = .08F;\par
    PEvset(m_hPE, PEP_f3DXVIEWPORTX, &fTweakX, 1);\par
    PEvset(m_hPE, PEP_f3DXVIEWPORTY, &fTweakY, 1);\par
\par
    // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
    // in determining different default values for such properties //\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_dwDESKCOLOR, 1);\par
    PEszset(m_hPE, PEP_szDESKBMPFILENAME, TEXT("starfield.jpg"));\par
    PEnset(m_hPE, PEP_nDESKBMPSTYLE, PEBS_TILED_BITBLT );\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWSTYLEPAGE, FALSE);\par
  \par
    long* pElevData = NULL;\par
    float* pMyXData = NULL;    \par
    float* pMyYData = NULL;\par
    float* pMyZData = NULL;\par
\par
\tab ::SetCurrentDirectory(szDirectory);\par
\par
\tab TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
    if (pFile)\par
    \{\par
        pElevData = new long[2250000];\par
        size_t cnt = fread(&pElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
\par
    // Code below dynamically creates polygon data to produce a sphere //\par
    int a, b, r, n, m, q;\par
    float radius, radius2;\par
    float* pEDGEx = NULL;\par
    float* pEDGEy = NULL;\par
    float* pEDGEz = NULL;\par
\par
    float fInc = 1.0F;\par
    float factor_theta = .9F; \par
    float factor_phi = .9F; \par
    float theta = 0.0F;\par
    float phi = 00.F;\par
    radius = 9;\par
\par
    if (!PEnget(m_hPE, PEP_bISDXAVAILABLE))\par
    \{\par
        fInc = 3.0F;\par
        factor_theta = .5F; // causes a reduction in data set for non dx.\par
        factor_phi = .5F; \par
    \}\par
 \par
    float tt, ph;\par
    tt = (360.0F / factor_theta) - 1.0F;\par
    ph = (360.0F / factor_phi) - 1.F;\par
\par
    int nE = (tt + 2) * (ph + 2);\par
    pEDGEx = new float[nE];\par
    pEDGEy = new float[nE];\par
    pEDGEz = new float[nE];\par
\par
    // Convert spherical coordinates to Cartesian //\par
    for (a=0; a<=tt; a++)\par
    \{\par
        for (b=0; b<=ph; b++)\par
        \{\par
            n = (a * ph) + b;\par
            if (a < tt/2)\par
                radius2 = radius + ( ((float) pElevData[(((a)) * 1500) + (b) ]) * .00007F * fInc );  \par
            else\par
                radius2 = radius + ( ((float) pElevData[(((int)tt-(a)) * 1500) + (b) ]) * .00007F * fInc );\par
            pEDGEx[n] = radius2 * cos((3.141592F / 180.0F) * theta) * sin((3.141592F / 180.0F) * phi);\par
            pEDGEz[n] = radius2 * sin((3.141592F / 180.0F) * theta) * sin((3.141592F / 180.0F) * phi);\par
            pEDGEy[n] = radius2 * cos((3.141592F / 180.0F) * phi);\par
            phi = phi + factor_phi;\par
        \}\par
        theta = theta + factor_theta;\par
        phi = 0;\par
    \}\par
\par
    // The number of polygons will equal the half // \par
    // the number of coordinates obtained. //\par
\par
    PolygonData* pData = NULL;\par
    int nQ = ((ph + 1) * (tt + 1)) / 2;\par
    pData = new PolygonData[nQ];\par
\par
    // To place each polygon points in a counter clockwise order a\par
    // simple stepping procedure is needed. We are placing points in\par
    // clockwise rotation buts polygons in counterclockwise(top view)\par
    //      1------2\par
    //             |\par
    //             |\par
    //      4------3\par
\par
    n = 0;\par
    m = 0;\par
\par
    for (int i=0; i<=(((ph + 1) * (tt + 1)) / 2) - 1; i++)\par
    \{\par
        // Establish if it is a 4 or 3 edged polygon\par
        pData[i].NumberOfVertices = 4;\par
\par
        // Rounding may be unnecessary in most projects to create\par
        // a smooth surface and it will slow image creation\par
        a = (n * ph) + m;\par
        pData[i].Vertices[0].X = pEDGEx[a];\par
        pData[i].Vertices[0].Y = pEDGEy[a];\par
        pData[i].Vertices[0].Z = pEDGEz[a];\par
\par
        q = n + 1;  // Prepare for next theta point\par
        r = m + 1;  // Prepare for next phi point\par
\par
        // The end of the row is the beginning of the row\par
        if (n > tt - 1) \par
            q = 0;\par
        a = (q * ph) + m;\par
        pData[i].Vertices[1].X = pEDGEx[a];\par
        pData[i].Vertices[1].Y = pEDGEy[a];\par
        pData[i].Vertices[1].Z = pEDGEz[a];\par
\par
        if (q == 0)\par
            n = tt;\par
        if (n > tt - 1)\par
            q = 0;\par
        a = (q * ph) + r;\par
        pData[i].Vertices[2].X = pEDGEx[a];\par
        pData[i].Vertices[2].Y = pEDGEy[a];\par
        pData[i].Vertices[2].Z = pEDGEz[a];\par
\par
        if (q == 0) \par
            n = tt;\par
        a = (n * ph) + r;\par
        pData[i].Vertices[3].X = pEDGEx[a];\par
        pData[i].Vertices[3].Y = pEDGEy[a];\par
        pData[i].Vertices[3].Z = pEDGEz[a];\par
\par
        // Set the polygons color,  with a bit of logic to produce longitude and latitude lines \par
        double dx, dy, dz, dm;\par
        dx = (double) i / (double) 40.0F;\par
        dy = modf(dx, &dz);     \par
        dx = (double) m / (double) 40.0F;\par
        dm = modf(dx, &dz);     \par
        if (dy < .025F || dm < .025F )\par
            pData[i].PolyColor = PERGB( 255, 159, 159, 159);\par
        else\par
            pData[i].PolyColor = PERGB( 255, 155, 155, 155);\par
\par
        // This establishes when the next row and column of points is increased\par
        dx = (double) (i + 1) / (double) (ph + 1); \par
        dy = modf(dx, &dz);     \par
        if (dy == 0 && i != 0) \par
            m = m + 1; // Step to the next phi(row)\par
\par
        dx = (double) (i + 1) / (double) (tt + 1); \par
        dy = modf(dx, &dz);     \par
        if (dy != 0 || i == 0)\par
            n = n + 1; // Step to the next theta(column)\par
        else\par
            n = 0;     // If you loop start at the beginning\par
    \}\par
\par
    // Set the polygons in one call\par
    PEvset(m_hPE, PEP_structPOLYDATA, pData, (((ph + 1) * (tt + 1)) / 2));\par
\par
    if (pElevData)\par
        delete pElevData;\par
    if (pEDGEx)\par
        delete pEDGEx;\par
    if (pEDGEy)\par
        delete pEDGEy;\par
    if (pEDGEz)\par
        delete pEDGEz;\par
    if (pData)\par
        delete pData;\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
    PEnset(m_hPE, PEP_bALLOWTEXTEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    PEnset(m_hPE, PEP_bANTIALIASTEXT, TRUE);\par
    PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, TRUE); \par
\par
    PEnset(m_hPE, PEP_nSHOWWIREFRAMEMENU, PEMC_HIDE);\par
    PEnset(m_hPE, PEP_nGRIDLINEMENU, PEMC_HIDE);\par
    PEnset(m_hPE, PEP_nPLOTMETHODMENU, PEMC_HIDE);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D); \par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    PEnset(m_hPE, PEP_bAUTOROTATION, TRUE);\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
\}\par
\par
//***************************************************************************\par
//407  3D Waterfall\par
void CPEView::Create3DWaterfall()\par
\{\par
    //! Double Click to start and stop Auto Rotation. //\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
    //! Right click to show popup menu. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Enable smoother rotation and zooming //\par
    PEnset(m_hPE, PEP_nSCROLLSMOOTHNESS, 6);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 6);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 3);\par
\par
    // Non-Surface chart, set PolyMode //\par
    PEnset(m_hPE, PEP_nPOLYMODE, PEPM_SCATTER);\par
\par
    // Pass Data //\par
    long Row, Col, o, s, nQ;\par
    long nStartRow, nEndRow, nStartCol, nEndCol, nTargetRows, nTargetCols;\par
\par
    nStartRow = 150;\par
    nEndRow = 250;\par
    nTargetRows = nEndRow - nStartRow + 1;\par
    nStartCol = 100;\par
    nEndCol = 200;\par
    nTargetCols = nEndCol - nStartCol + 1;\par
    nQ = nTargetRows * nTargetCols;\par
\par
    long* pElevData = NULL;\par
    float* pMyXData = NULL;    \par
    float* pMyYData = NULL;\par
    float* pMyZData = NULL;\par
\par
\tab ::SetCurrentDirectory(szDirectory);\par
\par
    TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
\par
    if (pFile)\par
    \{\par
        pElevData = new long[2250000];\par
        size_t cnt = fread(&pElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
    pMyXData = new float[nQ];\par
    pMyYData = new float[nQ];\par
    pMyZData = new float[nQ];\par
\par
    long rowcounter, colcounter;\par
    BOOL foundtargetindex = FALSE;\par
    rowcounter = 0;\par
    colcounter = 0;\par
\par
    for (Row=0; Row<1500; Row++)\par
    \{\par
        for (Col=0; Col<1500; Col++)\par
        \{\par
            foundtargetindex = FALSE;\par
\par
            if (Row >= nStartRow && Row <= nEndRow) \par
            \{\par
                if (Col >= nStartCol && Col <= nEndCol)\par
                \{\par
                    foundtargetindex = TRUE;\par
                    o = (rowcounter * nTargetRows) + colcounter;\par
                    pMyXData[o] = (float) Col + 1;\par
                    pMyZData[o] = (float) Row + 1;\par
                    pMyYData[o] = pElevData[(Row * 1500) + Col] * 0.1F;\par
                \}\par
            \}\par
            if (foundtargetindex) \par
                colcounter++;\par
        \}\par
        if (foundtargetindex)\par
            rowcounter++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, nTargetRows);\par
    PEnset(m_hPE, PEP_nPOINTS, nTargetCols);\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, pMyXData, nQ);\par
    PEvset(m_hPE, PEP_faYDATA, pMyYData, nQ);\par
    PEvset(m_hPE, PEP_faZDATA, pMyZData, nQ);\par
\par
    if (pElevData)\par
        delete pElevData;\par
    if (pMyXData)\par
        delete pMyXData;\par
    if (pMyYData)\par
        delete pMyYData;\par
    if (pMyZData)\par
        delete pMyZData;\par
\par
    PEnset(m_hPE, PEP_bWATERFALLCONTOURS, TRUE);\par
    PEnset(m_hPE, PEP_nCONTOURCOLORBLENDS, 20);\par
    PEnset(m_hPE, PEP_nCONTOURCOLORALPHA, 255);\par
    PEnset(m_hPE, PEP_nCONTOURCOLORSET, PECCS_BLUE_CYAN_GREEN_YELLOW_BROWN_WHITE);\par
\par
    PEnset(m_hPE, PEP_bWATERFALLBORDERS, TRUE);\par
    PEnset(m_hPE, PEP_dwBARBORDERCOLOR, PERGB(255, 0, 0, 0));\par
\par
    for (s = 0; s < PEnget(m_hPE, PEP_nSUBSETS); s++)\par
    \{\par
        int lt = PELT_MEDIUMTHINSOLID;\par
        PEvsetcell(m_hPE, PEP_naSUBSETLINETYPES, s, &lt);\par
    \}\par
\par
    // Set Titles //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
\par
    // Set camera position //\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 36);\par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 210);\par
    float fZoom = .47F; PEvset(m_hPE, PEP_f3DXZOOM, &fZoom, 1);\par
\par
    // Set Plotting methods //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 3);   // Area\par
    PEnset(m_hPE, PEP_bALLOWAREA, TRUE);\par
\par
    // v9.5\par
    PEnset(m_hPE, PEP_n3DXFITCONTROLSHAPE, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONTEXT, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONTEXTFIXEDSIZE3D, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWANNOTATIONTEXTMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nANNOTATIONTEXTFIXEDSIZEMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nSHOWLEGENDMENU, PEMC_HIDE);\par
    PEnset(m_hPE, PEP_nSHOWWIREFRAMEMENU, PEMC_HIDE);\par
\par
    double d;  \tab int t;   float f;\par
    int aCnt = 0;\par
    TCHAR szAnnotText[128];\par
    for (int annot = 0; annot < 10; annot++)\par
    \{\par
        int nRndRow = (int)(GetRandom(1, nTargetRows)) - 1;\par
        int nRndCol = (int)(GetRandom(1, nTargetCols)) - 1;\par
\par
        d = nStartCol + nRndCol + 1; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = nStartRow + nRndRow + 1; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f); d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_DIAMONDSOLID; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
        m_pAnnotationStartIndices[annot] = aCnt;\par
        aCnt++;\par
\par
        d = nStartCol + nRndCol + 1; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = nStartRow + nRndRow + 1; PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f); d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("|lAnnotation %d "), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        m_pAnnotationStartIndices[annot] = aCnt;\par
        aCnt++;\par
    \}\par
\par
    // Add a Graph Annotation to highlight a slice with a thick line \par
    int nHighLightSubset = 10;\par
    aCnt = 50; // offset \par
    int pt = 0;\par
\par
    PEvgetcellEx(m_hPE, PEP_faXDATA, nHighLightSubset, pt, &f); d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    PEvgetcellEx(m_hPE, PEP_faZDATA, nHighLightSubset, pt, &f); d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvgetcellEx(m_hPE, PEP_faYDATA, nHighLightSubset, pt, &f); d = (double)f+30.0F;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    t = PEGAT_STARTPOLY; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    aCnt++;\par
    for (pt = 1; pt < nTargetCols - 1; pt++)\par
    \{\par
        PEvgetcellEx(m_hPE, PEP_faXDATA, nHighLightSubset, pt, &f); d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faZDATA, nHighLightSubset, pt, &f); d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nHighLightSubset, pt, &f); d = (double)f+30.0F;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_ADDPOLYPOINT; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        aCnt++;\par
    \}\par
    PEvgetcellEx(m_hPE, PEP_faXDATA, nHighLightSubset, pt, &f); d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
    PEvgetcellEx(m_hPE, PEP_faZDATA, nHighLightSubset, pt, &f); d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
    PEvgetcellEx(m_hPE, PEP_faYDATA, nHighLightSubset, pt, &f); d = (double)f + 30.0F;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
    t = PEGAT_ENDPOLYLINE_THICK; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
    t = PERGB(255,255,0,0); PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
    aCnt++;\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bLEFTJUSTIFICATIONOUTSIDE, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONSYMBOLOBSTACLES, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 110);\par
    PEnset(m_hPE, PEP_bALLOWGRAPHANNOTHOTSPOTS, TRUE);\par
\par
    PEnset(m_hPE, PEP_nDXLINESORTUBES, PELOT_ALL_TUBES);\par
    float fThickMin = 0.3F; PEvset(m_hPE, PEP_fDXTUBETHICKNESSMIN, &fThickMin, 1);\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, TRUE);\par
    PEnset(m_hPE, PEP_bANNOTATIONSINFRONT, FALSE);\par
\par
    // Set font size //\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    \par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
\par
    // Add Some Padding around image //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 100);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 100);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    // Disable Legend //\par
    int n = -1;\par
    PEvsetcell(m_hPE, PEP_naSUBSETSTOLEGEND, 0, &n);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\tab PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
\tab PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
\tab PEnset(m_hPE, PEP_bALLOWSVGEXPORT, TRUE);\par
\par
    PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, TRUE);\par
    PEnset(m_hPE, PEP_bANTIALIASTEXT, TRUE);\par
\par
    PEnset(m_hPE, PEP_nROTATIONSPEED, 50);\par
    PEnset(m_hPE, PEP_nROTATIONINCREMENT, PERI_INCBY1);\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXNEWCOLORS, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXANNOTVERTICEREBUILD, TRUE);\par
\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
\par
    // Set Demo's RenderEngine to Direct3D // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
\}\par
\par
\par
//***************************************************************************\par
//408  3D Large shaded surface\par
void CPEView::Create3DLargeShadedSurface()\par
\{\par
    //! Double Click to start and stop Auto Rotation. //\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
    //! Right click to show popup menu. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Enable smoother rotation and zooming //\par
    PEnset(m_hPE, PEP_nSCROLLSMOOTHNESS, 3);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 3);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 2);\par
\par
    // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
    // in determining different default values for such properties //\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
\par
    // Set camera position //\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 22);\par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 301);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    float fMyZoom = 0.0F;   PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
\par
    // Set a light rotation location //\par
    Point3D p3d;\par
    p3d.X = 1.5F; p3d.Y = -1.5F; p3d.Z = 2.0F;\par
    PEvset(m_hPE, PEP_struct3DXLIGHT0, &p3d, 1);\par
\par
    // Set a chart translation //\par
    float fTweakX = 0.0F;  PEvset(m_hPE, PEP_f3DXVIEWPORTX, &fTweakX, 1);\par
    float fTweakY = 0.70F;   PEvset(m_hPE, PEP_f3DXVIEWPORTY, &fTweakY, 1);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    long Row, Col, o, s, e, nQ;\par
    long nStartRow, nEndRow, nStartCol, nEndCol, nTargetRows, nTargetCols;\par
    e = 0.0F;\par
\par
    nStartRow = 0;\par
    nEndRow = 1000;\par
    nTargetRows = nEndRow - nStartRow + 1;\par
\par
    nStartCol = 0;\par
    nEndCol = 1000;\par
    nTargetCols = nEndCol - nStartCol + 1;\par
\par
    nQ = nTargetRows * nTargetCols;\par
\par
    long* pElevData = NULL;\par
    float* pMyXData = NULL;    \par
    float* pMyYData = NULL;\par
    float* pMyZData = NULL;\par
\par
    ::SetCurrentDirectory(szDirectory);\par
\par
    TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
\par
    if (pFile)\par
    \{\par
        pElevData = new long[2250000];\par
        size_t cnt = fread(&pElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
    pMyXData = new float[nTargetCols];  // v9.5 \par
    pMyYData = new float[nQ];\par
    pMyZData = new float[nTargetRows];\par
\par
    long rowcounter, colcounter;\par
    BOOL foundtargetindex = FALSE;\par
    rowcounter = 0;\par
    colcounter = 0;\par
\par
    for (Row=0; Row<1500; Row++)\par
    \{\par
        for (Col=0; Col<1500; Col++)\par
        \{\par
            foundtargetindex = FALSE;\par
\par
            if (Row >= nStartRow && Row <= nEndRow) \par
            \{\par
                if (Col >= nStartCol && Col <= nEndCol)\par
                \{\par
                    foundtargetindex = true;\par
                    if (Row == nStartRow)  // v9.5\par
                        pMyXData[Col - nStartCol] = Col + 1;\par
                    if (Col == nStartCol)  // v9.5 \par
                        pMyZData[Row - nStartRow] = Row + 1;\par
                    // See our help, topic SubsetByPoint to understand the below formula  // v9.5\par
                    o = (rowcounter * nTargetRows) + colcounter;\par
                    pMyYData[o] = (float)(pElevData[(Row * 1500) + Col] * 0.1);\par
                \}\par
            \}\par
            if (foundtargetindex) \par
                colcounter++;\par
        \}\par
        if (foundtargetindex)\par
            rowcounter++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, nTargetRows);\par
    PEnset(m_hPE, PEP_nPOINTS, nTargetCols);\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, pMyXData, nTargetCols);  // v9.5\par
    PEvset(m_hPE, PEP_faYDATA, pMyYData, nQ);\par
    PEvset(m_hPE, PEP_faZDATA, pMyZData, nTargetRows);\par
    PEnset(m_hPE, PEP_nDUPLICATEXDATA, PEDD_POINTINCREMENT);\par
    PEnset(m_hPE, PEP_nDUPLICATEZDATA, PEDD_SUBSETINCREMENT);\par
\par
    if (pElevData)\par
        delete pElevData;\par
    if (pMyXData)\par
        delete pMyXData;\par
    if (pMyYData)\par
        delete pMyYData;\par
    if (pMyZData)\par
        delete pMyZData;\par
\par
    PEnset(m_hPE, PEP_nCONTOURLEGENDPRECISION, 1); // or this is an easier method of controlling precision in legend\par
\par
    PEnset(m_hPE, PEP_nLEGENDLOCATION, PELL_RIGHT);\par
\par
    // Set Contour Color regions //\par
    DWORD dwCC[100];\par
    for (s=0; s<32; s++)\par
        dwCC[s] = PERGB( 255,0, 31 + (s * 7), 95 + (s * 5));\par
    for (s=0; s<32; s++)\par
        dwCC[32 + s] = PERGB( 255,0, 95 + (s * 5), 0);\par
    for (s=0; s<35; s++)\par
        dwCC[64 + s] = PERGB( 255,128 + (s * 3), 128 + (s * 3), 128 + (s * 3));\par
    PEvset(m_hPE, PEP_dwaSUBSETCOLORS, dwCC, 99);\par
\par
    for (s=0; s<100; s++)\par
        dwCC[s] = PERGB( 255,50 + (s * 2), 50 + (s * 2), 50 + (s * 2));\par
    PEvset(m_hPE, PEP_dwaSUBSETSHADES, dwCC, 100);\par
\par
    PEnset(m_hPE, PEP_bCONTOURSTYLELEGEND, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWLEGEND, TRUE);\par
    PEnset(m_hPE, PEP_nLEGENDLOCATIONMENU, PEMC_SHOW);\par
\par
    // There are different plotting method values for each case of PolyMode.\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 4);\par
    PEnset(m_hPE, PEP_bALLOWWIREFRAME, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPLOTCUSTOMIZATION, FALSE);\par
\par
    // Set Titles //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
\par
    // Note RenderEngine 3DX requires setting renderengine before QuickStyle \par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    DWORD dw = PERGB( 255,215,215,215);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, WIRE_FRAME_COLOR, &dw);  // WIREFRAMECOLOR to WHITE\par
\par
    dw = PERGB( 255,228,228,228);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, SOLID_SURFACE_COLOR, &dw);  // SOLID SURFACE COLOR\par
\par
    // Set Various Other Properties ///\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
    PEnset(m_hPE, PEP_bALLOWTEXTEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    PEnset(m_hPE, PEP_nROTATIONSPEED, 50);\par
    PEnset(m_hPE, PEP_nROTATIONINCREMENT, PERI_INCBY1);\par
\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, FALSE);\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, 2);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 2);\par
    PEnset(m_hPE, PEP_dw3DHIGHLIGHTCOLOR, PERGB(255,255,0,0));\par
\par
    PEnset(m_hPE, PEP_nCONTOURMENU, PEMC_HIDE);\par
\par
    PEnset(m_hPE, PEP_bALLOWANNOTATIONCONTROL, TRUE);\par
    PEnset(m_hPE, PEP_nSHOWANNOTATIONTEXTMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_nANNOTATIONTEXTFIXEDSIZEMENU, PEMC_SHOW);\par
    PEnset(m_hPE, PEP_n3DXFITCONTROLSHAPE, FALSE);\par
    float fAspectX = 2.0F; PEvset(m_hPE, PEP_fGRIDASPECTX, &fAspectX, 1);\par
    float fAspectZ = 2.0F; PEvset(m_hPE, PEP_fGRIDASPECTZ, &fAspectX, 1);\par
\par
    float f;  double d;  \tab int t;\par
    int aCnt = 0;\par
    TCHAR szAnnotText[128];\par
    for (int annot = 0; annot < 20; annot++)\par
    \{\par
        int nRndRow = (int)(GetRandom(1, nTargetRows)) - 1;\par
        int nRndCol = (int)(GetRandom(1, nTargetCols)) - 1;\par
\par
        d = nStartCol + nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = nStartRow + nRndRow + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_DOTSOLID; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 200, 0, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT(""));\par
        m_pAnnotationStartIndices[annot] = aCnt;\par
        aCnt++;\par
\par
        d = nStartCol + nRndCol + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
        d = nStartRow + nRndRow + 1;   PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
        PEvgetcellEx(m_hPE, PEP_faYDATA, nRndRow, nRndCol, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
        t = PEGAT_POINTER; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
        t = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &t);\par
        _stprintf(szAnnotText, TEXT("|lAnnotation %d "), annot);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText);\par
        m_pAnnotationStartIndices[annot] = aCnt;\par
        aCnt++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
    PEnset(m_hPE, PEP_bLEFTJUSTIFICATIONOUTSIDE, TRUE);\par
    PEnset(m_hPE, PEP_bGRAPHANNOTATIONSYMBOLOBSTACLES, TRUE);\par
    PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 110);\par
    PEnset(m_hPE, PEP_bALLOWGRAPHANNOTHOTSPOTS, FALSE);\par
\par
    // create a custom menu to toggle PEP_nVIEWINGMODE \par
    PEvsetcell(m_hPE, PEP_szaCUSTOMMENUTEXT, 0, TEXT("Zoom Rotate on Center "));\par
    t = PECMS_CHECKED; PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 0, 0, &t);\par
    t = PECML_ABOVE_SEPARATOR; PEvsetcell(m_hPE, PEP_naCUSTOMMENULOCATION, 0, &t);\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 1, TEXT("Key 0-9 rotates/zooms at annotation| |Popup Menu size/hide annotation text."));\par
\par
    Point3D p3;  // Set a default ViewingAt location to first graph annotation, index 0\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &d);  p3.X = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &d);  p3.Y = (float)d;\par
    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, 0, &d);  p3.Z = (float)d;\par
    PEvset(m_hPE, PEP_structVIEWINGAT, &p3, 1);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D);\par
\par
    PEnset(m_hPE, PEP_bFORCE3DXVERTICEREBUILD, TRUE);\par
    PEnset(m_hPE, PEP_bFORCE3DXANNOTVERTICEREBUILD, TRUE);\par
\par
\par
    // Set Demo's RenderEngine to Direct3D // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
    ::UpdateWindow(m_hPE);\par
\par
\}\par
\par
//***************************************************************************\par
//409  2D Contour with Shadow\par
void CPEView::Create2DContourWithShadow()\par
\{\par
    //! Double Click to start and stop Auto Rotation. //\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
    //! Right click to show popup menu. //\par
\par
    // call Example 401 as a base to this example \par
    CreateLargeSurfaceFlattenedFlyBy();\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, -1, TEXT("1"));\par
\par
    PEnset(m_hPE, PEP_nSHOWXAXIS, 0);\par
    PEnset(m_hPE, PEP_nSHOWZAXIS, 0);\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
\par
    // Zoom faster //\par
    float fZF = 20.0F;\par
    PEvset(m_hPE, PEP_fMOUSEWHEELZOOMFACTOR3D, &fZF, 1);\par
    PEvset(m_hPE, PEP_fPINCHZOOMFACTOR3D, &fZF, 1);\par
\par
    // Set eye/camera rotation //\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 90);\par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 90);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    float fMyZoom = -36.0F;\par
    PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
\par
    // Set a chart translation //\par
    float fTweakX = -1.0F;   PEvset(m_hPE, PEP_f3DXVIEWPORTX, &fTweakX, 1);\par
    float fTweakY = 0.8F;    PEvset(m_hPE, PEP_f3DXVIEWPORTY, &fTweakY, 1);\par
\par
    // Flatten the image more than example 401, reduces the terrain height with respect to surface area \par
    float fX = 15.0F;    PEvset(m_hPE, PEP_fGRIDASPECTX, &fX, 1);\par
    float fZ = 15.0F;    PEvset(m_hPE, PEP_fGRIDASPECTZ, &fZ, 1);\par
\par
    // Set a light rotation location //\par
    Point3D p3d;\par
    p3d.X = 1.72F; p3d.Y = -.71F; p3d.Z = -2.28F;\par
    PEvset(m_hPE, PEP_struct3DXLIGHT0, &p3d, 1);\par
\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_SMALL);\par
    PEnset(m_hPE, PEP_bALLOWDATAHOTSPOTS, FALSE);\par
    PEnset(m_hPE, PEP_bCURSORPROMPTTRACKING, TRUE);\par
    PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, 2);\par
    PEnset(m_hPE, PEP_nDATAPRECISION, 2);\par
    PEnset(m_hPE, PEP_dw3DHIGHLIGHTCOLOR, PERGB(255,255,0,0));\par
\par
    PEnset(m_hPE, PEP_nCONTOURMENU, PEMC_HIDE);\par
    PEnset(m_hPE, PEP_bAUTOROTATION, FALSE);\par
\par
    // Set Demo's RenderEngine  // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
\}\par
\par
\par
//***************************************************************************\par
//410  3D Surface Realtime\par
void CPEView::Create3DSurfaceRealtime()\par
\{\par
    //! Double Click to start and stop Auto Rotation. //\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Load surface data into memory //\par
    ::SetCurrentDirectory(szDirectory);\par
\par
    TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
\par
    if (pFile)\par
    \{\par
        m_pGlobalElevData = new long[2250000];\par
        size_t cnt = fread(&m_pGlobalElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
    PEnset(m_hPE, PEP_nSUBSETS, 150);\par
    PEnset(m_hPE, PEP_nPOINTS, 150);\par
\par
    int l, s, p;\par
    float f;\par
    for (s=0; s<150; s++)\par
    \{\par
        for (p=0; p<150; p++)\par
        \{\par
            // XData //\par
            f = (float) p + 1; \par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
            \par
            // YData //\par
            if (m_pGlobalElevData)\par
            \{\par
                l = (s * 1500) + p + 0;\par
                f = m_pGlobalElevData[l] * 0.1F;\par
                PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
            \}\par
            else\par
            \{\par
                f = 10.0F;\par
                PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
            \}\par
\par
            // ZData //\par
            f = (float) s + 1;\par
            PEvsetcellEx(m_hPE, PEP_faZDATA, s, p, &f);\par
        \}\par
    \}\par
\par
    m_nRealTimeCounter = 150; // Keeps track of current row\par
    m_nOverallCounter = 150;\par
\par
    DWORD dw = PERGB( 255, 210, 210, 255);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, WIRE_FRAME_COLOR, &dw); \par
    dw = PERGB( 255, 210, 210, 255);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, SOLID_SURFACE_COLOR, &dw);  \par
\par
    // There are different plotting method values for each case of PolyMode  //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 2); //  2 = Surface\par
    PEnset(m_hPE, PEP_bALLOWSURFACECONTOUR, FALSE);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D); \par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 8);\tab\tab\tab\tab    \par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 93);\par
\par
    // Set a light rotation location //\par
    Point3D p3d;\par
    p3d.X = .05F;\par
    p3d.Y = -1.0F;\par
    p3d.Z = 2.75F;\par
    PEvset(m_hPE, PEP_struct3DXLIGHT0, &p3d, 1);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    float fMyZoom = -6.37F; PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
\par
    // Set a chart translation //\par
    float fTweakX = 0.2F;  PEvset(m_hPE, PEP_f3DXVIEWPORTX, &fTweakX, 1);\par
    float fTweakY = 1.10F; PEvset(m_hPE, PEP_f3DXVIEWPORTY, &fTweakY, 1);\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
\par
    // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
    // in determining different default values for such properties //\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
\par
    // Flatten the image more than example 401, reduces the terrain height with respect to surface area \par
    float fX = 10.0F;  PEvset(m_hPE, PEP_fGRIDASPECTX, &fX, 1);\par
    float fZ = 2.0F;   PEvset(m_hPE, PEP_fGRIDASPECTZ, &fZ, 1);\par
\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE); \par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
\par
    PEnset(m_hPE, PEP_nCONTOURMENU, PEMC_HIDE);\par
   \par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 50);\par
\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 1);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
    PEnset(m_hPE, PEP_bALLOWTEXTEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    PEnset(m_hPE, PEP_bSHOWWIREFRAME, TRUE);\par
\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
    ::InvalidateRect(m_hPE, 0, 0);\par
\par
    // Set Demo's RenderEngine // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
    m_nTimer = SetTimer( TIMER1, 15, NULL );\par
\par
    ////////////////////////////////////////////////////////\par
    // the following code can be found in the Timer Event //\par
    ////////////////////////////////////////////////////////\par
\par
/*\par
    int l, s;\par
    for (s=0; s<150; s++)\par
    \{\par
        pNewXData[s] = m_nOverallCounter;\par
        pNewZData[s] = s + 1;\par
        \par
        if (m_pGlobalElevData)\par
        \{\par
            // incremental data from terrain file //\par
            l = (s * 1500) + m_nRealTimeCounter + 0;\par
            pNewYData[s] = m_pGlobalElevData[l] * 0.1F;\par
        \}\par
        else\par
        \{ // just in case file is not found  \par
            r1 = (float) GetRandom(1, 200); r2 = (float) GetRandom(1, 100);   pNewYData[s] = 1800.0F + r1 + (r2 * .0001F);  \par
        \}\par
    \}\par
\par
    m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
    if (m_nRealTimeCounter > 1499) \par
        m_nRealTimeCounter = 0;\par
    m_nOverallCounter = m_nOverallCounter + 1;\par
\par
    // transfer new Data //\par
    PEvset(m_hPE, PEP_faAPPENDYDATA, pNewYData, 1);\par
    PEvset(m_hPE, PEP_faAPPENDXDATA, pNewXData, 1);\par
    PEvset(m_hPE, PEP_faAPPENDZDATA, pNewZData, 1);\par
\par
    // causes 3D object to reconstruct polygon data //\par
    PEreconstruct3dpolygons(m_hPE);\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
*/\par
\par
\}\par
\par
//***************************************************************************\par
//411  3D Scatter, Line, Waterfall Realtime\par
void CPEView::Create3DScatterWaterfallRealtime()\par
\{\par
    //! Double Click to start and stop Auto Rotation. //\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Non-Surface chart, set PolyMode //\par
    PEnset(m_hPE, PEP_nPOLYMODE, PEPM_SCATTER);\par
\par
    // Disable Legend //\par
    int n = -1;\par
    PEvsetcell(m_hPE, PEP_naSUBSETSTOLEGEND, 0, &n);\par
\par
    // Initialize Data //\par
    PEnset(m_hPE, PEP_nSUBSETS, 100);\par
    PEnset(m_hPE, PEP_nPOINTS, 200);\par
\par
    int s, p;\par
    float f;\par
    for (s=0; s<100; s++)\par
    \{\par
        for (p=0; p<200; p++)\par
        \{\par
            // XData //\par
            f = (float) p + 1; \par
            PEvsetcellEx(m_hPE, PEP_faXDATA, s, p, &f);\par
            \par
            // YData //\par
            f = 0.0F; \par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &f);\par
\par
            // ZData //\par
            f = (float) s + 1;\par
            PEvsetcellEx(m_hPE, PEP_faZDATA, s, p, &f);\par
        \}\par
    \}\par
\par
    // Manually scale y axis //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    double d = 75.0F;  PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
    d = 270.0F;        PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
\par
    // v9 features\par
    PEnset(m_hPE, PEP_bWATERFALLCONTOURS,  TRUE);\par
    PEnset(m_hPE, PEP_nCONTOURCOLORBLENDS, 20);  // this must be set before COLORSET, COLORSET ALWAYS LAST \par
    PEnset(m_hPE, PEP_nCONTOURCOLORALPHA, 255 /*135*/);\par
    PEnset(m_hPE, PEP_nCONTOURCOLORSET,  8);\par
\par
    PEnset(m_hPE, PEP_nMANUALCONTOURSCALECONTROL, 3);\par
    d = 100.0F; PEvset(m_hPE, PEP_fMANUALCONTOURMIN, &d, 1);\par
    d = 240.0F; PEvset(m_hPE, PEP_fMANUALCONTOURMAX, &d, 1);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
\par
    // Set Plotting methods //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 3); // Area\par
\par
    // v9 features\par
    PEnset(m_hPE, PEP_bWATERFALLBORDERS, TRUE);\par
    PEnset(m_hPE, PEP_dwBARBORDERCOLOR, PERGB(255,0,0,0));\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_dwYBACKCOLOR, PERGB( 255,0,0,0));\par
    PEnset(m_hPE, PEP_dwXZBACKCOLOR, PERGB( 255,0,0,0));\par
    PEnset(m_hPE,PEP_bGRIDBANDS, FALSE);\par
\par
    PEnset(m_hPE, PEP_bALLOWAREA, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSLINE, TRUE);\par
    PEnset(m_hPE, PEP_bALLOWSTYLEPAGE, FALSE);\par
\par
    // Set font size //\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_MEDIUM);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
\par
    float fZ = 5.0F;  PEvset(m_hPE, PEP_fGRIDASPECTZ, &fZ, 1);\par
    float fX = 2.0F;  PEvset(m_hPE, PEP_fGRIDASPECTX, &fX, 1);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 25);\tab\tab\tab\tab    \par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 31);\par
\par
    float fMyZoom = -3.37F; PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
\par
    // Set a chart translation //\par
    float fTweakX = 1.75F;  PEvset(m_hPE, PEP_f3DXVIEWPORTX, &fTweakX, 1);\par
    float fTweakY = 1.92F; PEvset(m_hPE, PEP_f3DXVIEWPORTY, &fTweakY, 1);\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
\par
    // Add Some Padding around image //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 50);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    // Set export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
    PEnset(m_hPE, PEP_bALLOWTEXTEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    PEnset(m_hPE, PEP_nSHOWLEGENDMENU, PEMC_HIDE);\par
    PEnset(m_hPE, PEP_nSHOWWIREFRAMEMENU, PEMC_HIDE);\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D); \par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
    m_nRealTimeCounter = 0;\par
    m_nOverallCounter = 200;\par
    m_nTimer = SetTimer( TIMER1, 15, NULL );\par
\par
    ////////////////////////////////////////////////////////\par
    // the following code can be found in the Timer Event //\par
    ////////////////////////////////////////////////////////\par
\par
/*\par
        int p, nBump;\par
        nBump = 0;\par
\par
        m_nOverallCounter = m_nOverallCounter + 1;\par
        m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
        if (m_nRealTimeCounter > 5) \par
        \{\par
            nBump = GetRandom(1,100);\par
            m_nRealTimeCounter = 0;\par
        \}\par
\par
        for (p=0; p<200; p++)\par
        \{\par
            pNewZData[p] = m_nOverallCounter; // subset or sample iteration\par
            pNewXData[p] = p + 1; // all points \par
\par
            r1 = (float) GetRandom(1, 5); r2 = (float) GetRandom(1, 50); r3 = (r1 + (r2 * .0001F));\par
            pNewYData[p] = 125.0F + r3 + (25.0F * sin( ((float) m_nOverallCounter)*.04F * ((float) (p+1)*3) ));\par
        \}    \par
        if (nBump != 0) \par
            pNewYData[nBump] = pNewYData[nBump] + 50.0F; \par
\par
        // v9 feature transfer a subset's worth of new data //\par
        PEvset(m_hPE, PEP_faAPPENDYSUBSET, pNewYData, 1);\par
        PEvset(m_hPE, PEP_faAPPENDXSUBSET, pNewXData, 1);\par
        PEvset(m_hPE, PEP_faAPPENDZSUBSET, pNewZData, 1);\par
\par
        // 3DX has to refresh the polygon data \par
        PEnset(m_hPE, PEP_bFORCE3DXNEWCOLORS, TRUE);\par
        PEreconstruct3dpolygons(m_hPE);\par
\par
        PEresetimage(m_hPE, 0, 0);\par
        ::InvalidateRect(m_hPE, NULL, FALSE);\par
        break;\par
*/\par
\par
\}\par
\par
\par
//***************************************************************************\par
//412  3D Bar Realtime\par
void CPEView::Create3DBarRealtime()\par
\{\par
    //! Double Click to start and stop Auto Rotation. //\par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
    //! Middle Button hold down while drag rotates light. //\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Non-Surface chart, set PolyMode //\par
    PEnset(m_hPE, PEP_nPOLYMODE, PEPM_3DBAR);\par
\par
    Point3D p3d;\par
    p3d.X = -8.0F;    p3d.Y = -1.8F;    p3d.Z = 6.3F;\par
    PEvset(m_hPE, PEP_struct3DXLIGHT0, &p3d, 1);\par
\par
    // Define quantity of data //\par
    PEnset(m_hPE, PEP_nSUBSETS, 27);\par
    PEnset(m_hPE, PEP_nPOINTS, 25);\par
\par
    // Set all data to start with zero //\par
    int s;\par
    int p;\par
    float fZero = 0.0F;\par
    for(s=0; s<27; s++)\par
    \{\par
        for (p=0; p<25; p++)\par
        \{\par
            PEvsetcellEx(m_hPE, PEP_faYDATA, s, p, &fZero);\par
        \}\par
    \}\par
\par
    // Set initial point labels for x axis //\par
    TCHAR szEmpty[] = TEXT(" ");\par
    for (p=0; p<25; p++)\par
        PEvsetcell(m_hPE, PEP_szaPOINTLABELS, p, szEmpty);\par
\par
    // Manually scale y axis //\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    double dMinY = 0.0F;    PEvset(m_hPE, PEP_fMANUALMINY, &dMinY, 1);\par
    double dMaxY = 100.0F;  PEvset(m_hPE, PEP_fMANUALMAXY, &dMaxY, 1);\par
\par
    // Set Titles //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
    \par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D); \par
\par
    float fZ = 2.0F;  PEvset(m_hPE, PEP_fGRIDASPECTZ, &fZ, 1);\par
    float fX = 5.0F;  PEvset(m_hPE, PEP_fGRIDASPECTX, &fX, 1);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 29);\tab\tab\tab\tab    \par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 312);\par
\par
    float fMyZoom = -4.57F; PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
\par
    // Set a chart translation //\par
    float fTweakX = 1.8F;  PEvset(m_hPE, PEP_f3DXVIEWPORTX, &fTweakX, 1);\par
    float fTweakY = 1.8F; PEvset(m_hPE, PEP_f3DXVIEWPORTY, &fTweakY, 1);\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
\par
    // Set Plotting methods //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 2);   \par
\par
    // Add padding around chart //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 50);\par
\par
    // Set Various Other Properties //\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_SMALL);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, FALSE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSTYLEPAGE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPLOTCUSTOMIZATION, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWIREFRAME, FALSE);\par
    PEnset(m_hPE, PEP_nROTATIONSPEED, 50);\par
    PEnset(m_hPE, PEP_nROTATIONINCREMENT, PERI_INCBY1);\par
\par
    // export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
    PEnset(m_hPE, PEP_bALLOWTEXTEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    PEreinitialize(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
    ::InvalidateRect(m_hPE, 0, 0);\par
\par
    // Set Demo's RenderEngine // \par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
    m_nTimer = SetTimer( TIMER1, 15, NULL );\par
\par
    ////////////////////////////////////////////////////////\par
    // the following code can be found in the Timer Event //\par
    ////////////////////////////////////////////////////////\par
/*\par
    t = CTime::GetCurrentTime();\par
    ttext = t.Format("%I:%M:%S");\par
\par
    // Graph Real Time Feed //\par
    PEvset(m_hPE, PEP_szaAPPENDPOINTLABELDATA, (void *) (LPCTSTR) ttext, 1);\par
\par
    // new YData //\par
    float NewData[27];\par
    for (i=0; i<27; i++)\par
    \{\par
        // make some random data //\par
        r1 = (float) GetRandom(1, 90);\par
        r2 = (float) GetRandom(1, 100);\par
        NewData[i] = 10.0F + r1 + (r2 * .0001F);\par
    \}\par
\par
    // transfer new YData //\par
    PEvset(m_hPE, PEP_faAPPENDYDATA, NewData, 1);\par
\par
    // causes 3D object to reconstruct polygon data //\par
    // causes 3D object to reconstruct polygon data //\par
    PEreconstruct3dpolygons(m_hPE);\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
*/\par
\par
\}\par
\par
\par
//***************************************************************************\par
//413  2D Line Realtime\par
void CPEView::Create2DLineRealtime()\par
\{\par
    //! Simple 2D line charting via DirectX \par
    //! Left click and drag to rotate. Also Hold shift to translate. // \par
    //! Mouse Wheel zooms in/out. \par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    // Non-Surface chart, set PolyMode //\par
    PEnset(m_hPE, PEP_nPOLYMODE, PEPM_SCATTER);\par
\par
    // Set Data Amount //\par
    PEnset(m_hPE, PEP_nSUBSETS, 4);\par
    PEnset(m_hPE, PEP_nPOINTS, 25000);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 1);\par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 191);\par
    float fMyZoom = 1.5F;  PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
\par
    // Set a chart translation //\par
    float fTweakX = -.18F;   PEvset(m_hPE, PEP_f3DXVIEWPORTX, &fTweakX, 1);\par
    float fTweakY = .01F;  PEvset(m_hPE, PEP_f3DXVIEWPORTY, &fTweakY, 1);\par
\par
    // Manually configure x and y axes //\par
    double d;\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLX, PEMSC_MINMAX);\par
    d = 0.0F;    PEvset(m_hPE, PEP_fMANUALMINX, &d, 1);\par
    d = 250.0F;  PEvset(m_hPE, PEP_fMANUALMAXX, &d, 1);\par
\par
    PEnset(m_hPE, PEP_nMANUALSCALECONTROLY, PEMSC_MINMAX);\par
    d = 0.0F;  PEvset(m_hPE, PEP_fMANUALMINY, &d, 1);\par
    d = 60.0F; PEvset(m_hPE, PEP_fMANUALMAXY, &d, 1);\par
\par
    PEnset(m_hPE, PEP_nAUTOMINMAXPADDING, 0);\par
\par
    // Shrink the Z Aspect and show no label\par
    float fZ = 0.0000001F;\par
    PEvset(m_hPE, PEP_fGRIDASPECTZ, &fZ, 1);\par
    PEnset(m_hPE, PEP_nSHOWZAXIS, PESA_LABELONLY);\par
    PEszset(m_hPE, PEP_szZAXISLABEL, TEXT(""));\par
\par
    // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
    // in determining different default values for such properties //\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    // subset colors //\par
    DWORD dwArray[4] = \{ PERGB(205,178,50,50), PERGB(205,50,198,198), PERGB(205,198,198,50), PERGB(205,50,198,0) \};\par
    PEvsetEx(m_hPE, PEP_dwaSUBSETCOLORS, 0, 4, dwArray, 0);\par
\par
    // Set Titles //\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D); \par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    // Set Plotting methods //\par
    PEnset(m_hPE, PEP_nPLOTTINGMETHOD, 1);   // Line\par
    PEnset(m_hPE, PEP_bALLOWAREA, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINTSPLUSLINE, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPOINT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWPLOTCUSTOMIZATION, FALSE);\par
    int n = -1;  PEvsetcell(m_hPE, PEP_naSUBSETSTOLEGEND, 0, &n);\par
\par
    // Set font size //\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_SMALL);\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE);\par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
\par
    // Add Some Padding around image //\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTLEFT, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTRIGHT, 50);\par
    PEnset(m_hPE, PEP_nIMAGEADJUSTBOTTOM, 50);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    // export defaults //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
    PEnset(m_hPE, PEP_bALLOWTEXTEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
    PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    CMDIFrameWnd* pWnd = (CMDIFrameWnd*) AfxGetApp()->GetMainWnd();\par
    pWnd->SendMessage(WM_CHANGE_DEMO_RENDERENGINE, RENDER_3DX );\par
\par
    m_nRealTimeCounter = 0;\par
    m_nOverallCounter = 0;\par
    m_nTimer = SetTimer( TIMER1, 25, NULL );\par
\par
    ////////////////////////////////////////////////////////\par
    // the following code can be found in the Timer Event //\par
    ////////////////////////////////////////////////////////\par
\par
/*\par
    PEnset(m_hPE, PEP_nSUBSETS, 4);\par
    PEnset(m_hPE, PEP_nPOINTS, 25000);\par
\par
    // Prepare data in temp arrays //\par
    float* YData; \par
    float* XData;\par
    float* ZData;\par
    YData = new float[100000];\par
    XData = new float[100000];\par
    ZData = new float[100000];\par
\par
    fShift = (float) GetRandom(1, 90);\par
    for (j=0; j<=24999; j++)\par
    \{\par
        XData[j] = ((float) (j + 1)) * .01F; \par
        YData[j] = (sin(0.003F * (double) j + fShift) * 5.0F) + 10 + (float) GetRandom(1, 100)/10.0F ;\par
        ZData[j] = 10.0F; \par
    \}\par
    fShift = (float) GetRandom(1, 90);\par
    for (j=0; j<=24999; j++)\par
    \{\par
        XData[j+25000] = ((float) (j + 1)) * .01F; \par
        YData[j+25000] = (sin(0.002F * (double) j + fShift) * 5.0F) + 20 + (float) GetRandom(1, 100)/10.0F ;\par
        ZData[j+25000] = 10.0F; \par
    \}\par
    fShift = (float) GetRandom(1, 90);\par
    for (j=0; j<=24999; j++)\par
    \{\par
        XData[j+50000] = ((float) (j + 1)) * .01F; \par
        YData[j+50000] = (sin(0.003F * (double) j + fShift) * 5.0F) + 30 + (float) GetRandom(1, 100)/10.0F ;\par
        ZData[j+50000] = 10.0F; \par
    \}\par
    fShift = (float) GetRandom(1, 90);\par
    for (j=0; j<=24999; j++)\par
    \{\par
        XData[j+75000] = ((float) (j + 1)) * .01F; \par
        YData[j+75000] = (sin(0.003F * (double) j + fShift) * 5.0F) + 40 + (float) GetRandom(1, 100)/10.0F ;\par
        ZData[j+75000] = 10.0F; \par
    \}\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, XData, 100000);\par
    PEvset(m_hPE, PEP_faYDATA, YData, 100000);\par
    PEvset(m_hPE, PEP_faZDATA, ZData, 100000);\par
\par
    delete XData;\par
    delete YData;\par
    delete ZData;\par
\par
    PEreconstruct3dpolygons(m_hPE);\par
    PEresetimage(m_hPE, 0, 0);\par
    ::InvalidateRect(m_hPE, NULL, FALSE);\par
*/\par
\par
\}\par
\par
void CPEView::Create3DSimple() \par
\{\par
\par
    RECT rect;\par
    GetClientRect( &rect );\par
\par
    // Construct Object //\par
    m_hPE = PEcreate(PECONTROL_3D, WS_VISIBLE, &rect, m_hWnd, 1001);\par
\par
    long Row, Col, o,nQ;\par
    long nStartRow, nEndRow, nStartCol, nEndCol, nTargetRows, nTargetCols;\par
\par
    int nRndRow = GetRandom(1, 300);\par
    int nRndCol = GetRandom(1, 300);\par
\par
    nStartRow = nRndRow;\par
    nEndRow = nRndRow + 200;\par
    nTargetRows = nEndRow - nStartRow + 1;\par
\par
    nStartCol = nRndCol;\par
    nEndCol = nRndCol + 200;\par
    nTargetCols = nEndCol - nStartCol + 1;\par
\par
    nQ = nTargetRows * nTargetCols;\par
\par
    long* pElevData = NULL;\par
    float* pMyXData = NULL;    \par
    float* pMyYData = NULL;\par
    float* pMyZData = NULL;\par
\par
\tab ::SetCurrentDirectory(szDirectory);\par
\par
    TCHAR szFile[] = TEXT("terrain2.bin");\par
    FILE * pFile = NULL;\par
    pFile = _tfopen(szFile, TEXT("rb"));\par
\par
    if (pFile)\par
    \{\par
        pElevData = new long[2250000];\par
        size_t cnt = fread(&pElevData[0], sizeof(long), 2250000, pFile);\par
        fclose(pFile);\par
    \}\par
    else\par
    \{\par
        PEreset(m_hPE);\par
        MessageBox(TEXT("Data File [terrain2.bin] not found in program directory."));\par
        return;\par
    \}\par
\par
    pMyXData = new float[nQ];\par
    pMyYData = new float[nQ];\par
    pMyZData = new float[nQ];\par
\par
    long rowcounter, colcounter;\par
    BOOL foundtargetindex = FALSE;\par
    rowcounter = 0;\par
    colcounter = 0;\par
\par
    for (Row=0; Row<1500; Row++)\par
    \{\par
        for (Col=0; Col<1500; Col++)\par
        \{\par
            foundtargetindex = FALSE;\par
\par
            if (Row >= nStartRow && Row <= nEndRow) \par
            \{\par
                if (Col >= nStartCol && Col <= nEndCol)\par
                \{\par
                    foundtargetindex = TRUE;\par
                    o = (rowcounter * nTargetRows) + colcounter;\par
                    pMyXData[o] = (float) Col + 1;\par
                    pMyZData[o] = (float) Row + 1;\par
\par
                    pMyYData[o] = pElevData[(Row * 1500) + Col] * .1;\par
                \}\par
            \}\par
            if (foundtargetindex) \par
                colcounter++;\par
        \}\par
        if (foundtargetindex)\par
\tab         rowcounter++;\par
    \}\par
\par
    PEnset(m_hPE, PEP_nSUBSETS, nTargetRows);\par
    PEnset(m_hPE, PEP_nPOINTS, nTargetCols);\par
\par
    // Perform the actual transfer of data //\par
    PEvset(m_hPE, PEP_faXDATA, pMyXData, nQ);\par
    PEvset(m_hPE, PEP_faYDATA, pMyYData, nQ);\par
    PEvset(m_hPE, PEP_faZDATA, pMyZData, nQ);\par
\par
    if (pElevData)\par
        delete pElevData;\par
    if (pMyXData)\par
        delete pMyXData;\par
    if (pMyYData)\par
        delete pMyYData;\par
    if (pMyZData)\par
        delete pMyZData;\par
\par
    // Enable smoother rotation and zooming //\par
    PEnset(m_hPE, PEP_nSCROLLSMOOTHNESS, 10);\par
    PEnset(m_hPE, PEP_nMOUSEWHEELZOOMSMOOTHNESS, 15);\par
    PEnset(m_hPE, PEP_nPINCHZOOMSMOOTHNESS, 5);\par
\par
    // Enable DegreePrompting, to view rotation, zoom, light location to aid \par
    // in determining different default values for such properties //\par
    PEnset(m_hPE, PEP_bDEGREEPROMPTING, TRUE);\par
\par
    // Enable mouse dragging //\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGX, TRUE);\par
    PEnset(m_hPE, PEP_bMOUSEDRAGGINGY, TRUE);\par
\par
    PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 16);\tab\tab\tab\tab    \par
    PEnset(m_hPE, PEP_nDEGREEOFROTATION, 245);\par
\par
    // Set a light location //\par
    Point3D p3d;\par
    p3d.X = 1.50F;\par
    p3d.Y = -1.50F;\par
    p3d.Z = 2.0F;\par
    PEvset(m_hPE, PEP_struct3DXLIGHT0, &p3d, 1);\par
\par
    // Set eye/camera distance, or Zoom amount //\par
    float fMyZoom = .80F;    PEvset(m_hPE, PEP_f3DXZOOM, &fMyZoom, 1);\par
\par
    PEnset(m_hPE, PEP_nROTATIONSPEED, 50);\par
    PEnset(m_hPE, PEP_nROTATIONINCREMENT, PERI_INCBY1);\par
\par
    DWORD dw = PERGB( 255, 225, 225, 225);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, WIRE_FRAME_COLOR, &dw); \par
\par
    dw = PERGB( 255, 159, 159, 159);\par
    PEvsetcell(m_hPE, PEP_dwaSUBSETCOLORS, SOLID_SURFACE_COLOR, &dw);  \par
\par
    // Set the plotting method //\par
    // There are different plotting method values for each case of PolyMode  //\par
    PEnset( m_hPE, PEP_nPLOTTINGMETHOD, 2 );\par
    PEnset(m_hPE, PEP_bALLOWSURFACECONTOUR, FALSE);\par
\par
    PEszset(m_hPE, PEP_szMAINTITLE, TEXT(""));\par
    PEszset(m_hPE, PEP_szSUBTITLE, TEXT("||Mouse Wheel zooms. Mouse Drag rotates. Mouse Drag+SHIFT shifts image. "));\par
    PEvsetcell(m_hPE, PEP_szaMULTISUBTITLES, 0, TEXT("||Double Click start/stop Rotation. Mouse Drag+MIDDLE rotates light. "));\par
\par
    PEnset(m_hPE, PEP_nRENDERENGINE, PERE_DIRECT3D); \par
\par
    PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
    PEnset(m_hPE, PEP_nQUICKSTYLE, PEQS_DARK_NO_BORDER);\par
\par
    PEnset(m_hPE, PEP_bFIXEDFONTS, TRUE);\par
    PEnset(m_hPE, PEP_nFONTSIZE, PEFS_LARGE);\par
    PEnset(m_hPE, PEP_bPREPAREIMAGES, TRUE); \par
    PEnset(m_hPE, PEP_bCACHEBMP, TRUE);\par
    PEnset(m_hPE, PEP_bFOCALRECT, FALSE);\par
\par
    PEnset(m_hPE, PEP_nTEXTSHADOWS, PETS_BOLD_TEXT);\par
    PEnset(m_hPE, PEP_bLABELBOLD, TRUE);\par
\par
    // export default settings  //\par
    PEnset(m_hPE, PEP_nDPIX, 600);\par
    PEnset(m_hPE, PEP_nDPIY, 600);\par
    PEnset(m_hPE, PEP_nEXPORTSIZEDEF, PEESD_NO_SIZE_OR_PIXEL );\par
    PEnset(m_hPE, PEP_nEXPORTTYPEDEF, PEETD_PNG );\par
    PEnset(m_hPE, PEP_nEXPORTDESTDEF, PEEDD_CLIPBOARD );\par
    PEszset(m_hPE, PEP_szEXPORTUNITXDEF, TEXT("1280"));\par
    PEszset(m_hPE, PEP_szEXPORTUNITYDEF, TEXT("768"));\par
    PEnset(m_hPE, PEP_nEXPORTIMAGEDPI, 300 );\par
\tab PEnset(m_hPE, PEP_bALLOWEMFEXPORT, FALSE);\par
\tab PEnset(m_hPE, PEP_bALLOWWMFEXPORT, FALSE);\par
\tab PEnset(m_hPE, PEP_bALLOWSVGEXPORT, FALSE);\par
\par
    PEnset(m_hPE, PEP_bANTIALIASTEXT, TRUE);\par
    PEnset(m_hPE, PEP_bANTIALIASGRAPHICS, TRUE);\par
\}\par
\par
\par
//***************************************************************************\par
\par
BOOL CPEView::OnCommand(WPARAM wp, LPARAM lp) \par
\{\par
\tab if (lp != (LPARAM) m_hPE)\par
\tab\tab return CView::OnCommand(wp, lp);\par
\par
\tab if ((m_nLastSelection == 7 ) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
\tab\{\par
\tab     int nA, nX, nY;\par
\tab\tab double fX, fY;\par
\tab\tab POINT pt;\par
\tab\tab RECT r;\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab // test to see if this is within grid area //\par
\tab\tab PEvget(m_hPE, PEP_rectGRAPH, &r);\par
\tab\tab if ((pt.x > r.left) && (pt.x < r.right) && (pt.y > r.top) && (pt.y < r.bottom))\par
\tab\tab\{    \par
\tab\tab\tab nA = 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
\tab\tab\tab nX = pt.x;   //Initialize nX and nY with mouse location\par
\tab\tab\tab nY = pt.y;\par
\tab\tab\tab PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
\tab\tab\tab TCHAR  buffer[48]; \par
\tab\tab\tab _stprintf(buffer, TEXT("%.2f : %.2f"), fX, fY);\par
\par
\tab\tab\tab CWnd* pParent = GetParent()->GetParent();\par
\tab\tab\tab if (pParent) \{pParent->SetWindowText(buffer);\}\par
\tab\tab\}\par
\tab\tab else\par
\tab\tab\{\par
\tab\tab\tab CWnd* pParent = GetParent()->GetParent();\par
\tab\tab\tab if (pParent) \{pParent->SetWindowText(TEXT("Outside Grid"));\}\par
\tab\tab\}\par
\par
\tab\tab return TRUE;\par
\tab\}\par
\tab else if ((m_nLastSelection == 7) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))\par
\tab\{\par
\tab\tab // v9 features \par
\tab\tab if (PEnget(m_hPE, PEP_nTRACKINGPROMPTTRIGGER) == PETPT_MOUSEMOVE)\par
\tab\tab\{\par
\tab\tab\tab int nA, nX, nY;\par
\tab\tab\tab double fX, fY, fRY;\par
\tab\tab\tab POINT pt;\par
\tab\tab\tab RECT r;\par
\par
\tab\tab\tab // get last mouse location within control //\par
\tab\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab\tab // test to see if this is within grid area //\par
\tab\tab\tab PEvget(m_hPE, PEP_rectGRAPH, &r);\par
\tab\tab\tab if ((pt.x > r.left) && (pt.x < r.right) && (pt.y > r.top) && (pt.y < r.bottom))\par
\tab\tab\tab\{    \par
\tab\tab\tab\tab nA = 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
\tab\tab\tab\tab nX = pt.x;   //Initialize nX and nY with mouse location\par
\tab\tab\tab\tab nY = pt.y;\par
\tab\tab\tab\tab\par
\tab\tab\tab\tab // read the left y axis value\par
\tab\tab\tab\tab PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, FALSE, 0, 0);\par
\par
\tab\tab\tab\tab // read the right y axis value \par
\tab\tab\tab\tab PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fRY, TRUE, 0, 0);\par
\par
\tab\tab\tab\tab TCHAR  buffer[48]; \par
\tab\tab\tab\tab _stprintf(buffer, TEXT("Left Y <- %.2f : %.2f -> Right Y"), fY, fRY);\par
\par
\tab\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\tab else\par
\tab\tab\{\par
\tab\tab\tab // Not a MouseMove, must be a CursorMove trigger \par
\tab\tab\tab int nSubset, nPoint;\par
\tab\tab\tab float fY;\par
\tab\tab\tab TCHAR buffer[48];\par
\par
\tab\tab\tab nSubset = PEnget(m_hPE, PEP_nCURSORSUBSET);\par
\tab\tab\tab nPoint = PEnget(m_hPE, PEP_nCURSORPOINT);\par
\par
\tab\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, nSubset, nPoint, &fY);\par
\par
\tab\tab\tab if (nSubset < 3)\par
\tab\tab\tab\tab _stprintf(buffer, TEXT("Left Y <- %.2f"), fY);\par
\tab\tab\tab else\par
\tab\tab\tab\tab _stprintf(buffer, TEXT("%.2f -> Right Y"), fY);\par
\par
\tab\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\}\par
\tab\}\par
\tab else if ((m_nLastSelection == 14 || m_nLastSelection == 103 || m_nLastSelection == 105 ) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
\tab\{\par
\tab\tab POINT pt;\par
\tab\tab HOTSPOTDATA hsd;\par
\tab\tab TCHAR buffer[128];\par
\tab\tab TCHAR buffer2[128];\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab // call PEgethotspot //\par
\tab\tab PEgethotspot(m_hPE, pt.x, pt.y);\par
\par
\tab\tab // now look at HotSpotData structure //\par
\tab\tab PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
\tab\tab if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
\tab\tab\{\par
\tab\tab\tab // get ydata value at hot spot //\par
\tab\tab\tab float yvalue;\par
   \tab\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, hsd.w1, hsd.w2, &yvalue);\par
            _stprintf(buffer, TEXT("DataPoint value %.2f, s=%d,p=%d"), yvalue, hsd.w1, hsd.w2);\par
\tab\tab\}\par
\tab\tab else if (hsd.nHotSpotType == PEHS_SUBSET) \par
\tab\tab\{\par
\tab\tab\tab PEvgetcell(m_hPE, PEP_szaSUBSETLABELS, hsd.w1, buffer2);\par
\tab\tab\tab _stprintf(buffer, TEXT("Subset Legend is %s"), buffer2);\par
\tab\tab\}\par
\tab\tab else if (hsd.nHotSpotType == PEHS_POINT) \par
\tab\tab\{\par
\tab\tab\tab PEvgetcell(m_hPE, PEP_szaPOINTLABELS, hsd.w1, buffer2);\par
\tab\tab\tab _stprintf(buffer, TEXT("Point Label is %s"), buffer2);\par
\tab\tab\}\par
\tab\tab else\par
\tab\tab\{\par
\tab\tab\tab // v9 features \par
\tab\tab\tab int nResult;\par
\tab\tab\tab nResult = PEsearchsubsetpointindex(m_hPE, pt.x, pt.y);\par
\tab\tab\tab if (nResult)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab int nCS = PEnget(m_hPE, PEP_nCLOSESTSUBSETINDEX);\par
\tab\tab\tab\tab int nCP = PEnget(m_hPE, PEP_nCLOSESTPOINTINDEX);\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab lstrcpy(buffer, TEXT(" "));\par
\tab\tab\tab\tab\tab _stprintf(buffer, TEXT("Closest Subset Point s=%d,p=%d"), nCS, nCP);\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\}\par
\tab\tab\tab else\par
\tab\tab\tab\tab lstrcpy(buffer, TEXT("No hotspot, Outside of charting area"));\par
\tab\tab\}\par
\par
\tab\tab CWnd* pParent = GetParent()->GetParent();\par
\tab\tab if (pParent) \{pParent->SetWindowText(buffer);\}\par
\par
\tab\tab return TRUE;\par
\tab\}\par
\tab else if (m_nLastSelection == 120 && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
\tab\{\par
\tab\tab POINT pt;\par
\tab\tab HOTSPOTDATA hsd;\par
\tab\tab TCHAR buffer[128];\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab // test to see if this is within grid area //\par
\tab\tab RECT r;\par
\tab\tab PEvget(m_hPE, PEP_rectGRAPH, &r);\par
\tab\tab if ((pt.x > r.left) && (pt.x < r.right) && (pt.y > r.top) && (pt.y < r.bottom))\par
        \{\par
\tab\tab     if (!PEnget(m_hPE, PEP_bALLOWDATAHOTSPOTS))\par
\tab\tab     \{\par
                // if no data hot spots, then CursorValueZ will be the interpolated value under mouse\par
\tab\tab\tab     double dZ;\par
\tab\tab\tab     PEvget(m_hPE, PEP_fCURSORVALUEZ, &dZ);  // v9 features \par
                _stprintf(buffer, TEXT("Interpolated Z: %.2f"), dZ);\par
\tab\tab     \}\par
            else\par
            \{\par
\tab\tab         // call PEgethotspot //\par
\tab\tab         PEgethotspot(m_hPE, pt.x, pt.y);\par
\par
\tab\tab         // now look at HotSpotData structure //\par
\tab\tab         PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
\tab\tab         if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
\tab\tab         \{\par
\tab\tab\tab         // get zdata value at hot spot //\par
\tab\tab\tab         float yvalue;\par
\tab\tab\tab         PEvgetcellEx(m_hPE, PEP_faZDATA, hsd.w1, hsd.w2, &yvalue);\par
                    _stprintf(buffer, TEXT("ZData: %.2f, s=%d,p=%d"), yvalue, hsd.w1, hsd.w2);\par
                \}\par
\tab\tab     \}\par
\par
\tab\tab     CWnd* pParent = GetParent()->GetParent();\par
\tab\tab     if (pParent) \{pParent->SetWindowText(buffer);\}\par
        \}\par
\par
\tab\tab return TRUE;\par
\tab\}\par
\tab else if ((m_nLastSelection == 402) && (HIWORD(wp) == PEWN_CLICKED))\par
\tab\{\par
\tab\tab POINT pt;\par
\tab\tab HOTSPOTDATA hsd;\par
\tab\tab TCHAR buffer[128];\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab //// call PEgethotspot //\par
\tab\tab PEgethotspot(m_hPE, pt.x, pt.y);\par
    \par
\tab\tab // now look at HotSpotData structure //\par
\tab\tab PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
    \par
        if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
\tab\tab\{\par
\tab\tab\tab // get ydata value at hot spot //\par
\tab\tab\tab float yvalue;\par
\tab\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, hsd.w1, hsd.w2, &yvalue);\par
            _stprintf(buffer, TEXT("DataPoint value %.2f, s=%d,p=%d"), yvalue, hsd.w1, hsd.w2);\par
\tab\tab\}\par
\tab\tab else\par
\tab\tab\tab lstrcpy(buffer, TEXT("No Hot Spot"));\par
\par
\tab\tab CWnd* pParent = GetParent()->GetParent();\par
\tab\tab if (pParent) \{pParent->SetWindowText(buffer);\}\par
\par
\tab\tab pParent = AfxGetMainWnd();\par
\tab\tab if (pParent) \{pParent->SetWindowText(TEXT(" "));\}\par
\par
\tab\tab return TRUE;\par
\tab\}\par
\tab else if ((m_nLastSelection == 403 || (m_nLastSelection == 404)  ) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
\tab\{\par
\tab\tab POINT pt;\par
\tab\tab HOTSPOTDATA hsd;\par
\tab\tab TCHAR buffer[128];\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab //// call PEgethotspot //\par
\tab\tab PEgethotspot(m_hPE, pt.x, pt.y);\par
    \par
\tab\tab // now look at HotSpotData structure //\par
\tab\tab PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
    \par
        if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
\tab\tab\{\par
            // get ydata value at hot spot //\par
            float yvalue; PEvgetcellEx(m_hPE, PEP_faYDATA, hsd.w1, hsd.w2, &yvalue);\par
            // or to get the interpolated value under the mouse \par
            //double yvalue; PEvgetW(m_hPE, PEP_fCURSORVALUEY, &yvalue);\par
            _stprintf(buffer, TEXT("DataPoint value %.2f, s=%d,p=%d"), yvalue, hsd.w1, hsd.w2);\par
\tab\tab\}\par
        else if ((m_nLastSelection == 403) && (hsd.nHotSpotType == PEHS_ANNOTATION) && PEnget(m_hPE, PEP_bSHOWANNOTATIONS))\par
        \{\par
            // get value at annotation //\par
            double dX, dY, dZ;\par
            PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, hsd.w1, &dX);\par
            PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, hsd.w1, &dZ);\par
            PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, hsd.w1, &dY);\par
            _stprintf(buffer, TEXT("Well values X= %.2f, Z=%.2f, Y=%.2f"), dX, dZ, dY);\par
        \}\par
\tab\tab else\par
\tab\tab\tab lstrcpy(buffer, TEXT("No Hot Spot"));\par
\par
\tab\tab CWnd* pParent = GetParent()->GetParent();\par
\tab\tab if (pParent) \{pParent->SetWindowText(buffer);\}\par
\par
\tab\tab pParent = AfxGetMainWnd();\par
\tab\tab if (pParent) \{pParent->SetWindowText(TEXT("PEgethotspot"));\}\par
\par
\tab\tab return TRUE;\par
\tab\}\par
    else if ((m_nLastSelection == 400 || (m_nLastSelection == 407)) && (HIWORD(wp) == PEWN_MOUSEMOVE) && PEnget(m_hPE, PEP_bSHOWANNOTATIONS) )\par
    \{\par
        float fOffsetHeight = 0;\par
        if (m_nLastSelection == 400)\par
            fOffsetHeight = 3;\par
\par
        POINT pt;\par
        HOTSPOTDATA hsd;\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        //// call PEgethotspot //\par
        PEgethotspot(m_hPE, pt.x, pt.y);\par
\par
        // now look at HotSpotData structure //\par
        PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
        if (hsd.nHotSpotType == PEHS_DATAPOINT)\par
        \{\par
            // Add a Polygon Graph Annotation to highlight a slice \par
            int nHighLightSubset = hsd.w1;\par
\par
            int aCnt = 50; // just an offset or buffer as we are placing other point annotations at annotation index 0 not to reach 50\par
\par
            TCHAR szAnnotText[128];\par
            float f;\par
            double d;\par
            int t;\par
            int nPoints = PEnget(m_hPE, PEP_nPOINTS);\par
            int p = 0;\par
            double dZ = 0;\par
\par
            PEvgetcellEx(m_hPE, PEP_faXDATA, nHighLightSubset, p, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
            PEvgetcellEx(m_hPE, PEP_faZDATA, nHighLightSubset, p, &f);  d = (double)f - .05F;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
            dZ = (double) f;\par
            PEvgetcellEx(m_hPE, PEP_faYDATA, nHighLightSubset, p, &f);  d = (double)f + fOffsetHeight;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
            t = PEGAT_STARTPOLY; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
            aCnt++;\par
\par
            for (p = 1; p < nPoints - 1; p++)\par
            \{\par
                PEvgetcellEx(m_hPE, PEP_faXDATA, nHighLightSubset, p, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
                PEvgetcellEx(m_hPE, PEP_faZDATA, nHighLightSubset, p, &f);  d = (double)f - .05F;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
                PEvgetcellEx(m_hPE, PEP_faYDATA, nHighLightSubset, p, &f);  d = (double)f + fOffsetHeight;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
                t = PEGAT_ADDPOLYPOINT; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
                aCnt++;\par
            \}\par
\par
            double d1X, d1Z, d2X, d2Z;\par
\par
            PEvgetcellEx(m_hPE, PEP_faXDATA, nHighLightSubset, p, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d); d1X = d;\par
            PEvgetcellEx(m_hPE, PEP_faZDATA, nHighLightSubset, p, &f);  d = (double)f - .05F;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d); d1Z = d;\par
            PEvget(m_hPE, PEP_fMANUALMINY, &d);  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
            t = PEGAT_ADDPOLYPOINT; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
            aCnt++;\par
\par
            // reading data at pointindex 0 to form the entire polygon\par
            PEvgetcellEx(m_hPE, PEP_faXDATA, nHighLightSubset, 0, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d); d2X = d;\par
            PEvgetcellEx(m_hPE, PEP_faZDATA, nHighLightSubset, 0, &f);  d = (double)f - .05F;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d); d2Z = d;\par
            PEvget(m_hPE, PEP_fMANUALMINY, &d);  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
            t = PEGAT_ENDPOLYGON; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
            DWORD color = PERGB(255, 255, 0, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &color);\par
            aCnt++;\par
\par
            _stprintf(szAnnotText, TEXT("%.0f"), dZ);\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d1X);\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d1Z);\par
            PEvget(m_hPE, PEP_fMANUALMINY, &d);  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
            t = PEGAT_NOSYMBOL; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
            color = PERGB(255, 255, 255, 255);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &color);\par
            PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText); //// set last annotation text string else virtual labels show \par
            aCnt++;\par
\par
            // reading data at pointindex 0 to form the entire polygon\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d2X);\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d2Z);\par
            PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
            t = PEGAT_NOSYMBOL; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
            PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &color);\par
            PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, szAnnotText); //// set last annotation text string else virtual labels show \par
            aCnt++;\par
\par
            // Adding a second Polygon Graph Annotation to highlight a slice from other side\par
            if (m_nLastSelection == 407)\par
            \{\par
                p = 0;\par
                PEvgetcellEx(m_hPE, PEP_faXDATA, nHighLightSubset, p, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
                PEvgetcellEx(m_hPE, PEP_faZDATA, nHighLightSubset, p, &f);  d = (double)f + .05F;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
                PEvgetcellEx(m_hPE, PEP_faYDATA, nHighLightSubset, p, &f);  d = (double)f + fOffsetHeight;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
                t = PEGAT_STARTPOLY; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
                aCnt++;\par
\par
                for (p = 1; p < nPoints - 1; p++)\par
                \{\par
                    PEvgetcellEx(m_hPE, PEP_faXDATA, nHighLightSubset, p, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d);\par
                    PEvgetcellEx(m_hPE, PEP_faZDATA, nHighLightSubset, p, &f);  d = (double)f + .05F;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d);\par
                    PEvgetcellEx(m_hPE, PEP_faYDATA, nHighLightSubset, p, &f);  d = (double)f + fOffsetHeight;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
                    t = PEGAT_ADDPOLYPOINT; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
                    aCnt++;\par
                \}\par
\par
                double d1X, d1Z, d2X, d2Z;\par
\par
                PEvgetcellEx(m_hPE, PEP_faXDATA, nHighLightSubset, p, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d); d1X = d;\par
                PEvgetcellEx(m_hPE, PEP_faZDATA, nHighLightSubset, p, &f);  d = (double)f + .05F;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d); d1Z = d;\par
                PEvget(m_hPE, PEP_fMANUALMINY, &d);  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
                t = PEGAT_ADDPOLYPOINT; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
                aCnt++;\par
\par
                // reading data at pointindex 0 to form the entire polygon\par
                PEvgetcellEx(m_hPE, PEP_faXDATA, nHighLightSubset, 0, &f);  d = (double)f;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, aCnt, &d); d2X = d;\par
                PEvgetcellEx(m_hPE, PEP_faZDATA, nHighLightSubset, 0, &f);  d = (double)f + .05F;  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, aCnt, &d); d2Z = d;\par
                PEvget(m_hPE, PEP_fMANUALMINY, &d);  PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, aCnt, &d);\par
                t = PEGAT_ENDPOLYGON; PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, aCnt, &t);\par
                DWORD color = PERGB(255, 255, 0, 0);  PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, aCnt, &color);\par
                aCnt++;\par
\par
                PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, aCnt, TEXT("")); //// set last annotation text string else virtual labels show \par
            \}\par
\par
\par
            PEnset(m_hPE, PEP_bANNOTATIONSINFRONT, FALSE);\par
            PEnset(m_hPE, PEP_bFORCE3DXANNOTVERTICEREBUILD, TRUE);\par
            ::InvalidateRect(m_hPE, NULL, FALSE);\par
\par
        \}\par
\par
        return TRUE;\par
    \}\par
\tab else if ((m_nLastSelection == 28) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
\tab\{\par
\tab\tab int nX;\par
\tab\tab int nY;\par
\tab\tab double fX;\par
\tab\tab double fY;\par
\tab\tab POINT pt;\par
\tab\tab int nA;\par
\tab\tab TCHAR buffer[128];\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab nA = 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
\tab\tab nX = pt.x;   //Initialize nX and nY with mouse location\par
\tab\tab nY = pt.y;\par
\tab\tab PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
\tab\tab // We now know data coordinates for mouse location //\par
\par
\tab\tab // Use fX to interpolate each subset to find approximate Y value //\par
\tab\tab float Subset1Y, Subset2Y, Subset3Y, Subset4Y;\par
\tab\tab float slope;\par
\tab\tab float y0;\par
\tab\tab float y1, y2, x1, x2;\par
\par
\tab\tab nX = (int) floor(fX) - 1;  // nX is floor of fX\par
\tab\tab x2 = nX + 1;    // x2 is right most point index\par
\tab\tab x1 = nX;        // x1 is left most point index or nX\par
\par
\tab\tab if (fX < 1 || fX > 12)\par
\tab\tab\{\par
\tab\tab\tab lstrcpy(buffer, TEXT("        "));\par
\tab\tab\tab PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 2, buffer);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 5, buffer);\par
\tab\tab\tab PEnset(m_hPE, PEP_nWORKINGTABLE, 1);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 2, buffer);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 5, buffer);\par
 \tab\tab\tab PEdrawtable(m_hPE, 0, NULL);\par
\tab\tab\tab PEdrawtable(m_hPE, 1, NULL);\par
\tab\tab\tab return TRUE;\par
\tab\tab\}\par
\par
\tab\tab fX -= 1.0F;\par
\par
\tab\tab // 1st subset //\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 0, nX + 1, &y2);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 0, nX, &y1);\par
\tab\tab slope = (y2 - y1) / (x2 - x1);\par
\tab\tab y0 = y1 - (slope * x1);\par
\tab\tab Subset1Y = (slope * fX) + y0;\par
\par
\tab\tab // 2nd subset //\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 1, nX + 1, &y2);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 1, nX, &y1);\par
\tab\tab slope = (y2 - y1) / (x2 - x1);\par
\tab\tab y0 = y1 - (slope * x1);\par
\tab\tab Subset2Y = (slope * fX) + y0;\par
\par
\tab\tab // 3rd subset //\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 2, nX + 1, &y2);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 2, nX, &y1);\par
\tab\tab slope = (y2 - y1) / (x2 - x1);\par
\tab\tab y0 = y1 - (slope * x1);\par
\tab\tab Subset3Y = (slope * fX) + y0;\par
\par
\tab\tab // 4th subset //\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 3, nX + 1, &y2);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 3, nX, &y1);\par
\tab\tab slope = (y2 - y1) / (x2 - x1);\par
\tab\tab y0 = y1 - (slope * x1);\par
\tab\tab Subset4Y = (slope * fX) + y0;\par
\par
\tab\tab // Place text in table annotation //\par
\tab\tab PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
\tab\tab _stprintf(buffer, TEXT("%.2f "), Subset1Y);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 2, buffer);\par
\tab\tab _stprintf(buffer, TEXT("%.2f "), Subset2Y);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 5, buffer);\par
\par
\par
\tab\tab PEnset(m_hPE, PEP_nWORKINGTABLE, 1);\par
\tab\tab _stprintf(buffer, TEXT("%.2f "), Subset3Y);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 2, buffer);\par
\tab\tab _stprintf(buffer, TEXT("%.2f "), Subset4Y);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 0, 5, buffer);\par
\par
\tab\tab PEdrawtable(m_hPE, 0, NULL);\par
\tab\tab PEdrawtable(m_hPE, 1, NULL);\par
\par
\tab\tab return TRUE;\par
\tab\}\par
\tab else if ((m_nLastSelection == 30) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
\tab\{\par
\tab\tab int nX;\par
\tab\tab int nY;\par
\tab\tab double fX;\par
\tab\tab double fY;\par
\tab\tab double fI;\par
\tab\tab POINT pt;\par
\tab\tab int nA;\par
\tab\tab TCHAR buffer[128];\par
\tab\tab TCHAR szDate[48];\par
        TCHAR szF[48];\par
\tab\tab float fHigh, fLow, fOpen, fClose, fVolume;\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab nA = 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
\tab\tab nX = pt.x;   //Initialize nX and nY with mouse location\par
\tab\tab nY = pt.y;\par
\tab\tab PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
\tab\tab // We now know data coordinates for mouse location //\par
\par
        // Code to pick closest point index //\par
\tab\tab fY = modf(fX, &fI);\par
\tab\tab if (fY > .5)\par
\tab\tab\tab nX = (int) floor(fX);\par
\tab\tab else\par
\tab\tab\tab nX = (int) floor(fX) - 1;\par
\par
\tab\tab if (fX < 1 || fX > 731)  // 731 points per subset in data file\par
\tab\tab\{\par
\tab\tab\tab lstrcpy(buffer, TEXT("        "));\par
\tab\tab\tab PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 11, 0, buffer);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 12, 0, buffer);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 13, 0, buffer);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 14, 0, buffer);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 15, 0, buffer);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 16, 0, buffer);\par
\tab\tab\tab PEdrawtable(m_hPE, 0, NULL);\par
\tab\tab\tab return TRUE;\par
\tab\tab\}\par
\par
\tab\tab fX -= 1.0F;\par
\par
\tab\tab // Get Data at closest point //\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 0, nX, &fHigh);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 1, nX, &fLow);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 2, nX, &fOpen);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 3, nX, &fClose);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 7, nX, &fVolume);\par
\tab\tab PEvgetcell(m_hPE, PEP_szaPOINTLABELS, nX, szDate);\par
\par
\tab\tab // Place text in table annotation //\par
        // Get numeric precision //\par
        nX = PEnget(m_hPE, PEP_nDATAPRECISION);\par
\par
        TCHAR szPrecision[10];\par
        _itot(nX, szPrecision, 10);\par
\par
\tab\tab // Place text in table annotation //\par
\tab\tab PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 11, 0, szDate);\par
\par
        lstrcpy(szF, TEXT("H:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
\tab\tab _stprintf(buffer, szF, fHigh);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 12, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("L:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
\tab\tab _stprintf(buffer, szF, fLow);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 13, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("O:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
\tab\tab _stprintf(buffer, szF, fOpen);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 14, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("C:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
\tab\tab _stprintf(buffer, szF, fClose);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 15, 0, buffer);\par
\par
\tab\tab _stprintf(buffer, TEXT("V:%.0f "), fVolume);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 16, 0, buffer);\par
\par
\tab\tab PEdrawtable(m_hPE, 0, NULL);\par
\par
\tab\tab return TRUE;\par
\tab\}\par
\tab else if ((m_nLastSelection == 30) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))  // v9 feature\par
\tab\{\par
\tab\tab int nX, nY, nA;\par
\tab\tab double fX, fY,fI;\par
\tab\tab POINT pt;\par
\tab\tab TCHAR buffer[256];\par
\tab\tab TCHAR buffer2[256];\par
\tab\tab TCHAR szDate[48];\par
        TCHAR szF[48];\par
\tab\tab float fHigh, fLow, fOpen, fClose, fVolume;\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab nA = 0;      //Initialize axis, non-zero only if using MultiAxesSubsets\par
\tab\tab nX = pt.x;   //Initialize nX and nY with mouse location\par
\tab\tab nY = pt.y;\par
\tab\tab PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
\tab\tab // We now know data coordinates for mouse location //\par
\par
        // Code to pick closest point index //\par
\tab\tab fY = modf(fX, &fI);\par
\tab\tab if (fY > .5)\par
\tab\tab\tab nX = (int) floor(fX);\par
\tab\tab else\par
\tab\tab\tab nX = (int) floor(fX) - 1;\par
\par
\tab\tab if (fX < 1 || fX > 731)  // 731 points per subset in data file\par
\tab\tab\{\par
\tab\tab\tab lstrcpy(buffer, TEXT("        "));\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\tab return TRUE;\par
\tab\tab\}\par
\par
\tab\tab if (!PEnget(m_hPE, PEP_nTRACKINGPROMPTTRIGGER) == PETPT_MOUSEMOVE)\par
\tab\tab\{\par
            // Trigger not mouse, must be a cursormove event, get cursor location...\par
\tab\tab\tab nX = PEnget(m_hPE, PEP_nCURSORPOINT);\par
        \}\par
\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 0, nX, &fHigh);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 1, nX, &fLow);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 2, nX, &fOpen);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 3, nX, &fClose);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 7, nX, &fVolume);\par
\tab\tab PEvgetcell(m_hPE, PEP_szaPOINTLABELS, nX, szDate);\par
\par
\tab\tab // Place text in table annotation //\par
        // Get numeric precision //\par
        nX = PEnget(m_hPE, PEP_nDATAPRECISION);\par
\par
        TCHAR szPrecision[10];\par
        _itot(nX, szPrecision, 10);\par
\par
\tab\tab lstrcpy(buffer, szDate);\par
\tab\tab lstrcat(buffer, TEXT("      \\n"));\par
\par
        lstrcpy(szF, TEXT("H: %."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f \\n"));\par
\tab\tab _stprintf(buffer2, szF, fHigh);\par
\tab\tab lstrcat(buffer, buffer2);\par
\par
        lstrcpy(szF, TEXT("L: %."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f \\n"));\par
\tab\tab _stprintf(buffer2, szF, fLow);\par
\tab\tab lstrcat(buffer, buffer2);\par
\par
        lstrcpy(szF, TEXT("O: %."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f \\n"));\par
\tab\tab _stprintf(buffer2, szF, fOpen);\par
\tab\tab lstrcat(buffer, buffer2);\par
\par
        lstrcpy(szF, TEXT("C: %."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f \\n"));\par
\tab\tab _stprintf(buffer2, szF, fClose);\par
\tab\tab lstrcat(buffer, buffer2);\par
\par
\tab\tab _stprintf(buffer2, TEXT("V: %.0f "), fVolume);\par
\tab\tab lstrcat(buffer, buffer2);\par
\par
\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\par
\tab\tab return TRUE;\par
\tab\}\par
\tab else if ((m_nLastSelection == 30) && (HIWORD(wp) == PEWN_CLICKED))\par
\tab\{\par
\tab\tab // Look for table hot spot and change financial data //\par
\par
\tab\tab HOTSPOTDATA hsd;\par
\par
\tab\tab // now look at HotSpotData structure //\par
\tab\tab PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
    \par
        if (hsd.nHotSpotType == PEHS_TABLEANNOTATION + 0) // zero represents first table annotation\par
\tab\tab\{\par
\tab\tab\tab PEnset(m_hPE, PEP_bZOOMMODE, FALSE);\par
            PEnset(m_hPE, PEP_nPOINTSTOGRAPH, 0);\par
\tab\tab\tab\par
\tab\tab\tab // Change color of select table item //\par
\tab\tab\tab DWORD dwColor = PERGB( 255,142, 142, 142);\par
\tab\tab\tab for (int i=0; i<10; i++)\par
\tab\tab\tab\tab PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, i, 0, &dwColor);\par
\tab\tab\tab dwColor = PERGB( 255,198, 0, 0);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_dwaTACOLOR, hsd.w1, hsd.w2, &dwColor);\par
\par
\tab\tab\tab TCHAR szSym[32];\par
\tab\tab\tab PEvgetcellEx(m_hPE, PEP_szaTATEXT, hsd.w1, hsd.w2, szSym);\par
\par
\tab\tab\tab // OK, Change Data //\par
\tab\tab\tab LoadData(&szSym[1]);  // [1] because there is a lead space character\par
\par
\tab\tab\tab PEreinitialize(m_hPE);\par
\tab\tab\tab PEresetimage(m_hPE, 0, 0);\par
\tab\tab\tab ::InvalidateRect(m_hPE, 0, 0);\par
\tab\tab\}\par
\par
        // Look to see if a data hot spot was clicked //\par
\par
        if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
        \{\par
            PEnset(m_hPE, PEP_nCURSORMODE, PECM_POINT); // Enable Vertical Cursor Mode.\par
            PEnset(m_hPE, PEP_nCURSORPOINT, hsd.w2);    // Set Cursor's focus selected point.\par
        \}\par
\par
\tab\}\par
\tab else if ((m_nLastSelection == 30) && (HIWORD(wp) == PEWN_CURSORMOVE))\par
\tab\{\par
\tab\tab int nX;\par
\tab\tab TCHAR buffer[128];\par
\tab\tab TCHAR szDate[24];\par
        TCHAR szF[24];\par
\par
        nX = PEnget(m_hPE, PEP_nCURSORPOINT);\par
\par
\tab\tab float fHigh, fLow, fOpen, fClose, fVolume;\par
\par
\tab\tab // Get Data at closest point //\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 0, nX, &fHigh);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 1, nX, &fLow);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 2, nX, &fOpen);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 3, nX, &fClose);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, 7, nX, &fVolume);\par
\tab\tab PEvgetcell(m_hPE, PEP_szaPOINTLABELS, nX, szDate);\par
\par
        // Get numeric precision //\par
        nX = PEnget(m_hPE, PEP_nDATAPRECISION);\par
\par
        TCHAR szPrecision[10];\par
        _itot(nX, szPrecision, 10);\par
\par
\tab\tab // Place text in table annotation //\par
\tab\tab PEnset(m_hPE, PEP_nWORKINGTABLE, 0);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 11, 0, szDate);\par
\par
        lstrcpy(szF, TEXT("H:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
\tab\tab _stprintf(buffer, szF, fHigh);\par
        PEvsetcellEx(m_hPE, PEP_szaTATEXT, 12, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("L:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
\tab\tab _stprintf(buffer, szF, fLow);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 13, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("O:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
\tab\tab _stprintf(buffer, szF, fOpen);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 14, 0, buffer);\par
\par
        lstrcpy(szF, TEXT("C:%."));  lstrcat(szF, szPrecision); lstrcat(szF, TEXT("f "));\par
\tab\tab _stprintf(buffer, szF, fClose);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 15, 0, buffer);\par
\par
\tab\tab _stprintf(buffer, TEXT("V:%.0f "), fVolume);\par
\tab\tab PEvsetcellEx(m_hPE, PEP_szaTATEXT, 16, 0, buffer);\par
\par
\tab\tab PEdrawtable(m_hPE, 0, NULL);\par
\tab\tab return TRUE;\par
\par
    \}\par
\tab if ((m_nLastSelection == 32) && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
\tab\{\par
\par
\tab\tab if (PEnget(m_hPE, PEP_bPROCESSINGMOUSEMOVE))\par
\tab\tab\tab return TRUE;\par
\par
\tab\tab // If mouse is inside an axis, change it's back color to WHITE //\par
\par
\tab\tab // Determine if mouse is within an axis //\par
\par
\tab\tab POINT pt;\par
\tab\tab RECT r;\par
\tab\tab int nChangedAxisColor = -1;\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab for (int a = 0; a<16; a++)\par
\tab\tab\{\par
\tab\tab\tab PEnset(m_hPE, PEP_nWORKINGAXIS, a);\par
\par
\tab\tab\tab // test to see if this is within an Axis area //\par
\tab\tab\tab PEvget(m_hPE, PEP_rectAXIS, &r);\par
\tab\tab\tab if ((pt.x > r.left) && (pt.x < r.right) && (pt.y > r.top) && (pt.y < r.bottom))\par
\tab\tab\tab\{    \par
\tab\tab\tab\tab DWORD dwCurrentColor = PEnget(m_hPE, PEP_dwAXISBACKCOLOR);\par
\tab\tab\tab\tab if (dwCurrentColor != PERGB(255, 255, 255, 255))\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab PEnset(m_hPE, PEP_dwAXISBACKCOLOR, PERGB(255, 255, 255, 255));\par
\tab\tab\tab\tab\tab PEnset(m_hPE, PEP_dwAXISFORECOLOR, PERGB(255, 255, 0, 0));\par
\par
\tab\tab\tab\tab\tab nChangedAxisColor= a;\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab break;\par
\tab\tab\tab\}\par
\tab\tab\}\par
\par
\tab\tab if (nChangedAxisColor > -1)\par
\tab\tab\{\par
\tab\tab\tab for (int a = 0; a<16; a++)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab if (a != nChangedAxisColor)\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab PEnset(m_hPE, PEP_nWORKINGAXIS, a);\par
\tab\tab\tab\tab\tab PEnset(m_hPE, PEP_dwAXISBACKCOLOR, 1); // 1 is default, use PEP_dwGRAPHBACKCOLOR\par
\tab\tab\tab\tab\tab PEnset(m_hPE, PEP_dwAXISFORECOLOR, 1); // 1 is default, use PEP_dwGRAPHFORECOLOR\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\}\par
\tab\tab\tab PEresetimage(m_hPE, 0, 0);\par
\tab\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
\tab\tab\tab ::UpdateWindow(m_hPE);\par
\tab\tab\}\par
\par
\tab\tab return TRUE;\par
\tab\}\par
\tab else if ((m_nLastSelection == 34) && (HIWORD(wp) == PEWN_CLICKED))\par
\tab\{\par
\tab\tab // Look for table hot spot and change which subsets are visible //\par
\par
\tab\tab HOTSPOTDATA hsd;\par
\par
\tab\tab // now look at HotSpotData structure //\par
\tab\tab PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
    \par
        if (hsd.nHotSpotType == PEHS_TABLEANNOTATION + 0) // zero represents first table annotation\par
\tab\tab\{\par
\tab\tab\tab // If TYPE is SQUARESOLID, change to SQUARE and vice versa. //\par
\tab\tab\tab int nType;\par
\tab\tab\tab PEvgetcellEx(m_hPE, PEP_naTATYPE, hsd.w1, hsd.w2, &nType);\par
\par
\tab\tab\tab if (nType == PEGAT_LARGESQUARE)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab nType = PEGAT_LARGESQUARESOLID;\par
\tab\tab\tab\tab PEvsetcellEx(m_hPE, PEP_naTATYPE, hsd.w1, hsd.w2, &nType);\par
\tab\tab\tab\tab int nShow = 2;\par
\tab\tab\tab\tab PEvsetcell(m_hPE, PEP_naSUBSETSTOSHOW, hsd.w1 - 1, &nShow);\par
\tab\tab\tab\}\par
\tab\tab\tab else\par
\tab\tab\tab\{\par
\tab\tab\tab\tab nType = PEGAT_LARGESQUARE;\par
\tab\tab\tab\tab PEvsetcellEx(m_hPE, PEP_naTATYPE, hsd.w1, hsd.w2, &nType);\par
\tab\tab\tab\tab int nShow = 0;\par
\tab\tab\tab\tab PEvsetcell(m_hPE, PEP_naSUBSETSTOSHOW, hsd.w1 - 1, &nShow);\par
\tab\tab\tab\}\par
\par
\tab\tab\tab PEresetimage(m_hPE, 0, 0);\par
\tab\tab\tab ::InvalidateRect(m_hPE, 0, 0);\par
\tab\tab\tab ::UpdateWindow(m_hPE);\par
\tab\tab\}\par
\tab\tab return TRUE;\par
\tab\}\par
\tab else if ((m_nLastSelection == 105) && (HIWORD(wp) == PEWN_CURSORMOVE))\par
\tab\{\par
\tab\tab int nSubset, nPoint;\par
\tab\tab float xvalue, yvalue;\par
\tab\tab TCHAR buffer[64];\par
\par
\tab\tab nSubset = PEnget(m_hPE, PEP_nCURSORSUBSET);\par
\tab\tab nPoint = PEnget(m_hPE, PEP_nCURSORPOINT);\par
\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faXDATA, nSubset, nPoint, &xvalue);\par
\tab\tab PEvgetcellEx(m_hPE, PEP_faYDATA, nSubset, nPoint, &yvalue);\par
\par
\tab\tab _stprintf(buffer, TEXT("Cursor at %d,%d=(%.2f, %.2f"), nSubset, nPoint, xvalue, yvalue);\par
\par
\tab\tab CWnd* pParent = GetParent()->GetParent();\par
\tab\tab if (pParent) \{pParent->SetWindowText(buffer);\}\par
\par
\tab\tab pParent = AfxGetMainWnd();\par
\tab\tab if (pParent) \{pParent->SetWindowText(TEXT("PEWN_CURSORMOVE"));\}\par
\par
        DWORD dw; PEvgetcell(m_hPE, PEP_dwaSUBSETCOLORS, nSubset, &dw);\par
        PEnset(m_hPE, PEP_dwCURSORCOLOR, dw);\par
\par
\tab\tab return TRUE;\par
\tab\}\par
\tab else if ((m_nLastSelection == 107) && (HIWORD(wp) == PEWN_ZOOMIN))\par
\tab\{\par
\tab\tab // Read ZoomMaxY, ZoomMinX, ZoomMinY, and ZoomMaxX properties //\par
\tab\tab // and set a rect graph annotation at this location //\par
\tab\tab double d;\par
\tab\tab PEvget(m_hPE, PEP_fZOOMMAXY, &d);\par
\tab\tab PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &d);\par
\tab\tab PEvget(m_hPE, PEP_fZOOMMINX, &d);\par
\tab\tab PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &d);\par
\tab\tab int annotype = PEGAT_TOPLEFT;\par
\tab\tab PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 0, &annotype);\par
\par
\tab\tab PEvget(m_hPE, PEP_fZOOMMINY, &d);\par
\tab\tab PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 1, &d);\par
\tab\tab PEvget(m_hPE, PEP_fZOOMMAXX, &d);\par
\tab\tab PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 1, &d);\par
\tab\tab annotype = PEGAT_BOTTOMRIGHT;\par
\tab\tab PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 1, &annotype);\par
\par
\tab\tab PEvget(m_hPE, PEP_fZOOMMAXY, &d);\par
\tab\tab PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 2, &d);\par
\tab\tab PEvget(m_hPE, PEP_fZOOMMINX, &d);\par
\tab\tab PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 2, &d);\par
\tab\tab annotype = PEGAT_ELLIPSE_FILL;\par
\tab\tab PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 2, &annotype);\par
\tab\tab PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 2, TEXT("Region of Interest"));\par
\par
\tab\tab annotype =  PEPGS_RADIAL_CENTERED;\par
\tab\tab PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONGRADIENTSTYLE, 2, &annotype);\par
\tab\tab annotype = PERGB(5, 255, 255, 255);\par
\tab\tab PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONGRADIENTCOLOR, 2, &annotype);\par
\tab\tab annotype = PERGB(195, 55, 55, 55);\par
\tab\tab PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 2, &annotype);\par
\tab\tab annotype = PEBS_THIN_SMOOTH;\par
\tab\tab PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONBEVELSTYLE, 2, &annotype);\par
    \par
\tab\tab PEresetimage( m_hPE, 0, 0 );\tab\par
\tab\tab ::InvalidateRect(m_hPE, NULL, FALSE);\par
\tab\tab return TRUE;\par
\tab\}\par
    else if ((m_nLastSelection == 110) && bDragging && (HIWORD(wp) == PEWN_LBUTTONUP))\par
    \{\par
        bDragging = FALSE;\par
        PEnset(m_hPE, PEP_bSHOWINGQUICKANNOTATIONS, FALSE);\par
        PEnset(m_hPE, PEP_bHIDINGQUICKANNOTATIONS, TRUE);\par
        PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_XYVALUES);\par
        ::InvalidateRect(m_hPE, NULL, FALSE);\par
        ::UpdateWindow(m_hPE);\par
        return TRUE;\par
    \}\par
    else if ((m_nLastSelection == 110) && bDragging == FALSE && (HIWORD(wp) == PEWN_CLICKED))\par
    \{\par
        bDragging = TRUE;\par
\par
        int nA; int nX; int nY; double fX; double fY; POINT pt;\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        nA = 0;  nX = pt.x; nY = pt.y;\par
        PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
        // Check location and restrain to the chart's extents.\par
        // Note that you can only expect to read valid ManualMinX type\par
        // properties after chart is visible on the window.\par
        double fTempMin, fTempMax;\par
        PEvget(m_hPE, PEP_fMANUALMINX, &fTempMin);\par
        PEvget(m_hPE, PEP_fMANUALMAXX, &fTempMax);\par
        if (fX <= fTempMin)\par
            fX = fTempMin;\par
        else if (fX >= fTempMax)\par
            fX = fTempMax;\par
        PEvget(m_hPE, PEP_fMANUALMINY, &fTempMin);\par
        PEvget(m_hPE, PEP_fMANUALMAXY, &fTempMax);\par
        if (fY <= fTempMin)\par
            fY = fTempMin;\par
        else if (fY >= fTempMax)\par
            fY = fTempMax;\par
\par
        PEnset(m_hPE, PEP_nCURSORPROMPTSTYLE, PECPS_NONE);\par
\par
        dDragStartX = fX;\par
        dDragStartY = fY;\par
\par
        return TRUE;\par
    \}\par
    else if ((m_nLastSelection == 110) && bDragging && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
    \{\par
        int nA; int nX; int nY; double fX; double fY; POINT pt; int nType; DWORD dw;\par
        TCHAR szNum[64];\par
        TCHAR szText[64];\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        nA = 0;  nX = pt.x; nY = pt.y;\par
        PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
        // Check location and restrain to the chart's extents.\par
        // Note that you can only expect to read valid ManualMinX type\par
        // properties after chart is visible on the window.\par
        double fTempMin, fTempMax;\par
        PEvget(m_hPE, PEP_fMANUALMINX, &fTempMin);\par
        PEvget(m_hPE, PEP_fMANUALMAXX, &fTempMax);\par
        if (fX <= fTempMin)\par
            fX = fTempMin;\par
        else if (fX >= fTempMax)\par
            fX = fTempMax;\par
        PEvget(m_hPE, PEP_fMANUALMINY, &fTempMin);\par
        PEvget(m_hPE, PEP_fMANUALMAXY, &fTempMax);\par
        if (fY <= fTempMin)\par
            fY = fTempMin;\par
        else if (fY >= fTempMax)\par
            fY = fTempMax;\par
\par
        double dLeft, dTop, dRight, dBottom;\par
        if (dDragStartX < fX)\par
        \{\par
            dLeft = dDragStartX;\par
            dRight = fX;\par
        \}\par
        else\par
        \{\par
            dLeft = fX;\par
            dRight = dDragStartX;\par
        \}\par
\par
        if (dDragStartY > fY)\par
        \{\par
            dTop = dDragStartY;\par
            dBottom = fY;\par
        \}\par
        else\par
        \{\par
            dTop = fY;\par
            dBottom = dDragStartY;\par
        \}\par
\par
        // Index 0\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 0, &dLeft);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 0, &dTop);\par
        nType = -(PEGAT_TOPLEFT + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 0, &nType);\par
\par
        // Index 1\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 1, &dRight);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 1, &dBottom);\par
        nType = -(PEGAT_BOTTOMRIGHT + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 1, &nType);\par
\par
        // Index 2\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 2, &dRight);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 2, &dBottom);\par
        nType = -(PEGAT_ROUNDRECT_FILL + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 2, &nType);\par
        dw = PERGB(70, 198, 198, 198); PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 2, &dw);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 2, TEXT(""));\par
        nType = PEGS_RADIAL_BOTTOM_RIGHT + 1;  PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONGRADIENTSTYLE, 2, &nType);\par
        dw = PERGB(170, 255, 255, 255); PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONGRADIENTCOLOR, 2, &dw);\par
\par
        // Index 3\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 3, &dRight);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 3, &dBottom);\par
        nType = -(PEGAT_ROUNDRECT_MEDIUM + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 3, &nType);\par
        dw = PERGB(255, 255, 255, 255); PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 3, &dw);\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 3, TEXT(""));\par
\par
        double CenteredXInLog = (log10(fX) + log10(dDragStartX)) / 2.0F;\par
        double CenteredYInLog = (log10(fY) + log10(dDragStartY)) / 2.0F;\par
\par
        // Index 4\par
        double dX = (fX - dDragStartX);\par
        _sntprintf(szNum, 64, TEXT("%.2f"), dX); \par
        dX = pow(10.0F, CenteredXInLog); PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 4, &dX);\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 4, &dTop);\par
        dw = PERGB(255, 0, 255, 0); PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 4, &dw);\par
        nType = -(PEGAT_NOSYMBOL + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 4, &nType);\par
        szText[0] = 0;  lstrcat(szText, TEXT("|c<~ "));\par
        lstrcat(szText, szNum);\par
        lstrcat(szText, TEXT(" ~>"));\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 4, szText);\par
\par
        // Index 5\par
        PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONX, 5, &dRight);\par
        double dY = (fY - dDragStartY);\par
        _sntprintf(szNum, 64, TEXT("%.2f"), dY); \par
        dY = pow(10.0F, CenteredYInLog); PEvsetcell(m_hPE, PEP_faGRAPHANNOTATIONY, 5, &dY);\par
        dw = PERGB(255, 0, 255, 0); PEvsetcell(m_hPE, PEP_dwaGRAPHANNOTATIONCOLOR, 5, &dw);\par
        nType = -(PEGAT_NOSYMBOL + 1); PEvsetcell(m_hPE, PEP_naGRAPHANNOTATIONTYPE, 5, &nType);\par
        szText[0] = 0; lstrcat(szText, TEXT("|D<~ "));\par
        lstrcat(szText, szNum);\par
        lstrcat(szText, TEXT(" ~>"));\par
        PEvsetcell(m_hPE, PEP_szaGRAPHANNOTATIONTEXT, 5, szText);\par
\par
        PEnset(m_hPE, PEP_nGRAPHANNOTATIONTEXTSIZE, 120);\par
        PEnset(m_hPE, PEP_bSHOWGRAPHANNOTATIONS, TRUE);\par
        PEnset(m_hPE, PEP_bSHOWANNOTATIONS, TRUE);\par
\par
        PEnset(m_hPE, PEP_bSHOWINGQUICKANNOTATIONS, TRUE);\par
\par
        ::InvalidateRect(m_hPE, NULL, FALSE);\par
        ::UpdateWindow(m_hPE);\par
        return TRUE;\par
    \}\par
\tab else if ((m_nLastSelection == 125) && (HIWORD(wp) == PEWN_CLICKED))\par
\tab\{\par
\tab\tab HOTSPOTDATA hsd;\par
\par
\tab\tab // now look at HotSpotData structure //\par
\tab\tab PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
    \par
        if (hsd.nHotSpotType == PEHS_DATAPOINT) \par
\tab\tab\{\par
\tab\tab\tab // get ydata value at hot spot //\par
           bDragging = TRUE;          //Start dragging process, set flag to true\par
           nDragIndexS = hsd.w1;      //Store subset index\par
           nDragIndexP = hsd.w2;      //Store point index\par
\tab\tab\}\par
\tab\}\par
\tab else if ((m_nLastSelection == 125) && bDragging && (HIWORD(wp) == PEWN_MOUSEMOVE))\par
\tab\{\par
\tab     int nA; int nX; int nY; double fX; double fY; POINT pt;\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab nA = 0;  nX = pt.x; nY = pt.y;\par
\tab\tab PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
\par
       // Check location and restrain to the chart's extents.\par
       // Note that you can only expect to read valid ManualMinX type\par
       // properties after chart is visible on the window.\par
       double fTempMin, fTempMax;\par
\tab    PEvget(m_hPE, PEP_fMANUALMINX, &fTempMin);\par
\tab    PEvget(m_hPE, PEP_fMANUALMAXX, &fTempMax);\par
       if (fX <= fTempMin)\par
          fX = fTempMin;\par
       else if (fX >= fTempMax)\par
          fX = fTempMax;\par
\par
\tab    PEvget(m_hPE, PEP_fMANUALMINY, &fTempMin);\par
\tab    PEvget(m_hPE, PEP_fMANUALMAXY, &fTempMax);\par
       if (fY <= fTempMin)\par
          fY = fTempMin;\par
       else if (fY >= fTempMax)\par
          fY = fTempMax;\par
\par
       // Change XData and YData to new location //\par
\tab    float fx = (float) fX;\par
\tab    float fy = (float) fY;\par
       PEvsetcellEx(m_hPE, PEP_faXDATA, nDragIndexS, nDragIndexP, &fx);\par
       PEvsetcellEx(m_hPE, PEP_faYDATA, nDragIndexS, nDragIndexP, &fy);\par
\par
       // Performs a PEreinitializecustoms, PEresetimage, and InvalidateRect //\par
       PEreinitializecustoms(m_hPE);\par
\tab    PEresetimage(m_hPE, 0, 0);\par
\tab    ::InvalidateRect(m_hPE, NULL, FALSE);\par
\par
       // Windows functions causes an immediate WM_PAINT to be triggered //\par
       ::UpdateWindow(m_hPE);\par
\tab\}\par
\tab else if ((m_nLastSelection == 125) && bDragging && (HIWORD(wp) == PEWN_LBUTTONUP))\par
\tab\{\par
\tab\tab bDragging = FALSE;\par
\tab\}\par
\tab else if ((m_nLastSelection == 123) && (HIWORD(wp) == PEWN_CLICKED) )\par
\tab\{\par
\tab\tab HOTSPOTDATA hsd;\par
\tab\tab PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
        if (hsd.nHotSpotType == PEHS_TABLEANNOTATION + 0) // zero represents first table annotation\par
\tab\tab\{\par
            if (bPlayingSong == 0)\par
            \{\par
                ::SendMessage(m_hPE, WM_COMMAND, (WPARAM)MAKELONG(53053, 0), 0L); // undo zoom\par
\par
                PEnset(m_hPE, PEP_nALLOWZOOMING, 0);\par
                AfxBeginThread(MyThreadProc, this->m_hWnd);\par
            \}\par
            else\par
            \{\par
                bPlayingSong = 0;\par
                ::PostMessage(this->m_hWnd, WM_DEMO_SONG_POSITION, 1, 0);\par
            \}\par
            return CView::OnCommand(wp, lp);\par
        \}\par
        if (bPlayingSong == 1)  // this code will enable changing play position by click location\par
        \{\par
\tab         int nA; int nX; int nY; double fX; double fY; POINT pt;\tab RECT r;\par
\tab\tab     PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
            int nLT;\par
            PEvgetcell(m_hPE, PEP_naVERTLINEANNOTATIONTYPE, 0, &nLT);\par
            if (nLT != -1)  // -1 means hidden, so if not hidden allow moving position\par
            \{\par
                PEvget(m_hPE, PEP_rectGRAPH, &r); // test to see if this is within grid area //\par
                if ((pt.x > r.left) && (pt.x < r.right) && (pt.y > r.top) && (pt.y < r.bottom))\par
                \{\par
                    nA = 0; nX = pt.x; nY = pt.y; //Initialize nA, nX and nY with mouse location\par
                    PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
                    bPlayingSong = (DWORD)fX;\par
                \}\par
\par
                PEvget(m_hPE, PEP_rectZOOMWINDOW, &r); // test to see if this is within grid area //\par
                if ((pt.x > r.left) && (pt.x < r.right) && (pt.y > r.top) && (pt.y < r.bottom))\par
                \{\par
                    nA = 0; nX = pt.x; nY = pt.y; //Initialize nA, nX and nY with mouse location\par
                    PEconvpixeltograph(m_hPE, &nA, &nX, &nY, &fX, &fY, 0, 0, 0);\par
                    bPlayingSong = (DWORD)fX;\par
                \}\par
                return CView::OnCommand(wp, lp);\par
\par
            \}\par
        \}\par
    \}\par
\tab else if ((m_nLastSelection == 123) && (HIWORD(wp) == PEWN_CUSTOMGRIDNUMBERS))\par
\tab\{\par
\tab\tab // Custom grid number formatting //\par
\par
\tab\tab // typedef struct tagCUSTOMGRIDNUMBERS\par
\tab\tab // \{\par
\tab\tab // \tab    int      nAxisType;    // 0=Y, 1=RIGHT Y, 2=X, 3=TOP X\par
\tab\tab //\tab    int\tab\tab nAxisIndex;   // only used for y and ry axes, index number relates to PEP_nWORKINGAXIS\par
\tab\tab // \tab    double   dNumber;\tab   // number to format\par
\tab\tab //\tab    char\tab     szData[48];   // PEvget, gets default format string; PEvset sets completed formatted string\par
\tab\tab // \} CUSTOMGRIDNUMBERS; \par
\par
\tab\tab CUSTOMGRIDNUMBERS cgn;\par
\tab\tab PEvget(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn);\par
\par
\tab\tab if (cgn.nAxisType == 2)\par
\tab\tab\{\par
            double dMinutes, dSeconds, dRem;\par
            int nMin, nSec;\par
            dSeconds = (cgn.dNumber / 16000);\par
            dMinutes = dSeconds / 60.0F;\par
            nMin = (int) dMinutes;\par
            dRem = dSeconds - (60.0F * nMin);\par
            nSec = (int) dRem;\par
            TCHAR  buffer[48]; \par
            _stprintf(buffer, TEXT("%d:%.3f"), nMin, dRem);\par
    \tab\tab lstrcpy(&cgn.szData[0], buffer);\par
\tab\tab\}\par
\par
\tab\tab PEvset(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn, 1);\par
\tab\}\par
   \tab else if ((m_nLastSelection == 123) && (HIWORD(wp) == PEWN_CUSTOMMENU))\par
\tab\{\par
\tab\tab int nM = PEnget(m_hPE, PEP_nLASTMENUINDEX);\par
\tab\tab if (nM == 1) // play\par
\tab\tab\{\par
            if (bPlayingSong == 0)\par
            \{\par
                ::SendMessage(m_hPE, WM_COMMAND, (WPARAM)MAKELONG(53053, 0), 0L);  // undo zoom \par
\par
                PEnset(m_hPE, PEP_nALLOWZOOMING, 0);\par
                AfxBeginThread(MyThreadProc, this->m_hWnd);\par
            \}\par
            else\par
            \{\par
                bPlayingSong = 0;\par
                ::PostMessage(this->m_hWnd, WM_DEMO_SONG_POSITION, 1, 0);\par
            \}\par
        \}\par
    \}\par
\tab else if ((m_nLastSelection == 127) && (HIWORD(wp) == PEWN_CUSTOMMENU))\par
\tab\{\par
\tab\tab // Custom Menu was clicked //\par
\tab\tab int nM = PEnget(m_hPE, PEP_nLASTMENUINDEX);\par
\tab\tab int nSM = PEnget(m_hPE, PEP_nLASTSUBMENUINDEX);\par
\par
\tab\tab if (nM == 1)\par
\tab\tab\{\par
\tab\tab\tab // Reverse option //\par
\tab\tab\tab int n;\par
\tab\tab\tab PEvgetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, 0, &n);\par
\tab\tab\tab if (n == PECMS_UNCHECKED)\par
\tab\tab\tab\tab n = PECMS_CHECKED;\par
\tab\tab\tab else\par
\tab\tab\tab\tab n = PECMS_UNCHECKED;\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, 0, &n);\par
\tab\tab\tab return TRUE;\par
\tab\tab\}\par
\par
\tab\tab if (nM == 2)\par
\tab\tab\{\par
\tab\tab\tab // Option Explicit so first set all to unchecked //\par
\tab\tab\tab int n = PECMS_UNCHECKED;\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, 1, &n);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, 2, &n);\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, 3, &n);\par
\par
\tab\tab\tab // Next set the selected item //\par
\tab\tab\tab n = PECMS_CHECKED;\par
\tab\tab\tab PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, nM, nSM, &n);\par
\tab\tab\tab return TRUE;\par
\tab\tab\}\par
\par
\tab\tab if (nM == 3)\par
\tab\tab\{\par
\tab\tab\tab // Perform the actual print //\par
\par
\tab\tab\tab // Get Mono/Color menu setting //\par
\tab\tab\tab int nMono;\par
\tab\tab\tab PEvgetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 1, 0, &nMono);\par
\par
\tab\tab\tab // Get Orientation setting //\par
\tab\tab\tab int n, nOrient;\par
\tab\tab\tab PEvgetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 2, 1, &n);\par
\tab\tab\tab if (!n)\par
\tab\tab\tab\tab nOrient = 2;  // Portrait\par
\tab\tab\tab else\par
\tab\tab\tab\tab nOrient = 1;  // Landscape\par
\par
\tab\tab\tab // Save current viewing style type properties //\par
\tab\tab\tab int nQS = PEnget(m_hPE, PEP_nQUICKSTYLE);\par
\tab\tab\tab int nBG = PEnget(m_hPE, PEP_bBITMAPGRADIENTMODE);\par
            int nRE = PEnget(m_hPE, PEP_nRENDERENGINE);\par
            PEnset(m_hPE, PEP_nRENDERENGINE, PERE_HYBRID);\par
\par
\tab\tab\tab // Set Viewing Style with respect to retrieved menu state //\par
\tab\tab\tab if (nMono)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_nVIEWINGSTYLE, PEVS_MONO);\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_dwMONOGRAPHBACKCOLOR, 1);  // set to transparent setting\par
\par
\tab\tab\tab\tab // Make sure white is used as background \par
\tab\tab\tab\tab PEnset(m_hPE, PEP_nDESKGRADIENTSTYLE, PEGS_VERTICAL);\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_dwDESKGRADIENTSTART, PERGB( 255,255,255,255));\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_dwDESKGRADIENTEND, PERGB( 255,255,255,255));\par
\tab\tab\tab\par
\tab\tab\tab\tab // Make sure white is used as background \par
\tab\tab\tab\tab PEnset(m_hPE, PEP_nGRAPHGRADIENTSTYLE, PEGS_VERTICAL);\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_dwGRAPHGRADIENTSTART, PERGB( 255,255,255,255));\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_dwGRAPHGRADIENTEND, PERGB( 255,255,255,255));\par
\par
\tab\tab\tab\tab // Remove any possible desk bmp //\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_nDESKBMPSTYLE, PEBS_NO_BMP);\par
\tab\tab\tab\}\par
\tab\tab\tab else\par
\tab\tab\tab\{\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_nVIEWINGSTYLE, PEVS_COLOR);\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_dwGRAPHBACKCOLOR, 1); // set to transparent setting\par
\par
\tab\tab\tab\tab // Force a white graph background //\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_nGRAPHGRADIENTSTYLE, PEGS_VERTICAL);\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_dwGRAPHGRADIENTSTART, PERGB( 255,255,255,255));\par
\tab\tab\tab\tab PEnset(m_hPE, PEP_dwGRAPHGRADIENTEND, PERGB( 255,255,255,255));\par
\tab\tab\tab\}\par
\par
\tab\tab\tab // Set some other properties good for mono printing //\par
\tab\tab\tab PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_NONE);\par
\tab\tab\tab PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_DOT);\par
\par
\tab\tab\tab // Set background bitmap/example logo //\par
\tab\tab\tab PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, TRUE);\par
\tab\tab\tab PEnset(m_hPE, PEP_nGRAPHBMPSTYLE, PEBS_BITBLT_BOTTOM_RIGHT);\par
\tab\tab\tab PEszset(m_hPE, PEP_szGRAPHBMPFILENAME, TEXT("getthep.png"));\par
\tab\tab\tab //! Note, GraphBackColor or MonoGraphBackColor is set above //\par
\tab\tab\tab PEreinitializecustoms(m_hPE);\par
\par
\tab\tab\tab PEprintgraph(m_hPE, 0, 0, nOrient);\par
\par
\tab\tab\tab // Reset properties back to original //\par
            PEnset(m_hPE, PEP_nRENDERENGINE, nRE);\par
\tab\tab\tab PEnset(m_hPE, PEP_bBITMAPGRADIENTMODE, nBG);\par
\tab\tab\tab PEnset(m_hPE, PEP_nQUICKSTYLE, nQS);\par
\tab\tab\tab PEnset(m_hPE, PEP_nDATASHADOWS, PEDS_SHADOWS);\par
\tab\tab\tab PEnset(m_hPE, PEP_nGRIDSTYLE, PEGS_THIN);\par
\tab\tab\tab PEnset(m_hPE, PEP_nVIEWINGSTYLE, PEVS_COLOR);\par
\par
\tab\tab\tab PEreinitializecustoms(m_hPE);\par
\tab\tab\tab PEresetimage(m_hPE, 0, 0);\par
\par
\tab\tab\}\par
\tab\}\par
\tab else if ((m_nLastSelection == 132) && (HIWORD(wp) == PEWN_CUSTOMGRIDNUMBERS))\par
\tab\{\par
\tab\tab // Custom grid number formatting //\par
\par
\tab\tab // typedef struct tagCUSTOMGRIDNUMBERS\par
\tab\tab // \{\par
\tab\tab // \tab    int      nAxisType;    // 0=Y, 1=RIGHT Y, 2=X, 3=TOP X\par
\tab\tab //\tab    int\tab\tab nAxisIndex;   // only used for y and ry axes, index number relates to PEP_nWORKINGAXIS\par
\tab\tab // \tab    double   dNumber;\tab   // number to format\par
\tab\tab //\tab    char\tab     szData[48];   // PEvget, gets default format string; PEvset sets completed formatted string\par
\tab\tab // \} CUSTOMGRIDNUMBERS; \par
\par
\tab\tab CUSTOMGRIDNUMBERS cgn;\par
\tab\tab PEvget(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn);\par
\par
\tab\tab if (cgn.nAxisType == 0)\par
\tab\tab\{\par
\tab\tab\tab // Left Y Axis //\par
\tab\tab\tab if (cgn.dNumber == -400.0)\par
\tab\tab\tab\tab lstrcpy(&cgn.szData[0], TEXT("Low Value"));\par
\tab\tab\tab else if (cgn.dNumber == -200.0)\par
\tab\tab\tab\tab lstrcpy(&cgn.szData[0], TEXT("Medium Low Value"));\par
\tab\tab\tab else if (cgn.dNumber == 0.0)\par
\tab\tab\tab\tab lstrcpy(&cgn.szData[0], TEXT("Medium Value"));\par
\tab\tab\tab else if (cgn.dNumber == 200.0)\par
\tab\tab\tab\tab lstrcpy(&cgn.szData[0], TEXT("Medium High Value"));\par
\tab\tab\tab else if (cgn.dNumber == 400.0)\par
\tab\tab\tab\tab lstrcpy(&cgn.szData[0], TEXT("High Value"));\par
\tab\tab\}\par
\par
\tab\tab PEvset(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn, 1);\par
\tab\}\par
\tab else if ((m_nLastSelection == 138) && (HIWORD(wp) == PEWN_CUSTOMGRIDNUMBERS))\par
\tab\{\par
\tab\tab // Custom grid number formatting //\par
\par
\tab\tab // typedef struct tagCUSTOMGRIDNUMBERS\par
\tab\tab // \{\par
\tab\tab // \tab    int      nAxisType;    // 0=Y, 1=RightY, 2=X, 3=TopX, 4=ExtraX, 5=ExtraTopX, 6=TopDate, 7=ZoomBottomX, 8=ZoomTopDate\par
\tab\tab //\tab    int\tab\tab nAxisIndex;   // only used for y and ry axes, index number relates to PEP_nWORKINGAXIS\par
\tab\tab // \tab    double   dNumber;\tab   // number to format\par
\tab\tab //\tab    char\tab     szData[48];   // PEvget, gets default format string; PEvset sets completed formatted string\par
\tab\tab // \} CUSTOMGRIDNUMBERS; \par
\par
\tab\tab CUSTOMGRIDNUMBERS cgn;\par
\tab\tab PEvget(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn);\par
\par
\tab\tab if (cgn.nAxisType == 2 || cgn.nAxisType == 7)\par
\tab\tab\{\par
            int nDays, nHours, nMinutes, nSecs;\par
            nDays = 0; nHours = 0; nMinutes = 0; nSecs = 0;\par
            double dDaysRemainer, dHrsRemainer, dMinRemainer;\par
            dDaysRemainer = 0; dHrsRemainer = 0; dMinRemainer = 0;\par
            double d = cgn.dNumber; \par
            nDays = (int)(d / 86400);\par
            dDaysRemainer = ((int) d)% 86499;\par
            nHours = (int)(dDaysRemainer / 3600);\par
            dHrsRemainer = ((int) dDaysRemainer) % 3600; \par
            nMinutes = (int)(dHrsRemainer / 60);\par
            dMinRemainer = ((int) dHrsRemainer) % 3600; \par
            nSecs = (int)dMinRemainer;\par
            TCHAR  buffer[48]; \par
            _stprintf(buffer, TEXT("%d:%d:%d:%d"), nDays, nHours, nMinutes, nSecs);\par
    \tab\tab lstrcpy(&cgn.szData[0], buffer);\par
\tab\tab\}\par
\par
\tab\tab PEvset(m_hPE, PEP_structCUSTOMGRIDNUMBERS, &cgn, 1);\par
\tab\}\par
\tab else if ((m_nLastSelection == 123) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))\par
\tab\{\par
        TCHAR buffer[128];\par
\par
\tab\tab double dX;\par
\tab\tab PEvget(m_hPE, PEP_fCURSORVALUEX, &dX);\par
        double dMinutes, dSeconds, dRem;\par
        int nMin, nSec;\par
        dSeconds = (dX / 16000);\par
        dMinutes = dSeconds / 60.0F;\par
        nMin = (int) dMinutes;\par
        dRem = dSeconds - (60.0F * nMin);\par
        nSec = (int) dRem;\par
        TCHAR  sbuffer[48]; \par
        _stprintf(sbuffer, TEXT("%d:%.3f"), nMin, dRem);\par
\par
        double dY;\par
        PEvget(m_hPE, PEP_fCURSORVALUEY, &dY);\par
        _stprintf(buffer, TEXT("Amplitude: %.3f \\n Time: %s"), dY, sbuffer);\par
        PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\}\par
\tab else if ((m_nLastSelection == 120) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))\par
\tab\{\par
\tab\tab double dX;\par
\tab\tab PEvget(m_hPE, PEP_fCURSORVALUEX, &dX);\par
\tab\tab double dY;\par
\tab\tab PEvget(m_hPE, PEP_fCURSORVALUEY, &dY);\par
\tab\tab double dZ;\par
\tab\tab PEvget(m_hPE, PEP_fCURSORVALUEZ, &dZ);\par
\par
        TCHAR  buffer[128]; \par
\tab\tab _stprintf(buffer, TEXT("X:%.3f\\nY:%.3f\\nZ:%.3f"), dX, dY, dZ);\par
\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\}\par
\tab else if ((m_nLastSelection == 400) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))\par
\tab\{\par
\tab\tab double dY;\par
\tab\tab PEvget(m_hPE, PEP_fCURSORVALUEY, &dY);\par
        TCHAR  buffer[48]; \par
\tab\tab _stprintf(buffer, TEXT("My Prompt:%d        \\n%.3f"), 1, dY);\par
\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\}\par
\tab else if ((m_nLastSelection == 123) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))\par
\tab\{\par
\tab\tab POINT pt;\par
\tab\tab HOTSPOTDATA hsd;\par
\tab\tab TCHAR buffer[128];\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab // call PEgethotspot //\par
\tab\tab PEgethotspot(m_hPE, pt.x, pt.y);\par
    \par
\tab\tab // now look at HotSpotData structure //\par
\tab\tab PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
\tab\tab if (hsd.nHotSpotType == PEHS_TABLEANNOTATION) \par
\tab\tab\{\par
\tab\tab\tab _stprintf(buffer, TEXT("TableAnnotation"), 0);\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\}\par
\tab\tab else if (hsd.nHotSpotType == PEHS_MAINTITLE ) \par
\tab\tab\{\par
\tab\tab\tab _stprintf(buffer, TEXT("Title"), 0);\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\}\par
\tab\tab else\par
\tab\tab\{\par
\tab\tab\tab buffer[0] = (TCHAR) 0;\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\}\par
\tab\}\par
\tab else if ((m_nLastSelection == 400) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))\par
\tab\{\par
\tab\tab double dY;\par
\tab\tab PEvget(m_hPE, PEP_fCURSORVALUEY, &dY);\par
        TCHAR  buffer[48]; \par
\tab\tab _stprintf(buffer, TEXT("Outside Surface"), 0);\par
\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\}\par
\tab else if ((m_nLastSelection == 402) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))\par
\tab\{\par
\tab\tab double dY;\par
\tab\tab PEvget(m_hPE, PEP_fCURSORVALUEY, &dY);\par
        TCHAR  buffer[64]; \par
\tab\tab _stprintf(buffer, TEXT("Surface with Plateaus:\\n %.3f"), dY);\par
\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\}\par
    else if ((m_nLastSelection == 403) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))\par
    \{\par
        TCHAR  buffer[64];\par
        double dY;\par
        PEvget(m_hPE, PEP_fCURSORVALUEY, &dY);\par
\par
        POINT pt;\par
        HOTSPOTDATA hsd;\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        // call PEgethotspot //\par
        PEgethotspot(m_hPE, pt.x, pt.y);\par
\par
        // now look at HotSpotData structure //\par
        PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
        if (hsd.nHotSpotType == PEHS_DATAPOINT)\par
        \{\par
            _stprintf(buffer, TEXT("Surface data\\nY=%.3f"), dY);\par
            PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
        \}\par
    \}\par
    else if ((m_nLastSelection == 403) && PEnget(m_hPE, PEP_bSHOWANNOTATIONS) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGOTHERTEXT))\par
    \{\par
        TCHAR  buffer[64];\par
        double dY;\par
        PEvget(m_hPE, PEP_fCURSORVALUEY, &dY);\par
\par
        POINT pt;\par
        HOTSPOTDATA hsd;\par
\par
        // get last mouse location within control //\par
        PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
        // call PEgethotspot //\par
        PEgethotspot(m_hPE, pt.x, pt.y);\par
\par
        // now look at HotSpotData structure //\par
        PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
        if (hsd.nHotSpotType == PEHS_ANNOTATION)\par
        \{\par
            double dX, dY, dZ;\par
            PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, hsd.w1, &dX);\par
            PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, hsd.w1, &dZ);\par
            PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, hsd.w1, &dY);\par
            _stprintf(buffer, TEXT("Well data\\nX=%.3f \\nZ=%.3f \\nY=%.3f"), dX, dZ, dY);\par
            PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
        \}\par
    \}\par
\par
\tab else if ((m_nLastSelection == 105) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGDATATEXT))\par
\tab\{\par
\tab\tab // v9 features \par
\tab\tab double dX;\par
\tab\tab PEvget(m_hPE, PEP_fCURSORVALUEX, &dX);\par
        TCHAR  buffer[96]; \par
\par
\tab\tab double dY;\par
\tab\tab PEvget(m_hPE, PEP_fCURSORVALUEY, &dY);\par
\par
\tab\tab _stprintf(buffer, TEXT("X Axis: %.3f  \\nY Axis: %.3f"), dX, dY);\par
\par
\tab\tab if (dY < 0.0F)\par
\tab\tab\{\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTOOLTIPTITLE, TEXT("N E G A T I V E"));\par
\tab\tab\tab PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPBKCOLOR, PERGB(0,0,0,0));\par
\tab\tab\tab PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPTEXTCOLOR, PERGB(0,245,0,0));\par
\tab\tab\}\par
\tab\tab else\par
\tab\tab\{\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTOOLTIPTITLE, TEXT("P O S I T I V E"));\par
\tab\tab\tab PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPBKCOLOR, PERGB(0,50,50,50));\par
\tab\tab\tab PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPTEXTCOLOR, PERGB(0,0,225,0));\par
\tab\tab\}\par
\par
\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\par
\tab\}\par
\tab else if ((m_nLastSelection == 105) && (HIWORD(wp) == PEWN_CUSTOMTRACKINGOTHERTEXT))\par
\tab\{\par
\tab\tab // v9 features \par
\tab\tab POINT pt;\par
\tab\tab HOTSPOTDATA hsd;\par
\tab\tab TCHAR buffer[128];\par
\par
\tab\tab // get last mouse location within control //\par
\tab\tab PEvget(m_hPE, PEP_ptLASTMOUSEMOVE, &pt);\par
\par
\tab\tab // call PEgethotspot //\par
\tab\tab PEgethotspot(m_hPE, pt.x, pt.y);\par
    \par
\tab\tab // now look at HotSpotData structure //\par
\tab\tab PEvget(m_hPE, PEP_structHOTSPOTDATA, &hsd);\par
\par
\tab\tab PEszset(m_hPE, PEP_szTRACKINGTOOLTIPTITLE, TEXT("Other Hot Spots"));\par
\tab\tab PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPBKCOLOR, PERGB(0,80,80,80));\par
\tab\tab PEnset(m_hPE, PEP_dwTRACKINGTOOLTIPTEXTCOLOR, PERGB(0,245,245,240));\par
\par
\tab\tab if (hsd.nHotSpotType == PEHS_SUBSET) \par
\tab\tab\{\par
\tab\tab\tab _stprintf(buffer, TEXT("Subset Label"), 0);\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\}\par
\tab\tab else if (hsd.nHotSpotType == PEHS_MAINTITLE ) \par
\tab\tab\{\par
\tab\tab\tab _stprintf(buffer, TEXT("Main Title"), 0);\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\}\par
\tab\tab else if (hsd.nHotSpotType == PEHS_YAXISLABEL ) \par
\tab\tab\{\par
\tab\tab\tab _stprintf(buffer, TEXT("Y Axis Label"), 0);\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\}\par
\tab\tab else if (hsd.nHotSpotType == PEHS_XAXISLABEL ) \par
\tab\tab\{\par
\tab\tab\tab _stprintf(buffer, TEXT("X Axis Label"), 0);\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\}\par
\tab\tab else if (hsd.nHotSpotType == PEHS_YAXISGRIDNUMBER ) \par
\tab\tab\{\par
\tab\tab\tab double dValue;\par
\tab\tab\tab PEvgetcellW(m_hPE, PEP_faGRIDHOTSPOTVALUE, hsd.w2, &dValue);\par
\par
\tab\tab\tab _stprintf(buffer, TEXT("Y Axis Grid Number\\n Value: %.3f"), dValue);\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\}\par
\tab\tab else if (hsd.nHotSpotType == PEHS_XAXISGRIDNUMBER ) \par
\tab\tab\{\par
\tab\tab\tab double dValue;\par
\tab\tab\tab PEvgetcellW(m_hPE, PEP_faGRIDHOTSPOTVALUE, hsd.w2, &dValue);\par
\par
\tab\tab\tab _stprintf(buffer, TEXT("X Axis Grid Number\\n Value: %.3f"), dValue);\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\}\par
\tab\tab else\par
\tab\tab\{\par
\tab\tab\tab buffer[0] = (TCHAR) 0;\par
\tab\tab\tab PEszset(m_hPE, PEP_szTRACKINGTEXT, buffer);\par
\tab\tab\}\par
    \}\par
    if ((m_nLastSelection == 400 || m_nLastSelection == 401 || \par
            m_nLastSelection == 402 || m_nLastSelection == 403 || \par
               m_nLastSelection == 404 || m_nLastSelection == 408) && (HIWORD(wp) == PEWN_KEYDOWN))  // v9.5\par
    \{\par
        KEYDOWNDATA key;\par
        PEvget(m_hPE, PEP_structKEYDOWNDATA, &key);\par
\par
        if (key.nChar >= 48 && key.nChar <= 57)\par
        \{\par
            int nAnnotation = key.nChar - 48;\par
\par
            if (PEnget(m_hPE, PEP_nVIEWINGMODE) != PEVM_DATA_LOCATION)\par
            \{\par
                double d;\par
                Point3D p3;  // Get location to graph annotation, index \par
                PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, m_pAnnotationStartIndices[nAnnotation], &d);  p3.X = (float)d;\par
                PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, m_pAnnotationStartIndices[nAnnotation], &d);  p3.Y = (float)d;\par
                PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, m_pAnnotationStartIndices[nAnnotation], &d);  p3.Z = (float)d;\par
                PEvset(m_hPE, PEP_structVIEWINGAT, &p3, 1);\par
                PEnset(m_hPE, PEP_nVIEWINGMODE, PEVM_DATA_LOCATION);\par
                int nCMS = PECMS_UNCHECKED;   PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 0, 0, &nCMS);\par
                m_nCurrentAnnotation = nAnnotation;\par
\par
                if (m_nLastSelection == 403)\par
                \{\par
                    if (PEnget(m_hPE, PEP_bAUTOROTATION)) \{ PEnset(m_hPE, PEP_bAUTOROTATION, FALSE); \}\par
                    PEnset(m_hPE, PEP_bALLOWROTATION, FALSE);\par
                    if (nAnnotation < 3) \{ PEnset(m_hPE, PEP_nVIEWINGHEIGHT, 85); \}\par
                    float f = 2.4F; PEvset(m_hPE, PEP_f3DXZOOM, &f, 1);\par
                    m_nAnimationViewIndex = 0;\par
                    // Start Timer //\par
                    m_nTimer = SetTimer(TIMER1, 25, NULL);\par
                \}\par
                else if (m_nLastSelection == 401)\par
                \{\par
                    float f = -0.4F; PEvset(m_hPE, PEP_f3DXZOOM, &f, 1);\par
                \}\par
                else if (m_nLastSelection == 404)\par
                \{\par
                    float f = 16.0F; PEvset(m_hPE, PEP_f3DXZOOM, &f, 1);\par
                \}\par
                else \par
                \{\par
                    float f = 1.5F; PEvset(m_hPE, PEP_f3DXZOOM, &f, 1);\par
                \}\par
\par
            \}\par
            else\par
            \{\par
                if (m_nCurrentAnnotation == nAnnotation)\par
                \{\par
                    PEnset(m_hPE, PEP_nHIGHLIGHTGRAPHANNOTATIONINDEX, -1);  // resets any potential highlight \par
\par
                    // stop timer \par
                    KillTimer(m_nTimer);\par
                    m_nTimer = 0;\par
\par
                    PEnset(m_hPE, PEP_bALLOWROTATION, TRUE);\par
                    m_nAnimationViewIndex = 0;\par
                    // switch back to Center mode\par
                    PEnset(m_hPE, PEP_nVIEWINGMODE, PEVM_CENTER);\par
                    int nCMS = PECMS_CHECKED;   PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 0, 0, &nCMS);\par
\par
                    if (m_nLastSelection == 400)\par
                    \{\par
                        float f = -1.5F; PEvset(m_hPE, PEP_f3DXZOOM, &f, 1);\par
                    \}\par
                    else if (m_nLastSelection == 401)\par
                    \{\par
                        float f = -0.4F; PEvset(m_hPE, PEP_f3DXZOOM, &f, 1);\par
                    \}\par
                    else if (m_nLastSelection == 404)\par
                    \{\par
                        float f = -2.0F; PEvset(m_hPE, PEP_f3DXZOOM, &f, 1);\par
                    \}\par
                    else\par
                    \{\par
                        float f = .2F; PEvset(m_hPE, PEP_f3DXZOOM, &f, 1);\par
                    \}\par
                \}\par
                else\par
                \{\par
                    // change the focus location //\par
                    double d;\par
                    Point3D p3;  // Get location to graph annotation, index \par
                    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONX, m_pAnnotationStartIndices[nAnnotation], &d);  p3.X = (float)d;\par
                    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONY, m_pAnnotationStartIndices[nAnnotation], &d);  p3.Y = (float)d;\par
                    PEvgetcell(m_hPE, PEP_faGRAPHANNOTATIONZ, m_pAnnotationStartIndices[nAnnotation], &d);  p3.Z = (float)d;\par
                    PEvset(m_hPE, PEP_structVIEWINGAT, &p3, 1);\par
                    PEnset(m_hPE, PEP_nVIEWINGMODE, PEVM_DATA_LOCATION);\par
                    int nCMS = PECMS_UNCHECKED;   PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 0, 0, &nCMS);\par
                    m_nCurrentAnnotation = nAnnotation;\par
\par
                    if (m_nLastSelection == 403)\par
                    \{\par
                        if (PEnget(m_hPE, PEP_bAUTOROTATION)) \{ PEnset(m_hPE, PEP_bAUTOROTATION, FALSE); \}\par
                        PEnset(m_hPE, PEP_bALLOWROTATION, FALSE);\par
                        m_nAnimationViewIndex = 0;\par
                        // Start Timer //\par
                        m_nTimer = SetTimer(TIMER1, 25, NULL);\par
                    \}\par
\par
                \}\par
\par
            \}\par
\par
            ::InvalidateRect(m_hPE, NULL, FALSE);\par
        \}\par
    \}\par
\par
    if ( (PEnget(m_hPE, PEP_nOBJECTTYPE) == PECONTROL_3D) && (HIWORD(wp) == PEWN_CUSTOMMENU))  // v9.5\par
    \{\par
        int nM = PEnget(m_hPE, PEP_nLASTMENUINDEX);\par
        int nCMS = PECMS_UNCHECKED; \par
\par
        // Custom Menu was clicked //\par
        if (nM == 0)\par
        \{\par
            PEvgetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 0, 0, &nCMS);\par
            if (nCMS == PECMS_UNCHECKED)\par
            \{\par
                nCMS = PECMS_CHECKED; \par
                PEnset(m_hPE, PEP_nVIEWINGMODE, PEVM_CENTER);\par
                if ((m_nLastSelection == 400) || (m_nLastSelection == 404))\par
                \{\par
                    float f = -2.0F; PEvset(m_hPE, PEP_f3DXZOOM, &f, 1);\par
                \}\par
                else if (m_nLastSelection == 402)\par
                \{\par
                    float f = -1.0F; PEvset(m_hPE, PEP_f3DXZOOM, &f, 1);\par
                \}\par
            \}\par
            else\par
            \{\par
                nCMS = PECMS_UNCHECKED;\par
                PEnset(m_hPE, PEP_nVIEWINGMODE, PEVM_DATA_LOCATION);\par
            \}\par
            PEvsetcellEx(m_hPE, PEP_naCUSTOMMENUSTATE, 0, 0, &nCMS);\par
            ::InvalidateRect(m_hPE, NULL, FALSE);\par
        \}\par
\par
    \}\par
\par
\tab return CView::OnCommand(wp, lp);\par
\}\par
\par
\par
\par
\par
\par
\par
}
 