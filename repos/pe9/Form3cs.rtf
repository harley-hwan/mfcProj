{\rtf1\ansi\deff0{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\f0\fs22\lang1033 using System;\par
using System.IO;\par
using Gigasoft.ProEssentials.Enums;\par
using System.Windows.Input;\par
using System.Drawing;\par
using System.Globalization;\par
\par
namespace PEWinformDemo\par
\{\par
\tab /// <summary>\par
\tab /// Summary description for Form3.\par
\tab /// </summary>\par
\tab public class Form3 \par
\tab\{\par
        public delegate void NextPrimeDelegate();\par
\par
        public static void CreateAllCharts(Gigasoft.ProEssentials.Pesgo Pesgo1)\par
\tab\tab\{\par
            // Example 123 shares local memory, this code tells ProEssentials to reset the shared data address //  // v9.5\par
            Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XDataPtr, 0, 0);\par
            Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YDataPtr, 0, 0);\par
\par
            if (MainWindow.aTimer != null)\par
                MainWindow.aTimer.Stop();\par
\par
            if (MainWindow.Timer1 != null)\par
                MainWindow.Timer1.Stop();\par
\par
            if (Pesgo1 == null) \{ return; \}\par
\par
\tab\tab\tab Pesgo1.PeFunction.Reset();\par
\par
            Pesgo1.PeUserInterface.Dialog.ModelessAutoClose = true;\par
\par
            Pesgo1.PeFunction.Reinitialize();\par
\par
            Pesgo1.PeConfigure.PrepareImages = true;\par
            Random Rand_Num = new Random(unchecked((int)DateTime.Now.Ticks));\par
\tab\tab\tab\par
            if(MainWindow.m_nChart == 100)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //100  *** Simple Scientific Graph ***\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
                //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. //\par
\par
                // Simple example show the basics of a scientific graph object. //\par
                // Scientific Graph's contain both YData and XData and thus data\par
                // is not plotted equally spaced as the graph object does.\par
\par
                // v9 features\par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
\par
\par
                // Enable Bar Glass Effect //\par
                Pesgo1.PePlot.Option.BarGlassEffect = true;\par
\par
                // Enable Plotting style gradient and bevel features //\par
                Pesgo1.PePlot.Option.AreaGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pesgo1.PePlot.Option.AreaBevelStyle = BevelStyle.MediumSmooth;\par
                Pesgo1.PePlot.Option.SplineGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pesgo1.PePlot.Option.SplineBevelStyle = SplineBevelStyle.MediumSmooth;\par
\par
                // v7.2 new features //\par
                Pesgo1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pesgo1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
                Pesgo1.PePlot.Option.LineSymbolThickness = 3;\par
                Pesgo1.PePlot.Option.AreaBorder = 1;\par
                Pesgo1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                // Prepare images in memory //\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
\par
                // Pass Data //\par
                Pesgo1.PeData.Subsets = 4;\par
                Pesgo1.PeData.Points = 120;\par
\par
                for (int s = 0; s <= 3; s++)\par
                \{\par
                    int nOffset = (int)(Rand_Num.NextDouble() * 250);\par
                    for (int p = 0; p <= 119; p++)\par
                    \{\par
                        Pesgo1.PeData.X[s, p] = (float) ((p + 1) * 100.0F);\par
                        Pesgo1.PeData.Y[s, p] = (float)((p + 1) * 1 + (Rand_Num.NextDouble() * 250)) + (float)(Math.Sin(((double)(nOffset + p)) * .03F) * 700.0F) - ((s * 140.0F));\par
                    \}\par
                \}\par
\par
                // Set DataShadows to show 3D //\par
                Pesgo1.PePlot.DataShadows = DataShadows.Shadows;\par
\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusSpline;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeGrid.Style = GridStyle.Dot;\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                // Enable middle mouse dragging //\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                Pesgo1.PeString.MainTitle = "Test Results";\par
                Pesgo1.PeString.SubTitle = "";\par
                Pesgo1.PeString.YAxisLabel = "Performance";\par
                Pesgo1.PeString.XAxisLabel = "Duration";\par
\par
                // subset labels //\par
                Pesgo1.PeString.SubsetLabels[0] = "Horsepower";\par
                Pesgo1.PeString.SubsetLabels[1] = "Torque";\par
                Pesgo1.PeString.SubsetLabels[2] = "Temperature";\par
                Pesgo1.PeString.SubsetLabels[3] = "Pressure";\par
\par
                // subset colors //\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(128, 198, 0, 0);\par
                Pesgo1.PeColor.SubsetColors[1] = Color.FromArgb(128, 0, 198, 198);\par
                Pesgo1.PeColor.SubsetColors[2] = Color.FromArgb(128, 198, 198, 0);\par
                Pesgo1.PeColor.SubsetColors[3] = Color.FromArgb(128, 0, 198, 0);\par
\par
                // subset line types\par
                Pesgo1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[2] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[3] = LineType.MediumSolid;\par
\par
                // subset point types\par
                Pesgo1.PeLegend.SubsetPointTypes[0] = PointType.DotSolid;\par
                Pesgo1.PeLegend.SubsetPointTypes[1] = PointType.UpTriangleSolid;\par
                Pesgo1.PeLegend.SubsetPointTypes[2] = PointType.SquareSolid;\par
                Pesgo1.PeLegend.SubsetPointTypes[3] = PointType.DownTriangleSolid;\par
                Pesgo1.PeLegend.SubsetPointTypes[4] = PointType.DotSolid;\par
                Pesgo1.PeLegend.SubsetPointTypes[5] = PointType.SquareSolid;\par
                Pesgo1.PeLegend.SubsetPointTypes[6] = PointType.DiamondSolid;\par
                Pesgo1.PeLegend.SubsetPointTypes[7] = PointType.UpTriangleSolid;\par
\par
                Pesgo1.PeLegend.SimplePoint = true;\par
                Pesgo1.PeLegend.SimpleLine = true;\par
                Pesgo1.PeLegend.Style = LegendStyle.OneLine;\par
                Pesgo1.PeGrid.Option.MultiAxisStyle = MultiAxisStyle.SeparateAxes;\par
\par
                Pesgo1.PePlot.Option.GradientBars = 8;\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
                Pesgo1.PeData.Precision = DataPrecision.OneDecimal;\par
\par
                // Various other features //\par
                Pesgo1.PeFont.Fixed = true;\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPadding = 1;\par
\par
                Pesgo1.PeConfigure.ImageAdjustLeft = 20;\par
                Pesgo1.PeConfigure.ImageAdjustRight = 20;\par
                Pesgo1.PeConfigure.ImageAdjustTop = 10;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
            \}\par
            else if(MainWindow.m_nChart == 101)\par
            \{\tab\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //101  Scientific Graph showing line annotations\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Create MultiAxes //\par
                Pesgo1.PeGrid.MultiAxesSubsets[0] = 2;\par
                Pesgo1.PeGrid.MultiAxesSubsets[1] = 2;\par
                Pesgo1.PeUserInterface.Allow.MultiAxesSizing = true;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 0; // Set first y axis parameters \par
                Pesgo1.PeString.YAxisLabel = "";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Bar;\par
                Pesgo1.PePlot.ComparisonSubsets = 1;\par
                Pesgo1.PePlot.MethodII = SGraphPlottingMethodII.PointsPlusSpline;\par
\par
                // Plot last subset on right //\par
                Pesgo1.PeGrid.WorkingAxis = 1; // Set second y axis parameters\par
                Pesgo1.PeString.YAxisLabel = "";\par
                Pesgo1.PeString.RYAxisLabel = "";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Area;\par
                Pesgo1.PePlot.RYAxisComparisonSubsets = 1;\par
                Pesgo1.PeColor.RYAxis = Color.FromArgb(255, 128, 128, 128);\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
\par
                // v9.5\par
                Pesgo1.PeUserInterface.Menu.AnnotationControl = true;\par
                Pesgo1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
                Pesgo1.PeAnnotation.ShowAnnotationText = true;\par
\par
                Pesgo1.PeAnnotation.InFront = false;\par
                Pesgo1.PeAnnotation.Line.TextSize = 110;\par
                Pesgo1.PeAnnotation.Show = true;\par
\par
                /////////////////////////////////\par
                // Horizontal Line Annotations //\par
                /////////////////////////////////\par
                Pesgo1.PeAnnotation.Line.YAxis[0] = 820;\par
                Pesgo1.PeAnnotation.Line.YAxisType[0] = LineAnnotationType.MediumDash;\par
                Pesgo1.PeAnnotation.Line.YAxisColor[0] = Color.FromArgb(255, 198, 0, 0);\par
                Pesgo1.PeAnnotation.Line.YAxisText[0] = "";\par
                Pesgo1.PeAnnotation.Line.YAxisAxis[0] = 0;\par
                Pesgo1.PeAnnotation.Line.YAxisInFront[0] = AnnotationInFront.InFront;\par
\par
                Pesgo1.PeAnnotation.Line.YAxis[1] = 780;\par
                Pesgo1.PeAnnotation.Line.YAxisType[1] = LineAnnotationType.Dash;\par
                Pesgo1.PeAnnotation.Line.YAxisColor[1] = Color.FromArgb(255, 0, 198, 0);\par
                Pesgo1.PeAnnotation.Line.YAxisText[1] = "";\par
                Pesgo1.PeAnnotation.Line.YAxisAxis[1] = 0;\par
\par
                Pesgo1.PeAnnotation.Line.YAxis[2] = 740;\par
                Pesgo1.PeAnnotation.Line.YAxisType[2] = LineAnnotationType.Dot;\par
                Pesgo1.PeAnnotation.Line.YAxisColor[2] = Color.FromArgb(255, 0, 0, 198);\par
                Pesgo1.PeAnnotation.Line.YAxisText[2] = "";\par
                Pesgo1.PeAnnotation.Line.YAxisAxis[2] = 0;\par
\par
                Pesgo1.PeAnnotation.Line.YAxis[3] = 700;\par
                Pesgo1.PeAnnotation.Line.YAxisType[3] = LineAnnotationType.MediumThickSolid;\par
                Pesgo1.PeAnnotation.Line.YAxisColor[3] = Color.FromArgb(255, 198, 0, 198);\par
                Pesgo1.PeAnnotation.Line.YAxisText[3] = "";\par
                Pesgo1.PeAnnotation.Line.YAxisAxis[3] = 0;\par
\par
                Pesgo1.PeAnnotation.Line.YAxis[4] = 760;\par
                Pesgo1.PeAnnotation.Line.YAxisType[4] = LineAnnotationType.ThickSolid;\par
                Pesgo1.PeAnnotation.Line.YAxisColor[4] = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PeAnnotation.Line.YAxisText[4] = "";\par
                Pesgo1.PeAnnotation.Line.YAxisAxis[4] = 0;\par
\par
                // Set right margin to the longest string on right //\par
                Pesgo1.PeAnnotation.Line.RightMargin = "String ";\par
\par
                Pesgo1.PeAnnotation.Line.YAxis[5] = 720;\par
                Pesgo1.PeAnnotation.Line.YAxisType[5] = LineAnnotationType.ThickSolid;\par
                Pesgo1.PeAnnotation.Line.YAxisColor[5] = Color.FromArgb(255, 198, 0, 0);\par
                Pesgo1.PeAnnotation.Line.YAxisText[5] = "|RTest" + '\\n' + "String";\par
                Pesgo1.PeAnnotation.Line.YAxisAxis[5] = 0;\par
\par
                //  Line annotations on bottom axis //\par
                Pesgo1.PeAnnotation.Line.YAxis[6] = 535;\par
                Pesgo1.PeAnnotation.Line.YAxisType[6] = LineAnnotationType.ThinSolid;\par
                Pesgo1.PeAnnotation.Line.YAxisColor[6] = Color.FromArgb(255, 198, 0, 198);\par
                Pesgo1.PeAnnotation.Line.YAxisText[6] = "Bottom multi-axis with respect to left y axis";\par
                Pesgo1.PeAnnotation.Line.YAxisAxis[6] = 1;\par
\par
                // Line annotation with respect to right y axis //\par
                Pesgo1.PeAnnotation.Line.YAxis[7] = 475;\par
                Pesgo1.PeAnnotation.Line.YAxisType[7] = LineAnnotationType.ThickSolid + 1000;\par
                Pesgo1.PeAnnotation.Line.YAxisColor[7] = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PeAnnotation.Line.YAxisText[7] = "|rBottom multi-axis with respect to right y axis";\par
                Pesgo1.PeAnnotation.Line.YAxisAxis[7] = 1;\par
\par
                ///////////////////////////////\par
                // Vertical Line Annotations //\par
                ///////////////////////////////\par
\par
                Pesgo1.PeAnnotation.Line.XAxis[0] = 8200;\par
                Pesgo1.PeAnnotation.Line.XAxisType[0] = LineAnnotationType.MediumDash;\par
                Pesgo1.PeAnnotation.Line.XAxisColor[0] = Color.FromArgb(255, 198, 0, 0);\par
                Pesgo1.PeAnnotation.Line.XAxisText[0] = "";\par
                Pesgo1.PeAnnotation.Line.XAxisInFront[0] = AnnotationInFront.InFront;\par
\par
                Pesgo1.PeAnnotation.Line.XAxis[1] = 7800;\par
                Pesgo1.PeAnnotation.Line.XAxisType[1] = LineAnnotationType.Dash;\par
                Pesgo1.PeAnnotation.Line.XAxisColor[1] = Color.FromArgb(255, 0, 198, 0);\par
                Pesgo1.PeAnnotation.Line.XAxisText[1] = "";\par
\par
                Pesgo1.PeAnnotation.Line.XAxis[2] = 7400;\par
                Pesgo1.PeAnnotation.Line.XAxisType[2] = LineAnnotationType.Dot;\par
                Pesgo1.PeAnnotation.Line.XAxisColor[2] = Color.FromArgb(255, 0, 0, 198);\par
                Pesgo1.PeAnnotation.Line.XAxisText[2] = "";\par
\par
                Pesgo1.PeAnnotation.Line.XAxis[3] = 7000;\par
                Pesgo1.PeAnnotation.Line.XAxisType[3] = LineAnnotationType.MediumThickSolid;\par
                Pesgo1.PeAnnotation.Line.XAxisColor[3] = Color.FromArgb(255, 198, 0, 198);\par
                Pesgo1.PeAnnotation.Line.XAxisText[3] = "";\par
\par
                Pesgo1.PeAnnotation.Line.XAxis[4] = 7600;\par
                Pesgo1.PeAnnotation.Line.XAxisType[4] = LineAnnotationType.ThickSolid;\par
                Pesgo1.PeAnnotation.Line.XAxisColor[4] = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PeAnnotation.Line.XAxisText[4] = "";\par
\par
                // Set top margin to the longest annotation string on top //\par
                Pesgo1.PeAnnotation.Line.TopMargin = " XX";\par
\par
                Pesgo1.PeAnnotation.Line.XAxis[5] = 7200;\par
                Pesgo1.PeAnnotation.Line.XAxisType[5] = LineAnnotationType.ThickSolid;\par
                Pesgo1.PeAnnotation.Line.XAxisColor[5] = Color.FromArgb(255, 198, 0, 0);\par
                Pesgo1.PeAnnotation.Line.XAxisText[5] = "|HTest" + '\\n' + "String";\par
\par
                //  Line annotations with top justified text //\par
                Pesgo1.PeAnnotation.Line.XAxis[6] = 5350;\par
                Pesgo1.PeAnnotation.Line.XAxisType[6] = LineAnnotationType.ThinSolid;\par
                Pesgo1.PeAnnotation.Line.XAxisColor[6] = Color.FromArgb(255, 198, 0, 198);\par
                Pesgo1.PeAnnotation.Line.XAxisText[6] = "|t Top Inside ";\par
\par
                // Line annotation with bottom justified text //\par
                Pesgo1.PeAnnotation.Line.XAxis[7] = 5750;\par
                Pesgo1.PeAnnotation.Line.XAxisType[7] = LineAnnotationType.ThickSolid;\par
                Pesgo1.PeAnnotation.Line.XAxisColor[7] = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PeAnnotation.Line.XAxisText[7] = "|b Bottom Inside ";\par
\par
                // New region annotations, define a top, and bottom graph annotation type and then rect fill //\par
                Pesgo1.PeAnnotation.Graph.X[0] = 0;        // ignored for this type\par
                Pesgo1.PeAnnotation.Graph.Y[0] = 1.0E+20;  // some value in outer space\par
                Pesgo1.PeAnnotation.Graph.Type[0] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Top;\par
\par
                Pesgo1.PeAnnotation.Graph.X[1] = 0;    // ignored for this type\par
                Pesgo1.PeAnnotation.Graph.Y[1] = 850;\par
                Pesgo1.PeAnnotation.Graph.Type[1] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Bottom;\par
\par
                Pesgo1.PeAnnotation.Graph.X[2] = 8500; // if text define, located here\par
                Pesgo1.PeAnnotation.Graph.Y[2] = 850;\par
                Pesgo1.PeAnnotation.Graph.Type[2] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.RectFill;\par
                Pesgo1.PeAnnotation.Graph.Color[2] = Color.FromArgb(155, 234, 123, 53);\par
                Pesgo1.PeAnnotation.Graph.Text[2] = "";\par
                Pesgo1.PeAnnotation.Graph.Show = true;\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(195, 0, 128, 128);\par
                Pesgo1.PeColor.SubsetColors[2] = Color.FromArgb(195, 128, 128, 0);\par
                Pesgo1.PeColor.SubsetColors[3] = Color.FromArgb(195, 128, 128, 128);\par
\par
                Pesgo1.PeGrid.LineControl = GridLineControl.None;\par
\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pesgo1.PeLegend.Style = LegendStyle.OneLineLeftOfAxis;\par
            \}\par
            else if(MainWindow.m_nChart == 102)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //102  Scientific Graph showing use of PEvsetEx\par
\par
                // This creates the SimpleGraph example chart //\par
                // The simple graph has 4 subsets with 12 points each//\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Repassing the data via PEvsetEx, one subset at a time //\par
                float[] MyXData = new float[120];\par
                float[] MyYData = new float[120];\par
                Int32 p;\par
\par
                // Repass the first subset //\par
                for( p = 0; p <= 119; p++ )\par
                \{\par
                    MyXData[p] = (p + 1) * 30;\par
                    MyYData[p] = (float)(50 + (Rand_Num.NextDouble() * 100));\par
                \}\par
                float null_value = 0;\par
                Gigasoft.ProEssentials.Api.PEvsetEx(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, 0, 120, MyXData,ref null_value);\par
                Gigasoft.ProEssentials.Api.PEvsetEx(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, 0, 120, MyXData, ref null_value);\par
                Gigasoft.ProEssentials.Api.PEvsetEx(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, 0, 120, MyYData, ref null_value);\par
\par
                // Repass the second subset //\par
                for( p = 0; p <= 119; p++ )\par
                \{\par
                    MyXData[p] = 300 + ((p + 50) * 30);\par
                    MyYData[p] = (float)(150 + (Rand_Num.NextDouble() * 100));\par
                \}\par
\par
                Gigasoft.ProEssentials.Api.PEvsetEx(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, 120, 120, MyXData, ref null_value);\par
                Gigasoft.ProEssentials.Api.PEvsetEx(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, 120, 120, MyYData, ref null_value);\par
\par
                //Repass the third subset //\par
                for( p = 0; p <= 119; p++ )\par
                \{\par
                    MyXData[p] = 600 + ((p + 100) * 30);\par
                    MyYData[p] = (float)(250 + (Rand_Num.NextDouble() * 100));\par
                \}\par
                Gigasoft.ProEssentials.Api.PEvsetEx(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, 240, 120, MyXData, ref null_value);\par
                Gigasoft.ProEssentials.Api.PEvsetEx(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, 240, 120, MyYData, ref null_value);\par
\par
                //Repass the fourth subset //\par
                for( p = 0; p <= 119; p++ )\par
                \{\par
                    MyXData[p] = 900 + ((p + 150) * 30);\par
                    MyYData[p] = (float)(350 + (Rand_Num.NextDouble() * 100));\par
                \}\par
                Gigasoft.ProEssentials.Api.PEvsetEx(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, 360, 120, MyXData, ref null_value);\par
                Gigasoft.ProEssentials.Api.PEvsetEx(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, 360, 120, MyYData, ref null_value);\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PePlot.Option.SolidLineOverArea = 1;\par
\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkShadow;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Area; \par
            \}\par
            else if(MainWindow.m_nChart == 103)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //103  Scientific Graph showing overlapped multi axes 1\par
\par
                //! Try zooming and scrolling vertically. //\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
                //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Create 4 separate axes and then overlap all //\par
                Pesgo1.PeGrid.MultiAxesSubsets[0] = 1; // 1 subset on first axis\par
                Pesgo1.PeGrid.MultiAxesSubsets[1] = 1; // 1 subset on second axis\par
                Pesgo1.PeGrid.MultiAxesSubsets[2] = 1; // 1 subset on third axis\par
                Pesgo1.PeGrid.MultiAxesSubsets[3] = 1; // 1 subset on fourth axis\par
                Pesgo1.PeGrid.OverlapMultiAxes[0] = 4; // overlap all 4 axes in one group\par
\par
                //! Set AxisNumberSpacing to 2.0 will create space for two lines. \par
                Pesgo1.PeGrid.Option.AxisNumberSpacing = 2.0;\par
\par
                // Match axis color and label to subset label //\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(255, 178, 0, 0);\par
                Pesgo1.PeString.YAxisLabel = "This is a test label using \\ntwo lines.";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Area;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 1;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(255, 0, 178, 0);\par
                Pesgo1.PeString.YAxisLabel = "This is a test label using \\ntwo lines and more.";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Line;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 2;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(255, 0, 0, 178);\par
                Pesgo1.PeString.YAxisLabel = "Axis 3";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusLine;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 3;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(255, 178, 178, 0);\par
                Pesgo1.PeString.YAxisLabel = "This is a test label using \\ntwo lines and more and more.";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Point;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
\par
                Pesgo1.PeString.TextShadows = TextShadows.NoShadows;\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.LightNoBorder;\par
                Pesgo1.PePlot.MarkDataPoints = false;\par
                Pesgo1.PeFont.FontSize = FontSize.Medium;\par
                Pesgo1.PePlot.DataShadows = DataShadows.Shadows;\par
                Pesgo1.PePlot.Option.SolidLineOverArea = 1;\par
\par
                // subset colors //\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(28, 198, 0, 0);\par
                Pesgo1.PeColor.SubsetColors[1] = Color.FromArgb(64, 0, 198, 0);\par
                Pesgo1.PeColor.SubsetColors[2] = Color.FromArgb(128, 0, 0, 198);\par
                Pesgo1.PeColor.SubsetColors[3] = Color.FromArgb(128, 198, 198, 0);\par
\par
                // subset line types\par
                Pesgo1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[2] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[3] = LineType.MediumSolid;\par
\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingVertZoom = true;\par
                Pesgo1.PeColor.TickColor = Color.FromArgb(0, 1, 0, 0);  // Empty equiv Color.Empty; \par
                Pesgo1.PeString.MainTitle = "Zoom and Pan horizontal and vertical";\par
\par
                Pesgo1.PeFont.SizeGlobalCntl = 1.3F;\par
            \}\par
            else if(MainWindow.m_nChart == 104)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //104  Scientific Graph showing overlapped multi axes 2\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
                //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Create 4 separate axes and then overlap in two groups //\par
                Pesgo1.PeGrid.MultiAxesSubsets[0] = 1; // 1 subset on first axis\par
                Pesgo1.PeGrid.MultiAxesSubsets[1] = 1; // 1 subset on second axis\par
                Pesgo1.PeGrid.MultiAxesSubsets[2] = 1; // 1 subset on third axis\par
                Pesgo1.PeGrid.MultiAxesSubsets[3] = 1; // 1 subset on fourth axis\par
                Pesgo1.PeGrid.OverlapMultiAxes[0] = 2; // overlap first two axes in one group\par
                Pesgo1.PeGrid.OverlapMultiAxes[1] = 2; // overlap second two axes in one group\par
                Pesgo1.PeUserInterface.Allow.MultiAxesSizing = true;\par
\par
                Pesgo1.PeString.MainTitle = "With Multi-Axes-Sizing and Zoom-Limit-Axis features";\par
                Pesgo1.PeUserInterface.Allow.ZoomLimits = ZoomLimits.AxisHorizontal;\par
\par
                // Match axis color and label to subset label //\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(188, 0, 0, 140);\par
                Pesgo1.PeString.YAxisLabel = "Horsepower";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Bar;\par
                Pesgo1.PeGrid.WorkingAxis = 1;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(188, 125, 125, 125);\par
                Pesgo1.PeString.YAxisLabel = "Torque";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.SplineArea;\par
                Pesgo1.PeGrid.WorkingAxis = 2;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(188, 0, 0, 140);\par
                Pesgo1.PeString.YAxisLabel = "Temperature";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Bar;\par
                Pesgo1.PeGrid.WorkingAxis = 3;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(188, 125, 125, 125);\par
                Pesgo1.PeString.YAxisLabel = "Pressure";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.SplineArea;\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
                Pesgo1.PeString.TextShadows = TextShadows.NoShadows; \par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[2] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[3] = LineType.MediumSolid;\par
                Pesgo1.PePlot.MarkDataPoints = true;\par
\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.LightLine;\par
                Pesgo1.PePlot.MarkDataPoints = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeLegend.Style = LegendStyle.OneLineTopOfAxis;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeUserInterface.Menu.ShowLegend = MenuControl.Show;\par
                Pesgo1.PeUserInterface.Menu.LegendLocation = MenuControl.Show;\par
\par
                // subset colors //\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(88, 0, 0, 140);\par
                Pesgo1.PeColor.SubsetColors[1] = Color.FromArgb(88, 155, 155, 155);\par
                Pesgo1.PeColor.SubsetColors[2] = Color.FromArgb(88, 0, 0, 140);\par
                Pesgo1.PeColor.SubsetColors[3] = Color.FromArgb(88, 155, 155, 155);\par
            \}\par
            else if(MainWindow.m_nChart == 105)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //105  Scientific Graph showing data cursor\par
\par
                //! Cross-Hair inside chart is a cursor giving a datapoint the focus //\par
                //! Use arrow keys or mouse to move cursor to a new location //\par
                //! You must click the control to give it the focus before key strokes will work. //\par
                //! Right and Left arrow keys move cursor up and down points //\par
                //! Up and Down arrow keys move cursor up and down subsets //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Set up cursor //\par
                Pesgo1.PeUserInterface.Cursor.Mode = CursorMode.DataCross;\par
\par
                // Help see data points //\par
                Pesgo1.PePlot.MarkDataPoints = true;\par
\par
                // This will allow you to move cursor by clicking data point //\par
                Pesgo1.PeUserInterface.Cursor.MouseCursorControl = true;\par
                Pesgo1.PeUserInterface.HotSpot.Data = true;\par
                Pesgo1.PeUserInterface.HotSpot.Size = (HotSpotSize) 12;  \par
\par
                Pesgo1.PeColor.BitmapGradientMode = false;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Spline;\par
\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.None;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelFunction = MouseWheelFunction.HorizontalVerticalZoom;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 5;\par
                Pesgo1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                // changing data testing mousecursorcontrolclosestpoint \par
                // and tooltip features \par
                Pesgo1.PePlot.RYAxisComparisonSubsets = 1; // last subset uses right y axis\par
                Pesgo1.PePlot.TXAxisComparisonSubsets = 1; // last subset uses top x axis \par
                Pesgo1.PeData.X[3, 0] = -8000.0F;\par
                Pesgo1.PeData.X[3, 1] = -7000.0F;\par
                Pesgo1.PeData.X[3, 2] = -6000.0F;\par
                Pesgo1.PeData.X[3, 3] = -2000.0F;\par
\par
                Pesgo1.PePlot.ZoomWindow.Show = true;\par
\par
                // v9 features \par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
\par
                Pesgo1.PeUserInterface.Cursor.TrackingCustomDataText = true;\par
                Pesgo1.PeUserInterface.Cursor.TrackingCustomOtherText = true;\par
                Pesgo1.PeUserInterface.HotSpot.Title = true;\par
                Pesgo1.PeUserInterface.HotSpot.Subset = true;\par
                Pesgo1.PeUserInterface.HotSpot.AxisLabel = true;\par
                Pesgo1.PeUserInterface.HotSpot.GridNumberY = true;\par
                Pesgo1.PeUserInterface.HotSpot.GridNumberX = true;\par
\par
                Pesgo1.PeUserInterface.Cursor.MouseCursorControlClosestPoint = true;\par
                Pesgo1.PeUserInterface.HotSpot.Data = true;\par
\par
                Pesgo1.PeConfigure.CacheBmp2 = true;\par
                Pesgo1.PeUserInterface.Cursor.DrawCursorToCache = true;\par
                Pesgo1.PeUserInterface.Cursor.VertLineType = LineAnnotationType.Dash;\par
                Pesgo1.PeUserInterface.Cursor.HorzLineType = LineAnnotationType.Dash;\par
                Pesgo1.PeUserInterface.Cursor.CursorColor = Color.Red;\par
\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 255, 0, 0);\par
                Pesgo1.PeColor.SubsetColors[1] = Color.FromArgb(255, 0, 255, 0);\par
                Pesgo1.PeColor.SubsetColors[2] = Color.FromArgb(255, 0, 0, 255);\par
                Pesgo1.PeColor.SubsetColors[3] = Color.FromArgb(255, 120, 120, 120);\par
\par
\par
                // Other possible values for cursor mode are below, //\par
                // NOCURSOR = 0\par
                // POINT = 1\par
                // DATACROSS = 2\par
                // DATASQUARE = 3\par
                // FLOATINGY = 4\par
                // FLOATINGXY = 5\par
\par
                // Uncomment to start cursor at different location //\par
                //Pesgo1.PeUserInterface.Cursor.Point = 2;\par
                //Pesgo1.PeUserInterface.Cursor.Subset = 0;\par
\par
                /*\par
\par
                //////////////////////////////////\par
                // CursorMoved Event /////////////\par
                //////////////////////////////////\par
                //! Look at title bar to see cursor location set below. //\par
                if (m_nChart == 105)\par
                \{\par
                    this.Text = "Subset " + Convert.ToString(Pesgo1.PeUserInterface.Cursor.Subset) + " Point " + Convert.ToString(Pesgo1.PeUserInterface.Cursor.Point) + " YData = " + Convert.ToString(Pesgo1.PeData.Y[Pesgo1.PeUserInterface.Cursor.Subset, Pesgo1.PeUserInterface.Cursor.Point]);\par
                    Pesgo1.PeString.MainTitle = Pesgo1.PeUserInterface.Cursor.Subset.ToString();\par
                    Pesgo1.PeUserInterface.Cursor.CursorColor = Pesgo1.PeColor.SubsetColors[Pesgo1.PeUserInterface.Cursor.Subset];\par
                \}\par
\par
                //////////////////////////////////\par
                // MouseMove Event /////////////\par
                //////////////////////////////////\par
                Int32 extra1, extra2, pX, pY;\par
                Point pt;\par
                Gigasoft.ProEssentials.Structs.HotSpotData ds;\par
\par
                // get last mouse location within control //'\par
                pt = Pesgo1.PeUserInterface.Cursor.LastMouseMove;\par
                pX = (int)pt.X;\par
                pY = (int)pt.Y;\par
\par
                // Calls to fill hot spot data structure with hot spot data at given x and y\par
                Pesgo1.PeFunction.GetHotSpot(pX, pY);\par
\par
                // Calls PEgethotspot //'\par
                ds = Pesgo1.PeFunction.GetHotSpotData();\par
                extra1 = ds.Data1;\par
                extra2 = ds.Data2;\par
\par
                if (ds.Type == HotSpotType.DataPoint)\par
                    this.Text = "DataPoint value " + Pesgo1.PeData.Y[extra1, extra2].ToString();\par
                else if (ds.Type == HotSpotType.Subset)\par
                    this.Text = "Subset Legend is " + Pesgo1.PeString.SubsetLabels[extra1];\par
                else if (ds.Type == HotSpotType.Point)\par
                    this.Text = "Point Label is " + Pesgo1.PeString.PointLabels[extra1];\par
                else\par
                \{\par
                    Point p;\par
                    p = Pesgo1.PeFunction.SearchSubsetPointIndex(pX, pY);\par
                    if (p.X >= 0)\par
                    \{\par
                        string s = String.Format("Closest Subset Point s=\{0\}", p.X);\par
                        s += String.Format(", p=\{0\}", p.Y);\par
                        this.Text = s;\par
                    \}\par
                    else\par
                        this.Text = "No Hot Spot";\par
\par
                ///////////////////////////////////////////////\par
                // PeCustomTrackingDataText Event /////////////\par
                ///////////////////////////////////////////////\par
                double fX = Pesgo1.PeUserInterface.Cursor.CursorValueX;\par
                double fY = Pesgo1.PeUserInterface.Cursor.CursorValueY;\par
\par
                string s;\par
                s = String.Format("X Axis: \{0:0.00\}  \\n", fX);\par
                s += String.Format("Y Axis: \{0:0.00\}", fY);\par
\par
                if (fY < 0.0F)\par
                \{\par
                    Pesgo1.PeUserInterface.Cursor.TrackingTooltipTitle = "N E G A T I V E";\par
                    Pesgo1.PeUserInterface.Cursor.TrackingTooltipBkColor = Color.FromArgb(0, 0, 0, 0);\par
                    Pesgo1.PeUserInterface.Cursor.TrackingTooltipTextColor = Color.FromArgb(0, 245, 0, 0);\par
                \}\par
                else\par
                \{\par
                    Pesgo1.PeUserInterface.Cursor.TrackingTooltipTitle = "P O S I T I V E";\par
                    Pesgo1.PeUserInterface.Cursor.TrackingTooltipBkColor = Color.FromArgb(0, 50, 50, 50);\par
                    Pesgo1.PeUserInterface.Cursor.TrackingTooltipTextColor = Color.FromArgb(0, 0, 225, 0);\par
                \}\par
                e.TrackingText = s;\par
\par
                ////////////////////////////////////////////////\par
                // PeCustomTrackingOtherText Event /////////////\par
                ////////////////////////////////////////////////\par
                Int32 extra1, extra2, pX, pY;\par
\par
                // get last mouse location within control //'\par
                Point pt = Pesgo1.PeUserInterface.Cursor.LastMouseMove;\par
                pX = (int) pt.X;\par
                pY = (int) pt.Y;\par
\par
                // Calls to fill hot spot data structure with hot spot data at given x and y\par
                Pesgo1.PeFunction.GetHotSpot(pX, pY);\par
\par
                // Calls PEgethotspot //'\par
                Gigasoft.ProEssentials.Structs.HotSpotData ds = Pesgo1.PeFunction.GetHotSpotData();\par
                extra1 = ds.Data1;\par
                extra2 = ds.Data2;\par
\par
                Pesgo1.PeUserInterface.Cursor.TrackingTooltipTitle = "Other Hot Spots";\par
                Pesgo1.PeUserInterface.Cursor.TrackingTooltipBkColor = Color.FromArgb(0, 80, 80, 80);\par
                Pesgo1.PeUserInterface.Cursor.TrackingTooltipTextColor = Color.FromArgb(0, 245, 245, 245);\par
\par
                if (ds.Type == HotSpotType.Subset)\par
                    e.TrackingText = "Subset Label " + Pesgo1.PeString.SubsetLabels[extra1];\par
                else if (ds.Type == HotSpotType.MainTitle)\par
                    e.TrackingText = "Main Title ";\par
                else if (ds.Type == HotSpotType.YAxisLabel)\par
                    e.TrackingText = "Y Axis Label ";\par
                else if (ds.Type == HotSpotType.XAxisLabel)\par
                    e.TrackingText = "X Axis Label ";\par
                else if (ds.Type == HotSpotType.YAxisGridNumber)\par
                    e.TrackingText = String.Format("Y Axis Grid Number \\nValue: \{0:0.000\}", Pesgo1.PeUserInterface.HotSpot.GridNumber[ds.Data2]);\par
                else if (ds.Type == HotSpotType.XAxisGridNumber)\par
                    e.TrackingText = String.Format("X Axis Grid Number \\nValue: \{0:0.000\}", Pesgo1.PeUserInterface.HotSpot.GridNumber[ds.Data2]);\par
\par
                 */\par
            \}\par
            else if(MainWindow.m_nChart == 106)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //106  Scientific Graph showing date time handling\par
\par
                double d, dt;\par
                Int32 p;\par
                dt = DateTime.Now.ToOADate() - 700;\par
\par
                // Enable MouseWheel Zooming\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelFunction = MouseWheelFunction.HorizontalVerticalZoom;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;  // note that pan gestures require MouseDragging to be enabled \par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = true;  // also, pan gestures should have ScrollingHorzZooom enabled\par
\par
                // Enable MouseWheel Zoom Smoothness\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 5;\par
                Pesgo1.PeUserInterface.Scrollbar.PinchZoomSmoothness = 2;\par
\par
                // Allow zooming and panning //\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingVertZoom = true;\par
\par
                // Enable Plotting style gradient and bevel features //\par
                Pesgo1.PePlot.Option.AreaGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pesgo1.PePlot.Option.AreaBevelStyle = BevelStyle.MediumSmooth;\par
                Pesgo1.PePlot.Option.SplineGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pesgo1.PePlot.Option.SplineBevelStyle = SplineBevelStyle.MediumSmooth;\par
\par
                // Enable ZoomWindow //\par
                Pesgo1.PePlot.ZoomWindow.Show = true;\par
\par
                Pesgo1.PeData.Subsets = 1;\par
                Pesgo1.PeData.Points = 600;\par
\par
                // Enable double precision which is usually //\par
                // required for date time handling. //\par
                // This means we pass x data to XDataII //\par
                Pesgo1.PeData.UsingXDataii = true;\par
\par
                // Pass XDataII and YData //\tab\tab\tab\tab\par
                for( p = 0; p <= 599; p++ )\par
                \{\par
                    d = (dt + (p * 0.25));\par
                    Pesgo1.PeData.Xii[0, p] = d;\par
                    Pesgo1.PeData.Y[0, p] = (float)((150 + (Math.Sin(p * 0.034) * 60) + (Rand_Num.NextDouble() * 30) + (p / 2)) - (35 + (Rand_Num.NextDouble() * 20)));\par
                \}\par
\par
                // Enable DateTimeMode //\par
                Pesgo1.PeData.DateTimeMode = true;\par
\par
                // Cursor prompting in top left corner //\par
                Pesgo1.PeUserInterface.Cursor.Mode = CursorMode.DataSquare;\par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
                Pesgo1.PeUserInterface.HotSpot.Data = true;\par
                Pesgo1.PeUserInterface.Cursor.MouseCursorControl = true;\par
                Pesgo1.PeUserInterface.HotSpot.Size = (HotSpotSize)12; // 12 pixels\par
\par
                // v9 Features\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pesgo1.PeUserInterface.Cursor.TrackingTooltipMaxWidth = 150;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = false;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PePlot.MarkDataPoints = true;\par
                Pesgo1.PeFont.Fixed = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                // You can modify date label formats with //\par
                // Pesgo1.PeGrid.Option.TimeLabelType;\par
                // Pesgo1.PeGrid.Option.DayLabelType;\par
                // Pesgo1.PeGrid.Option.MonthLabelType;\par
                // Pesgo1.PeGrid.Option.YearLabelType;\par
\par
                // subset colors //\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(96, 0, 198, 0);\par
\par
                Pesgo1.PePlot.Option.GradientBars = 8;\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusLine;\par
\par
                Pesgo1.PeString.MainTitle = "Zoom and study x axis";\par
                Pesgo1.PeString.SubTitle = "scaling from years to seconds";\par
                Pesgo1.PeString.XAxisLabel = "Zoom and study x axis";\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 107)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //107  Scientific Graph showing rect selector\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                //! Zooming in now draws an ellipse, region of interest //\par
\par
                // Enable Rectangle Selector //\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pesgo1.PeUserInterface.Allow.ZoomLimits = ZoomLimits.AxisSquare;\par
\par
                Pesgo1.PeUserInterface.Allow.ZoomInterfaceOnly = ZoomInterfaceOnly.Rect;\par
                Pesgo1.PeUserInterface.Menu.UndoZoom = MenuControl.Hide; \par
                Pesgo1.PeUserInterface.Allow.Maximization = false;\par
\par
                // Set properties related to annotations //\par
                Pesgo1.PeUserInterface.Menu.AnnotationControl = true;\par
                Pesgo1.PeAnnotation.Show = true;\par
                Pesgo1.PeFont.GraphAnnotationTextSize = 90;\par
                Pesgo1.PePlot.MarkDataPoints = false;\par
\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.LightInset;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeString.MainTitle = "Use zoom to highlight a few points";\par
                Pesgo1.PeFont.SizeGlobalCntl = 1.3f; // make fonts a bit larger\par
\par
                // Adding annotation text will attempt to prevent overlapping subsets \par
                Pesgo1.PeAnnotation.Graph.SubsetObstacles[0] = true;\par
                Pesgo1.PeAnnotation.Graph.SubsetObstacles[1] = true;\par
                Pesgo1.PeAnnotation.Graph.SubsetObstacles[2] = true;\par
                Pesgo1.PeAnnotation.Graph.SubsetObstacles[3] = true;\par
\par
                /*/////////////////////////////\par
                // Zoom In Event /////////////\par
                //////////////////////////////\par
                private void Pesgo1_PeZoomIn(object sender, System.EventArgs e)\par
                \{\par
                    Pesgo1.PeAnnotation.Graph.Y[0] = Pesgo1.PeGrid.Zoom.MaxY;\par
                    Pesgo1.PeAnnotation.Graph.X[0] = Pesgo1.PeGrid.Zoom.MinX;\par
                    Pesgo1.PeAnnotation.Graph.Type[0] =  Convert.ToInt32(GraphAnnotationType.TopLeft);\par
\par
                    Pesgo1.PeAnnotation.Graph.Y[1] = Pesgo1.PeGrid.Zoom.MinY;\par
                    Pesgo1.PeAnnotation.Graph.X[1] = Pesgo1.PeGrid.Zoom.MaxX;\par
                    Pesgo1.PeAnnotation.Graph.Type[1] =  Convert.ToInt32(GraphAnnotationType.BottomRight);\par
\par
                    Pesgo1.PeAnnotation.Graph.Y[2] = Pesgo1.PeGrid.Zoom.MaxY;\par
                    Pesgo1.PeAnnotation.Graph.X[2] = Pesgo1.PeGrid.Zoom.MinX;\par
                    Pesgo1.PeAnnotation.Graph.Type[2] =  Convert.ToInt32(GraphAnnotationType.EllipseFill);\par
                    Pesgo1.PeAnnotation.Graph.Text[2] = "Region of Interest";\par
                    Pesgo1.PeAnnotation.Graph.GradientStyle[2] = (int) Gigasoft.ProEssentials.Enums.PlotGradientStyle.RadialCentered;\par
                    Pesgo1.PeAnnotation.Graph.GradientColor[2] = Color.FromArgb(5, 255, 255, 255);\par
                    Pesgo1.PeAnnotation.Graph.Color[2] = Color.FromArgb(195, 55, 55, 55);\par
                    Pesgo1.PeAnnotation.Graph.BevelStyle[2] = (int) Gigasoft.ProEssentials.Enums.BevelStyle.ThinSmooth;\par
\par
                    Pesgo1.PeFunction.ReinitializeResetImage();\par
                \}\par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 108)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //108  Scientific Graph showing inverted y axis\par
\par
                Pesgo1.PeData.Subsets = 1;\par
                Pesgo1.PeData.Points = 24;\par
\par
                // Make sure zeros are plotted //\par
                Pesgo1.PeData.NullDataValueX = -999;\par
                Pesgo1.PeData.NullDataValue = -999;\par
\par
                // Invert polarity of Y axis //\par
                Pesgo1.PeGrid.Option.InvertedYAxis = true;\par
\par
                // Pass data and since InvertedYAxis = true then make sure YData is //\par
                // multiplied by -1 //\par
                Int32 p;\par
                for( p = 0; p <= 23; p++ )\par
                \{\par
                    Pesgo1.PeData.X[0, p] = p * 10;\par
                    Pesgo1.PeData.Y[0, p] = (float)(-1.0 * (0 + (Math.Sin(p * 0.074) * 60) + (p / 2)));\par
                \}\par
\par
                // Change Titles and Labels //\par
                Pesgo1.PeString.MainTitle = "Drilling Depth";\par
                Pesgo1.PeString.SubTitle = "";\par
                Pesgo1.PeString.YAxisLabel = "Depth (ft)";\par
                Pesgo1.PeString.XAxisLabel = "Minutes";\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.LightInset;\par
\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pesgo1.PePlot.MarkDataPoints = false;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                Pesgo1.PePlot.Option.GradientBars = 8;\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Medium;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusLine;\par
\par
                // v7.2 new features //\par
                Pesgo1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pesgo1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
                Pesgo1.PePlot.Option.LineSymbolThickness = 3;\par
                Pesgo1.PePlot.Option.AreaBorder = 1;\par
                Pesgo1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                // v9 features \par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
            \}\par
            else if(MainWindow.m_nChart == 109)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //109  Scientific Graph showing axis formatting\par
\par
                //! Note YAxis and XAxis grid number formatting. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Change data to make it larger //\par
                Pesgo1.PeData.Subsets = 4;\par
                Pesgo1.PeData.Points = 12;\par
\par
                Int32 s, p;\par
                for( s = 0; s<= 3; s++ )\par
                \{\par
                    for( p = 0; p <= 11; p++ )\par
                    \{\par
                        Pesgo1.PeData.X[s, p] = (p + 1) * 10;\par
                        Pesgo1.PeData.Y[s, p] = (float)((p + 1) * 500 + (Rand_Num.NextDouble() * 2500));\par
                    \}\par
                \}\par
\par
                // Supply formatting string //\par
                Pesgo1.PeGrid.Option.AxisFormatY = "$|,.00|";\par
                Pesgo1.PeGrid.Option.AxisFormatX = "|.0|sec";\par
\par
                // Labels //\par
                Pesgo1.PeString.MainTitle = "Dollars per Second";\par
                Pesgo1.PeString.YAxisLabel = "Dollars";\par
                Pesgo1.PeString.XAxisLabel = "Time";\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.MediumLine;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusSpline;\par
                Pesgo1.PePlot.Option.BestFitDegree = BestFitDegree.Fourth;\par
\par
                // v7.2 new features //\par
                Pesgo1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pesgo1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
                Pesgo1.PePlot.Option.LineSymbolThickness = 3;\par
                Pesgo1.PePlot.Option.AreaBorder = 1;\par
                Pesgo1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 110)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //110  Scientific Graph showing log-log axes\par
\par
                //! Zoom this chart to see how ProEssentials handles log scales. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Set Log scales //\par
                Pesgo1.PeGrid.Configure.YAxisScaleControl = Gigasoft.ProEssentials.Enums.ScaleControl.Log;\par
                Pesgo1.PeGrid.Configure.XAxisScaleControl = Gigasoft.ProEssentials.Enums.ScaleControl.Log;\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
\par
                // Change data so it varies over wider range //\par
                Int32 subset, pnt;\par
\par
                Pesgo1.PeData.Subsets = 2;\par
                Pesgo1.PeData.Points = 500;\par
\par
                for (subset = 0; subset <= 1; subset++)\par
                \{\par
                    for (pnt = 0; pnt <= 499; pnt++)\par
                    \{\par
                        Pesgo1.PeData.X[subset, pnt] = (pnt + 1) * 1700;\par
                        Pesgo1.PeData.Y[subset, pnt] = (float)(((pnt + 1) * 100) + ((Rand_Num.NextDouble() * 850) * (pnt + 1) * (subset + 1)));\par
                    \}\par
                \}\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Point;\par
                Pesgo1.PePlot.MarkDataPoints = false;\par
                Pesgo1.PeLegend.SubsetPointTypes[0] = PointType.DotSolid;\par
                Pesgo1.PeLegend.SubsetPointTypes[1] = PointType.DotSolid;\par
\par
                Pesgo1.PeString.MainTitle = "Zoom with mouse wheel, axes look good";\par
                Pesgo1.PeString.SubTitle = "Click+Drag shows your Tooling code";\par
                Pesgo1.PeString.XAxisLabel = "Log X";\par
                \par
                // v9 features\par
                Pesgo1.PeUserInterface.Cursor.Mode = CursorMode.DataCross; \par
\par
                Pesgo1.PeUserInterface.Cursor.MouseCursorControl = true;\par
                Pesgo1.PeUserInterface.HotSpot.Data = true;\par
                Pesgo1.PeUserInterface.Cursor.MouseCursorControlClosestPoint = false;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = false;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = false;\par
\par
                Pesgo1.PeConfigure.CacheBmp2 = true;\par
                Pesgo1.PeUserInterface.Cursor.ImprovedCursor = true;\par
                Pesgo1.PeUserInterface.Cursor.DrawCursorToCache = true;\par
                Pesgo1.PeUserInterface.Cursor.CursorColor = Color.Red;\par
                Pesgo1.PeUserInterface.Cursor.VertLineType = LineAnnotationType.Dash;\par
                Pesgo1.PeUserInterface.Cursor.HorzLineType = LineAnnotationType.Dash;\par
\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.None; // zoom by mouse wheel \par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelFunction = MouseWheelFunction.HorizontalVerticalZoom;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 8;\par
\par
                ///////////////////////////////////////////////////////////////////////////////      \par
                // Implementing the example of tooling                                       //\par
                // Note Quick Draw Annotations are GraphAnnotations offset by 1 and negative //\par
                ///////////////////////////////////////////////////////////////////////////////\par
\par
                /*//////////////////////////////////////////////////\par
                // MouseDown ///\par
                ////////////////\par
                if (m_nChart == 110)\par
                \{\par
                    bDragging = true;\par
                    Point pt = Pesgo1.PeUserInterface.Cursor.LastMouseMove;\par
\par
                    Int32 nA, nX, nY;\par
                    double fX = 0, fY = 0;\par
\par
                    nA = 0;  // Set if using OverlapMultiAxes, else this function returns axis if MultiAxesSubsets is used without OverlapMultiAxes\par
                    nX = (int)pt.X;\par
                    nY = (int)pt.Y;\par
                    // This returns mouse coordinates in data units //\par
                    Pesgo1.PeFunction.ConvPixelToGraph(ref nA, ref nX, ref nY, ref fX, ref fY, false, false, false);\par
\par
                    // Check move-to location and restrain to the chart's extents.\par
                    // Note that you can only expect to read valid ManualMinX type\par
                    // properties after an initial chart has been visible on screen\par
                    if (fX <= Pesgo1.PeGrid.Configure.ManualMinX)\par
                        fX = Pesgo1.PeGrid.Configure.ManualMinX;\par
                    else if (fX >= Pesgo1.PeGrid.Configure.ManualMaxX)\par
                        fX = Pesgo1.PeGrid.Configure.ManualMaxX;\par
                    if (fY <= Pesgo1.PeGrid.Configure.ManualMinY)\par
                        fY = Pesgo1.PeGrid.Configure.ManualMinY;\par
                    else if (fY >= Pesgo1.PeGrid.Configure.ManualMaxY)\par
                        fY = Pesgo1.PeGrid.Configure.ManualMaxY;\par
\par
                    Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.None;\par
\par
                    dDragStartX = fX;\par
                    dDragStartY = fY;\par
                \}\par
\par
\par
                /////////////////////////////////////////////\par
                // MouseMove ///\par
                ////////////////\par
                else if (m_nChart == 110 && bDragging == true)\par
                \{\par
                    Int32 nA, nX, nY, pX, pY;\par
                    double fX = 0, fY = 0;\par
                    Point pt = Pesgo1.PeUserInterface.Cursor.LastMouseMove;\par
                    pX = (int)pt.X; pY = (int)pt.Y;\par
\par
                    nA = 0;  // Set if using OverlapMultiAxes, else this function returns axis if MultiAxesSubsets is used without OverlapMultiAxes\par
                    nX = pX;\par
                    nY = pY;\par
                    // This returns mouse coordinates in data units //\par
                    Pesgo1.PeFunction.ConvPixelToGraph(ref nA, ref nX, ref nY, ref fX, ref fY, false, false, false);\par
\par
                    // Check move-to location and restrain to the chart's extents.\par
                    // Note that you can only expect to read valid ManualMinX type\par
                    // properties after an initial chart has been visible on screen\par
                    if (fX <= Pesgo1.PeGrid.Configure.ManualMinX)\par
                        fX = Pesgo1.PeGrid.Configure.ManualMinX;\par
                    else if (fX >= Pesgo1.PeGrid.Configure.ManualMaxX)\par
                        fX = Pesgo1.PeGrid.Configure.ManualMaxX;\par
                    if (fY <= Pesgo1.PeGrid.Configure.ManualMinY)\par
                        fY = Pesgo1.PeGrid.Configure.ManualMinY;\par
                    else if (fY >= Pesgo1.PeGrid.Configure.ManualMaxY)\par
                        fY = Pesgo1.PeGrid.Configure.ManualMaxY;\par
                   \par
                    double dLeft;\par
                    double dTop;\par
                    double dRight;\par
                    double dBottom;\par
\par
                    if (dDragStartX < fX)\par
                    \{\par
                        dLeft = dDragStartX;\par
                        dRight = fX;\par
                    \}\par
                    else\par
                    \{\par
                        dLeft = fX;\par
                        dRight = dDragStartX;\par
                    \}\par
                   \par
                    if (dDragStartY > fY)\par
                    \{\par
                        dTop = dDragStartY;\par
                        dBottom = fY;\par
                    \}\par
                    else\par
                    \{\par
                        dTop = fY;\par
                        dBottom = dDragStartY;\par
                    \}\par
\par
                    Pesgo1.PeAnnotation.Graph.X[0] = dLeft;\par
                    Pesgo1.PeAnnotation.Graph.Y[0] = dTop;\par
                    Pesgo1.PeAnnotation.Graph.Type[0] = ((int)GraphAnnotationType.TopLeft + 1) * -1;\par
\par
                    Pesgo1.PeAnnotation.Graph.X[1] = dRight;\par
                    Pesgo1.PeAnnotation.Graph.Y[1] = dBottom;\par
                    Pesgo1.PeAnnotation.Graph.Type[1] = ((int)GraphAnnotationType.BottomRight + 1) * -1;\par
\par
                    Pesgo1.PeAnnotation.Graph.X[2] = dRight;\par
                    Pesgo1.PeAnnotation.Graph.Y[2] = dBottom;\par
                    Pesgo1.PeAnnotation.Graph.Type[2] = ((int)GraphAnnotationType.RoundRectFill + 1) * -1;\par
                    Pesgo1.PeAnnotation.Graph.Color[2] = Color.FromArgb(70, 198, 198, 198);\par
                    Pesgo1.PeAnnotation.Graph.Text[2] = "";\par
                    Pesgo1.PeAnnotation.Graph.GradientStyle[2] = (int)Gigasoft.ProEssentials.Enums.PlotGradientStyle.RadialBottomRight;\par
                    Pesgo1.PeAnnotation.Graph.GradientColor[2] = Color.FromArgb(170, 255, 255, 255);\par
\par
                    Pesgo1.PeAnnotation.Graph.X[3] = dRight;\par
                    Pesgo1.PeAnnotation.Graph.Y[3] = dBottom;\par
                    Pesgo1.PeAnnotation.Graph.Type[3] = ((int)GraphAnnotationType.RoundRectMedium + 1) * -1;\par
                    Pesgo1.PeAnnotation.Graph.Color[3] = Color.FromArgb(255, 255, 255, 255);\par
                    Pesgo1.PeAnnotation.Graph.Text[3] = "";\par
\par
                    double CenteredXInLog = (Math.Log10(fX) + Math.Log10(dDragStartX)) / 2.0F;\par
                    double CenteredYInLog = (Math.Log10(fY) + Math.Log10(dDragStartY)) / 2.0F;\par
                    double dX = (fX - dDragStartX);\par
                    string sX = string.Format("\{0:0.#\}", dX);\par
                    double dY = (fY - dDragStartY);\par
                    string sY = string.Format("\{0:0.#\}", dY);\par
\par
                    Pesgo1.PeAnnotation.Graph.X[4] = Math.Pow(10.0F, CenteredXInLog);\par
                    Pesgo1.PeAnnotation.Graph.Y[4] = dTop;\par
                    Pesgo1.PeAnnotation.Graph.Color[4] = Color.FromArgb(255, 0, 255, 0);\par
                    Pesgo1.PeAnnotation.Graph.Type[4] = ((int)GraphAnnotationType.NoSymbol + 1) * -1;\par
                    Pesgo1.PeAnnotation.Graph.Text[4] = "|c<~ " + sX + " ~>";\par
\par
                    Pesgo1.PeAnnotation.Graph.X[5] = dRight;\par
                    Pesgo1.PeAnnotation.Graph.Y[5] = Math.Pow(10.0F, CenteredYInLog);\par
                    Pesgo1.PeAnnotation.Graph.Type[5] = ((int)GraphAnnotationType.NoSymbol + 1) * -1;\par
                    Pesgo1.PeAnnotation.Graph.Color[5] = Color.FromArgb(255, 0, 255, 0);\par
                    Pesgo1.PeAnnotation.Graph.Text[5] = "|D<~ " + sY + " ~>";\par
\par
                    Pesgo1.PeAnnotation.Graph.TextSize = 120;\par
                  \par
                    Pesgo1.PeAnnotation.Graph.Show = true;\par
                    Pesgo1.PeAnnotation.Show = true;\par
\par
                    Pesgo1.PeAnnotation.ShowingQuickAnnotations = true;\par
                    Pesgo1.Invalidate();\par
                    Pesgo1.Refresh();\par
                \}\par
                  \par
                /////////////////////////////////////////////\par
                // MouseUp ///\par
                //////////////\par
                if (m_nChart == 110 && bDragging == true)\par
                \{\par
                    bDragging = false;\par
                    Pesgo1.PeAnnotation.ShowingQuickAnnotations = false; \par
                    Pesgo1.PeAnnotation.HidingQuickAnnotations = true;\par
                    Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
                    Pesgo1.Invalidate();\par
                    Pesgo1.Refresh();\par
                \}\par
\par
                */\par
\par
            \}\par
            else if(MainWindow.m_nChart == 111)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //111  Scientific Graph showing financial scaling\par
\par
                // Set Financial Scaling //\par
                Pesgo1.PeGrid.Option.SpecialScalingY = SpecialScaling.Financial;\par
\par
                // Enable Zooming, Zoom graph to see how y axis changes. //\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                Pesgo1.PeData.Subsets = 1;\par
                Pesgo1.PeData.Points = 24;\par
\par
                // Pass Data //\tab\tab\tab\par
                Int32 p;\par
                for( p = 0; p <= 23; p++ )\par
                \{\par
                    Pesgo1.PeData.X[0, p] = p * 10;\par
                    Pesgo1.PeData.Y[0, p] = (float)(20.0 + (0 + (Math.Sin(p * 0.074) * 4.0) + (p / 20.0)));\par
                \}\par
\par
                // Set some colors and etc //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.MediumLine;\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 55, 55, 55);\par
                Pesgo1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
\par
                Pesgo1.PePlot.MarkDataPoints = false;\par
                Pesgo1.PeString.MainTitle = "Y Axis with Fractions";\par
                Pesgo1.PeString.SubTitle = "Zoom the chart";\par
                Pesgo1.PeString.YAxisLabel = "Zoom Me";\par
                Pesgo1.PeString.XAxisLabel = "Days";\par
\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                Pesgo1.PePlot.Option.GradientBars = 8;\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Small;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusLine;\par
\par
                // v7.2 new features //\par
                Pesgo1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pesgo1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
                Pesgo1.PePlot.Option.LineSymbolThickness = 3;\par
                Pesgo1.PePlot.Option.AreaBorder = 1;\par
                Pesgo1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                // v9 features \par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
            \}\par
            else if(MainWindow.m_nChart == 112)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //112  Scientific Graph showing manual min and max y\par
\par
                //! Very simple example showing how to control min and max of an axis. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Manually Control Y Axis//\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 0;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 1000;\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeGrid.Option.YAxisLongTicks = true;\par
            \}\par
            else if(MainWindow.m_nChart == 113)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //113  Scientific Graph showing manual line density\par
\par
                //! Very simple example showing how to control grid line and grid tick density. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Manually Control Y Axis Grid Line Density //\par
                Pesgo1.PeGrid.Configure.ManualYAxisLine = 250; // Grid line every 250 units\par
                Pesgo1.PeGrid.Configure.ManualYAxisTick = 25;  // Tick line every 25 units\par
                Pesgo1.PeGrid.Configure.ManualYAxisTicknLine = true;\par
\par
                // Manually Control Y Axis//\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 0;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 1000;\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeGrid.Option.YAxisLongTicks = true;\par
            \}\par
            else if(MainWindow.m_nChart == 114)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //114  Scientific Graph using double precision data\par
\par
                double dbl;\par
                Int32 p;\par
\par
                Pesgo1.PeData.Subsets = 1;\par
                Pesgo1.PeData.Points = 24;\par
\par
                // Enable Double precision x and y data //\par
                // Double precision will give 15 significant degits //\par
                // where as single precision offers 7 digits. //\par
                // 1205.5346 can not be accurately stored as single precision //\par
                Pesgo1.PeData.UsingXDataii = true;\par
                Pesgo1.PeData.UsingYDataii = true;\par
\par
                // Pass data to XDataII and YDataII for double precision //           \par
                for( p = 0; p <= 23; p++ )\par
                \{\par
                    Pesgo1.PeData.Xii[0, p] = p * 10 + 0.0123456789;\par
                    dbl = -1.0 * ((Math.Sin(p * 0.074) * 60.0) + (p / 2.0)) + 0.0123456789;\par
                    dbl = (Rand_Num.NextDouble() * 85) * (p + 1);\par
                    Pesgo1.PeData.Yii[0, p] = dbl;\par
                \}\par
\par
                // Set some colors and etc //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.LightLine;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeGrid.Option.YAxisLongTicks = true;\par
                Pesgo1.PePlot.Option.BestFitDegree = BestFitDegree.Fourth;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusBestFitCurve;\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                // Change Titles and Labels //\par
                Pesgo1.PeString.MainTitle = "Double Precision Data";\par
                Pesgo1.PeString.SubTitle = "";\par
\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 145, 0, 145);\par
                Pesgo1.PePlot.MarkDataPoints = true;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PeFont.Fixed = true;\par
\par
                Pesgo1.PePlot.Option.GradientBars = 8;\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Medium;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                // v9 features \par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
            \}\par
            else if (MainWindow.m_nChart == 115)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //115  Scientific Graph showing real-time 1\par
\par
                //! Chart changes all data each update\par
\par
                Pesgo1.PeData.Subsets = 4;\par
                Pesgo1.PeData.Points = 100000;\par
\par
                Pesgo1.PeGrid.MultiAxesSubsets[0] = 1; // 1 subset on first axis\par
                Pesgo1.PeGrid.MultiAxesSubsets[1] = 1; // 1 subset on second axis\par
                Pesgo1.PeGrid.MultiAxesSubsets[2] = 1; // 1 subset on third axis\par
                Pesgo1.PeGrid.MultiAxesSubsets[3] = 1; // 1 subset on fourth axis\par
\par
                Pesgo1.PeGrid.OverlapMultiAxes[0] = 2;\par
                Pesgo1.PeGrid.OverlapMultiAxes[1] = 1;\par
                Pesgo1.PeGrid.OverlapMultiAxes[2] = 1;\par
\par
                // Manually configure x and y axes //\par
                Pesgo1.PeGrid.Configure.ManualScaleControlX = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinX = 0;\par
                Pesgo1.PeGrid.Configure.ManualMaxX = 100;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 0;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 30;\par
                Pesgo1.PeString.YAxisLabel = "Signal 1";\par
                Pesgo1.PeGrid.WorkingAxis = 1;\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 10;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 35;\par
                Pesgo1.PeString.YAxisLabel = "Signal 2";\par
                Pesgo1.PeGrid.WorkingAxis = 2;\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 30;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 40;\par
                Pesgo1.PeString.YAxisLabel = "Signal 3";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Point;\par
                Pesgo1.PeGrid.WorkingAxis = 3;\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 42;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 48;\par
                Pesgo1.PeString.YAxisLabel = "Signal 4";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Point;\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
\par
                // Set X data and clear out default Y data //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, MainWindow.tmpXData, 400000);\par
                Pesgo1.PeData.Y[0, 0] = 0;\par
                Pesgo1.PeData.Y[0, 1] = 0;\par
                Pesgo1.PeData.Y[0, 2] = 0;\par
                Pesgo1.PeData.Y[0, 3] = 0;\par
\par
                //Set various properties //\par
                Pesgo1.PeString.MainTitle = "Scientific Real-Time";\par
                Pesgo1.PeString.SubTitle = "";\par
                Pesgo1.PeUserInterface.Dialog.RandomPointsToExport = false;\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
\par
                Pesgo1.PePlot.Allow.Bar = false;\par
                Pesgo1.PeUserInterface.Dialog.PlotCustomization = false;\par
                Pesgo1.PeUserInterface.Allow.Popup = true;\par
                Pesgo1.PeUserInterface.Dialog.Page2 = true;\par
                Pesgo1.PeUserInterface.Dialog.Axis = false;\par
\par
                Pesgo1.PeUserInterface.Dialog.Subsets = false;\par
                Pesgo1.PeUserInterface.Allow.TextExport = false;\par
                Pesgo1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pesgo1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pesgo1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
\par
                // Set Various Other Properties //\par
\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true; \par
                Pesgo1.PeFont.Fixed = true;\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 255, 255, 255);\par
                Pesgo1.PeColor.SubsetColors[1] = Color.FromArgb(255, 0, 255, 255);\par
                Pesgo1.PeColor.SubsetColors[2] = Color.FromArgb(255, 255, 255, 0);\par
                Pesgo1.PeColor.SubsetColors[3] = Color.FromArgb(255, 0, 255, 0);\par
\par
                Pesgo1.PePlot.DataShadows = DataShadows.None;\par
                Pesgo1.PePlot.SubsetLineTypes[0] = LineType.ThinSolid;\par
                Pesgo1.PePlot.SubsetLineTypes[1] = LineType.ThinSolid;\par
                Pesgo1.PePlot.SubsetLineTypes[2] = LineType.ThinSolid;\par
                Pesgo1.PePlot.SubsetLineTypes[3] = LineType.ThinSolid;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // Setting to help with new Direct3D rendering and example expanded to 400K points //\par
                Pesgo1.PePlot.Option.NullDataGaps = false;\par
                Pesgo1.PeUserInterface.Cursor.HourGlassThreshold = 10000000;\par
                Pesgo1.PeData.Filter2D = Filter2D.Fastest; \par
                Pesgo1.PeAnnotation.Show = true;\par
                Pesgo1.PeAnnotation.Line.RightMargin = "XXXXXXXXXXXX";\par
                Pesgo1.PeConfigure.ImageAdjustLeft = 100;\par
                Pesgo1.PeSpecial.AutoImageReset = false;  // important for Direct3D rendering \par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                // Composite2D3D // Faster settings are 1-force only one D2D layer in back, 2-force only one D2D layer in front \par
                // Default setting 0 creates 2 D2D layers, one in back ground and one in foreground, allowing normal separation \par
                // of graphics as properties dictate.\par
                Pesgo1.PeConfigure.Composite2D3D = Composite2D3D.Background; \par
\par
                // Reset image //\par
                Pesgo1.PeFunction.Force3dxNewColors = true;\par
                Pesgo1.PeFunction.Force3dxVerticeRebuild = true;\par
                Pesgo1.PeFunction.ReinitializeResetImage();\par
\par
                // Start Timer //\par
                MainWindow.Timer1.Interval = 20;\par
                MainWindow.Timer1.Start();\par
\par
                /*///////////////////////////////////////\par
                // Code from the Timer Event is below////\par
                /////////////////////////////////////////\par
\par
                // file scope pre allocated, make sure to use Single (4 byte floats) //\par
                //float[] tmpYData = new float[500000];\par
                //float[] tmpXData = new float[400000];\par
                //float[] tmpYData2 = new float[400000];\par
\par
                Random rn = new Random();\par
                i = rn.Next(4500); // randomize the start of waveform data to produce variation\par
                // Prepare new data in tmpYData2 based of random point offset in tmpYData\par
                Array.Copy(tmpYData, i, tmpYData2, 0, 100000);\par
                Array.Copy(tmpYData, i + 125000, tmpYData2, 100000, 100000);\par
                Array.Copy(tmpYData, i + 250000, tmpYData2, 200000, 100000);\par
                Array.Copy(tmpYData, i + 375000, tmpYData2, 300000, 100000);\par
                // Pass the new block of memory to chart \par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, tmpYData2, 400000);\par
\par
                // Add a random line annotation //\par
                float fShift;\par
                fShift = 14.0F + (float)(Rand_Num.NextDouble()) * 3.0F;\par
\par
                Pesgo1.PeAnnotation.Line.YAxis[0] = fShift;\par
                Pesgo1.PeAnnotation.Line.YAxisType[0] = LineAnnotationType.ThickDot;\par
                Pesgo1.PeAnnotation.Line.YAxisColor[0] = Color.FromArgb(255, 255, 0, 0);\par
                int value = (int)fShift;\par
                string output = string.Format("\{0\}\{1:D\}\{2\}", "\{", value, "\}");\par
                Pesgo1.PeAnnotation.Line.YAxisText[0] = "|R" + output;\par
                Pesgo1.PeAnnotation.Line.YAxisAxis[0] = 0;\par
                Pesgo1.PeAnnotation.Line.YAxisInFront[0] = AnnotationInFront.InFront;\par
                Pesgo1.PeAnnotation.Show = true;\par
                Pesgo1.PeAnnotation.Line.RightMargin = "XXXXXXXXXXXX";\par
                Pesgo1.PeConfigure.ImageAdjustLeft = 100;\par
\par
                // Construct a simple table annotation //\par
                Pesgo1.PeAnnotation.Table.Working = 0;\par
                Pesgo1.PeAnnotation.Table.Rows = 7;\par
                Pesgo1.PeAnnotation.Table.Columns = 1;\par
                Pesgo1.PeAnnotation.Table.TextSize = 95;\par
\par
                Int32 r, c;\par
                c = 0;\par
                for (r = 0; r < 7; r++)\par
                \{\par
                    Pesgo1.PeAnnotation.Table.Text[r, c] = String.Format("   \{0:###0.000\}", (System.Math.Sin(0.3 * c + 1) * 500.0) + ((float)(Rand_Num.NextDouble()) * 50));\par
                    Pesgo1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 255, 0, 0);\par
                \}\par
                // Other Table Related Properties ///\par
                Pesgo1.PeAnnotation.Table.Show = true;\par
                Pesgo1.PeAnnotation.Table.Location = SGraphTALocation.InsidePixelUnits;\par
                Pesgo1.PeAnnotation.Table.X = Pesgo1.Width - 80;\par
                Pesgo1.PeAnnotation.Table.Y = 10;\par
                Pesgo1.PeAnnotation.Table.BackColor = Color.FromArgb(0, 0, 0, 0);\par
                Pesgo1.PeAnnotation.Table.Border = TABorder.NoBorder;\par
\par
                // Construct a simple table annotation //\par
                Pesgo1.PeAnnotation.Table.Working = 1;\par
                Pesgo1.PeAnnotation.Table.Rows = 17;\par
                Pesgo1.PeAnnotation.Table.Columns = 1;\par
                Pesgo1.PeAnnotation.Table.TextSize = 95;\par
\par
                c = 0;\par
                for (r = 0; r < 17; r++)\par
                \{\par
                    Pesgo1.PeAnnotation.Table.Text[r, c] = String.Format("   \{0:###0.000\}", (System.Math.Sin(0.3 * c + 1) * 500.0) + ((float)(Rand_Num.NextDouble()) * 50));\par
                    Pesgo1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 255, 0, 0);\par
                \}\par
                // Other Table Related Properties ///\par
                Pesgo1.PeAnnotation.Table.Show = true;\par
                Pesgo1.PeAnnotation.Table.Location = SGraphTALocation.InsidePixelUnits;\par
                Pesgo1.PeAnnotation.Table.X = Pesgo1.Width - 80;\par
                Pesgo1.PeAnnotation.Table.Y = Pesgo1.Height - 265;\par
                Pesgo1.PeAnnotation.Table.BackColor = Color.FromArgb(0, 0, 0, 0);\par
                Pesgo1.PeAnnotation.Table.Border = TABorder.NoBorder;\par
\par
                // Construct a simple table annotation //\par
                Pesgo1.PeAnnotation.Table.Working = 2;\par
                Pesgo1.PeAnnotation.Table.Rows = 3;\par
                Pesgo1.PeAnnotation.Table.Columns = 2;\par
                Pesgo1.PeAnnotation.Table.TextSize = 95;\par
\par
                c = 0;\par
                for (r = 0; r < 3; r++)\par
                \{\par
                    Pesgo1.PeAnnotation.Table.Text[r, c] = "";\par
                    Pesgo1.PeAnnotation.Table.Type[r, c] = LegendAnnotationType.SquareSolid;\par
\par
                    if (value == 14)\par
                    \{\par
                        int nRnd = (int)((Rand_Num.NextDouble()) * 3.0F);\par
                        if (nRnd < 2)\par
                            Pesgo1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 0, 255, 0);\par
                        else\par
                            Pesgo1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 255, 0, 0);\par
                    \}\par
                    else\par
                        Pesgo1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 255, 255, 255);\par
                \}\par
\par
                c = 1;\par
                for (r = 0; r < 3; r++)\par
                \{\par
                    Pesgo1.PeAnnotation.Table.Text[r, c] = "";\par
                    Pesgo1.PeAnnotation.Table.Type[r, c] = LegendAnnotationType.SquareSolid;\par
\par
                    if (value == 15)\par
                        Pesgo1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 255, 0, 0);\par
                    else\par
                        Pesgo1.PeAnnotation.Table.Color[r, c] = Color.FromArgb(255, 255, 255, 255);\par
                \}\par
\par
                // Other Table Related Properties ///\par
                Pesgo1.PeAnnotation.Table.Show = true;\par
                Pesgo1.PeAnnotation.Table.Location = SGraphTALocation.InsidePixelUnits;\par
                Pesgo1.PeAnnotation.Table.X = 15;\par
                Pesgo1.PeAnnotation.Table.Y = Pesgo1.Height - 75;\par
                Pesgo1.PeAnnotation.Table.BackColor = Color.FromArgb(0, 0, 0, 0);\par
                Pesgo1.PeAnnotation.Table.Border = TABorder.NoBorder;\par
\par
                // color the axis 0\par
                if (value == 16)\par
                    Pesgo1.PeColor.YAxis = Color.FromArgb(255, 255, 0, 0);\par
                else\par
                    Pesgo1.PeColor.YAxis = Color.FromArgb(255, 255, 255, 255);\par
\par
                if (Pesgo1.PeConfigure.RenderEngine == RenderEngine.Direct3D)\par
                    Pesgo1.PeFunction.Force3dxVerticeRebuild = true;\par
                else\par
                \{\par
                    Pesgo1.PeFunction.Reinitialize(); // Because 115 create sets AutoImageReset = False, we need to call PEreinitialize to re-filter new data\par
                    Pesgo1.PeFunction.ResetImage(0, 0);\par
                \}\par
\par
                Pesgo1.Invalidate();      \par
                  \par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 116)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //116  Scientific Graph showing real-time 2\par
\par
                //! Chart fills 100 points autoscaling x axis is it\par
                //! is filled.  Once 100 point have been passed, the\par
                //! chart then acts as a strip chart.\par
\par
                Pesgo1.PeData.Subsets = 1;\par
                Pesgo1.PeData.Points = 100;\par
\par
                // Set Manual Y scale //\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 1;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 100;\par
\par
                // Clear out default data //\par
                Pesgo1.PeData.X[0, 0] = 0;\par
                Pesgo1.PeData.X[0, 1] = 0;\par
                Pesgo1.PeData.X[0, 2] = 0;\par
                Pesgo1.PeData.X[0, 3] = 0;\par
                Pesgo1.PeData.Y[0, 0] = 0;\par
                Pesgo1.PeData.Y[0, 1] = 0;\par
                Pesgo1.PeData.Y[0, 2] = 0;\par
                Pesgo1.PeData.Y[0, 3] = 0;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkInset;\par
\par
                // Set various properties //\par
                Pesgo1.PeString.MainTitle = "Scientific Real-Time Example";\par
                Pesgo1.PeString.SubTitle = "";\par
                Pesgo1.PeUserInterface.Dialog.RandomPointsToExport = true;\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PePlot.Allow.Bar = false;\par
                Pesgo1.PeUserInterface.Allow.Popup = false;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
                Pesgo1.PeFont.Fixed = true;\par
\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeFont.SizeGlobalCntl = 1.4F;\par
\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 0, 150, 200);\par
                Pesgo1.PePlot.SubsetLineTypes[0] = LineType.MediumThickSolid;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusBestFitCurve;\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPaddingX = 0;\par
                // Not ideal for real-time, but nice for presentation/demonstration \par
                Pesgo1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pesgo1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
\par
                Pesgo1.PeConfigure.ImageAdjustLeft = 50;\par
                Pesgo1.PeConfigure.ImageAdjustRight = 0;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
\par
                Pesgo1.PeFunction.ReinitializeResetImage();\par
\par
                // Initialize Counters and Timer //\par
                MainWindow.m_nRealTimeCounter = 1;\par
                MainWindow.m_nSinCounter = 1;\par
\par
                MainWindow.Timer1.Interval = 25;\par
                MainWindow.Timer1.Start();\par
\par
                /*////////////////////////////////////////\par
                // Code from the Timer Event is below ///\par
                /////////////////////////////////////////\par
                float newy, newx;\par
\par
                // New y value and x value //\par
                newy = (float)(50 + (Math.Sin(m_nSinCounter * 0.075) * 30) + (Rand_Num.NextDouble() * 15));\par
                newx = m_nRealTimeCounter;\par
\par
                // Append new values  //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendYData, newy, 1);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendXData, newx, 1);\par
\par
                // Increment counter ///\par
                m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
\par
                // SinCounter is only to produce sin wave data ///\par
                m_nSinCounter = m_nSinCounter + 1;\par
\par
                if (m_nSinCounter > 30000)\par
                    m_nSinCounter = 1;\par
\par
                // Update image and force paint //\par
                Pesgo1.PeFunction.ReinitializeResetImage();\par
                Pesgo1.Invalidate();\par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 117)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //117  Scientific Graph showing real-time 3\par
\par
                //! Chart fills 100 points but x axis is initially\par
                //! manually scaled.  Once 100 point have been passed,\par
                //! the chart switches to autoscaling the x axis.\par
\par
                Pesgo1.PeData.Subsets = 1;\par
                Pesgo1.PeData.Points = 100;\par
\par
                // Set Manual Y scale //\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 1;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 100;\par
\par
                // Set Manual X scale//\par
                Pesgo1.PeGrid.Configure.ManualScaleControlX = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinX = 1;\par
                Pesgo1.PeGrid.Configure.ManualMaxX = 100;\par
\par
                // Clear out default data //\par
                Pesgo1.PeData.X[0, 0] = 0;\par
                Pesgo1.PeData.X[0, 1] = 0;\par
                Pesgo1.PeData.X[0, 2] = 0;\par
                Pesgo1.PeData.X[0, 3] = 0;\par
                Pesgo1.PeData.Y[0, 0] = 0;\par
                Pesgo1.PeData.Y[0, 1] = 0;\par
                Pesgo1.PeData.Y[0, 2] = 0;\par
                Pesgo1.PeData.Y[0, 3] = 0;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkShadow;\par
\par
                // Set various properties //\par
                Pesgo1.PeString.MainTitle = "Scientific Real-Time Example";\par
                Pesgo1.PeString.SubTitle = "";\par
                Pesgo1.PeUserInterface.Dialog.RandomPointsToExport = true;\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PePlot.Allow.Bar = false;\par
                Pesgo1.PeUserInterface.Allow.Popup = false;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
                Pesgo1.PeFont.Fixed = true;\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 200, 158, 0);\par
\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeFont.SizeGlobalCntl = 1.4F;\par
\par
                Pesgo1.PePlot.SubsetLineTypes[0] = LineType.MediumThickSolid;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusBestFitLine;\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPaddingX = 0;\par
                // Not ideal for real-time, but nice for presentation/demonstration \par
                Pesgo1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pesgo1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
\par
                Pesgo1.PeConfigure.ImageAdjustLeft = 50;\par
                Pesgo1.PeConfigure.ImageAdjustRight = 0;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
\par
                Pesgo1.PeFunction.ReinitializeResetImage();\par
\par
                // Initialize Counters and Timer //\par
                MainWindow.m_nRealTimeCounter = 1;\par
                MainWindow.m_nSinCounter = 1;\par
\par
                MainWindow.Timer1.Interval = 25;\par
                MainWindow.Timer1.Start();\par
\par
                /*////////////////////////////////////////\par
                // Code from the Timer Event is below ////\par
                //////////////////////////////////////////\par
                float newy, newx;\par
\par
                // New y value and x value //\par
                newy = (float)(50 + (Math.Sin(m_nSinCounter * 0.075) * 30) + (Rand_Num.NextDouble() * 15));\par
                newx = m_nRealTimeCounter;\par
\par
                // Append new values  //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendYData, newy, 1);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendXData, newx, 1);\par
\par
                // Increment counter ///\par
                m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
\par
                // Switch to AutoScaling x axis after receiving 100 data points ///\tab\tab\tab\tab\par
                if (m_nSinCounter == 100)\par
                    Pesgo1.PeGrid.Configure.ManualScaleControlX = ManualScaleControl.None;\par
\par
                // SinCounter is only to produce sin wave data ///\par
                m_nSinCounter = m_nSinCounter + 1;\par
\par
                if (m_nSinCounter > 30000)\par
                    m_nSinCounter = 1;\par
\par
                // Update image and force paint //\par
                Pesgo1.PeFunction.ReinitializeResetImage();\par
                Pesgo1.Invalidate();\par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 118)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //118  Scientific Graph showing real-time 4\par
\par
                //! Chart fills 100 points and once 100 points have\par
                //! been passed, old data is over-written as more\par
                //! data is passed to chart.\par
\par
                Pesgo1.PeData.Subsets = 1;\par
                Pesgo1.PeData.Points = 100;\par
\par
                // Set Manual Y scale //\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 1;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 100;\par
\par
                // Set Manual X scale//\par
                Pesgo1.PeGrid.Configure.ManualScaleControlX = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinX = 1;\par
                Pesgo1.PeGrid.Configure.ManualMaxX = 100;\par
\par
                // Show Annotations //\par
                Pesgo1.PeAnnotation.Show = true;\par
\par
                // Clear out default data //\par
                Pesgo1.PeData.X[0, 0] = 0;\par
                Pesgo1.PeData.X[0, 1] = 0;\par
                Pesgo1.PeData.X[0, 2] = 0;\par
                Pesgo1.PeData.X[0, 3] = 0;\par
                Pesgo1.PeData.Y[0, 0] = 0;\par
                Pesgo1.PeData.Y[0, 1] = 0;\par
                Pesgo1.PeData.Y[0, 2] = 0;\par
                Pesgo1.PeData.Y[0, 3] = 0;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.LightLine;\par
\par
                // Set various properties //\par
                Pesgo1.PeString.MainTitle = "Scientific Real-Time Example";\par
                Pesgo1.PeString.SubTitle = "";\par
                Pesgo1.PeUserInterface.Dialog.RandomPointsToExport = true;\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PePlot.Allow.Bar = false;\par
                Pesgo1.PeUserInterface.Allow.Popup = false;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
                Pesgo1.PeFont.Fixed = true;\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(60, 0, 200, 200);\par
\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeFont.SizeGlobalCntl = 1.4F;\par
\par
                Pesgo1.PePlot.SubsetLineTypes[0] = LineType.MediumThickSolid;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Area;\par
                Pesgo1.PePlot.DataShadows = DataShadows.Shadows;\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPaddingX = 0;\par
                // Not ideal for real-time, but nice for presentation/demonstration \par
                Pesgo1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pesgo1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
                Pesgo1.PeGrid.Style = GridStyle.Dash; \par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
\par
                Pesgo1.PeFunction.ReinitializeResetImage();\par
\par
                // Initialize Counters and Timer //\par
                MainWindow.m_nRealTimeCounter = 0;\par
                MainWindow.m_nSinCounter = 1;\par
\par
                MainWindow.Timer1.Interval = 25;\par
                MainWindow.Timer1.Start();\par
\par
                /*////////////////////////////////////////\par
                // Code from the Timer Event is below ///\par
                /////////////////////////////////////////\par
                float newy, newx;\par
\par
                // New y value and x value //\par
                newy = (float)(50 + (Math.Sin(m_nSinCounter * 0.075) * 30) + (Rand_Num.NextDouble() * 15));\par
                newx = m_nRealTimeCounter;\par
\par
                // Update new data at current index //\par
                Pesgo1.PeData.Y[0, m_nRealTimeCounter] = newy;\par
                Pesgo1.PeData.X[0, m_nRealTimeCounter] = newx + 1.0F;\par
\par
                Pesgo1.PeAnnotation.Line.XAxis[0] = newx + 1.0F;\par
                Pesgo1.PeAnnotation.Line.XAxisType[0] = LineAnnotationType.MediumSolid;\par
                Pesgo1.PeAnnotation.Line.XAxisColor[0] = Color.FromArgb(255, 0, 0, 198);\par
\par
                // Increment counter//\par
                m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
\par
                // Reset counter at end of data //             \par
                if (m_nRealTimeCounter == 100)\par
                    m_nRealTimeCounter = 0;\par
\par
                // SinCounter is only to produce sin wave data //\par
                m_nSinCounter = m_nSinCounter + 1;\par
                if (m_nSinCounter > 30000)\par
                    m_nSinCounter = 1;\par
\par
                // Update image and force paint///\par
                Pesgo1.PeFunction.ReinitializeResetImage();\par
                Pesgo1.Invalidate();\par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 119)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //119  Scientific Graph showing real-time 5\par
\par
                //! Chart holds 2000 points.  Data is fed into\par
                //! data arrays at current data index.  Once 2000\par
                //! points have been passed, 250 are truncated as\par
                //! data is shifted to make room for 250 more data\par
                //! points.\par
\par
                // Depending upon ZoomMode property, this example with\par
                // either show most current 3 minutes or all data in\par
                // object.\par
\par
                Pesgo1.PeData.Subsets = 1;\par
                Pesgo1.PeData.Points = 2000;\par
\par
                Pesgo1.PeData.DateTimeMode = true;   // Date/Time Mode\par
                Pesgo1.PeData.UsingXDataii = true; // Using Double Precision XDataII\par
\par
                //Some functional attributes//     // 1440 is minutes in a day\par
                MainWindow.ZoomInterval = (3.0 / 1440.0);       // 3 minute scale zoom interval\par
                MainWindow.ZoomSmallInterval = (0.5 / 1440.0);  // 30 second scale adjustment\par
\par
                // Extents to show all data points //\par
                MainWindow.StartTime = DateTime.Now.ToOADate();\par
                Pesgo1.PeGrid.Configure.ManualScaleControlX = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinX = MainWindow.StartTime;\par
                Pesgo1.PeGrid.Configure.ManualMaxX = Pesgo1.PeGrid.Configure.ManualMinX + MainWindow.ZoomInterval;\par
\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 1;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 100;\par
\par
                //Set Zoomed partial Range of X Scale//\par
                MainWindow.ZoomStart = MainWindow.StartTime;\par
                MainWindow.ZoomEnd = MainWindow.ZoomStart + MainWindow.ZoomInterval;\par
                Pesgo1.PeGrid.Zoom.MinX = MainWindow.ZoomStart;\par
                Pesgo1.PeGrid.Zoom.MaxX = MainWindow.ZoomEnd;\par
                Pesgo1.PeGrid.Zoom.MinY = 1;\par
                Pesgo1.PeGrid.Zoom.MaxY = 100;\par
                Pesgo1.PeGrid.Zoom.Mode = true;\par
                //If ZoomMode is true, you will see 3 minutes of data//\par
                //If ZoomMode is false, you will see all data in object//\par
\par
                // Clear out default data//\par
                // No need to clear out XData since using XDataII//\par
                Pesgo1.PeData.Y[0, 0] = 0;\par
                Pesgo1.PeData.Y[0, 1] = 0;\par
                Pesgo1.PeData.Y[0, 2] = 0;\par
                Pesgo1.PeData.Y[0, 3] = 0;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                //Set various properties//\par
                Pesgo1.PeString.MainTitle = "Scientific Real-Time Example";\par
                Pesgo1.PeString.SubTitle = "";\par
                Pesgo1.PeUserInterface.Dialog.RandomPointsToExport = true;\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PePlot.Allow.Bar = false;\par
                Pesgo1.PeUserInterface.Allow.Popup = false;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
                Pesgo1.PeFont.Fixed = true;\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 200, 200, 0);\par
\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeFont.SizeGlobalCntl = 1.4F;\par
\par
                Pesgo1.PePlot.SubsetLineTypes[0] = LineType.MediumThickSolid;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Line;\par
                Pesgo1.PePlot.DataShadows = DataShadows.Shadows;\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPaddingX = 0;\par
                // Not ideal for real-time, but nice for presentation/demonstration \par
                Pesgo1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
                Pesgo1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
                Pesgo1.PeGrid.Style = GridStyle.Dash;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
\par
                Pesgo1.PeFunction.ReinitializeResetImage();\par
\par
                // Initialize Counters and Timer //\par
                MainWindow.m_nRealTimeCounter = 1;\par
                MainWindow.m_nSinCounter = 1;\par
\par
                MainWindow.Timer1.Interval = 500;\par
                MainWindow.Timer1.Start();\par
\par
                /*///////////////////////////////////////\par
                ///Code from the Timer Event is below////\par
                /////////////////////////////////////////\par
                float newy;\par
                double newx2;\par
\par
                // New y value and x value //\par
                newy = (float)(50 + (Math.Sin(m_nSinCounter * 0.075) * 30) + (Rand_Num.NextDouble() * 15));\par
                newx2 = DateTime.Now.ToOADate();\par
\par
                // Shift data when counter reaches end of data. //\par
                if (m_nRealTimeCounter >= 1999)\par
                \{\par
                    // Shift Data by 250 data points, oldest 250 will be lost.\par
                    m_nRealTimeCounter = m_nRealTimeCounter - 250;\par
\par
                    float[] NewYData = new float[250];\par
                    double[] NewXData = new double[250];\par
                    Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendYData, NewYData, 250);\par
                    Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.AppendXDataII, NewXData, 250);\par
                \}\par
\par
                // Store new values at current index //\par
                Pesgo1.PeData.Xii[0, m_nRealTimeCounter] = newx2;\par
                Pesgo1.PeData.Y[0, m_nRealTimeCounter] = newy;\par
\par
                // Increment index counter //\par
                m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
\par
                // SinCounter is only to produce sin wave data //\par
                m_nSinCounter = m_nSinCounter + 1;\par
                if (m_nSinCounter > 30000)\par
                    m_nSinCounter = 1;\par
\par
                // If current time is beyond zoom max, the re-adjust zoom max //\par
                if (newx2 > ZoomEnd)\par
                \{\par
                    ZoomEnd = ZoomEnd + ZoomSmallInterval;\par
                    ZoomStart = ZoomEnd - ZoomInterval;\par
                    Pesgo1.PeGrid.Zoom.MinX = ZoomStart;\par
                    Pesgo1.PeGrid.Zoom.MaxX = ZoomEnd;\par
                    Pesgo1.PeGrid.Configure.ManualMinX = Pesgo1.PeData.Xii[0, 1];\par
                    Pesgo1.PeGrid.Configure.ManualMaxX = ZoomEnd;\par
                \}\par
\par
                // Update image and force paint //\par
                Pesgo1.PeFunction.ReinitializeResetImage();\par
                Pesgo1.Invalidate();\par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 120)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //120  Scientific Graph showing 2D contour colors\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
                //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. //\par
\par
                // Enable middle mouse dragging //\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Code to get partial data from a binary file //\par
                Int32 Row, Col, o, nQ, nStartRow, nStartCol;\par
                Int32 nEndRow, nEndCol, nTargetRows, nTargetCols;\par
\par
                nStartRow = 100;\par
                nEndRow = 150;\par
                nTargetRows = nEndRow - nStartRow + 1;\par
                nStartCol = 200;\par
                nEndCol = 250;\par
                nTargetCols = nEndCol - nStartCol + 1;\par
                nQ = nTargetRows * nTargetCols;\par
\par
                Int32[] pElevData = new Int32[2250000];\par
\par
                String filepath = null;\par
                filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
                System.IO.FileStream fs = null;\par
                try\par
                \{\par
                    fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
\par
                System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
\par
                for (o = 0; o < 2250000; o++)\par
                    pElevData[o] = r.ReadInt32();\par
                fs.Close();\par
\par
                float[] pMyXData = new float[nQ];\par
                float[] pMyYData = new float[nQ];\par
                float[] pMyZData = new float[nQ];\par
\par
                Int32 rowcounter, colcounter;\par
                Boolean foundtargetindex = false;\par
                Int32 s;\par
                rowcounter = 0;\par
                colcounter = 0;\par
\par
                for (Row = 0; Row < 1500; Row++)\par
                \{\par
                    for (Col = 0; Col < 1500; Col++)\par
                    \{\par
                        foundtargetindex = false;\par
                        if (Row >= nStartRow && Row <= nEndRow)\par
                        \{\par
                            if (Col >= nStartCol && Col <= nEndCol)\par
                            \{\par
                                foundtargetindex = true;\par
                                o = (rowcounter * nTargetRows) + colcounter;\par
                                pMyXData[o] = Col + 1;\par
                                pMyYData[o] = Row + 1;\par
\par
                                float f = (float)(pElevData[(Row * 1500) + Col]);\par
\par
                                if (f < 14100.0f) \{ f = 0.00F; \} // testing / creating null data portions\par
\par
                                pMyZData[o] = f * .01F;\par
                            \}\par
                        \}\par
                        if(foundtargetindex)\par
                            colcounter = colcounter + 1;\par
                    \}\par
                    if(foundtargetindex) \par
                        rowcounter = rowcounter + 1;\par
                \}\par
\par
                Pesgo1.PeData.NullDataValueZ = 0.0F;\par
\par
                Pesgo1.PeData.Subsets = nTargetRows;\par
                Pesgo1.PeData.Points = nTargetCols;\par
\par
                // Perform the actual transfer of data //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, pMyXData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, pMyYData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, pMyZData, nQ);\par
\par
                Pesgo1.PeLegend.ContourLegendPrecision = ContourLegendPrecision.ThreeDecimals;\par
\par
                // Optionally to manually create a contour scale independent of data //\par
                // As data changes between various charts, the scale remains the same. //\par
                //Pesgo1.PeGrid.Configure.ManualScaleControlZ = ManualScaleControl.MinMax;\par
                //Pesgo1.PeGrid.Configure.ManualMinZ = 144.0F;\par
                //Pesgo1.PeGrid.Configure.ManualMaxZ = 169.0F;\par
\par
                // Optional method of Setting Contour Color regions //\tab\tab\tab\par
                //for( s = 0; s <= 31; s++)\par
                //\{\par
                //    Pesgo1.PeColor.SubsetColors[s] = Color.FromArgb(255, 0, (byte) (31 + (s * 7)), (byte) (95 + (s * 5)));\par
                //    Pesgo1.PeColor.SubsetColors[s + 32] = Color.FromArgb(255, 0, (byte) (95 + (s * 5)), 0);\par
                //\}\tab\tab\tab\tab\par
                //for(s = 0; s <= 35; s++)\par
                //    Pesgo1.PeColor.SubsetColors[s + 64] = Color.FromArgb(255, (byte) (128 + (s * 3)), (byte) (128 + (s * 3)), (byte) (128 + (s * 3)));\par
\par
                // v9 features, // optional method of setting sizes of contour color regions \par
                Pesgo1.PeColor.ContourColorProportions[0] = .1F;\par
                Pesgo1.PeColor.ContourColorProportions[1] = .05F;\par
                Pesgo1.PeColor.ContourColorProportions[2] = .1F;\par
                Pesgo1.PeColor.ContourColorProportions[3] = .63F;\par
                Pesgo1.PeColor.ContourColorProportions[4] = .06F;\par
                Pesgo1.PeColor.ContourColorProportions[5] = .06F;\par
                Pesgo1.PeColor.ContourColorBlends = 10;  // this must be set before COLORSET, COLORSET ALWAYS LAST \par
                Pesgo1.PeColor.ContourColorAlpha = 155;\par
                Pesgo1.PeColor.ContourColorSet = ContourColorSet.BlueCyanGreenYellowBrownWhite;\par
\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPadding = 0;\par
\par
                // For when ViewingStyle is monochrome //\tab\tab\tab\tab\par
                for(s = 0; s < 30; s++)\par
                    Pesgo1.PeColor.SubsetShades[s] = Color.FromArgb(255, (byte) (50 + (s * 2)), (byte) (50 + (s * 2)), (byte) (50 + (s * 2)));\par
\par
                Pesgo1.PeLegend.ContourStyle = true;\par
                Pesgo1.PePlot.Option.GraphDataLabels = true;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.MediumLine;\par
                Pesgo1.PeConfigure.BorderTypes = TABorder.Inset;\par
\par
                // Set the plotting method ///\par
                Pesgo1.PePlot.Allow.ContourColors = true;\par
                Pesgo1.PePlot.Allow.ContourLines = true;\par
                Pesgo1.PePlot.Allow.ContourColorsShadows = true;\par
                Pesgo1.PePlot.Option.ContourLinesColored = true;\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.ContourColors;\par
                Pesgo1.PeUserInterface.Menu.DataShadow = MenuControl.Hide;\par
\par
                Pesgo1.PeLegend.Location = LegendLocation.Left;\par
\par
                // Optional, instead of showing default numeric labels, replace with custom strings\par
                //Pesgo1.PeString.ContourLabels[0] = "0";\par
                //Pesgo1.PeString.ContourLabels[19] = "20";\par
                //Pesgo1.PeString.ContourLabels[39] = "40";\par
                //Pesgo1.PeString.ContourLabels[59] = "60";\par
                //Pesgo1.PeColor.ContourColorSet = ContourColorSet.BlueGreenYellowRed;\par
\par
                Pesgo1.PeGrid.InFront = true;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeGrid.Style = GridStyle.Dot; \par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelFunction = MouseWheelFunction.HorizontalVerticalZoom;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 4;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelZoomFactor = 1.35F;\par
                Pesgo1.PeGrid.GridBands = false;\par
\par
                // Disable other non contour plotting method //\par
                Pesgo1.PePlot.Allow.Line = false;\par
                Pesgo1.PePlot.Allow.Point = false;\par
                Pesgo1.PePlot.Allow.Bar = false;\par
                Pesgo1.PePlot.Allow.Area = false;\par
                Pesgo1.PePlot.Allow.Spline = false;\par
                Pesgo1.PePlot.Allow.SplineArea = false;\par
                Pesgo1.PePlot.Allow.PointsPlusLine = false;\par
                Pesgo1.PePlot.Allow.PointsPlusSpline = false;\par
                Pesgo1.PePlot.Allow.BestFitCurve = false;\par
                Pesgo1.PePlot.Allow.BestFitLine = false;\par
                Pesgo1.PePlot.Allow.Stick = false;\par
\par
                // Set Titles //\par
                Pesgo1.PeString.MainTitle = "Elevation Example";\par
                Pesgo1.PeString.SubTitle = "";\par
\par
                // So contour goes to edge of grid //\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPadding = 0;\par
\par
                // Set small font size //\par
                Pesgo1.PeFont.FontSize = FontSize.Small;\par
                Pesgo1.PeFont.Fixed = true;\par
\par
                // Disable appropriate tabs //\par
                Pesgo1.PeUserInterface.Dialog.Axis = false;\par
                Pesgo1.PeUserInterface.Dialog.Style = false;\par
                Pesgo1.PeUserInterface.Dialog.Subsets = false;\par
\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingVertZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Medium;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                Pesgo1.PeUserInterface.HotSpot.Data = true; // try both ways true and false;\par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.ZValue;\par
\par
                // v9 features \par
                Pesgo1.PeUserInterface.Cursor.TrackingTooltipTitle = "USA Dallas area";\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pesgo1.PeUserInterface.Cursor.TrackingCustomDataText = true;\par
                Pesgo1.PeUserInterface.Cursor.Hand = (int) Gigasoft.ProEssentials.Enums.MouseCursorStyles.Arrow;\par
\par
                // v9 features \par
                Pesgo1.PeColor.GraphBmpAlways = true;\par
                Pesgo1.PeColor.GraphBackground = Color.Empty;\par
                Pesgo1.PeColor.GraphBmpFilename = "usmid.jpg";\par
                Pesgo1.PeColor.GraphBmpStyle  = BitmapStyle.BitBltZooming;\par
\par
                // v9 features \par
                // optionally control the relationship between the zoomable background bitmap and the data units. \par
                //Pesgo1.PeGrid.Configure.GraphBmpMinX = 200.0F;\par
                //Pesgo1.PeGrid.Configure.GraphBmpMaxX = 260.0F;\par
                //Pesgo1.PeGrid.Configure.GraphBmpMinY = 100.0F;\par
                //Pesgo1.PeGrid.Configure.GraphBmpMaxY = 160.0F;\par
\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
\par
                Pesgo1.PeConfigure.Composite2D3D = Composite2D3D.Foreground;\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pesgo1.PeFunction.Force3dxNewColors = true;\par
                Pesgo1.PeFunction.Force3dxVerticeRebuild = true;\par
\par
                /*\par
                ///////////////\par
                // MouseMove //\par
                ///////////////\par
                Int32 nLeft, nTop, nRight, nBottom, pX, pY;\par
                Point pt;\par
                System.Drawing.Rectangle rect;\par
\par
                // test to see if this is within grid area //'\par
                rect = Pesgo1.PeFunction.GetRectGraph();\par
                nTop = (int)rect.Top;\par
                nLeft = (int)rect.Left;\par
                nRight = (int)rect.Right;\par
                nBottom = (int)rect.Bottom;\par
\par
                // get last mouse location within control //'\par
                pt = Pesgo1.PeUserInterface.Cursor.LastMouseMove;\par
                pX = (int)pt.X;\par
                pY = (int)pt.Y;\par
\par
                if (pX > nLeft && pX < nRight && pY > nTop && pY < nBottom)\par
                \{\par
                    if (Pesgo1.PeUserInterface.HotSpot.Data == false)\par
                    \{\par
                        this.Text = "Interpolated Z: " + String.Format("\{0:0.000\}", Pesgo1.PeUserInterface.Cursor.CursorValueZ);\par
                    \}\par
                    else\par
                    \{\par
                        Int32 extra1, extra2;\par
                        Gigasoft.ProEssentials.Structs.HotSpotData ds;\par
\par
                        // Calls to fill hot spot data structure with hot spot data at given x and y\par
                        Pesgo1.PeFunction.GetHotSpot(pX, pY);\par
\par
                        // Calls PEgethotspot //'\par
                        ds = Pesgo1.PeFunction.GetHotSpotData();\par
                        extra1 = ds.Data1;\par
                        extra2 = ds.Data2;\par
\par
                        if (ds.Type == HotSpotType.DataPoint)\par
                        \{\par
                            this.Text = "Z Data: " + Pesgo1.PeData.Z[extra1, extra2].ToString();\par
                        \}\par
                    \}\par
                \}\par
\par
                //////////////////////////////\par
                // PeCustomTrackingDataText //\par
                //////////////////////////////\par
                string s;\par
                s = String.Format("X : \{0:0.00\}  \\n", Pesgo1.PeUserInterface.Cursor.CursorValueX);\par
                s += String.Format("Y : \{0:0.00\} \\n", Pesgo1.PeUserInterface.Cursor.CursorValueY);\par
                s += String.Format("Z : \{0:0.00\} ", Pesgo1.PeUserInterface.Cursor.CursorValueZ);\par
                e.TrackingText = s;\par
                  \par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 121)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //121  Scientific Graph showing 2D contour lines\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
                //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. //\par
\par
                //! This example shows square symbol annotations along with contour.\par
\par
                // Enable middle mouse dragging //\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Code to get partial data from a binary file //\par
                Int32 Row, Col, o, nQ, nStartRow, nStartCol;\par
                Int32 nEndRow, nEndCol, nTargetRows, nTargetCols;\par
\par
                nStartRow = 300;\par
                nEndRow = 350;\par
                nTargetRows = nEndRow - nStartRow + 1;\par
                nStartCol = 50;\par
                nEndCol = 100;\par
                nTargetCols = nEndCol - nStartCol + 1;\par
                nQ = nTargetRows * nTargetCols;\par
\par
                Int32[] pElevData = new Int32[2250000];\par
\par
                String filepath = null;\par
                filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
                System.IO.FileStream fs = null;\par
                try\par
                \{\par
                    fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
\par
                System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
\par
                for (o = 0; o < 2250000; o++)\par
                    pElevData[o] = r.ReadInt32();\par
                fs.Close();\par
\par
                float[] pMyXData = new float[nQ];\par
                float[] pMyYData = new float[nQ];\par
                float[] pMyZData = new float[nQ];\par
\par
                Int32 rowcounter, colcounter;\par
                Boolean foundtargetindex = false;\par
                Int32 s;\par
                rowcounter = 0;\par
                colcounter = 0;\par
\par
                for (Row = 0; Row < 1500; Row++)\par
                \{\par
                    for (Col = 0; Col < 1500; Col++)\par
                    \{\par
                        foundtargetindex = false;\par
                        if (Row >= nStartRow && Row <= nEndRow)\par
                        \{\par
                            if (Col >= nStartCol && Col <= nEndCol)\par
                            \{\par
                                foundtargetindex = true;\par
                                o = (rowcounter * nTargetRows) + colcounter;\par
                                pMyXData[o] = Col + 1;\par
                                pMyYData[o] = Row + 1;\par
                                pMyZData[o] = (float)(pElevData[(Row * 1500) + Col] * 0.1);\par
                            \}\par
                        \}\par
                        if(foundtargetindex)\par
                            colcounter = colcounter + 1;\par
                    \}\par
                    if(foundtargetindex) \par
                        rowcounter = rowcounter + 1;\par
                \}\par
\par
                Pesgo1.PeData.Subsets = nTargetRows;\par
                Pesgo1.PeData.Points = nTargetCols;\par
\par
                // Perform the actual transfer of data //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, pMyXData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, pMyYData, nQ);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, pMyZData, nQ);\par
\par
                Pesgo1.PeLegend.ContourLegendPrecision = ContourLegendPrecision.ZeroDecimals; \par
\par
                // Set Contour Color regions //           \par
                Pesgo1.PeColor.ContourColorBlends = 10;\par
                Pesgo1.PeColor.ContourColorSet = ContourColorSet.BlueCyanGreenYellowBrownWhite;\par
\par
                for( s = 0; s <= 33; s++)\par
                    Pesgo1.PeColor.SubsetShades[s] = Color.FromArgb(255, (byte) (20 + (s * 7)), (byte) (20 + (s * 7)), (byte) (20 + (s * 7)));\par
\par
                Pesgo1.PeLegend.ContourStyle = true;\par
                Pesgo1.PePlot.Option.GraphDataLabels = true;\par
\par
                // v9.5\par
                Pesgo1.PeUserInterface.Menu.AnnotationControl = true;\par
\par
                // Set some random annotations //           \par
                for( s = 0; s <= 29; s++)\par
                \{\par
                    Pesgo1.PeAnnotation.Graph.X[s] = nStartCol + (Rand_Num.NextDouble() * 50);\par
                    Pesgo1.PeAnnotation.Graph.Y[s] = nStartRow + (Rand_Num.NextDouble() * 50);\par
                    Pesgo1.PeAnnotation.Graph.Type[s] = (int) GraphAnnotationType.SmallDotSolid;\par
                    Pesgo1.PeAnnotation.Graph.Color[s] = Color.FromArgb(186, 198, 0, 0);\par
                    Pesgo1.PeAnnotation.Graph.GradientStyle[s] = (int)Gigasoft.ProEssentials.Enums.PlotGradientStyle.RadialTopLeft;\par
                    Pesgo1.PeAnnotation.Graph.Shadow[s] = true;\par
                \}            \par
                for( s = 30; s <= 59; s++)\par
                \{\par
                    Pesgo1.PeAnnotation.Graph.X[s] = nStartCol + (Rand_Num.NextDouble() * 50);\par
                    Pesgo1.PeAnnotation.Graph.Y[s] = nStartRow + (Rand_Num.NextDouble() * 50);\par
                    Pesgo1.PeAnnotation.Graph.Type[s] = (int) GraphAnnotationType.SmallDotSolid;\par
                    Pesgo1.PeAnnotation.Graph.Color[s] = Color.FromArgb(186, 0, 198, 0);\par
                    Pesgo1.PeAnnotation.Graph.GradientStyle[s] = (int)Gigasoft.ProEssentials.Enums.PlotGradientStyle.RadialTopLeft;\par
                    Pesgo1.PeAnnotation.Graph.Shadow[s] = true;\par
                \}\par
                Pesgo1.PeAnnotation.Show = true;\par
                Pesgo1.PeAnnotation.Graph.ShowShadows = true;\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = false;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.LightInset;\par
\par
                // Set the plotting method //\par
                Pesgo1.PePlot.Allow.ContourColors = true;\par
                Pesgo1.PePlot.Allow.ContourLines = true;\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.ContourLines;\par
                Pesgo1.PeUserInterface.Menu.DataShadow = MenuControl.Hide;\par
                Pesgo1.PeUserInterface.Menu.MarkDataPoints = MenuControl.Hide; \par
\par
                Pesgo1.PeLegend.Location = LegendLocation.Left;;\par
                Pesgo1.PeGrid.InFront = true;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeGrid.Style = GridStyle.Dot; \par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelFunction = MouseWheelFunction.HorizontalVerticalZoom;\par
\par
                // Disable other non contour plotting method //\par
                Pesgo1.PePlot.Allow.Line = false;\par
                Pesgo1.PePlot.Allow.Point = false;\par
                Pesgo1.PePlot.Allow.Bar = false;\par
                Pesgo1.PePlot.Allow.Area = false;\par
                Pesgo1.PePlot.Allow.Spline = false;\par
                Pesgo1.PePlot.Allow.SplineArea = false;\par
                Pesgo1.PePlot.Allow.PointsPlusLine = false;\par
                Pesgo1.PePlot.Allow.PointsPlusSpline = false;\par
                Pesgo1.PePlot.Allow.BestFitCurve = false;\par
                Pesgo1.PePlot.Allow.BestFitLine = false;\par
                Pesgo1.PePlot.Allow.Stick = false;\par
\par
                // Set Titles //\par
                Pesgo1.PeString.MainTitle = "Elevation Example";\par
                Pesgo1.PeString.SubTitle = "";\par
                Pesgo1.PeGrid.Option.ShowYAxis = ShowAxis.GridNumbers;\par
                Pesgo1.PeGrid.Option.ShowXAxis = ShowAxis.GridNumbers;\par
\par
                // So contour goes to edge of grid //\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPadding = 0;\par
\par
                // Set small font size //\par
                Pesgo1.PeFont.FontSize = FontSize.Small;\par
                Pesgo1.PeFont.Fixed = true;\par
\par
                // Disable appropriate tabs //\par
                Pesgo1.PeUserInterface.Dialog.Axis = false;\par
                Pesgo1.PeUserInterface.Dialog.Style = false;\par
                Pesgo1.PeUserInterface.Dialog.Subsets = false;\par
\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingVertZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Medium;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.GdiPlus;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 122)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //122  Scientific Graph showing large 2D contour with more colors\par
\par
                //! Right button click to show popup menu. //\par
                //! Double Click to show customization dialog. //\par
                //! Left-Click and drag to draw zoom box. Use popup memu or 'z' to undo zoom. //\par
\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Code to get partial data from a binary file //\par
                Int32 Row, Col, o, nQ, nStartRow, nStartCol;\par
                Int32 nEndRow, nEndCol, nTargetRows, nTargetCols;\par
\par
                nStartRow = 1;\par
                nEndRow = 1000;\par
                nTargetRows = nEndRow - nStartRow + 1;\par
                nStartCol = 1;\par
                nEndCol = 1000;\par
                nTargetCols = nEndCol - nStartCol + 1;\par
                nQ = nTargetRows * nTargetCols;\par
\par
                Int32[] pElevData = new Int32[2250000];\par
\par
                String filepath = null;\par
                filepath = System.AppDomain.CurrentDomain.BaseDirectory + "{{\field{\*\fldinst{HYPERLINK "\\\\\\\\terrain2.bin"}}{\fldrslt{\\\\terrain2.bin\ul0\cf0}}}}\f0\fs22 ";\par
                System.IO.FileStream fs = null;\par
                try\par
                \{\par
                    fs = new System.IO.FileStream(filepath, System.IO.FileMode.Open);\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
                System.IO.BinaryReader r = new System.IO.BinaryReader(fs);\par
\par
                for (o = 0; o < 2250000; o++)\par
                    pElevData[o] = r.ReadInt32();\par
                fs.Close();\par
\par
                float[] pMyXData = new float[nTargetCols];   // v9.5\par
                float[] pMyYData = new float[nTargetRows];\par
                float[] pMyZData = new float[nQ];     // Pesgo 2D contours, the elevation/3rd dimension is zdata \par
\par
                Int32 rowcounter, colcounter;\par
                Boolean foundtargetindex = false;\par
                Int32 s;\par
                rowcounter = 0;\par
                colcounter = 0;\par
\par
                for (Row = 0; Row < 1500; Row++)\par
                \{\par
                    for (Col = 0; Col < 1500; Col++)\par
                    \{\par
                        foundtargetindex = false;\par
                        if (Row >= nStartRow && Row <= nEndRow)\par
                        \{\par
                            if (Col >= nStartCol && Col <= nEndCol)\par
                            \{\par
                                foundtargetindex = true;\par
                                if (Row == nStartRow)  // v9.5\par
                                    pMyXData[Col - nStartCol] = Col + 1;\par
                                if (Col == nStartCol)  // v9.5 \par
                                    pMyYData[Row - nStartRow] = Row + 1;\par
                                // See our help, topic SubsetByPoint to understand the below formula  // v9.5\par
                                o = (rowcounter * nTargetRows) + colcounter;\par
                                pMyZData[o] = (float)(pElevData[(Row * 1500) + Col] * 0.1);\par
                            \}\par
                        \}\par
                        if(foundtargetindex)\par
                            colcounter = colcounter + 1;\par
                    \}\par
                    if(foundtargetindex) \par
                        rowcounter = rowcounter + 1;\par
                \}\par
\par
                Pesgo1.PeData.Subsets = nTargetRows;\par
                Pesgo1.PeData.Points = nTargetCols;\par
\par
                // Perform the transfer of data //  // v9.5\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, pMyXData, nTargetCols);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, pMyYData, nTargetRows);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.ZData, pMyZData, nQ);\par
                Pesgo1.PeData.DuplicateDataX = DuplicateData.PointIncrement;  // v9.5\par
                Pesgo1.PeData.DuplicateDataY = DuplicateData.SubsetIncrement;\par
\par
                // Set Contour Color regions //           \par
                Pesgo1.PeColor.SubsetColors.Clear();\par
                for (s = 0; s <= 10; s++)\par
                \{\par
                    Pesgo1.PeColor.SubsetColors[s] = Color.FromArgb(255, 0, (byte)(31 + (s * 21)), (byte)(95 + (s * 15)));\par
                    Pesgo1.PeColor.SubsetColors[s + 11] = Color.FromArgb(255, 0, (byte)(95 + (s * 15)), 0);\par
                \}\par
                for (s = 0; s <= 14; s++)\par
                    Pesgo1.PeColor.SubsetColors[s + 22] = Color.FromArgb(255, (byte)(128 + (s * 9)), (byte)(128 + (s * 9)), (byte)(128 + (s * 9)));\par
\par
                Pesgo1.PeColor.SubsetShades.Clear(); // v9.5 \par
                for( s = 0; s <= 36; s++)\par
                    Pesgo1.PeColor.SubsetShades[s] = Color.FromArgb(255, (byte) (75 + (s * 5)), (byte) (75 + (s * 5)), (byte) (75 + (s * 5)));\par
\par
                Pesgo1.PeLegend.ContourLegendPrecision = ContourLegendPrecision.OneDecimal; \par
                Pesgo1.PeLegend.ContourStyle = true;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkShadow; \par
                Pesgo1.PeConfigure.BorderTypes = TABorder.NoBorder;\par
                Pesgo1.PeColor.GridBold = true;\par
\par
                // Set the plotting method ///\par
                Pesgo1.PePlot.Allow.ContourColors = true;\par
                Pesgo1.PePlot.Allow.ContourColorsShadows = true;\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.ContourColorsShadows;\par
                Pesgo1.PeUserInterface.Menu.DataShadow = MenuControl.Hide;\par
\par
                Pesgo1.PeLegend.Location = LegendLocation.Left;\par
                Pesgo1.PeGrid.InFront = true;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeGrid.Style = GridStyle.Dot; \par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelFunction = MouseWheelFunction.HorizontalVerticalZoom;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 3;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelZoomFactor = 1.2F;\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVertMb; // enables left click drag \par
                Pesgo1.PeGrid.GridBands = false;\par
                \par
                // Disable other non contour plotting method //\par
                Pesgo1.PePlot.Allow.Line = false;\par
                Pesgo1.PePlot.Allow.Point = false;\par
                Pesgo1.PePlot.Allow.Bar = false;\par
                Pesgo1.PePlot.Allow.Area = false;\par
                Pesgo1.PePlot.Allow.Spline = false;\par
                Pesgo1.PePlot.Allow.SplineArea = false;\par
                Pesgo1.PePlot.Allow.PointsPlusLine = false;\par
                Pesgo1.PePlot.Allow.PointsPlusSpline = false;\par
                Pesgo1.PePlot.Allow.BestFitCurve = false;\par
                Pesgo1.PePlot.Allow.BestFitLine = false;\par
                Pesgo1.PePlot.Allow.Stick = false;\par
\par
                // Set Titles //\par
                Pesgo1.PeString.MainTitle = "Elevation Example";\par
                Pesgo1.PeString.SubTitle = "";\par
\par
                // So contour goes to edge of grid //\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPadding = 0;\par
\par
                // Set small font size //\par
                Pesgo1.PeFont.FontSize = FontSize.Medium;\par
                Pesgo1.PeFont.Fixed = true;\par
\par
                // Disable appropriate tabs //\par
                Pesgo1.PeUserInterface.Dialog.Axis = false;\par
                Pesgo1.PeUserInterface.Dialog.Style = false;\par
                Pesgo1.PeUserInterface.Dialog.Subsets = false;\par
\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingVertZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
\par
                // v9.5\par
                Pesgo1.PeUserInterface.Menu.AnnotationControl = true;\par
                Pesgo1.PeUserInterface.Menu.ShowAnnotationText = MenuControl.Show;\par
\par
                // Set some random annotations //           \par
                int aCnt = 0;\par
                for (int i = 0; i <= 9; i++)\par
                \{\par
                    Pesgo1.PeAnnotation.Graph.X[aCnt] = nStartCol + (Rand_Num.NextDouble() * 1000);\par
                    Pesgo1.PeAnnotation.Graph.Y[aCnt] = nStartRow + (Rand_Num.NextDouble() * 1000);\par
                    Pesgo1.PeAnnotation.Graph.Type[aCnt] = (int)GraphAnnotationType.SmallDotSolid;\par
                    Pesgo1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 200, 200, 200);\par
                    Pesgo1.PeAnnotation.Graph.Shadow[aCnt] = true;\par
                    aCnt++;\par
                \}\par
                for (int i = 0; i <= 9; i++)\par
                \{\par
                    Pesgo1.PeAnnotation.Graph.X[aCnt] = nStartCol + (Rand_Num.NextDouble() * 1000);\par
                    Pesgo1.PeAnnotation.Graph.Y[aCnt] = nStartRow + (Rand_Num.NextDouble() * 1000);\par
                    Pesgo1.PeAnnotation.Graph.Type[aCnt] = (int)GraphAnnotationType.SmallDownTriangleSolid;\par
                    Pesgo1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    Pesgo1.PeAnnotation.Graph.Shadow[aCnt] = true;\par
                    aCnt++;\par
                    Pesgo1.PeAnnotation.Graph.X[aCnt] = Pesgo1.PeAnnotation.Graph.X[aCnt - 1];\par
                    Pesgo1.PeAnnotation.Graph.Y[aCnt] = Pesgo1.PeAnnotation.Graph.Y[aCnt - 1];\par
                    Pesgo1.PeAnnotation.Graph.Type[aCnt] = (int)Gigasoft.ProEssentials.Enums.GraphAnnotationType.Pointer;\par
                    Pesgo1.PeAnnotation.Graph.Text[aCnt] = "Annotation " + i.ToString();\par
                    Pesgo1.PeAnnotation.Graph.Color[aCnt] = Color.FromArgb(255, 255, 255, 255);\par
                    aCnt++;\par
\par
                \}\par
                Pesgo1.PeAnnotation.Show = true;\par
                Pesgo1.PeAnnotation.Graph.SizeCntl = .7F;\par
                Pesgo1.PeFont.GraphAnnotationTextSize = 100;\par
                Pesgo1.PeAnnotation.Graph.MinSymbolSize = MinimumPointSize.Large;\par
                Pesgo1.PeAnnotation.Graph.MaxSymbolSize = MinimumPointSize.Large;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
                Pesgo1.PeUserInterface.Dialog.AllowEmfExport = false; // v9.5\par
                Pesgo1.PeUserInterface.Dialog.AllowWmfExport = false;\par
\par
                Pesgo1.PeConfigure.Composite2D3D = Composite2D3D.Foreground;\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pesgo1.PeFunction.Force3dxNewColors = true;\par
                Pesgo1.PeFunction.Force3dxVerticeRebuild = true;\par
\par
                // v9 features\par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYZValues;\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.Text;\par
                Pesgo1.PeUserInterface.Cursor.HourGlassThreshold = 9999999;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 123)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //123  Scientific Graph showing large quantity of data\par
\par
                //! Plotting 12,000,000 data values. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Enable Bottom Zoom Window //\par
                Pesgo1.PePlot.ZoomWindow.Show = true;\par
\par
                // Enable MouseWheelZooming and Mouse Zooming \par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelFunction = Gigasoft.ProEssentials.Enums.MouseWheelFunction.HorizontalZoom;\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.Horizontal;\par
\par
                // Enable middle mouse dragging //\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
\par
                FileStream inStream = null;\par
                WaveReader wr;\par
\par
                // v9.5\par
                if (MainWindow.tmpSongXData == null) // only read data if we hadn't already \par
                \{\par
                    // Pardon the low quality 16000 sample wav; trying to keep the download small and wav playing code simple.\par
                    // The MFC example PEDEMO plays the wav direct to sound system and is more real time. \par
                    try\par
                    \{\par
                        inStream = File.OpenRead("triumphantfeelingss.wav");\par
                    \}\par
                    catch\par
                    \{\par
                        System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                        System.Windows.Forms.Application.Exit();\par
                    \}\par
\par
                    wr = new WaveReader(inStream);\par
                    inStream.Close();\par
\par
                    MainWindow.SongSize = wr.Frames;\par
                    MainWindow.tmpSongYData = new float[MainWindow.SongSize * 2];\par
                    MainWindow.tmpSongXData = new float[MainWindow.SongSize];\par
\par
                    for (int k = 0; k < MainWindow.SongSize; k++)\par
                    \{\par
                        MainWindow.tmpSongXData[k] = k + 1;\par
                        MainWindow.tmpSongYData[k] = (float)wr.Data[0][k] / 327.680F;\par
                        MainWindow.tmpSongYData[k + MainWindow.SongSize] = (float)wr.Data[1][k] / 327.680F;\par
                    \}\par
                \}\par
\par
                Pesgo1.PeData.Subsets = 2;\par
                Pesgo1.PeData.Points = MainWindow.SongSize;\par
\par
                // Send the address of the local data to be shared with ProEssentials      // v9.5\par
                // Only one copy of the data exists and data is not transfered or copied.  //\par
                // DuplicateDataX signals ProEssentials that only one Subsets worth of XData exists, use it for all Subsets. \par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XDataPtr, MainWindow.tmpSongXData, MainWindow.SongSize);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YDataPtr, MainWindow.tmpSongYData, MainWindow.SongSize * 2);\par
                Pesgo1.PeData.DuplicateDataX = DuplicateData.PointIncrement;   // v9.5\par
\par
                Pesgo1.PeGrid.MultiAxesSubsets[0] = 1;\par
                Pesgo1.PeGrid.MultiAxesSubsets[1] = 1;\par
\par
                Pesgo1.PePlot.Option.NullDataGaps = false;\par
                Pesgo1.PeData.NullDataValue = -999;\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Line;\par
                Pesgo1.PeUserInterface.Dialog.PlotCustomization = false;\par
\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 0, 255, 255);  \par
                Pesgo1.PeColor.SubsetColors[1] = Color.FromArgb(255, 0, 255, 255);\par
\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPadding = 1;\par
                Pesgo1.PeData.AutoScaleData = false;\par
\par
                Pesgo1.PePlot.SubsetLineTypes[0] = LineType.ThinSolid;\par
                Pesgo1.PePlot.SubsetLineTypes[1] = LineType.ThinSolid;\par
                Pesgo1.PePlot.Option.LineShadows = false;\par
                Pesgo1.PePlot.DataShadows = Gigasoft.ProEssentials.Enums.DataShadows.None;\par
\par
                Pesgo1.PeConfigure.RenderEngine = Gigasoft.ProEssentials.Enums.RenderEngine.Direct3D;\par
\par
                Pesgo1.PeColor.BitmapGradientMode = false;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                Pesgo1.PeUserInterface.Cursor.HourGlassThreshold = 1000000000;\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
                Pesgo1.PeSpecial.AutoImageReset = false;\par
\par
                Pesgo1.PeAnnotation.Line.XAxisType[0] = Gigasoft.ProEssentials.Enums.LineAnnotationType.MediumThinSolid;\par
                Pesgo1.PeAnnotation.Line.XAxisColor[0] = Color.FromArgb(255, 255, 0, 0);\par
                Pesgo1.PeAnnotation.Line.XAxisZoomWindow[0] = Gigasoft.ProEssentials.Enums.AnnotationZoomWindow.GraphAndZoomWindow;\par
                Pesgo1.PeAnnotation.Line.XAxisShow = true;\par
                Pesgo1.PeAnnotation.Line.TextSize = 100;\par
                Pesgo1.PeAnnotation.Show = true;\par
                Pesgo1.PePlot.ZoomWindow.ShowAnnotations = true;\par
\par
                Pesgo1.PeString.SubsetLabels[0] = "Left";\par
                Pesgo1.PeString.SubsetLabels[1] = "Right";\par
                Pesgo1.PeLegend.Show = false;\par
\par
                Pesgo1.PeString.YAxisLabel = "Left";\par
                Pesgo1.PeGrid.WorkingAxis = 1;\par
                Pesgo1.PeString.YAxisLabel = "Right";\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
\par
                Pesgo1.PeGrid.Option.ShowXAxis = ShowAxis.GridNumbers;\par
                Pesgo1.PePlot.ZoomWindow.ShowXAxis = false;\par
\par
                Pesgo1.PeUserInterface.Menu.IncludeDataLabels = MenuControl.Hide;\par
                Pesgo1.PeUserInterface.Menu.LegendLocation = MenuControl.Hide;\par
                Pesgo1.PeUserInterface.Menu.MarkDataPoints = MenuControl.Hide;\par
                Pesgo1.PeUserInterface.Menu.DataShadow = MenuControl.Hide;\par
                Pesgo1.PeUserInterface.Menu.DataPrecision = MenuControl.Hide;\par
\par
                Pesgo1.PeUserInterface.Dialog.RandomPointsToExport = false;\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PePlot.Allow.Bar = false;\par
                Pesgo1.PeUserInterface.Dialog.PlotCustomization = false;\par
                Pesgo1.PeUserInterface.Allow.Popup = true;\par
                Pesgo1.PeUserInterface.Dialog.Page2 = false;\par
                Pesgo1.PeUserInterface.Dialog.Axis = false;\par
                Pesgo1.PeUserInterface.Dialog.Subsets = false;\par
                Pesgo1.PeUserInterface.Allow.TextExport = false;\par
                Pesgo1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pesgo1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pesgo1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                Pesgo1.PeGrid.Option.CustomGridNumbersX = true;\par
\par
                Pesgo1.PeAnnotation.Show = true;\par
\par
                // Construct a simple table annotation //\par
                Pesgo1.PeAnnotation.Table.Working = 0;\par
                Pesgo1.PeAnnotation.Table.Rows = 1;\par
                Pesgo1.PeAnnotation.Table.Columns = 1;\par
\par
                // Set to cell types and attributes //\par
                Pesgo1.PeAnnotation.Table.Type[0, 1] = LegendAnnotationType.LargeSquareSolid;\par
\par
                if (MainWindow.bPlayingSong)\par
                \{\par
                    Pesgo1.PeAnnotation.Table.Text[0, 0] = " Stop";\par
                    Pesgo1.PeAnnotation.Table.Color[0, 0] = Color.FromArgb(255, 255, 0, 0);\par
                \}\par
                else\par
                \{\par
                    Pesgo1.PeAnnotation.Table.Text[0, 0] = " Play";\par
                    Pesgo1.PeAnnotation.Table.Color[0, 0] = Color.FromArgb(255, 0, 255, 0);\par
                \}\par
\par
                Pesgo1.PeAnnotation.Table.HotSpot[0, 0] = true;\par
\par
                // Other Table Related Properties ///\par
                Pesgo1.PeAnnotation.Table.Show = true;\par
                Pesgo1.PeAnnotation.Table.Location = SGraphTALocation.InsidePixelUnits;\par
                Pesgo1.PeAnnotation.Table.X = 10;\par
                Pesgo1.PeAnnotation.Table.Y = 5;\par
                Pesgo1.PeAnnotation.Table.BackColor = Color.FromArgb(0, 0, 0, 0);\par
                Pesgo1.PeAnnotation.Table.HeaderRows = 0;\par
                Pesgo1.PeAnnotation.Table.HeaderColumn = false;\par
                Pesgo1.PeAnnotation.Table.Border = TABorder.NoBorder;\par
                Pesgo1.PeAnnotation.Table.TextSize = 105;\par
\par
                Pesgo1.PeFont.MainTitle.Font = "Arial";\par
                Pesgo1.PeFont.SubTitle.Font = "Arial";\par
                Pesgo1.PeString.MainTitle = "|12M data points continuously redrawn|";\par
                Pesgo1.PeString.SubTitle = "|along with new annotation position|zoom with mouse wheel";\par
\par
                Pesgo1.PeData.Filter2D = Filter2D.Fastest;\par
                Pesgo1.PeSpecial.AutoImageReset = false;\par
\par
                // Improves performance by forcing Direct2D content into one layer, \par
                // The full setting for both foreground and background layers is optional though for this and many\par
                // implementations, this level of detail may not be necessary. \par
                Pesgo1.PeConfigure.Composite2D3D = Composite2D3D.Foreground;  // v9.5 \par
\par
                Pesgo1.PeFunction.Force3dxNewColors = true;\par
                Pesgo1.PeFunction.Force3dxVerticeRebuild = true;\par
\par
                // new v9 feature\par
                Pesgo1.PeUserInterface.Cursor.TrackingCustomDataText = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.Text;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
\par
                Pesgo1.PeFunction.ReinitializeResetImage();\par
                Pesgo1.Invalidate();\par
\par
                if (MainWindow.bPlayingSong)\par
                    MainWindow.aTimer.Enabled = true;\par
                else\par
                    MainWindow.aTimer.Enabled = false;\par
\par
                /*\par
                ////////////////////////////////////////////////////////////////////////////////////\par
                // Code for PeCustomTrackingDataText, Timer, PETableAnnotation PeCustomGridNumber //\par
                ////////////////////////////////////////////////////////////////////////////////////\par
                \par
                // PeCustomTrackingDataText //\par
                private void Pesgo1_PeCustomTrackingDataText(object sender, Gigasoft.ProEssentials.EventArg.CustomTrackingDataTextEventArgs e)\par
                \{\par
\tab\tab             double dX = Pesgo1.PeUserInterface.Cursor.CursorValueX;\par
                    double dY = Pesgo1.PeUserInterface.Cursor.CursorValueY;\par
\par
                    double dMinutes, dSeconds, dRem;\par
                    int nMin, nSec;\par
                    dSeconds = (dX / 16000);\par
                    dMinutes = dSeconds / 60.0F;\par
                    nMin = (int) dMinutes;\par
                    dRem = dSeconds - (60.0F * nMin);\par
                    nSec = (int) dRem;\par
                    string sTime = nMin.ToString();\par
                    sTime += String.Format(":\{0:0.000\} ", dRem);\par
                    string sAmp = String.Format("Amplitude: \{0:0.000\} \\nTime:", dY);\par
                    e.TrackingText = sAmp + sTime;\par
                \}\par
                  \par
                // Timer for example 123 to update play position with vert line annotation //\par
                static void aTimer_Tick(object sender, EventArgs e)\par
                \{\par
                    System.Windows.Application.Current.MainWindow.Dispatcher.Invoke(DispatcherPriority.Render, new NextPrimeDelegate(UpdateChart));\par
                \}\par
                // Called via Invoke via aTimer_TickTimer, for example 123 updates play position with vert line annotation //\par
                static void UpdateChart()\par
                \{\par
                    double dPos = (MainWindow.Player.controls.currentPosition * 16000) + (16000 * (80 / 1000));\par
                    sgo.PeAnnotation.Line.XAxis[0] = dPos;\par
                    if (sgo.PeGrid.Zoom.Mode)\par
                    \{\par
                        bool bChangeXView = false;  // If play position passes current viewport, then potentially update viewport range to include play position \par
                        if (dPos > sgo.PeGrid.Zoom.MaxX) \{ bChangeXView = true; \}\par
\par
                        // Test Left Mouse Button not pressed, user may be dragging ZoomBox and it would be ugly to change scale while dragging chart //\par
                        if (Mouse.LeftButton == MouseButtonState.Released)\par
                        \{\par
                            double dRange = sgo.PeGrid.Zoom.MaxX - sgo.PeGrid.Zoom.MinX;\par
\par
                            if (dRange < 16000)  // Range is less than 1 second \par
                            \{\par
                                if (bChangeXView)\par
                                \{\par
                                    sgo.PeGrid.Zoom.MaxX = dPos;\par
                                    sgo.PeGrid.Zoom.MinX = dPos - dRange;\par
                                \}\par
                                // Remove the normal x axis to replace with line annotation based custom x axis \par
                                sgo.PeGrid.Option.ShowXAxis = Gigasoft.ProEssentials.Enums.ShowAxis.Empty;\par
                                sgo.PeAnnotation.Line.XAxisType[0] = Gigasoft.ProEssentials.Enums.LineAnnotationType.NoLine;\par
                                sgo.PeAnnotation.Line.XAxis[1] = dPos - dRange;\par
                                sgo.PeAnnotation.Line.XAxisType[1] = Gigasoft.ProEssentials.Enums.LineAnnotationType.GridTick;\par
                                sgo.PeAnnotation.Line.XAxisText[1] = "|h" + ((dPos - dRange) / 16000).ToString("F6");\par
                                sgo.PeAnnotation.Line.XAxis[2] = dPos;\par
                                sgo.PeAnnotation.Line.XAxisType[2] = Gigasoft.ProEssentials.Enums.LineAnnotationType.GridTick;\par
                                sgo.PeAnnotation.Line.XAxisText[2] = "|h" + ((dPos) / 16000).ToString("F6");\par
                                sgo.PeAnnotation.Line.BottomMargin = "XX"; // Add margin for special x axis via line annotations for less than 1 second display \par
                            \}\par
                            else  // Range is more than 1 second \par
                            \{\par
                                if (bChangeXView)\par
                                \{\par
                                    sgo.PeGrid.Zoom.MaxX = dPos + dRange;\par
                                    sgo.PeGrid.Zoom.MinX = dPos;\par
                                \}\par
                                // Show normal x axis, though its not totally normal as its a custom event based x axis\par
                                sgo.PeGrid.Option.ShowXAxis = Gigasoft.ProEssentials.Enums.ShowAxis.All;\par
                                sgo.PeAnnotation.Line.XAxis.Clear(1);\par
                                sgo.PeAnnotation.Line.XAxisType.Clear(1);\par
                                sgo.PeAnnotation.Line.XAxisText.Clear(1);\par
                                sgo.PeAnnotation.Line.XAxisType[0] = Gigasoft.ProEssentials.Enums.LineAnnotationType.MediumThinSolid;\par
                                sgo.PeAnnotation.Line.BottomMargin = ""; // Clear margin space for normal x axis\par
                            \}\par
                        \}\par
                    \}\par
                    sgo.Invalidate();\par
                \}\par
\par
                static void Player_PlayStateChange(int NewState)\par
                \{\par
                    if ((WMPLib.WMPPlayState)NewState == WMPLib.WMPPlayState.wmppsPlaying)\par
                        if ((WMPLib.WMPPlayState)NewState == WMPLib.WMPPlayState.wmppsPlaying)\par
                        \{\par
                            sgo.PeAnnotation.Table.Text[0, 0] = " Stop";\par
                            sgo.PeAnnotation.Table.Color[0, 0] = Color.FromArgb(255, 255, 0, 0);\par
                            MainWindow.bPlayingSong = true;\par
                            if (sgo.IsDxAvailable)\par
                            \{\par
                                MainWindow.aTimer.Start();\par
                                sgo.PeUserInterface.Allow.Zooming = AllowZooming.None;\par
                                // note, mouse wheel zooming is still available, only click and drag zoom is set to none\par
                            \}\par
                        \}\par
\par
                    if ((WMPLib.WMPPlayState)NewState == WMPLib.WMPPlayState.wmppsStopped)\par
                    \{\par
                        MainWindow.aTimer.Stop();\par
                        sgo.PeAnnotation.Table.Text[0, 0] = " Play";\par
                        sgo.PeAnnotation.Table.Color[0, 0] = Color.FromArgb(255, 0, 255, 0);\par
                        sgo.PeUserInterface.Allow.Zooming = AllowZooming.Horizontal;\par
                        MainWindow.bPlayingSong = false;\par
                        sgo.Invalidate();\par
                    \}\par
                \}\par
                  \par
                void Pesgo1_PeCustomGridNumber(object sender, Gigasoft.ProEssentials.EventArg.CustomGridNumberEventArgs e)\par
                \{\par
                    if (e.AxisType == 2 && m_nChart == 123)  // x axis\par
                    \{\par
                        double dMinutes, dSeconds, dRem;\par
                        int nMin;\par
                        dSeconds = (e.NumberValue / 16000);\par
                        dMinutes = dSeconds / 60.0F;\par
                        nMin = (int)dMinutes;\par
                        dRem = dSeconds - (60.0F * nMin);\par
                        string s = nMin.ToString() + ":";\par
                        string sRem = dRem.ToString("F3");\par
                        s += sRem;\par
                        e.NumberString = s;\par
                    \}\par
                \}\par
                  \par
                */\par
\par
            \}\par
            else if(MainWindow.m_nChart == 124)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //124  Scientific Graph showing programmatic horizontal zooming\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                //! Zoom logic here.  It's important that if using MultiAxesSubsets //\par
                //! that AllowZooming is set to PEAZ_HORIZONTAL to programmatically zoom. //\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.Horizontal;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
\par
                // Select desired zoom extents and enable zoomed mode //\par
                Pesgo1.PeGrid.Zoom.MinX = 40000;\par
                Pesgo1.PeGrid.Zoom.MaxX = 60000;\par
                Pesgo1.PeGrid.Zoom.Mode = true;\par
\par
                // Re-pass the data, adding more data //\par
                Pesgo1.PeData.Subsets = 2;\par
                Pesgo1.PeData.Points = 100000;\par
\par
                // Prepare data in temp arrays\par
                float[] MyYData = new float[200000];\par
                float[] MyXData = new float[200000];\par
                Int32 k, j;\par
                for (j = 0; j <= 99999; j++)\par
                \{\par
                    MyXData[j] = j + 1;\par
                    MyYData[j] = Convert.ToInt32(Math.Sin(0.0003 * j) * 500);\par
                    MyXData[100000 + j] = j + 1;\par
                    MyYData[100000 + j] = Convert.ToInt32(Math.Sin(0.00023 * j) * 500);\par
\par
                \}\par
                // Change some of the data so we can see some variations in data \par
                for (j = 0; j <= 99000; j = j + 1000)\par
                \{\par
                    for (k = 0; k <= 300; k++)\par
                    \{\par
                        MyYData[j + k] = Convert.ToInt32(MyYData[j + k] - 50 + (Rand_Num.NextDouble() * 100));\par
                        MyYData[100000 + j + k] = Convert.ToInt32(MyYData[j + k] - 50 + (Rand_Num.NextDouble() * 100));\par
                        MyYData[j + k] += (float)Math.Sin(0.00033F * j) * 300.0F; // Convert.ToInt32(MyYData[j + k] - 50 + (Rand_Num.NextDouble() * 100));\par
                    \}\par
                \}\par
                // Perform the actual transfer of data //\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.XData, MyXData, 200000);\par
                Gigasoft.ProEssentials.Api.PEvsetW(Pesgo1.PeSpecial.HObject, Gigasoft.ProEssentials.DllProperties.YData, MyYData, 200000);\par
\par
                Pesgo1.PeGrid.MultiAxesSubsets[0] = 1; // 1 subset on first axis\par
                Pesgo1.PeGrid.MultiAxesSubsets[1] = 1; // 1 subset on second axis\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.LightLine;\par
\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 0, 170, 170);\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 170, 170, 0);\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Line;\par
                Pesgo1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pesgo1.PeString.TextShadows = TextShadows.NoShadows;\par
                Pesgo1.PeLegend.Style = LegendStyle.OneLineInsideAxis;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
                Pesgo1.PeString.YAxisLabel = "";\par
                Pesgo1.PeGrid.WorkingAxis = 1;\par
                Pesgo1.PeString.YAxisLabel = "";\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
\par
                Pesgo1.PePlot.ZoomWindow.Show = true;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 125)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //125  Scientific Graph showing scatter plus data-point dragging\par
\par
                //! Click and Drag symbols with mouse. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Change the data to that of a scatter plot //\par
                Pesgo1.PeData.Subsets = 4;\par
                Pesgo1.PeData.Points = 12;\par
\par
                Int32 s, p;\par
                for( s = 0; s <= 3; s++)\par
                \{\par
                    for( p = 0; p <= 11; p++)\par
                    \{\par
                        Pesgo1.PeData.X[s, p] = (float)(25 + (Rand_Num.NextDouble() * 25.0F));\par
                        Pesgo1.PeData.Y[s, p] = (float)(90 + (Rand_Num.NextDouble() * 25.0F));\par
                    \}\par
                \}\par
\par
                // Set the PlottingMethod to point //\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusLine;\par
\par
                // Enable data hot spots //\par
                Pesgo1.PeUserInterface.HotSpot.Data = true;\par
\par
                // Make Data hots spot locations larger //\par
                Pesgo1.PeUserInterface.HotSpot.Size = HotSpotSize.Large;\par
\par
                // Disable some types of plotting methods //\par
                Pesgo1.PePlot.Allow.Spline = false;\par
                Pesgo1.PePlot.Allow.SplineArea = false;\par
                Pesgo1.PePlot.Allow.PointsPlusSpline = false;\par
                Pesgo1.PePlot.Allow.BestFitLine = false;\par
                Pesgo1.PePlot.Allow.BestFitCurve = false;\par
                Pesgo1.PePlot.Allow.Area = false;\par
\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                /*////////////////////////////////////////////////\par
                // Code below is how dragging logic is formed ///\par
                /////////////////////////////////////////////////\par
                //////////////////////////////////////////////////////////////////\par
                // In the Forms Class Declarations sections, add some variables //\par
                //////////////////////////////////////////////////////////////////\par
\par
                Boolean bDragging;\par
                Int32 nDragIndexS;\par
                Int32 nDragIndexP;\par
\par
                //////////////////////////////////////////\par
                //// From the DataHotSpot event handler //\par
                //////////////////////////////////////////\par
\par
                bDragging = true;             // Start dragging process, set flag to true\par
                nDragIndexS = e.SubsetIndex;  // Store subset index\par
                nDragIndexP = e.PointIndex;   // Store point index\par
\par
                /////////////////////////////////////\par
                //From the MouseMove event handler //\par
                /////////////////////////////////////\par
                Int32 nA, nX, nY, pX, pY;\par
                double fX = 0, fY = 0;\par
                System.Drawing.Point pt;\par
\par
                // get last mouse location within control //'\par
                pt = Pesgo1.PeUserInterface.Cursor.LastMouseMove;\par
                pX = pt.X;\par
                pY = pt.Y;\par
\par
                nA = 0;    // Initialize axis if using OverlapMultiAxes, else this function will\par
                            // return the axis if MultiAxesSubsets is used without OverlapMultiAxes\par
                nX = pX;   // Initialize nX and nY with mouse location\par
                nY = pY;\par
                // This returns mouse coordinates in data units //\par
                Pesgo1.PeFunction.ConvPixelToGraph(ref nA,ref nX,ref nY,ref fX,ref fY, false, false, false);\par
\par
                // Check move-to location and restrain to the chart's extents.\par
                // Note that you can only expect to read valid ManualMinX type\par
                // properties after an initial PEactions = 0 or PEactions = 1\par
                // has been executed.\par
                if(fX <= Pesgo1.PeGrid.Configure.ManualMinX) \par
                    fX = Pesgo1.PeGrid.Configure.ManualMinX;\par
                else if(fX >= Pesgo1.PeGrid.Configure.ManualMaxX) \par
                    fX = Pesgo1.PeGrid.Configure.ManualMaxX;\par
\par
                if(fY <= Pesgo1.PeGrid.Configure.ManualMinY) \par
                    fY = Pesgo1.PeGrid.Configure.ManualMinY;\par
                else if(fY >= Pesgo1.PeGrid.Configure.ManualMaxY) \par
                    fY = Pesgo1.PeGrid.Configure.ManualMaxY;\par
\par
                // Change XData and YData to new location //'\par
                Pesgo1.PeData.X[nDragIndexS, nDragIndexP] = (float)(fX);\par
                Pesgo1.PeData.Y[nDragIndexS, nDragIndexP] = (float)(fY);\par
\par
                // Performs a PartialReinitialize, ResetImage, and Invalidate //'\par
                Pesgo1.PeFunction.PartialReinitialize();\par
                Pesgo1.PeFunction.ResetImage(0, 0);\par
                Pesgo1.Invalidate();\par
\par
                ////////////////////////////////////\par
                // From the MouseUp event handler //\par
                ////////////////////////////////////\par
                bDragging = false;\par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 126)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //126  Scientific Graph showing Bubble chart\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
                \tab\par
                // Change the data to that of a scatter plot //\par
                Pesgo1.PeData.Subsets = 4;\par
                Pesgo1.PeData.Points = 12;\par
\par
                Int32 s, p;\par
                for( s = 0; s <= 3; s++)\par
                \{\par
                    for( p = 0; p <= 11; p++)\par
                    \{\par
                        Pesgo1.PeData.X[s, p] = (float)(25 + Rand_Num.NextDouble()*(25));\par
                        Pesgo1.PeData.Y[s, p] = (float)(90 + Rand_Num.NextDouble()*(25));\par
\par
                        // Bubble Charts Use ZData also //\par
                        Pesgo1.PeData.Z[s, p] = (float)(10 + Rand_Num.NextDouble()*(25));\par
                    \}\par
                \}\par
                \tab\par
                // Set the PlottingMethod to bubble //\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Bubble;\par
\par
                // Enable data hot spots //\par
                Pesgo1.PeUserInterface.HotSpot.Data = true;\par
\par
                // Make Data hots spot locations larger //\par
                Pesgo1.PeUserInterface.HotSpot.Size = HotSpotSize.Large;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.LightInset;\par
\par
                // Disable some types of plotting methods //\par
                Pesgo1.PePlot.Allow.Bubble = true;\par
                Pesgo1.PePlot.Allow.Spline = false;\par
                Pesgo1.PePlot.Allow.PointsPlusSpline = false;\par
                Pesgo1.PePlot.Allow.BestFitLine = false;\par
                Pesgo1.PePlot.Allow.BestFitCurve = false;\par
                Pesgo1.PePlot.Allow.Area = false;\par
                Pesgo1.PePlot.Allow.SplineArea = false;\par
            \}\par
            else if(MainWindow.m_nChart == 127)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //127  Scientific Graph showing custom menus\par
\par
                //! This example shows how to implement custom popup menus. //\par
                //! Right click the control and look toward the bottom of popup. //\par
                //! The last 3 menu items are custom menus implemented with the following code. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Get rid of Help menu item //\par
                Pesgo1.PeUserInterface.Menu.Help = MenuControl.Hide;\par
\par
                // Create custom menu to show printing logic for placing multiple images //\par
                // on one page //\par
\par
                // Create four menu items on bottom of built-in menu //\par
                // Item 0 creates a separator line\par
                // Item 1 is a checked/unchecked menu option\par
                // Item 2 is a popup with 3 options\par
                // Item 3 is a simple menu item\par
\par
                // Set all text //\par
                Pesgo1.PeUserInterface.Menu.CustomMenuText[0] = "|";\par
                Pesgo1.PeUserInterface.Menu.CustomMenuText[1] = "Print in Monochrome Viewing Style";\par
                Pesgo1.PeUserInterface.Menu.CustomMenuText[2] = "Print Orientation|Land Scape|Portrait|Just an item to disable";\par
                Pesgo1.PeUserInterface.Menu.CustomMenuText[3] = "Click Here to Print";\par
\par
                // Make Item 1 default to checked //\par
                // 1 below represents menu index, 0 will always be second index for non-popup menu items //\par
                Pesgo1.PeUserInterface.Menu.CustomMenuState[1, 0] = CustomMenuState.Checked;\par
\par
                // Make Item 2 sub 2 default to checked //\par
                // Note this is a popup menu item, and second index is 0 for main popup, and 1+n for sub-popup items.\par
                Pesgo1.PeUserInterface.Menu.CustomMenuState[2, 2] = CustomMenuState.Checked;\par
\par
                // Make Item 2 sub 3 grayed //\par
                // (2) is the menu index, (3) is to control 3rd sub popup menu item.\par
                Pesgo1.PeUserInterface.Menu.CustomMenu[2, 3] = CustomMenu.Grayed;\par
\par
                // Set all menu items to bottom location //\par
                Pesgo1.PeUserInterface.Menu.CustomMenuLocation[0] = CustomMenuLocation.Bottom;\par
                Pesgo1.PeUserInterface.Menu.CustomMenuLocation[1] = CustomMenuLocation.Bottom;\par
                Pesgo1.PeUserInterface.Menu.CustomMenuLocation[2] = CustomMenuLocation.Bottom;\par
                Pesgo1.PeUserInterface.Menu.CustomMenuLocation[3] = CustomMenuLocation.Bottom;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.LightNoBorder;\par
\par
                Pesgo1.PeLegend.SubsetLineTypes[0] = LineType.MediumThinSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[1] = LineType.MediumThinSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[2] = LineType.MediumThinSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[3] = LineType.MediumThinSolid;\par
\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PePlot.DataShadows = DataShadows.Shadows;\par
                Pesgo1.PeGrid.Style = GridStyle.Thin;\par
                Pesgo1.PeFont.FontSize = FontSize.Small;\par
\par
                /*////////////////////////////////\par
                // Code from CustomMenu  event  //\par
                //////////////////////////////////\par
                private void Pesgo1_PeCustomMenu(object sender, Gigasoft.ProEssentials.EventArg.CustomMenuEventArgs e)\par
                \{\par
                    CustomMenuState n = CustomMenuState.UnChecked;\par
\par
                    // Custom Menu was clicked //\par
                    if(e.MenuIndex == 1) \par
                    \{\par
                        // Reverse option //\par
                        n = Pesgo1.PeUserInterface.Menu.CustomMenuState[e.MenuIndex, 0];\par
                        if(n == CustomMenuState.UnChecked)\par
                            n = CustomMenuState.Checked;\par
                        else\par
                            n = CustomMenuState.UnChecked;\par
\par
                        Pesgo1.PeUserInterface.Menu.CustomMenuState[e.MenuIndex, 0] = n;\par
                        return;\par
                    \}\par
\par
                    if(e.MenuIndex == 2) \par
                    \{\par
                        // Option Explicit so first set all to unchecked //\par
                        Pesgo1.PeUserInterface.Menu.CustomMenuState[e.MenuIndex, 1] =  CustomMenuState.UnChecked;\par
                        Pesgo1.PeUserInterface.Menu.CustomMenuState[e.MenuIndex, 2] =  CustomMenuState.UnChecked;\par
                        Pesgo1.PeUserInterface.Menu.CustomMenuState[e.MenuIndex, 3] =  CustomMenuState.UnChecked;\par
\par
                        // Next set the selected item //\par
                        Pesgo1.PeUserInterface.Menu.CustomMenuState[e.MenuIndex, e.SubmenuIndex] =  CustomMenuState.Checked;\par
                        return;\par
                    \}\par
\par
                    if(e.MenuIndex == 3)\par
                    \{\par
                        // Perform the actual print //\par
\par
                        // Get Mono/Color menu setting //\tab\tab\tab\tab\par
                        Boolean nMono;\par
                        nMono = Convert.ToBoolean(Pesgo1.PeUserInterface.Menu.CustomMenuState[1, 0]);\par
\par
                        // Get Orientation setting //\tab\tab\tab\tab\par
                        DefOrientation nOrient; \par
                        Pesgo1.PeUserInterface.Menu.CustomMenuState[2, 1]  = n; \par
\par
                        if( n == CustomMenuState.Checked)\par
                            nOrient = DefOrientation.Portrait;  // Portrait\par
                        else\par
                            nOrient = DefOrientation.LandScape;  // Landscape\par
\par
                        // Save current viewing style type properties //\tab\tab\tab\tab\par
                        Boolean nBG;\par
                        QuickStyle\tab nQS;\par
                        RenderEngine nRE;\par
                        nQS = Pesgo1.PeColor.QuickStyle;\par
                        nBG = Pesgo1.PeColor.BitmapGradientMode;\par
                        nRE = Pesgo1.PeConfigure.RenderEngine;\par
                        Pesgo1.PeConfigure.RenderEngine = RenderEngine.Hybrid;\par
\par
                        // Set Viewing Style with respect to retrieved menu state //\par
                        if(nMono)\par
                        \{\par
                            Pesgo1.PeColor.ViewingStyle =  ViewingStyle.Mono;\par
                            Pesgo1.PeColor.Mono.GraphBackground = Color.Empty;\par
\par
                            // Make sure white is used as background\par
                            Pesgo1.PeColor.DeskGradientStyle =  GradientStyle.Vertical;\par
                            Pesgo1.PeColor.DeskGradientStart = Color.FromArgb(255, 255, 255, 255);\par
                            Pesgo1.PeColor.DeskGradientEnd = Color.FromArgb(255, 255, 255, 255);\par
\par
                            // Make sure white is used as background\par
                            Pesgo1.PeColor.GraphGradientStyle =  GradientStyle.Vertical;\par
                            Pesgo1.PeColor.GraphGradientStart = Color.FromArgb(255, 255, 255, 255);\par
                            Pesgo1.PeColor.GraphGradientEnd = Color.FromArgb(255, 255, 255, 255);\par
\par
                            // Remove any possible desk bmp //\par
                            Pesgo1.PeColor.DeskBmpStyle =  BitmapStyle.NoBmp;\par
                        \}\par
                        else\par
                        \{\par
                            Pesgo1.PeColor.ViewingStyle =  ViewingStyle.Color;\par
                            Pesgo1.PeColor.GraphBackground = Color.Empty ;\par
\par
                            // Force a white graph background //\par
                            Pesgo1.PeColor.DeskGradientStyle =  GradientStyle.Vertical;\par
                            Pesgo1.PeColor.DeskGradientStart = Color.FromArgb(255, 255, 255, 255);\par
                            Pesgo1.PeColor.DeskGradientEnd = Color.FromArgb(255, 255, 255, 255);\par
                        \}\par
\par
                        // Set some other properties good for mono printing //\par
                        Pesgo1.PePlot.DataShadows =  DataShadows.None;\par
                        Pesgo1.PeGrid.Style =  GridStyle.Dot;\par
\par
                        // Set background bitmap/example logo //\par
                        Pesgo1.PeColor.BitmapGradientMode = true;\par
                        Pesgo1.PeColor.GraphBmpStyle =  BitmapStyle.BitBltBottomRight;\par
                        Pesgo1.PeColor.GraphBmpFilename = "getthep.png";\par
\par
                        //! Note, GraphBackColor or MonoGraphBackColor is set above //\par
                        Pesgo1.PeFunction.PartialReinitialize();\par
\par
                        Pesgo1.PeFunction.PrintGraph(0, 0, nOrient);\par
\par
                        // Reset properties back to original //\par
                        Pesgo1.PeConfigure.RenderEngine = nRE;\par
                        Pesgo1.PeColor.BitmapGradientMode = nBG;\par
                        Pesgo1.PeColor.QuickStyle = nQS;\par
                        Pesgo1.PePlot.DataShadows =  DataShadows.Shadows;\par
                        Pesgo1.PeGrid.Style =  GridStyle.Thin;\par
                        Pesgo1.PeColor.ViewingStyle =  ViewingStyle.Color;\par
\par
                        Pesgo1.PeFunction.ReinitializeResetImage();\par
                    \}\par
                \}\par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 128)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //128  Scientific Graph showing partial axes\par
\par
                //! Note Right Y Axes do not take up entire axis height. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Seperate subsets into separate axes //\par
                Pesgo1.PeGrid.MultiAxesSubsets[0] = 2;\par
                Pesgo1.PeGrid.MultiAxesSubsets[1] = 2;\par
                Pesgo1.PeUserInterface.Allow.MultiAxesSizing = true;\par
\par
                // First Multi Axes //\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
                Pesgo1.PePlot.RYAxisComparisonSubsets = 1;\par
\par
                // Set Partial Right Y Axis Settings //\par
                Pesgo1.PeGrid.Option.AxisSizeRY = 60;    // Set to 60% of axis height\par
                Pesgo1.PeGrid.Option.AxisLocationRY = 40;  // Top justify so set to 100 - 60\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Bar;\par
                Pesgo1.PePlot.MethodII = SGraphPlottingMethodII.Line;\par
                Pesgo1.PeColor.RYAxis = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PeString.RYAxisLabel = "60% Axis Height";\par
\par
                // Second Multi Axes //\par
                Pesgo1.PeGrid.WorkingAxis = 1;\par
                Pesgo1.PePlot.RYAxisComparisonSubsets = 1; // Second multi axes, set second subset on right //\par
\par
                // Set Partial Right Y Axis Settings //\par
                Pesgo1.PeGrid.Option.AxisSizeRY = 40;            // Set to 40% of axis height\par
                Pesgo1.PeGrid.Option.AxisLocationRY = 0;        // Bottom Justify always set to 0\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Bar;\par
                Pesgo1.PePlot.MethodII = SGraphPlottingMethodII.Line;\par
                Pesgo1.PeColor.RYAxis = Color.FromArgb(255, 0, 198, 0);\par
                Pesgo1.PeString.RYAxisLabel = "40% Axis Height";\par
\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.MediumLine;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeLegend.Style = LegendStyle.OneLineInsideAxis;\par
                Pesgo1.PePlot.MarkDataPoints = true;\par
                Pesgo1.PeGrid.Style = GridStyle.Dot;\par
            \}\par
            else if(MainWindow.m_nChart == 129)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //129  Scientific Graph showing vertical y axis grid numbers\par
\par
                //! Vertical Y Axis Grid Numbers and Special Y Axis Grid Label Locations //\par
                //! Try Zooming and Scrolling vertically. //\par
\par
                //! This feature is ideally suited for using many left and/or right y axes. //\par
                //! It's also handy when screen real-estate is limited as it always is. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // Seperate subsets into separate axes ///\par
                Pesgo1.PeGrid.MultiAxesSubsets[0] = 2;\par
                Pesgo1.PeGrid.MultiAxesSubsets[1] = 2;\par
                // Overlap both multi axes ///\par
                Pesgo1.PeGrid.OverlapMultiAxes[0] = 2;\par
\par
                Pesgo1.PeUserInterface.Allow.MultiAxesSizing = true;\par
\par
                // Set Vertical Grid Numbers //\par
                Pesgo1.PeGrid.Option.YAxisVertGridNumbers = true;\par
                Pesgo1.PeGrid.Option.VgnAxisLabelLocation = true;\par
\par
                // First Multi Axes //\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
                Pesgo1.PePlot.RYAxisComparisonSubsets = 1; // First multi axes, set second subset on right //\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Area;\par
                Pesgo1.PePlot.MethodII = SGraphPlottingMethodII.PointsPlusLine;\par
\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(255, 198, 0, 0);\par
                Pesgo1.PeString.YAxisLabel = "Subset 1|4";    // |4 is equivalent of PEGAT_DOTSOLID\par
\par
                Pesgo1.PeColor.RYAxis = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PeString.RYAxisLabel = "Subset 2|10";  // |10 is equivalent of PEGAT_UPTRIANGLESOLID\par
\par
                Pesgo1.PeGrid.Option.ShowYAxis = ShowAxis.GridNumbers;\par
                Pesgo1.PeGrid.Option.ShowRYAxis = ShowAxis.GridNumbers;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 1;\par
                Pesgo1.PePlot.RYAxisComparisonSubsets = 1;\par
\par
                // Second Multi Axes //\par
                Pesgo1.PeGrid.WorkingAxis = 1;\par
                Pesgo1.PePlot.RYAxisComparisonSubsets = 1;  // Second multi axes, set second subset on right //\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Area;\par
                Pesgo1.PePlot.MethodII = SGraphPlottingMethodII.PointsPlusLine;\par
\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(255, 198, 198, 0);\par
                Pesgo1.PeString.YAxisLabel = "Subset 3|6";     // |6 is equivalent of PEGAT_SQUARESOLID\par
\par
                Pesgo1.PeColor.RYAxis = Color.FromArgb(255, 0, 198, 0);\par
                Pesgo1.PeString.RYAxisLabel = "Subset 4|12";   // |12 is equivalent of PEGAT_DOWNTRIANGLESOLID\par
\par
                Pesgo1.PeGrid.Option.ShowYAxis = ShowAxis.GridNumbers;\par
                Pesgo1.PeGrid.Option.ShowRYAxis = ShowAxis.GridNumbers;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
\par
                Pesgo1.PeLegend.Show = false; // No need for legend, we've placed legend along axes\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.MediumLine;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.None;\par
                Pesgo1.PePlot.MarkDataPoints = true;\par
                Pesgo1.PeGrid.Style = GridStyle.Dot;\par
                Pesgo1.PePlot.Option.BestFitDegree = BestFitDegree.Fourth;\par
\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingVertZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
\par
                Pesgo1.PeColor.TickColor = Color.FromArgb(0, 1, 0, 0);  // Empty equiv Color.Empty;\par
                Pesgo1.PeString.MainTitle = "ZOOM and SCROLL the chart!";\par
\par
                Pesgo1.PeConfigure.ImageAdjustLeft = 50;\par
                Pesgo1.PeConfigure.ImageAdjustRight = 50;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 130)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //130  Scientific Graph showing extra x axes\par
\par
                //! Extra top and bottom x axes //\par
                //! Try Zooming and Scrolling. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                Pesgo1.PeGrid.MultiAxesSubsets[0] = 2;\par
                Pesgo1.PeGrid.MultiAxesSubsets[1] = 2;\par
                Pesgo1.PeGrid.OverlapMultiAxes[0] = 2;\par
\par
                // Last subset, first axes on right //\par
                Pesgo1.PePlot.TXAxisComparisonSubsets = 1;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
                Pesgo1.PePlot.RYAxisComparisonSubsets = 1;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(255, 198, 0, 0);\par
                Pesgo1.PeColor.XAxis = Color.FromArgb(255, 198, 0, 0);\par
                Pesgo1.PeColor.RYAxis = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PeColor.TXAxis = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Area;\par
                Pesgo1.PePlot.MethodII = SGraphPlottingMethodII.PointsPlueBestFitCurve;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 1;\par
                Pesgo1.PePlot.RYAxisComparisonSubsets = 1;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(255, 198, 198, 0);\par
                Pesgo1.PeColor.RYAxis = Color.FromArgb(255, 0, 198, 0);\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Area;\par
                Pesgo1.PePlot.MethodII = SGraphPlottingMethodII.PointsPlueBestFitCurve;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
                Pesgo1.PeFunction.SetExtraAxisX(10.0F, 310.0F, "Extra Axis 1", 0.0F, 0.0F, "", ShowAxis.All, ShowTickMarks.TicksInside, false, false, Color.FromArgb(255, 198, 198, 0));\par
\par
                // Create extra top axis //\par
                Pesgo1.PeFunction.SetExtraAxisTX(-100.0F, 100.0F, "Top Extra Axis 1", 0.0F, 0.0F, "", ShowAxis.All, ShowTickMarks.TicksInside, false, false, Color.FromArgb(255, 0, 198, 0));\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkInset;\par
                Pesgo1.PePlot.Option.BestFitDegree = BestFitDegree.Fourth;\par
\par
                Pesgo1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[2] = LineType.MediumSolid;\par
                Pesgo1.PeLegend.SubsetLineTypes[3] = LineType.MediumSolid;\par
\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingVertZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
                Pesgo1.PeColor.TickColor = Color.FromArgb(0, 1, 0, 0);  // Empty equiv Color.Empty;\par
                Pesgo1.PeString.MainTitle = "Zoom and Scroll the chart!";\par
\par
                Pesgo1.PeUserInterface.Dialog.Subsets = false;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 131)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //131  Scientific Graph showing fixed grid aspect\par
\par
                //! Showing how to force a grid aspect ratio //\par
                //! In this case, always square, resize to demo. //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                // ratio is height / width and 1.0 creates a square //\par
                Pesgo1.PeGrid.Option.GridAspect = 1.0F;\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkShadow;\par
                Pesgo1.PeString.MainTitle = "Grid is always Square";\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
            \}\par
            else if(MainWindow.m_nChart == 132)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //132  Scientific Graph showing event based custom grid numbers\par
\par
                //! Example showing custom event based grid number formattimg //\par
                //! An event gets triggered for each major grid line getting drawn. //\par
                //! It gives the developer an opportunity to modify the string as needed. //\par
\par
                //! ProEssentials' image construction logic related to control-realestate utilization  //\par
                //! is quite complex.  Don't be suprised if this event gets triggered more than  //\par
                //! once for each image per gridline because grid number space lies within our internal logic  //\par
                //! and is modified by this event,  Zoom and scroll chart. //\par
\par
                //! HIGHLY RECOMMENDED: Do not debug this type of code with breakpoints,     //\par
                //! Use debug strings and monitor their output during image construction.    //\par
                //! This is generally good advice for all ProEssentials based code because   //\par
                //! a breakpoint may trigger a WM_PAINT and cause ProEssentials to rebuild   //\par
                //! its image.  This is only related to placing breakpoints within a stretch //\par
                //! of ProEssentials type code which could cause an image to be constructed  //\par
                //! prematurely before other inter-related properties are allowed to set.    //\par
\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
                CreateSimpleSGraph(Pesgo1);\par
\par
                Pesgo1.PeGrid.MultiAxesSubsets[0] = 2;\par
                Pesgo1.PeGrid.MultiAxesSubsets[1] = 2;\par
                Pesgo1.PeGrid.OverlapMultiAxes[0] = 2;\par
                Pesgo1.PeUserInterface.Allow.MultiAxesSizing = true;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(255, 0, 198, 0);\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusSpline;\par
                Pesgo1.PePlot.MethodII = SGraphPlottingMethodII.PointsPlueBestFitCurve;\par
                Pesgo1.PeString.YAxisLabel = "Not Formatted";\par
                Pesgo1.PePlot.ComparisonSubsets = 1;\par
\par
                Pesgo1.PeGrid.WorkingAxis = 1;\par
                Pesgo1.PeColor.YAxis = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusSpline;\par
                Pesgo1.PePlot.MethodII = SGraphPlottingMethodII.PointsPlueBestFitCurve;\par
                Pesgo1.PeString.YAxisLabel = "Formatting this Axis";\par
                Pesgo1.PePlot.ComparisonSubsets = 1;\par
\par
                // Enable formatting events for second y axis because WorkingAxis is current 1 //\par
                Pesgo1.PeGrid.Option.CustomGridNumbersY = true;\par
\par
                // Reset WorkingAxis to zero //\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkInset;\par
                Pesgo1.PeConfigure.BorderTypes = TABorder.DropShadow;\par
                Pesgo1.PePlot.MarkDataPoints = true;\par
                Pesgo1.PeUserInterface.Allow.Maximization = false;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingVertZoom = true;\par
\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 0, 198, 0);\par
                Pesgo1.PeColor.SubsetColors[1] = Color.FromArgb(255, 0, 120, 0);\par
                Pesgo1.PeColor.SubsetColors[2] = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PeColor.SubsetColors[3] = Color.FromArgb(255, 0, 120, 120);\par
\par
                /*///////////////////////////////////////////////////////\par
                // From the CustomGridNumbers event /////////////////////\par
                /////////////////////////////////////////////////////////        \par
                private void Pesgo1_PeCustomGridNumber(object sender, Gigasoft.ProEssentials.EventArg.CustomGridNumberEventArgs e)\par
                \{\tab\tab\tab\par
                    if(e.AxisType == 0)\par
                    \{\par
                    // Left Y Axis //\par
                    if(e.NumberValue == -400.0F) \par
                        e.NumberString = "Low Value";\par
                    else if(e.NumberValue == -200.0F)\par
                        e.NumberString = "Medium Low Value";\par
                    else if (e.NumberValue == 0.0F) \par
                        e.NumberString = "Medium Value";\par
                    else if (e.NumberValue == 200.0F) \par
                        e.NumberString = "Medium High Value";\par
                    else if (e.NumberValue == 400.0F)\par
                        e.NumberString = "High Value";                    \}\par
                    \}\par
                */\par
            \}\par
            else if(MainWindow.m_nChart == 133)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //133  Scientific Graph showing multi point types and colors\par
\par
                //! Example showing per subset use of PointTypes and PointColors properties //\par
                // This example builds upon the basic CreateSimpleSGraph '100' example chart //\par
\par
                CreateSimpleSGraph(Pesgo1);\par
                Pesgo1.PeData.Points = 12;\par
\par
                Pesgo1.PePlot.SubsetForPointColors[0] = 0;\par
                Pesgo1.PePlot.SubsetForPointColors[1] = 1;\par
\par
                Pesgo1.PePlot.SubsetForPointTypes[0] = 2;\par
                Pesgo1.PePlot.SubsetForPointTypes[1] = 3;\par
\par
                // Set SubsetPointColors for first two subsets //\par
                // Also set SubsetPointTypes for last two subsets //        \par
                Int32 s, p;\par
                Gigasoft.ProEssentials.Enums.PointType pt;\par
                for( s = 0; s <= 3; s++)\par
                \{\par
                    pt = Gigasoft.ProEssentials.Enums.PointType.Plus;\par
                    for( p = 0; p <= 11; p++)\par
                    \{\par
                        switch(s)  // Subset Index //\par
                        \{\par
                            case 0:\par
                                // Set Point Color //\par
                                Pesgo1.PeColor.PointColors[s, p] = Color.FromArgb(255, (byte) (15 + ((p + 1) * 20)), 0, 0);\par
                                // Set YData //\par
                                Pesgo1.PeData.Y[s, p] = (float) (((p + 1) * 50) + (Rand_Num.NextDouble() * 250));\par
                                break;\par
                            case 1:\par
                                // Set Point Color //\par
                                Pesgo1.PeColor.PointColors[s, p] = Color.FromArgb(255, 0, (byte) (15 + ((p + 1) * 20)), 0);\par
                                // Set YData //\par
                                Pesgo1.PeData.Y[s, p] = (float) (((p + 1) * 50) + (Rand_Num.NextDouble() * 250) + 350);\par
                                break;\par
                            case 2:\par
                                // Set Point Type //\par
                                Pesgo1.PePlot.PointTypes[s, p] = pt;\par
                                // Set YData //\par
                                Pesgo1.PeData.Y[s, p] = (float) (((p + 1) * 50) + (Rand_Num.NextDouble() * 250) + 700);\par
                                break;\par
                            case 3:\par
                                // Set Point Type //\par
                                Pesgo1.PePlot.PointTypes[s, p] = pt;\par
                                // Set YData //\par
                                Pesgo1.PeData.Y[s, p] = (float) (((p + 1) * 50) + (Rand_Num.NextDouble() * 250) + 1050);\par
                                break;\par
                            default:\par
                                break;\par
                        \}\par
                        pt = pt + 1;\par
                    \}\par
                \}\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.MediumLine;\par
                Pesgo1.PePlot.MarkDataPoints = true;\par
                Pesgo1.PePlot.PointSize = PointSize.Large;\par
                Pesgo1.PeLegend.Show = false;\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusLine;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 134)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //134  Scientific Graph showing multiple y axes with equally spaced gridlines\par
\par
                //! This example shows a clean approach with multiple left and right y axes\par
                //! where axes have proportional number of y axis grid lines with respect to\par
                //! height of axis. Resulting in equally spaced y axis grid lines across all\par
                //! axes.\par
\par
                // v9 features new default CursorPromptLocation = ToolTip\par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues; \par
\par
                //v7.2 new features\par
                Pesgo1.PeGrid.AxisBorders = true;\par
                Pesgo1.PePlot.Option.SolidLineOverArea = 1;                \par
\par
                // Enable middle mouse dragging //\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Enable Bar Glass Effect //\par
                Pesgo1.PePlot.Option.BarGlassEffect = true;\par
\par
                // Enable Plotting style gradient and bevel features //\par
                Pesgo1.PePlot.Option.AreaGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pesgo1.PePlot.Option.AreaBevelStyle = BevelStyle.MediumSmooth;\par
                Pesgo1.PePlot.Option.SplineGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pesgo1.PePlot.Option.SplineBevelStyle = SplineBevelStyle.MediumSmooth;\par
\par
                Pesgo1.PeData.Subsets = 4;\par
                Pesgo1.PeData.Points = 12;\par
\par
                // Change Data to match example scales which are manually configured //     \par
                Int32 s, p;\par
                for( s = 0; s <= 3; s++)\par
                \{\tab\tab\tab\tab\tab\tab\par
                    for(p = 0; p <= 11; p++)\par
                    \{\par
                        Pesgo1.PeData.X[s, p] = (p + 1) * 10.0F;\par
\par
                        float f = 0;\par
                        if (s == 0)\par
                            f = (float) (0.01 + (Rand_Num.NextDouble() * 4));\par
                        else if (s == 1)\par
                            f = (float) (400.0 + (Rand_Num.NextDouble() * 450));\par
                        else if (s == 2)\par
                            f = (float) (0.01 + (Rand_Num.NextDouble() * 25));\par
                        else if (s == 3)\par
                            f = (float) (0.01 + (Rand_Num.NextDouble() * 65));\par
                        Pesgo1.PeData.Y[s, p] = f;\par
                    \}\par
                \}\par
\par
                // Now sub-divide subsets into 4 individual axes //\par
                // Each axis with one subset in each //\par
                Pesgo1.PeGrid.MultiAxesSubsets[0] = 1;\par
                Pesgo1.PeGrid.MultiAxesSubsets[1] = 1;\par
                Pesgo1.PeGrid.MultiAxesSubsets[2] = 1;\par
                Pesgo1.PeGrid.MultiAxesSubsets[3] = 1;\par
\par
                // Create Overlapped Axes //\par
                Pesgo1.PeGrid.OverlapMultiAxes[0] = 1;\par
                Pesgo1.PeGrid.OverlapMultiAxes[1] = 1;\par
                Pesgo1.PeGrid.OverlapMultiAxes[2] = 2;\par
\par
                // Set Proportions of Axes  //\par
                Pesgo1.PeGrid.MultiAxesProportions[0] = 0.2F;\par
                Pesgo1.PeGrid.MultiAxesProportions[1] = 0.5F;\par
                Pesgo1.PeGrid.MultiAxesProportions[2] = 0.3F;\par
\par
                // Set up First axis parameters //\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 0.0;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 5.0;\par
                Pesgo1.PeGrid.Configure.ManualYAxisTicknLine = true;\par
                Pesgo1.PeGrid.Configure.ManualYAxisLine = 2.5;\par
                Pesgo1.PeGrid.Configure.ManualYAxisTick = 0.5;\par
                Pesgo1.PeGrid.Option.ShowTickMarkY = ShowTickMarks.TicksHide;\par
                Pesgo1.PeString.YAxisLabel = "NPSHR (feet)";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Bar;\par
\par
                // Set up Second axis parameters //\par
                Pesgo1.PeGrid.WorkingAxis = 1;\par
                Pesgo1.PePlot.RYAxisComparisonSubsets = 1;\par
                Pesgo1.PeGrid.Configure.ManualScaleControlRY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinRY = 400;\par
                Pesgo1.PeGrid.Configure.ManualMaxRY = 900;\par
                Pesgo1.PeGrid.Configure.ManualRYAxisTicknLine = true;\par
                Pesgo1.PeGrid.Configure.ManualRYAxisLine = 100.0;\par
                Pesgo1.PeGrid.Configure.ManualRYAxisTick = 20.0;\par
                Pesgo1.PeGrid.Option.ShowTickMarkY = ShowTickMarks.TicksHide;\par
                Pesgo1.PeString.RYAxisLabel = "Total Head (feet)";\par
                Pesgo1.PePlot.MethodII = SGraphPlottingMethodII.PointsPlusSpline;\par
\par
                // Set up Third axis parameters //\par
                Pesgo1.PeGrid.WorkingAxis = 2;\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 0.0;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 30.0;\par
                Pesgo1.PeGrid.Configure.ManualYAxisTicknLine = true;\par
                Pesgo1.PeGrid.Configure.ManualYAxisLine = 10.0;\par
                Pesgo1.PeGrid.Configure.ManualYAxisTick = 2.0;\par
                Pesgo1.PeGrid.Option.ShowTickMarkY = ShowTickMarks.TicksHide;\par
                Pesgo1.PeString.YAxisLabel = "Efficiency (%)";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusSpline;\par
\par
                // Set up Fourth axis parameters //\par
                Pesgo1.PeGrid.WorkingAxis = 3;\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 0.0;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 75.0;\par
                Pesgo1.PeGrid.Configure.ManualYAxisTicknLine = true;\par
                Pesgo1.PeGrid.Configure.ManualYAxisLine = 25.0;\par
                Pesgo1.PeGrid.Configure.ManualYAxisTick = 5.0;\par
                Pesgo1.PeGrid.Option.ShowTickMarkY = ShowTickMarks.TicksHide;\par
                Pesgo1.PeString.YAxisLabel = "Power(HP)";\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusSpline;\par
\par
                // Done Setting Y Axis Parameters, reset WorkingAxis //\par
                Pesgo1.PeGrid.WorkingAxis = 0;\par
\par
                // Set various other properties //\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeGrid.Option.MultiAxisStyle = MultiAxisStyle.GroupAllAxes;\par
                Pesgo1.PeLegend.Style = LegendStyle.OneLineInsideOverlap;\par
\par
                Pesgo1.PeString.XAxisLabel = "Flow (gpm)";\par
\par
                Pesgo1.PeConfigure.BorderTypes = TABorder.SingleLine;\par
                Pesgo1.PeFont.Fixed = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeString.MainTitle = "";\par
                Pesgo1.PeString.SubTitle = "";\par
                Pesgo1.PeFont.SubTitle.Font = "Courier New";\par
\par
                Pesgo1.PeFont.SizeMultiSubTitleCntl = 1.1F;\par
                Pesgo1.PeFont.SizeMultiBottomTitleCntl = 1.1F;\par
\par
                Pesgo1.PeString.MultiSubTitles[0] = "PUMP PREDICTED PERFORMANCE|Units: US Customary|Date: 06/07/2002";\par
                Pesgo1.PeString.MultiSubTitles[1] = "Impeller Diameter (in): Max = 11.875, Rated = 11.72, Min =11.062||";\par
\par
                Pesgo1.PeString.MultiBottomTitles[1] = "Customer:  Since fixed length courier font, you can create rows by number of spaces, ||";\par
                Pesgo1.PeString.MultiBottomTitles[0] = "Pump Model:  or, v5 has a table annotation feature which could be used to add text here. ||";\par
\par
                Pesgo1.PeGrid.Option.YAxisOnRight = true;\par
\par
                Pesgo1.PeString.SubsetLabels[0] = "NPSHR";\par
                Pesgo1.PeString.SubsetLabels[1] = "Head";\par
                Pesgo1.PeString.SubsetLabels[2] = "Efficiency";\par
                Pesgo1.PeString.SubsetLabels[3] = "Power";\par
\par
                Pesgo1.PeUserInterface.Menu.MultiAxisStyle = MenuControl.Show;\par
                Pesgo1.PePlot.DataShadows = DataShadows.None;\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                Pesgo1.PeLegend.SimpleLine = true;\par
                Pesgo1.PeLegend.SimplePoint = true;\par
\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 198, 0, 0);\par
                Pesgo1.PeColor.SubsetColors[1] = Color.FromArgb(255, 0, 198, 198);\par
                Pesgo1.PeColor.SubsetColors[2] = Color.FromArgb(255, 198, 198, 0);\par
                Pesgo1.PeColor.SubsetColors[3] = Color.FromArgb(255, 0, 198, 0);\par
\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Medium;\par
                Pesgo1.PePlot.DataShadows = DataShadows.Shadows;\par
                Pesgo1.PePlot.Option.GradientBars = 8;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 135)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //135  Scientific Graph showing millisecond date time handling\par
\par
                double d, dt;\par
                Int32 p;\par
                dt = DateTime.Now.ToOADate();\par
\par
                Pesgo1.PeData.Subsets = 1;\par
                Pesgo1.PeData.Points = 600;\par
\par
                // v9 features new default CursorPromptLocation = ToolTip\par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues; \par
\par
                // Enable double precision which is usually //\par
                // required for date time handling. //\par
                // This means we pass x data to XDataII //\par
                Pesgo1.PeData.UsingXDataii = true;\par
\par
                // Pass XDataII and YData //\tab\tab\tab\tab\par
                for (p = 0; p <= 599; p++)\par
                \{\par
                    d = (dt + .5F + ((double)p * 0.0000025F));\par
                    Pesgo1.PeData.Xii[0, p] = d;\par
                    Pesgo1.PeData.Y[0, p] = (float)((150 + (Math.Sin(p * 0.034) * 60) + (Rand_Num.NextDouble() * 30) + (p / 2)) - (35 + (Rand_Num.NextDouble() * 20)));\par
                \}\par
\par
                // Enable DateTimeMode //\par
                Pesgo1.PeData.DateTimeMode = true;\par
                Pesgo1.PeData.DateTimeShowSeconds = true;\par
                Pesgo1.PeData.DateTimeMilliSeconds = true;\par
\par
                // Allow zooming and panning //\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.Horizontal;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
\par
                // Cursor prompting in top left corner //\par
                Pesgo1.PeUserInterface.Cursor.Mode = CursorMode.DataSquare;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
                Pesgo1.PeFont.SizeCursorPromptCntl = 1.5F;\par
                Pesgo1.PeUserInterface.HotSpot.Data = true;\par
                Pesgo1.PeUserInterface.Cursor.MouseCursorControl = true;\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPaddingX = 1;\par
\par
                // Enable middle mouse dragging //\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Enable Plotting style gradient and bevel features //\par
                Pesgo1.PePlot.Option.AreaGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pesgo1.PePlot.Option.AreaBevelStyle = BevelStyle.MediumSmooth;\par
                Pesgo1.PePlot.Option.SplineGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pesgo1.PePlot.Option.SplineBevelStyle = SplineBevelStyle.MediumSmooth;\par
\par
                // Enable ZoomWindow //\par
                Pesgo1.PePlot.ZoomWindow.Show = true;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PePlot.MarkDataPoints = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
                // subset colors //\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(100, 0, 200, 200);\par
\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeFont.SizeGlobalCntl = 1.4F;\par
                Pesgo1.PeFont.Fixed = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Line;\par
                Pesgo1.PePlot.SubsetLineTypes[0] = LineType.MediumThickSolid;\par
                Pesgo1.PeString.MainTitle = "";\par
                Pesgo1.PeString.SubTitle = " ";\par
                Pesgo1.PeGrid.Style = GridStyle.Dot; \par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
            \}\par
            else if(MainWindow.m_nChart == 136)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //136  Scientific Graph showing High Low Area\par
\par
                //! New high-low area plotting method.  This plotting type is created by\par
                //! setting PlottingMethod to PEGPM_SPECIFICPLOTMODE, and then\par
                //! SpecificPlotMode set to PESPM_HIGHLOWAREA. This is similar to how\par
                //! open-high-low-close and box-plot charts are created.\par
                //! You can also use this plotting type per subset as shown in example 022.\par
\par
                float f1;\par
                float f2;\par
                float f3;\par
                int p;\par
\par
                // v9 features new default CursorPromptLocation = ToolTip\par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues; \par
\par
                // Enable middle mouse dragging //\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
                // Enable Bar Glass Effect //\par
                Pesgo1.PePlot.Option.BarGlassEffect = true;\par
\par
                // Enable Plotting style gradient and bevel features //\par
                Pesgo1.PePlot.Option.AreaGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pesgo1.PePlot.Option.AreaBevelStyle = BevelStyle.MediumSmooth;\par
                Pesgo1.PePlot.Option.SplineGradientStyle = PlotGradientStyle.RadialBottomRight;\par
                Pesgo1.PePlot.Option.SplineBevelStyle = SplineBevelStyle.MediumSmooth;\par
\par
                // Enable ZoomWindow //\par
                Pesgo1.PePlot.ZoomWindow.Show = true;\par
\par
                Pesgo1.PeData.Subsets = 3;\par
                Pesgo1.PeData.Points = 600;\par
\par
                // Pass XData and YData //\par
                for (p=0; p<600; p++)\par
                \{\par
                    Pesgo1.PeData.X[0, p] = (p + 1.0F);\par
                    Pesgo1.PeData.X[1, p] = (p + 1.0F);\par
                    Pesgo1.PeData.X[2, p] = (p + 1.0F);\par
\par
                    f1 = (float) ( 150.0F + (Math.Sin(p * 0.03F) * 100.0F) + (Rand_Num.NextDouble() * 2));\par
                    Pesgo1.PeData.Y[0, p] = f1;\par
                    f2 = (float) ( 25.0F + (Math.Sin(p * 0.07F) * 50.0F) + (Rand_Num.NextDouble() * 2));\par
                    Pesgo1.PeData.Y[1, p] = f2;\par
                    f3 = (float) (((f1 + f2) / 2.0F) + (Rand_Num.NextDouble() * 20) + 25.0F);\par
                    Pesgo1.PeData.Y[2, p] = f3;\par
                \}\par
\par
                // Set Plotting Style and Comparison Subsets //\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.SpecificPlotMode;\par
                Pesgo1.PePlot.SpecificPlotMode = SpecificPlotMode.HighLowArea;\par
                Pesgo1.PePlot.ComparisonSubsets = 1;\par
\par
                // Subset colors //\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(225, 255, 255, 0);\par
                Pesgo1.PeColor.SubsetColors[1] = Color.FromArgb(125, 0, 0, 190);\par
                Pesgo1.PeColor.SubsetColors[2] = Color.FromArgb(150, 255, 0, 0);\par
\par
                // Set Line Styles //\par
                Pesgo1.PePlot.SubsetLineTypes[0] = LineType.MediumSolid;\par
                Pesgo1.PePlot.SubsetLineTypes[1] = LineType.MediumSolid;\par
                Pesgo1.PePlot.SubsetLineTypes[2] = LineType.MediumSolid;\par
\par
                // Allow zooming and panning //\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.Horizontal;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingScaleControl = true;\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.MediumLine;\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
                Pesgo1.PeFont.Fixed = true;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
                Pesgo1.PeFont.SizeGlobalCntl = 1.2F;\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPaddingX = 0;\par
                Pesgo1.PeGrid.Configure.ManualScaleControlX = ManualScaleControl.Min;\par
                Pesgo1.PeGrid.Configure.ManualMinX = 0.0;\par
                Pesgo1.PePlot.Allow.Bar = false;\par
\par
                Pesgo1.PeString.MainTitle = "High Low Area";\par
                Pesgo1.PeString.SubTitle = "Inverted data uses secondary color, intersecting point is interpolated.";\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
\par
            \}\par
            else if(MainWindow.m_nChart == 137)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //137  Scientific Graph showing Error Bars\par
\par
                int c;\par
                double dRange;\par
                int p;\par
\par
                float erroramount;\par
                erroramount = 2.5F;  // erroramount = Error Bar Amount\par
\par
                Pesgo1.PeData.Subsets = 1;\par
                Pesgo1.PeData.Points = 9;\par
\par
                // Pass XData and YData //\par
                for (p=0; p<9; p++)\par
                \{\par
                    Pesgo1.PeData.X[0, p] = (p + 1.0F) * 10.0F;\par
                    Pesgo1.PeData.Y[0, p] = (float) (25.0F + (Rand_Num.NextDouble() * 10.0F));\par
                \}\par
\par
                // This code shows how to learn axis range without having to perform a cpu intensive image build //\par
                // Do partial initialization, read axis extents to know how to adjust scales, and continue //\par
                Pesgo1.PeFunction.Reinitialize();\par
                dRange = Pesgo1.PeGrid.Configure.ManualMaxY - Pesgo1.PeGrid.Configure.ManualMinY;\par
\par
                // Manually Control Y Axis as we learned extents above //\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = Pesgo1.PeGrid.Configure.ManualMinY - erroramount - (dRange * 0.1F);\par
                Pesgo1.PeGrid.Configure.ManualMaxY = Pesgo1.PeGrid.Configure.ManualMaxY + erroramount + (dRange * 0.1F);\par
\par
                // Set Plotting Style and Comparison Subsets //\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusLine;\par
                Pesgo1.PePlot.PointSize = PointSize.Medium;\par
                Pesgo1.PePlot.Option.MinimumPointSize = MinimumPointSize.Large;\par
                Pesgo1.PeAnnotation.Graph.MinSymbolSize = MinimumPointSize.Large;\par
\par
                // v9.5\par
                Pesgo1.PeUserInterface.Menu.AnnotationControl = true;\par
\par
                // Adding dash symbols at each end of error bar //\par
                // along with line connecting dashes.           //\par
                c = 0;\par
                for (p=0; p<9; p++)\par
                \{\par
                    Pesgo1.PeAnnotation.Graph.X[c] = Pesgo1.PeData.X[0, p];\par
                    Pesgo1.PeAnnotation.Graph.Y[c] = Pesgo1.PeData.Y[0, p] + erroramount;\par
                    Pesgo1.PeAnnotation.Graph.Type[c] = (int) Gigasoft.ProEssentials.Enums.GraphAnnotationType.ThinSolidLine;\par
                    Pesgo1.PeAnnotation.Graph.Color[c] = Color.FromArgb(255, 255, 0, 0);\par
                    Pesgo1.PeAnnotation.Graph.Text[c] = "";\par
                    c++;\par
\par
                    Pesgo1.PeAnnotation.Graph.X[c] = Pesgo1.PeData.X[0, p];\par
                    Pesgo1.PeAnnotation.Graph.Y[c] = Pesgo1.PeData.Y[0, p] - erroramount;\par
                    Pesgo1.PeAnnotation.Graph.Type[c] = (int) Gigasoft.ProEssentials.Enums.GraphAnnotationType.LineContinue;\par
                    Pesgo1.PeAnnotation.Graph.Color[c] = Color.FromArgb(255, 255, 0, 0);\par
                    Pesgo1.PeAnnotation.Graph.Text[c] = "";\par
                    c++;\par
\par
                    Pesgo1.PeAnnotation.Graph.X[c] = Pesgo1.PeData.X[0, p];\par
                    Pesgo1.PeAnnotation.Graph.Y[c] = Pesgo1.PeData.Y[0, p] + erroramount;\par
                    Pesgo1.PeAnnotation.Graph.Type[c] = (int) Gigasoft.ProEssentials.Enums.GraphAnnotationType.Dash;\par
                    Pesgo1.PeAnnotation.Graph.Color[c] = Color.FromArgb(255, 0, 255, 255);\par
                    Pesgo1.PeAnnotation.Graph.Text[c] = "";\par
                    c++;\par
\par
                    Pesgo1.PeAnnotation.Graph.X[c] = Pesgo1.PeData.X[0, p];\par
                    Pesgo1.PeAnnotation.Graph.Y[c] = Pesgo1.PeData.Y[0, p] - erroramount;\par
                    Pesgo1.PeAnnotation.Graph.Type[c] = (int) Gigasoft.ProEssentials.Enums.GraphAnnotationType.Dash;\par
                    Pesgo1.PeAnnotation.Graph.Color[c] = Color.FromArgb(255, 0, 255, 255);\par
                    Pesgo1.PeAnnotation.Graph.Text[c] = "";\par
                    c++;\par
                \}\par
\par
                Pesgo1.PeAnnotation.Show = true;\par
                Pesgo1.PeAnnotation.InFront = false;\par
\par
                // Subset colors //\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(225, 255, 255, 0);\par
\par
                // Set Line Styles //\par
                Pesgo1.PePlot.SubsetLineTypes[0] = LineType.MediumSolid;\par
\par
                // Allow zooming and panning //\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.Horizontal;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingScaleControl = true;\par
\par
                // Set Various Other Properties //\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkInset;\par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
                Pesgo1.PeFont.Fixed = true;\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Medium;\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPaddingX = 5;\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPaddingY = 40;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.None;\par
\par
                Pesgo1.PeString.MainTitle = "Error Bars via Graph Annotations";\par
                Pesgo1.PeString.SubTitle = "";\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
\par
            \}\par
            else if (MainWindow.m_nChart == 138)\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //138  Scientific Graph showing real-time 6\par
\par
                //! Chart holds 8M points.  Data is fed into data arrays at current data index.  \par
                //! This type of real-time allows best method for incrementally updating large quantity of data.\par
                //! This example uses Direct3D, historically with non Direct3D this type of implementation \par
                //! would become slower and slower over time as data increased.  With Direct3D this chart will not \par
                //! slow down over time and though this example's timer is at 1 second, it could be faster.\par
\par
                Pesgo1.PeData.Subsets = 1;\par
                Pesgo1.PeData.Points = 8000000;\par
\par
                // Slower to initial initialize, but allows for incremental changes with RealTimeStartingIndex and RealTimeQuanity settings. \par
                // All Subsets will be updated at location of RealTimeStartingIndex.\par
                Pesgo1.PeData.DynamicBuffers = true;\par
\par
                // We create our own date-time format as Direct3D does not inherently work well with double precision floats. \par
                MainWindow.StartTime = (float)(DateTime.Now.Day * 86400 + DateTime.Now.Hour * 3600 + DateTime.Now.Minute * 60 + DateTime.Now.Second);\par
\par
                // For this type of real-time, NullDataGaps must be false and NullData is not used.  Setting these NullData properties means all data will be considered valid. \par
                Pesgo1.PeData.NullDataValue = -999.9F;\par
                Pesgo1.PeData.NullDataValueX = -999.9F;\par
                Pesgo1.PePlot.Option.NullDataGaps = false;\par
\par
                // For this type of real-time, ManualMinX and ManualMax must best set and never adjusted, unless a lengthier full reset\par
                // where  Pesgo1.PeData.RealTimeQuantity = 0 and Pesgo1.PeData.RealTimeStartingIndex = 0 and Pesgo1.PeFunction.Force3dxVerticeRebuild = true\par
                // is used.  As shown below, the Zoom settings can be used to change the data viewed while the manual extents remain the same. \par
                \par
                Pesgo1.PeGrid.Configure.ManualScaleControlX = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinX = 0; // MainWindow.StartTime;\par
                Pesgo1.PeGrid.Configure.ManualMaxX = 8000000; // MainWindow.ZoomStart + 8000000; // 8M seconds or approx 3 months of second data\par
\par
                Pesgo1.PeGrid.Configure.ManualScaleControlY = ManualScaleControl.MinMax;\par
                Pesgo1.PeGrid.Configure.ManualMinY = 1;\par
                Pesgo1.PeGrid.Configure.ManualMaxY = 100;\par
\par
                Pesgo1.PeUserInterface.Cursor.HourGlassThreshold = 100000000;\par
                Pesgo1.PePlot.ZoomWindow.Show = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelFunction = MouseWheelFunction.HorizontalZoom;\par
\par
                Pesgo1.PeGrid.Option.CustomGridNumbersX = true;\par
                Pesgo1.PePlot.ZoomWindow.CustomGridNumbersX = true;\par
                Pesgo1.PeString.XAxisLabel = "Days:Hours:Minutes:Seconds";\par
\par
                //Set Zoomed partial Range of X Scale//\par
                Pesgo1.PeGrid.Zoom.MinX = 0; \par
                Pesgo1.PeGrid.Zoom.MaxX = 180; \par
                Pesgo1.PeGrid.Zoom.MinY = 1;\par
                Pesgo1.PeGrid.Zoom.MaxY = 100;\par
                Pesgo1.PeGrid.Zoom.Mode = true;  // setting initial view to 180 seconds\par
\par
                // Clear out default data and set to data in far right outer coordinates //\par
                Pesgo1.PeData.X[0, 7999999] = (float) 8e20; // pre allocates so below spoon feed doesn't thrash memory manager\par
                for (int i = 0; i < 8000000; i++)\par
                    Pesgo1.PeData.X[0, i] = (float)8e20 + i;\par
\par
                Pesgo1.PeData.X[0, 0] = 0; \par
                Pesgo1.PeData.Y[0, 0] = 0;\par
                Pesgo1.PeData.Y[0, 1] = 0;\par
                Pesgo1.PeData.Y[0, 2] = 0;\par
                Pesgo1.PeData.Y[0, 3] = 0;\par
                Pesgo1.PeData.Y[0, 7999999] = 0F;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
                //Set various properties//\par
                Pesgo1.PeString.MainTitle = "Scientific Real-Time Example";\par
                Pesgo1.PeString.SubTitle = "";\par
                Pesgo1.PeUserInterface.Dialog.RandomPointsToExport = false; \par
                Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
                Pesgo1.PePlot.Allow.Bar = false;\par
                Pesgo1.PeUserInterface.Dialog.PlotCustomization = false;\par
                Pesgo1.PeUserInterface.Allow.Popup = true;\par
                Pesgo1.PeUserInterface.Dialog.Page2 = false;\par
                Pesgo1.PeUserInterface.Dialog.Axis = false;\par
                Pesgo1.PeUserInterface.Dialog.Subsets = false;\par
                Pesgo1.PeUserInterface.Allow.TextExport = false;\par
                Pesgo1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pesgo1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pesgo1.PeUserInterface.Dialog.AllowSvgExport = false;\par
\par
                Pesgo1.PeConfigure.PrepareImages = true;\par
                Pesgo1.PeConfigure.CacheBmp = true;\par
                Pesgo1.PeFont.Fixed = true;\par
                Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(255, 200, 200, 0);\par
\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
                Pesgo1.PePlot.Option.LineShadows = true;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.Line;\par
                Pesgo1.PePlot.DataShadows = DataShadows.None;\par
\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPaddingX = 0;\par
                Pesgo1.PeGrid.Style = GridStyle.Dash;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
                Pesgo1.PeConfigure.AntiAliasText = true;\par
                Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
\par
                Pesgo1.PeFunction.Force3dxVerticeRebuild = true;\par
                Pesgo1.PeFunction.ReinitializeResetImage();\par
                Pesgo1.Invalidate();\par
\par
                // Initialize Counters and Timer //\par
                MainWindow.m_nRealTimeCounter = 1;\par
                MainWindow.m_nSinCounter = 1;\par
\par
                MainWindow.Timer1.Interval = 1000;\par
                MainWindow.Timer1.Start();\par
\par
                /*///////////////////////////////////////\par
                ///Code from the Timer Event is below////\par
                /////////////////////////////////////////\par
                float newy;\par
                float newx;\par
\par
                // New y value and x value //\par
                newy = (float)(50 + (Math.Sin(m_nSinCounter * 0.075) * 30) + (Rand_Num.NextDouble() * 15));\par
                newx = (float)(DateTime.Now.Day * 86400 + DateTime.Now.Hour * 3600 + DateTime.Now.Minute * 60 + DateTime.Now.Second);\par
                newx -= (float) StartTime;\par
\par
                // Store new values at current index //\par
                Pesgo1.PeData.X[0, m_nRealTimeCounter] = newx;\par
                Pesgo1.PeData.Y[0, m_nRealTimeCounter] = newy;\par
\par
                Pesgo1.PeData.RealTimeQuantity = 1;\par
                Pesgo1.PeData.RealTimeStartingIndex = m_nRealTimeCounter;\par
\par
                // SinCounter is only to produce sin wave data //\par
                m_nSinCounter = m_nSinCounter + 1;\par
                if (m_nSinCounter > 30000) \{ m_nSinCounter = 1; \}\par
\par
                // Increment index counter //\par
                m_nRealTimeCounter = m_nRealTimeCounter + 1;\par
\par
                if (Pesgo1.PeGrid.Zoom.MaxX - Pesgo1.PeGrid.Zoom.MinX <= 181)\par
                \{\par
                    if (newx >= Pesgo1.PeGrid.Zoom.MaxX)\par
                    \{\par
                        Pesgo1.PeGrid.Zoom.MaxX = newx + 90;\par
                        Pesgo1.PeGrid.Zoom.MinX = (newx + 90) - 180;\par
                    \}\par
                \}\par
\par
                // Update image and force paint //\par
                Pesgo1.PeFunction.Force3dxVerticeRebuild = true;\par
                Pesgo1.Invalidate();\par
                  \par
                ///////////////////////////////////////\par
                ///Code from the CustomGridNumber Event is below////\par
                /////////////////////////////////////////\par
                  \par
                if ( m_nChart == 138)  // x axis and zoom x axis // axistype = 2 for x axis,  axistype = 7 for zoomwindow x axis \par
                \{\par
                    int nDays, nHours, nMinutes, nSecs;\par
                    nDays = 0; nHours = 0; nMinutes = 0; nSecs = 0;\par
                    double dDaysRemainer, dHrsRemainer, dMinRemainer;\par
                    dDaysRemainer = 0; dHrsRemainer = 0; dMinRemainer = 0;\par
\par
                    double d = e.NumberValue; // -StartTime;\par
\par
                    nDays = (int) (d / 86400);\par
                    dDaysRemainer = (d % 86400);\par
\par
                    nHours = (int) (dDaysRemainer / 3600);\par
                    dHrsRemainer = dDaysRemainer % 3600;\par
\par
                    nMinutes = (int)(dHrsRemainer / 60);\par
                    dMinRemainer = dHrsRemainer % 60;\par
\par
                    nSecs = (int) dMinRemainer;\par
\par
                    e.NumberString = nDays.ToString() + ":" + nHours.ToString() + ":" + nMinutes.ToString() + ":" + nSecs.ToString();\par
                \}\par
                  \par
                */\par
\par
            \}\par
            else if (MainWindow.m_nChart == 139)  // v9.5\par
            \{\par
                //*********************************************************************'\par
                //*********************************************************************'\par
                //139  Scientific Graph showing WaveData-Heatmap-Spectrogram\par
\par
                Pesgo1.PeData.Subsets = 183;\par
                Pesgo1.PeData.Points = 512;\par
\par
                Pesgo1.PeData.DuplicateDataX = DuplicateData.PointIncrement;\par
                Pesgo1.PeData.DuplicateDataY = DuplicateData.SubsetIncrement;\par
\par
                Pesgo1.PeData.X[0, 511] = 0; // pre allocates memory so guaranteed we never have to reallocate as we spoon feed below\par
                Pesgo1.PeData.Y[0, 182] = 0; // note that we use SubsetIncrement above so think of it as a one dimensional array \par
                Pesgo1.PeData.Z[182, 511] = 0;\par
                \par
                int nSubsetCount = 0;\par
                int nPointCount = 0;\par
\par
                string[] fileArray = \{ "", "" \};\par
                try\par
                \{\par
                    fileArray = File.ReadAllLines("Heatmap.txt");  // 183 subsets(rows) x 512 points(columns)\par
                \}\par
                catch\par
                \{\par
                    System.Windows.Forms.MessageBox.Show("Demo File Not Found?", "Error", System.Windows.Forms.MessageBoxButtons.OK);\par
                    System.Windows.Forms.Application.Exit();\par
                \}\par
\par
                for (int i = 0; i < fileArray.Length; i++)\par
                \{\par
                    String line = fileArray[i];\par
                    if (line.Length < 3) \{ continue; \}\par
                    var columns = line.Split('\\t');\par
                    String valueX = columns[0];\par
                    String valueY = columns[1];\par
                    String valueZ = columns[2];\par
\par
                    float fX = float.Parse(valueX, CultureInfo.InvariantCulture.NumberFormat);\par
                    float fY = float.Parse(valueY, CultureInfo.InvariantCulture.NumberFormat);\par
                    float fZ = float.Parse(valueZ, CultureInfo.InvariantCulture.NumberFormat);\par
\par
                    if (nSubsetCount == 0)\par
                        Pesgo1.PeData.X[0, nPointCount] = fX + 20.0F;\par
\par
                    if (nPointCount == 0)\par
                        Pesgo1.PeData.Y[0, nSubsetCount] = fY * (i + 1000) / 100.0F;   //make the data more log like to match YAxisScaleControl = Log\par
\par
                    Pesgo1.PeData.Z[nSubsetCount, nPointCount] = fZ;\par
\par
                    nPointCount++;\par
                    if (nPointCount > 511)\par
                    \{\par
                        nPointCount = 0;\par
                        nSubsetCount++;\par
                    \}\par
                \}\par
\par
                // Log y scale\par
                Pesgo1.PeGrid.Configure.YAxisScaleControl = ScaleControl.Log;\par
                Pesgo1.PeFont.FontSize = FontSize.Large;\par
\par
                // Set Various Other Properties ///\par
                Pesgo1.PeColor.BitmapGradientMode = true;\par
                Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
                Pesgo1.PeColor.GridBold = true;\par
\par
                // Set the plotting method ///\par
                Pesgo1.PePlot.Allow.ContourColors = true;\par
                Pesgo1.PePlot.Allow.ContourColorsShadows = true;\par
\par
                // Set Contour Color regions //           \par
                Pesgo1.PeColor.ContourColorBlends = 10;\par
                Pesgo1.PeColor.ContourColorSet = ContourColorSet.BlueCyanGreenYellowBrownWhite;\par
\par
                Pesgo1.PeLegend.ContourLegendPrecision = ContourLegendPrecision.ZeroDecimals;\par
                Pesgo1.PeLegend.ContourStyle = true;\par
\par
                Pesgo1.PePlot.Method = SGraphPlottingMethod.ContourColors;\par
                Pesgo1.PeUserInterface.Menu.DataShadow = MenuControl.Hide;\par
\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelZoomFactor = 1.4F;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelZoomSmoothness = 2;\par
                Pesgo1.PeGrid.GridBands = false;\par
\par
                Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
                Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
                Pesgo1.PeUserInterface.Scrollbar.MouseWheelFunction = MouseWheelFunction.HorizontalVerticalZoom;\par
\par
                Pesgo1.PeLegend.Location = LegendLocation.Left;\par
                Pesgo1.PeGrid.InFront = true;\par
                Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
                Pesgo1.PeGrid.Style = GridStyle.Dot;\par
\par
                // Disable other non contour plotting method //\par
                Pesgo1.PePlot.Allow.Line = false;\par
                Pesgo1.PePlot.Allow.Point = false;\par
                Pesgo1.PePlot.Allow.Bar = false;\par
                Pesgo1.PePlot.Allow.Area = false;\par
                Pesgo1.PePlot.Allow.Spline = false;\par
                Pesgo1.PePlot.Allow.SplineArea = false;\par
                Pesgo1.PePlot.Allow.PointsPlusLine = false;\par
                Pesgo1.PePlot.Allow.PointsPlusSpline = false;\par
                Pesgo1.PePlot.Allow.BestFitCurve = false;\par
                Pesgo1.PePlot.Allow.BestFitLine = false;\par
                Pesgo1.PePlot.Allow.Stick = false;\par
\par
                // Set Titles //\par
                Pesgo1.PeString.MainTitle = "Wave Data - Heatmap - Spectrogram Example";\par
                Pesgo1.PeString.SubTitle = "";\par
\par
                // So contour goes to edge of grid //\par
                Pesgo1.PeGrid.Configure.AutoMinMaxPadding = 0;\par
\par
                // Set small font size //\par
                Pesgo1.PeFont.FontSize = FontSize.Medium;\par
                Pesgo1.PeFont.Fixed = true;\par
\par
                // Disable appropriate tabs //\par
                Pesgo1.PeUserInterface.Dialog.Axis = false;\par
                Pesgo1.PeUserInterface.Dialog.Style = false;\par
                Pesgo1.PeUserInterface.Dialog.Subsets = false;\par
\par
                Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
                Pesgo1.PeFont.MainTitle.Bold = true;\par
                Pesgo1.PeFont.SubTitle.Bold = true;\par
                Pesgo1.PeFont.Label.Bold = true;\par
\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingVertZoom = true;\par
                Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\par
\par
                // Set various export defaults //\par
                Pesgo1.PeSpecial.DpiX = 600;\par
                Pesgo1.PeSpecial.DpiY = 600;\par
\par
                // default export setting //\par
                Pesgo1.PeUserInterface.Dialog.AllowEmfExport = false;\par
                Pesgo1.PeUserInterface.Dialog.AllowSvgExport = false;\par
                Pesgo1.PeUserInterface.Dialog.AllowWmfExport = false;\par
                Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
                Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
                Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
                Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
                Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
                Pesgo1.PeConfigure.Composite2D3D = Composite2D3D.Foreground;\par
                Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct3D;\par
\par
                Pesgo1.PeFunction.Force3dxNewColors = true;\par
                Pesgo1.PeFunction.Force3dxVerticeRebuild = true;\par
\par
                Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
                Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYZValues;\par
                Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.Text;\par
                Pesgo1.PeUserInterface.Cursor.HourGlassThreshold = 9999999;\par
\par
            \}\par
            else if (MainWindow.m_nChart == 199)\par
            \{\par
\par
\par
            \}\par
\tab\tab\tab ///end if\par
\par
\tab\tab\tab Pesgo1.PeFunction.Reinitialize();\par
\tab\tab\tab Pesgo1.PeFunction.ReinitializeResetImage();\par
\tab\tab\tab Pesgo1.Invalidate();\par
\tab\tab\}\par
\par
\par
\par
\tab\tab private static void CreateSimpleSGraph(Gigasoft.ProEssentials.Pesgo Pesgo1)\par
\tab\tab\{\par
\tab\tab\tab Int32 s, p;\par
            Random Rand_Num = new Random(unchecked((int)DateTime.Now.Ticks));\par
\par
            // v9 features\par
            Pesgo1.PeUserInterface.Cursor.PromptTracking = true;\par
            Pesgo1.PeUserInterface.Cursor.PromptLocation = CursorPromptLocation.ToolTip;\par
            Pesgo1.PeUserInterface.Cursor.PromptStyle = CursorPromptStyle.XYValues;\par
\par
            // Enable Bar Glass Effect //\par
            Pesgo1.PePlot.Option.BarGlassEffect = true;\par
\par
            // Enable Plotting style gradient and bevel features //\par
            Pesgo1.PePlot.Option.AreaGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
            Pesgo1.PePlot.Option.AreaBevelStyle = BevelStyle.MediumSmooth;\par
            Pesgo1.PePlot.Option.SplineGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
            Pesgo1.PePlot.Option.SplineBevelStyle = SplineBevelStyle.MediumSmooth;\par
\par
            // v7.2 new features //\par
            Pesgo1.PePlot.Option.PointGradientStyle = PlotGradientStyle.VerticalAscentInverse;\par
            Pesgo1.PeColor.PointBorderColor = Color.FromArgb(100, 0, 0, 0);\par
            Pesgo1.PePlot.Option.LineSymbolThickness = 3;\par
            Pesgo1.PePlot.Option.AreaBorder = 1;\par
            Pesgo1.PeUserInterface.Dialog.AllowSvgExport = true;\par
\par
\tab\tab\tab // Prepare images in memory //\par
\tab\tab\tab Pesgo1.PeConfigure.PrepareImages = true;\par
\par
\tab\tab\tab // Pass Data //\par
\tab\tab\tab Pesgo1.PeData.Subsets = 4;\par
\tab\tab\tab Pesgo1.PeData.Points = 120;\par
\par
            for (s = 0; s <= 3; s++)\par
            \{\par
                int nOffset = (int)(Rand_Num.NextDouble() * 250);\par
                for (p = 0; p <= 119; p++)\par
                \{\par
                    Pesgo1.PeData.X[s, p] = (float)((p + 1) * 100.0F);\par
                    Pesgo1.PeData.Y[s, p] = (float)((p + 1) * 1 + (Rand_Num.NextDouble() * 250)) + (float)(Math.Sin(((double)(nOffset + p)) * .03F) * 700.0F) - ((s * 140.0F));\par
                \}\par
            \}\par
\par
\tab\tab\tab // Set DataShadows to show 3D //\par
\tab\tab\tab Pesgo1.PePlot.DataShadows = DataShadows.Shadows;\par
\par
\tab\tab\tab Pesgo1.PeUserInterface.Allow.FocalRect = false;\par
\tab\tab\tab Pesgo1.PePlot.Method = SGraphPlottingMethod.PointsPlusSpline;\par
\tab\tab\tab Pesgo1.PeGrid.LineControl = GridLineControl.Both;\par
            Pesgo1.PeGrid.Style = GridStyle.Dot; \par
\tab\tab\tab Pesgo1.PeUserInterface.Allow.Zooming = AllowZooming.HorzAndVert;\par
\tab\tab\tab Pesgo1.PeUserInterface.Allow.ZoomStyle = ZoomStyle.Ro2Not;\par
\par
            // Enable middle mouse dragging //\par
            Pesgo1.PeUserInterface.Scrollbar.MouseDraggingX = true;\par
            Pesgo1.PeUserInterface.Scrollbar.MouseDraggingY = true;\par
\par
            Pesgo1.PeString.MainTitle = "Test Results";\par
            Pesgo1.PeString.SubTitle = "";\par
            Pesgo1.PeString.YAxisLabel = "Performance";\par
            Pesgo1.PeString.XAxisLabel = "Duration";\par
\par
            // subset labels //\par
            Pesgo1.PeString.SubsetLabels[0] = "Horsepower";\par
            Pesgo1.PeString.SubsetLabels[1] = "Torque";\par
            Pesgo1.PeString.SubsetLabels[2] = "Temperature";\par
            Pesgo1.PeString.SubsetLabels[3] = "Pressure";\par
\par
\tab\tab\tab // subset colors //\par
\tab\tab\tab Pesgo1.PeColor.SubsetColors[0] = Color.FromArgb(128, 198, 0, 0);\par
\tab\tab\tab Pesgo1.PeColor.SubsetColors[1] = Color.FromArgb(128, 0, 198, 198);\par
\tab\tab\tab Pesgo1.PeColor.SubsetColors[2] = Color.FromArgb(128, 198, 198, 0);\par
\tab\tab\tab Pesgo1.PeColor.SubsetColors[3] = Color.FromArgb(128, 0, 198, 0);\par
\par
\tab\tab\tab // subset line types\par
\tab\tab\tab Pesgo1.PeLegend.SubsetLineTypes[0] = LineType.MediumSolid;\par
\tab\tab\tab Pesgo1.PeLegend.SubsetLineTypes[1] = LineType.MediumSolid;\par
\tab\tab\tab Pesgo1.PeLegend.SubsetLineTypes[2] = LineType.MediumSolid;\par
\tab\tab\tab Pesgo1.PeLegend.SubsetLineTypes[3] = LineType.MediumSolid;\par
\par
\tab\tab\tab // subset point types\par
            Pesgo1.PeLegend.SubsetPointTypes[0] = PointType.DotSolid;\par
            Pesgo1.PeLegend.SubsetPointTypes[1] = PointType.UpTriangleSolid;\par
            Pesgo1.PeLegend.SubsetPointTypes[2] = PointType.SquareSolid;\par
            Pesgo1.PeLegend.SubsetPointTypes[3] = PointType.DownTriangleSolid;\par
            Pesgo1.PeLegend.SubsetPointTypes[4] = PointType.DotSolid;\par
            Pesgo1.PeLegend.SubsetPointTypes[5] = PointType.SquareSolid;\par
            Pesgo1.PeLegend.SubsetPointTypes[6] = PointType.DiamondSolid;\par
            Pesgo1.PeLegend.SubsetPointTypes[7] = PointType.UpTriangleSolid;\par
\par
\tab\tab\tab Pesgo1.PeLegend.SimplePoint = true;\par
\tab\tab\tab Pesgo1.PeLegend.SimpleLine = true;\par
\tab\tab\tab Pesgo1.PeLegend.Style = LegendStyle.OneLine;\par
\tab\tab\tab Pesgo1.PeGrid.Option.MultiAxisStyle = MultiAxisStyle.SeparateAxes;\par
\tab\tab\tab\par
\tab\tab\tab Pesgo1.PePlot.Option.GradientBars = 8;\par
\tab\tab\tab Pesgo1.PeConfigure.TextShadows = TextShadows.BoldText;\par
\tab\tab\tab Pesgo1.PeFont.MainTitle.Bold = true;\par
\tab\tab\tab Pesgo1.PeFont.SubTitle.Bold = true;\par
\tab\tab\tab Pesgo1.PeFont.Label.Bold = true;\par
\tab\tab\tab Pesgo1.PePlot.Option.LineShadows = true;\par
\tab\tab\tab Pesgo1.PeFont.FontSize = FontSize.Large;\par
\tab\tab\tab Pesgo1.PeUserInterface.Scrollbar.ScrollingHorzZoom = true;\tab\tab\tab\par
            Pesgo1.PeData.Precision = DataPrecision.OneDecimal; \par
\tab\tab\tab\par
\tab\tab\tab // Various other features //\par
\tab\tab\tab Pesgo1.PeFont.Fixed = true;\par
\tab\tab\tab Pesgo1.PeColor.BitmapGradientMode = true;\par
\tab\tab\tab Pesgo1.PeColor.QuickStyle = QuickStyle.DarkNoBorder;\par
\par
            Pesgo1.PeGrid.Configure.AutoMinMaxPadding = 1;\par
\par
            Pesgo1.PeConfigure.ImageAdjustLeft = 20;\par
            Pesgo1.PeConfigure.ImageAdjustRight = 20;\par
            Pesgo1.PeConfigure.ImageAdjustTop = 10;\par
\par
            // Set various export defaults //\par
            Pesgo1.PeSpecial.DpiX = 600;\par
            Pesgo1.PeSpecial.DpiY = 600;\par
\par
            // Other default export setting //\par
            Pesgo1.PeUserInterface.Dialog.ExportSizeDef = ExportSizeDef.NoSizeOrPixel;\par
            Pesgo1.PeUserInterface.Dialog.ExportTypeDef = ExportTypeDef.Png;\par
            Pesgo1.PeUserInterface.Dialog.ExportDestDef = ExportDestDef.Clipboard;\par
            Pesgo1.PeUserInterface.Dialog.ExportUnitXDef = "1280";\par
            Pesgo1.PeUserInterface.Dialog.ExportUnitYDef = "768";\par
            Pesgo1.PeUserInterface.Dialog.ExportImageDpi = 300;\par
\par
            Pesgo1.PeConfigure.RenderEngine = RenderEngine.Direct2D;\par
            Pesgo1.PeConfigure.AntiAliasGraphics = true;\par
            Pesgo1.PeConfigure.AntiAliasText = true;\par
\par
            // Normally called at end of init, since we expect to add more settings, defer to later \par
            // Pesgo1.PeFunction.ReinitializeResetImage();\par
            // Pesgo1.Invalidate();\par
            // Pesgo1.Refresh();\par
\tab\tab\}\par
\par
\par
\tab\}\par
\par
\par
\par
\par
\}\par
\par
\par
}
 